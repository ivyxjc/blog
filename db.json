{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/grids-responsive-min.css","path":"css/grids-responsive-min.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/pure-min.css","path":"css/pure-min.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/jquery.css","path":"css/jquery.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"83ba696a277e1bd8e3140432ad5a7101a592f90e","modified":1533809411376},{"_id":"themes/maupassant/.git","hash":"5ccf7a85989cb1d0a0f45248db765e1b3604298d","modified":1536516822525},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1536516840311},{"_id":"themes/maupassant/_config.yml","hash":"f1313090965f84db38d86d4fa73775bddf8fb6c7","modified":1541314962864},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1539506986910},{"_id":"themes/maupassant/README.md","hash":"6fe6a7a60257052fd5c0f925241559e30808ab4a","modified":1568643579306},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1539506986944},{"_id":"source/_posts/others-blog.md","hash":"6ee6da63bdd7f46708f06aab2dd812fce18cdd7f","modified":1533809411353},{"_id":"themes/maupassant/languages/en.yml","hash":"518beaa8538a772ca697122264d667059797e458","modified":1539506986914},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1539506986915},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"a1a9888b6cd0fd3dc45ffed3490f4ca8ce1abfd7","modified":1539506986917},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"34dba7ac67aeb316f629ca73e546fa143cc362d5","modified":1539506986918},{"_id":"themes/maupassant/layout/archive.pug","hash":"0d133b77a102bd1ca14b6b0a28a0fa609b50b815","modified":1568643579310},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"b0a0ec63ee0225eaa0996d72164202bc9a28a225","modified":1539506986937},{"_id":"themes/maupassant/layout/base.pug","hash":"7451a590db6943edc099dc0e13b317c38686e8fc","modified":1539506986938},{"_id":"themes/maupassant/layout/index.pug","hash":"d1d56fa62f1293cd0cbefe96dbbde2d35b557a0a","modified":1539506986939},{"_id":"themes/maupassant/layout/page.pug","hash":"a21e638d5459120d88e45e8f18a23dc072d9ca07","modified":1539506986940},{"_id":"themes/maupassant/layout/post.pug","hash":"b112011fbb6a32b33e341be7edf043bc4ad5f97e","modified":1568643579310},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1539506986942},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1539506986943},{"_id":"source/_posts/Linux/2019-06-28-docker-basic.md","hash":"095e99a6127fa034bf61d34183ae44ad8905a124","modified":1568639619407},{"_id":"source/_posts/Linux/2016-10-10-linux-bash.md","hash":"d4e0ce28f3fc802098e975f070985db0f00d31e9","modified":1533809411275},{"_id":"source/_posts/Linux/2018-03-17-centos7-init.md","hash":"1dad8afe854da4b524dbc0136995422d5995d673","modified":1539512009222},{"_id":"source/_posts/about/index.md","hash":"232d327cdb4b82bef940674f1128d93a1ebe05c5","modified":1533809411278},{"_id":"source/_posts/android/2016-11-27-zhihu-android.md","hash":"1ac8ff12eb2ae0bff2017bcec3c45fe368fefbe8","modified":1533809411292},{"_id":"source/_posts/database/2016-11-06-mysql_basic.md","hash":"94ebac9c3d68bb380fc438e1b0c279289153143e","modified":1533809411339},{"_id":"source/_posts/design_pattern/2016-10-24-basic-principle_1.md","hash":"3eb597e3475d1a65e9322ddda085cb1df296434c","modified":1533809411340},{"_id":"source/_posts/design_pattern/2016-10-24-basic-principle_2.md","hash":"20d8c3402bb2ef50579ecafd605f127929d27f52","modified":1533809411341},{"_id":"source/_posts/design_pattern/2016-10-25-factory-pattern.md","hash":"7cf763105a23b76ab1af6a77d80721fa4828d061","modified":1533809411342},{"_id":"source/_posts/design_pattern/2016-10-25-singleton.md","hash":"9e99b3c1d988c8453ae01759b99901b5fe7d36ea","modified":1539503238550},{"_id":"source/_posts/design_pattern/2016-11-17-builder.md","hash":"64d7bde2fc6b2e59300a17708a517c7228df8b43","modified":1533809411343},{"_id":"source/_posts/design_pattern/2016-11-18-observer.md","hash":"87b890556abe0578f6b2a1df01ab2b99b8327fda","modified":1533809411345},{"_id":"source/_posts/design_pattern/2017-01-08-proxy-pattern.md","hash":"3d1cfb9416a63bd5d00229fae249e47024624964","modified":1533809411346},{"_id":"source/_posts/java/2018-03-26-how-to-get-resource.md","hash":"715b6001f37621b3d6effb3c10c1f054b85d3e8f","modified":1539512083970},{"_id":"source/_posts/design_pattern/2016-11-18-callback.md","hash":"17cebe73bcfc85020981db85a08ef08a52fc8ed8","modified":1533809411344},{"_id":"source/_posts/math/2018-12-30-why-planet-orbits-the-sun-in-elipse.md","hash":"6fe64622dcfd9f2310ef95b0f29cf08d81291a03","modified":1547383627682},{"_id":"source/_posts/python/2016-03-06-python3-注意点.md","hash":"b6649149a823031e6e14a2f27ae0ff3e8bfe6ba6","modified":1533809411355},{"_id":"source/_posts/python/2016-10-30-generator.md","hash":"0b9e6d7759b0de34ed56ffece27d92e08472bdc2","modified":1533809411355},{"_id":"source/_posts/效率/2016-04-01-Linux-python-env-tips.md","hash":"6a2c50d97eab13384f987689997474b5cd043d39","modified":1533809411370},{"_id":"source/_posts/效率/2016-06-09-update-python.md","hash":"0394cd90eec0a8c217fc9504ff79d1d18d14dcee","modified":1533809411371},{"_id":"source/_posts/效率/2016-07-03-Reset-PC.md","hash":"0d282e9af28cff4c7b2f1a815293b4f1cf19a708","modified":1533809411372},{"_id":"source/_posts/效率/2016-07-06-proxy.md","hash":"6ab322bea7f03a6645cb76be6877df244f571a6a","modified":1533809411372},{"_id":"source/_posts/效率/2016-10-14-git.md","hash":"3b9b935f0fde2cf2153cafb6be43e3c3619add69","modified":1533809411373},{"_id":"source/_posts/效率/2016-10-29-centos-update-glibc.md","hash":"3bf7c74194c0bdd0a4f6d70edef8e6b7ab3c3328","modified":1533809411374},{"_id":"source/_posts/效率/2017-01-03-vim.md","hash":"2bbbe6e79f909ae05a8709b64fdcfba35dc1e252","modified":1533809411374},{"_id":"source/_posts/效率/2018-05-05-build-Kafka.md","hash":"de6bdc285c52268733a5643f6b4a314ea181d68b","modified":1539512033832},{"_id":"source/_posts/效率/2018-12-08-deploy-to-maven-central.md","hash":"4909bdbf787158751b9c064933bf7a0047dd5481","modified":1544281768561},{"_id":"source/_posts/效率/2019-09-10-remote-ssh.md","hash":"544c4f11d276cdbc03ccfa97f04accc044b336be","modified":1568096835102},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"b8fd8d4b36d3208e17534cf57d29664b76e36575","modified":1568643579307},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"78c9a74bc379feca35342e4753a4cc6330a0fe94","modified":1568643579308},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"ee0af2fe9b0185dee9f0c249737d1b47933adbf0","modified":1539506986921},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"235660024477ba0f68dacbbde12492280f82242a","modified":1568643579309},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1539506986923},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b38b95a331ccfcd89b3a2a6e990ca934e9f62d37","modified":1568643984697},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"ceaa7f42f6183465187f3d89b5f41d744d0f8102","modified":1568643764589},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1539506986925},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1539506986926},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1539506986927},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1539506986928},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"6fb1d8ee09cfc4fd31e8ae53736e4f479d45e31e","modified":1539506986929},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"6576749520bc17bf2cfbaa6aa58365556b5358ed","modified":1539506986930},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1539506986931},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1539506986932},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1539506986933},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6aa743486f282545f553a4fad6aae037afe26108","modified":1539506986934},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1539506986935},{"_id":"themes/maupassant/source/css/default.css","hash":"b41d95120f9e64fd4530ae00ceaef09c7ea20818","modified":1539506986946},{"_id":"themes/maupassant/source/css/donate.css","hash":"ca39d14a598e1de5c51db4170ceb399c6a7131fe","modified":1539506986947},{"_id":"themes/maupassant/source/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1536516840347},{"_id":"themes/maupassant/source/css/grids-responsive-min.css","hash":"f8c15ab45a9827c2baa287049c04f747bd6dbe65","modified":1536516840348},{"_id":"themes/maupassant/source/css/normalize.css","hash":"24759804cb541e96db7b8eafa7e9fd32cbab59da","modified":1536516840351},{"_id":"themes/maupassant/source/css/pure-min.css","hash":"edfa29e92b5d8b5e437bf75a1c6a10f192d707e2","modified":1536516840353},{"_id":"themes/maupassant/source/css/style.css","hash":"2acbbe28739156dec39b719d2e9abeac8890e8b2","modified":1536516840354},{"_id":"themes/maupassant/source/css/jquery.css","hash":"0d142e11e27e9de1a325c32369c42254101ddd34","modified":1536516840349},{"_id":"themes/maupassant/source/css/style.scss","hash":"f8e8e536a44d9ad7da0edd3e4bba5bdde493921b","modified":1568643579311},{"_id":"themes/maupassant/source/donate/index.html","hash":"72e48cbc939df9e4f963ebf570e0181e129a51c5","modified":1568643579312},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1539506986952},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1539506986954},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1539506986956},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1539506986955},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1539506986957},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1539506986958},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1539506986959},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1539506986960},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1539506986961},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1536516840363},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1539506986962},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1536516840364},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1539506986966},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1539506986967},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1536516840367},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1536516840368},{"_id":"source/_posts/algorithm/algorithm/2016-12-6-dynamic-programming.md","hash":"2dc421677575202ce01a19dc4515b0c7342404a7","modified":1533809411283},{"_id":"source/_posts/android/UI相关/2016-09-18-RecyclerView.md","hash":"4caa388eb2d4d449412ebc59a4599b6fa1679d98","modified":1533809411299},{"_id":"source/_posts/android/UI相关/2016-12-7-Pull-Refresh.md","hash":"b3e1622f5045fb8f88b656e8614055cd65aea8e1","modified":1533809411300},{"_id":"source/_posts/android/lifecycle/2016-06-02-lifecycle-basic.md","hash":"bbced8960f7b3402fdab29efbd28dca800b6f75f","modified":1533809411307},{"_id":"source/_posts/android/adb/2016-03-10-adb-console.md","hash":"5ee85bab95624531d309840afe9af93c357a60db","modified":1533809411306},{"_id":"source/_posts/android/四大组件/2016-03-20-broadcast-basic.md","hash":"c74b0cd4265a820b785f95a83cb7b9fce73f2c9e","modified":1533809411309},{"_id":"source/_posts/android/四大组件/2016-05-06-service-basic.md","hash":"eec80d982abde6c74747469cfe16ba384b41aa8b","modified":1533809411312},{"_id":"source/_posts/android/并发编程/2016-04-05-handler-threads.md","hash":"f25ea058a924c256e80929ab7b3e3c911f92e450","modified":1533809411314},{"_id":"source/_posts/android/并发编程/2016-05-15-async.md","hash":"e8193472191ccc6e4fc6efa5b6434bea36a33deb","modified":1533809411314},{"_id":"source/_posts/android/数据持久化/2016-03-25-data-persistence.md","hash":"fc063e15475198cbd688204f3314a6db61230b81","modified":1533809411333},{"_id":"source/_posts/android/数据持久化/2016-03-26-content-provider.md","hash":"60997d3b3075ca0a936ba8cdaba2f00579d85874","modified":1533809411334},{"_id":"source/_posts/android/第三方库/2016-05-13-volley.md","hash":"53e2d3561f5e95d492200ec47f01243467a76b2f","modified":1533809411335},{"_id":"source/_posts/android/第三方库/2016-11-25-retrofit-rxjava.md","hash":"ee47293fa2b8af702ae7b0ba61528432c6eebf50","modified":1533809411336},{"_id":"source/_posts/android/第三方库/2016-11-30-Glide-source_1.md","hash":"51a37b39bbedbcb45c490389075fa7d3e6c38831","modified":1533809411337},{"_id":"source/_posts/android/第三方库/2016-12-5-Glide-source_2.md","hash":"a85b471f23bb8027fedc38ba5bebb11816c15caf","modified":1533809411338},{"_id":"source/_posts/java/concurrency/2016-10-26-collections-thread-safety.md","hash":"0727bff1bd877138afddcee8712e80be55255bbe","modified":1533809411348},{"_id":"source/_posts/java/concurrency/2018-10-09-count++-thread-safe.md","hash":"c82aa1c7dc701d88bb55a69024b8f1e6d4e74348","modified":1539511743329},{"_id":"source/_posts/java/java11/2018-10-04-java11-examples-1.md","hash":"ce38263e90cd922218e0b90a11c0b52b56c5bd41","modified":1539511856127},{"_id":"source/_posts/java/disruptor/2019-06-30-disruptor-introduction.md","hash":"adaa1041632afd102b843bede33f56efe583906b","modified":1563104754849},{"_id":"source/_posts/java/java11/2018-10-04-java11-examples-2.md","hash":"e340798b2f1ca2bb93058fb6666e7f792e478960","modified":1539511869827},{"_id":"source/_posts/javaWeb/spring/2016-12-20-Spring-bean.md","hash":"856688706c40c04367049da9cb99d2dc6cb2261d","modified":1533809411350},{"_id":"source/_posts/javaWeb/spring/2016-12-25-Spring-Intermediate.md","hash":"974f756b57d1f06ac684785ff79bf984bbf9b7cd","modified":1533809411351},{"_id":"source/_posts/javaWeb/spring/2016-12-26-Spring-aop-basic.md","hash":"a29d4a92a1d87c24d5d18a8053de46db460fc80a","modified":1533809411352},{"_id":"source/_posts/javaWeb/spring/2016-12-30-spring-mvc-basic.md","hash":"dbc45392817e0dd319484c49814146c32a86d6ca","modified":1533809411353},{"_id":"source/_posts/javaWeb/spring/2019-01-18-spring-oauth2.md","hash":"c78edb865cdbbf37ad688daf2ed8b5b9ac33e472","modified":1547981525446},{"_id":"source/_posts/python/matplotlib/2016-10-04-matplotlib-basic.md","hash":"3f445078ebb04b63c1ecae3a68d608ca7ae76886","modified":1533809411365},{"_id":"source/_posts/python/numpy/2016-10-04-numpy-basic.md","hash":"4fb132b8623b081d8b993f7cae95cf260154abaf","modified":1533809411366},{"_id":"source/_posts/python/os/2016-03-29-python-os.md","hash":"a09613a00d38a2180018dc7cbdf01a2b37d5ff7a","modified":1533809411367},{"_id":"source/_posts/python/raspberry/2016-10-30-raspberry-basic.md","hash":"22aaa594ce8940b59da507c6224c44a93bf397d6","modified":1533809411369},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1539506986964},{"_id":"source/_posts/algorithm/CodeIntervieBook/LinkedList/2017-03-01-LinkedList-Cycle.md","hash":"4e3274012edf7d6584827379ae90e42d98fd0543","modified":1539512104399},{"_id":"source/_posts/algorithm/CodeIntervieBook/RecursionAndDP/2017-03-01-Fibonacci.md","hash":"e322b67096977dc888e6c72d8aefe0dbc801880b","modified":1538644849975},{"_id":"source/_posts/algorithm/oj/PAT/2016-02-21-1010题-Radix-25分.md","hash":"380686746134a92f79801f21a3a87185f8766e00","modified":1539500108162},{"_id":"source/_posts/android/AndroidSamples/UI/2016-09-24-ActionBar-Basic.md","hash":"af08f55d5ccdec018e9da44b8af9c604184082f0","modified":1533809411294},{"_id":"source/_posts/android/AndroidSamples/UI/2016-09-24-ActionBar-PopupMenu.md","hash":"0be363368c2714bb3ba29b7aa2d3056ee2b4e73c","modified":1533809411295},{"_id":"source/_posts/android/AndroidSamples/UI/2016-10-16-ActionBar-ShareActionProvider.md","hash":"2d09d3181b9e87d20a603761da4167bb9fb88984","modified":1533809411296},{"_id":"source/_posts/android/AndroidSamples/background/2016-11-15-jobscheduler.md","hash":"186da8dc5a771b707079f3740c7e72a54a4eb3f8","modified":1533809411297},{"_id":"source/_posts/android/AndroidSamples/controls/2016-10-18-custom-button.md","hash":"ea28c2aede8ac4d33b766ede5195ab2b5c9a673e","modified":1533809411298},{"_id":"source/_posts/algorithm/oj/LeetCode/2016-04-21-medium-343-122.md","hash":"e6548bb3e343484680ed6b72407b23ab684503f3","modified":1568644232175},{"_id":"source/_posts/algorithm/oj/LeetCode/2016-04-21-medium-SingleNum.md","hash":"f386605bbf179ccffdf9578b79f3ee93dc651612","modified":1539502471310},{"_id":"source/_posts/algorithm/oj/LeetCode/2016-04-26-easy-MaximunDepthofBinary.md","hash":"2903fd5e596db185edad177dbf6793ac432abd00","modified":1539502466079},{"_id":"source/_posts/algorithm/oj/LeetCode/2016-04-26-easy-add-digits.md","hash":"a47e8ddb6c6b97d30d57677d62e05d8b7bcce158","modified":1539502463223},{"_id":"source/_posts/algorithm/oj/LeetCode/2016-04-26-easy-move-zeroes.md","hash":"3cdf2f428d074dbc862b48734abe8232bb405e49","modified":1539502467403},{"_id":"source/_posts/android/UI相关/Bar/2016-11-26-Translucent-Bar.md","hash":"9dc1f7ddaaa6f13e272bfd064d5e82bf3813cbb0","modified":1533809411301},{"_id":"source/_posts/android/UI相关/Fragment/2016-03-09-Fragment-basic.md","hash":"2064d90a006b482e421c48e61ce441b53446e149","modified":1533809411302},{"_id":"source/_posts/android/UI相关/Fragment/2016-03-19-Fragment-message-transportation.md","hash":"1c0995b76c25681caa927268fcb6aee91294a5c2","modified":1533809411303},{"_id":"source/_posts/android/UI相关/布局/2016-02-22-Layout-Gravity和Gravity.md","hash":"35fd142f83c6f64472d792be20dad5b869752a25","modified":1533809411305},{"_id":"source/_posts/android/开发实战/Sunshine开发实战/2016-06-02-data-persistence.md","hash":"5f7bb971b76fe5e3e6894aff584276c1489820f0","modified":1533809411322},{"_id":"source/_posts/android/开发实战/Sunshine开发实战/2016-06-03-android-test.md","hash":"07af1b55291113f3d922a5f71009f039c48bdeac","modified":1533809411323},{"_id":"source/_posts/android/开发实战/Sunshine开发实战/2016-06-03-sunshine-build-custom.md","hash":"498b7a701890316d94fb1f5bdc14b521ff15292c","modified":1533809411323},{"_id":"source/_posts/android/开发实战/个人开发/2016-05-11-android-qa.md","hash":"b29b158410702913ed6d8892db8c17ab54de673a","modified":1533809411325},{"_id":"source/_posts/android/开发实战/个人开发/2016-07-07-calculator.md","hash":"6817dcacca5c04d7648da8a6c4efcf9fa4614c1d","modified":1533809411326},{"_id":"source/_posts/android/控件/AlertDialog/2016-03-25-Alert-Dialog.md","hash":"f6ef749407b183e9db72272c417dc5f8da3a578f","modified":1533809411328},{"_id":"source/_posts/android/控件/Bar/2016-03-09-ProgressBar.md","hash":"c19945d5008d04aec8f88c78394f12c9966c69e8","modified":1533809411329},{"_id":"source/_posts/android/控件/Notification/2016-03-26-Notification-basic.md","hash":"ee64062510aee4fab46459ea61996dcc089f0ec7","modified":1533809411330},{"_id":"source/_posts/android/控件/WebView/2016-03-07-使用WebView显示网页.md","hash":"330db156ce27c105c5834600b1af0af41d07e1d7","modified":1533809411332},{"_id":"source/_posts/python/Spider/douban/2016-10-30-douban-spider.md","hash":"792c33f05554d153602a4bb0f2d86ed11e30c991","modified":1533809411357},{"_id":"source/_posts/python/Spider/基础知识/2016-03-27-python-spider.md","hash":"c2615c093629057d7389f95c4bb4368ddd3e62e5","modified":1533809411359},{"_id":"source/_posts/python/Spider/基础知识/2016-03-27-regex.md","hash":"c5d09488dcfa3119a40fdcb5cfd56f2412cf4ab7","modified":1533809411359},{"_id":"source/_posts/python/Spider/基础知识/2016-03-29-beautiful-soup4-basic.md","hash":"8937d4789372de5460edb5b5745a3e3e0093704a","modified":1533809411360},{"_id":"source/_posts/python/Spider/基础知识/2016-03-31-scrapy.md","hash":"785ad2823089c9d8e24b9d88683c2af740797135","modified":1533809411361},{"_id":"source/_posts/python/Spider/基础知识/2016-10-23-selenium.md","hash":"8f94a5ecee67509ab47427b078676d4b357e2d8c","modified":1533809411362},{"_id":"source/_posts/python/Spider/基础知识/2016-10-29-xml-parse.md","hash":"64e3e82f1b83625e5291730709abe26c077d048b","modified":1533809411363},{"_id":"source/_posts/python/Spider/基础知识/2016-10-30-socket-basic.md","hash":"6cf56eccef45f83182eadf4a4aa89b092ebf903d","modified":1533809411363},{"_id":"source/_posts/algorithm/oj/Codeforces/eduRound/2016-02-18-Codeforces-Edu-Round7总结.md","hash":"d10578cc611be8ba9713f7993c74091187377b25","modified":1533809411285},{"_id":"source/_posts/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-03-14-CriminalIntent-Fragment.md","hash":"bd225e25aee276de7eff1df30709fdb3c6939669","modified":1533809411317},{"_id":"source/_posts/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-03-17-Diaglog.md","hash":"61c4f1f8dfb74106fb2debadef5fc9cd7cb8dc2d","modified":1533809411318},{"_id":"source/_posts/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-06-CriminalIntent-Intent.md","hash":"1ca25e944967c5ee291027d1adbffcdb7c01a3e9","modified":1533809411319},{"_id":"source/_posts/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-06-CriminalIntent-ListFragment.md","hash":"5bb7b390d83b83b96725c1419fb2d5a27894507b","modified":1533809411320},{"_id":"source/_posts/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-08-ViewPager.md","hash":"41ee1c3ed11d59dc03f9c88d7e9fcd20e2c412d6","modified":1533809411320},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1560520646928},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1560520646928},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1560520646927},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1560520645806},{"_id":"themes/next/.gitignore","hash":"8bf1bfc917aa8dd2d886fd36f764447a2b561e1e","modified":1560520646946},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1560520646929},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1560520646949},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1560520646950},{"_id":"themes/next/bower.json","hash":"8076a6e58a99d1188d335a6456a0de0fda163338","modified":1560520646951},{"_id":"themes/next/_config.yml","hash":"336076709f30ea4e18ec72f8711a9d106d91c1cb","modified":1568642289883},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1560520646948},{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1560520646926},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1560520646947},{"_id":"themes/next/package.json","hash":"037ed50fbce1520918bf8c3a1c14b6e07676783e","modified":1560520647091},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1560520646930},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"046262c4b2f54b5ed8ac19b0c99aad04968e01e5","modified":1560520646932},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1560520646932},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"f1631b9bef922e7bc2db1e33badfad70fd88d459","modified":1560520646938},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1560520646952},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1560520646975},{"_id":"themes/next/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1560520646938},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1560520646939},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1560520646940},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1560520646942},{"_id":"themes/next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1560520646943},{"_id":"themes/next/.github/release-drafter.yml","hash":"d01b1e8f462af114e3934fef2ee654634d86b406","modified":1560520646942},{"_id":"themes/next/.github/topissuebot.yml","hash":"5091c3bc6f3df303d16d853ce65a302601c1e875","modified":1560520646945},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1560520646954},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1560520646944},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1560520646955},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1560520646957},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1560520646956},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1560520646958},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1560520646958},{"_id":"themes/next/docs/MATH.md","hash":"7d0330c250082a86897d1c96fbb4ef5df59538af","modified":1560520646960},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1560520646959},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1560520646961},{"_id":"themes/next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1560520646941},{"_id":"themes/next/.github/weekly-digest.yml","hash":"6db3bcad65c3156de298f6a3ffd3ba887af4aa4f","modified":1560520646946},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1560520646977},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1560520646977},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1560520646978},{"_id":"themes/next/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1560520646979},{"_id":"themes/next/languages/fr.yml","hash":"2429c90dad5bb865e3a969be2b373f19b3a77b3b","modified":1560520646981},{"_id":"themes/next/languages/fa.yml","hash":"3227072c7e1bfb16ec0517394b60632f4be921dd","modified":1560520646980},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1560520646982},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1560520646982},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1560520646983},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1560520646984},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1560520646987},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1560520646985},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1560520646986},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1560520646988},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1560520646987},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1560520646990},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1560520646991},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1560520646989},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1560520646993},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1560520646992},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1560520647084},{"_id":"themes/next/layout/_layout.swig","hash":"ba786b1baba49021928e2e508da53f2fd1369b3f","modified":1560520646997},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1560520647088},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1560520647086},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1560520647085},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1560520647096},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1560520647087},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1560520647097},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1560520647281},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1560520647282},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1560520647283},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560520647227},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1560520647089},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1560520647090},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1560520646934},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1560520646935},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1560520646936},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1560520646937},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1560520646962},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1560520646964},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1560520646963},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1560520646964},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1560520646966},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1560520646969},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1560520646967},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"16d98708de86efe40ebcb02c02a01af0f160b80a","modified":1560520646968},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1560520646970},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1560520646970},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"db2797f161e1e7a4987cbfa3d1be682266dfbba6","modified":1560520646972},{"_id":"themes/next/docs/zh-CN/README.md","hash":"4016948fdb971e4f905efb7a5bb3add3dd58e7a8","modified":1560520646973},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1560520646975},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1560520646996},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1560520646996},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1560520647001},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1560520646995},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1560520647003},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1560520647005},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1560520647007},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9a79dde1412b1b1473380e8b6cacfe1930ed321b","modified":1560520647006},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1560520647020},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1560520647019},{"_id":"themes/next/layout/_macro/post.swig","hash":"c77a7928d65bfe0fb712a2931b4cd7045666508c","modified":1560520647002},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1560520647034},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1560520647035},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1560520647037},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1560520647036},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1560520647045},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1560520647061},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"b9b57e1735035319e200c22cf46a38b52b4e0d9c","modified":1560520647046},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1560520647060},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1560520647074},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1560520647062},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1560520647075},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"8b1322a091355853db62a5aafb8886fdbd8ab56a","modified":1560520647078},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1560520647077},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"12bf51c55449d0e838f93a4aae9f6d25c0a27ba2","modified":1560520647070},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1560520647076},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1560520647093},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1560520647096},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1560520647094},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1560520647099},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1560520647102},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1560520647099},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1560520647101},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1560520647103},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1560520647100},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1560520647104},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1560520647105},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1560520647105},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1560520647107},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1560520647106},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1560520647108},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1560520647084},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1560520647079},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1560520647246},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1560520647245},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1560520647248},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1560520647247},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1560520647249},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1560520647250},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1560520647250},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1560520647255},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1560520647254},{"_id":"themes/next/source/js/utils.js","hash":"fed16cd4fa5fac8cb4a63633d1840792a056f2be","modified":1560520647256},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1560520647230},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1560520647231},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1560520647229},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1560520647226},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1560520647079},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1560520647232},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1560520647233},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1560520647234},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1560520647237},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1560520647238},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1560520647239},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560520647239},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1560520647235},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1560520647236},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1560520647234},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560520647241},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1560520647243},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1560520647240},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1560520647242},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1560520647245},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560520647191},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560520647192},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560520647194},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560520647222},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560520647225},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1560520647000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1560520647009},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1560520647001},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1560520647010},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1560520647013},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1560520647013},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1560520647019},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1560520647016},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"39fa6780b9515bc343898ff615c858206728cc3c","modified":1560520647011},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1560520647015},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1560520647018},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1560520647022},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1560520647024},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1560520647027},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1560520647023},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1560520647028},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1560520647025},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1560520647027},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1560520647031},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1560520647033},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1560520647039},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1560520647029},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1560520647041},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1560520647043},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1560520647042},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1560520647044},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1560520647048},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1560520647051},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1560520647049},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1560520647032},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1560520647052},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1560520647050},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"f648e5bf8c5dfc74143233976ed4ff5978deda43","modified":1560520647053},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d68da660cd1cc8fb3ff0a81178decadb620afc11","modified":1560520647054},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1560520647056},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1560520647053},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1560520647059},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1560520647055},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1560520647058},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1560520647060},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1560520647057},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1560520647066},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"280ff4282396beb53fb3913f58c6b5890bd1c9ef","modified":1560520647065},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1560520647068},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3da014b25f9ac804eda1614591706e3733c0d2c5","modified":1560520647064},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1560520647067},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1560520647068},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1560520647069},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1560520647073},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1560520647071},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1560520647063},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1560520647082},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1560520647081},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1560520647190},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1560520647189},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1560520647193},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1560520647073},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"21a14a19149f1cb8e011c477f29dd1352675605b","modified":1560520647193},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1560520647220},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1560520647220},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1560520647253},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1560520647252},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1560520647259},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1560520647258},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1560520647083},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1560520647261},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1560520647223},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1560520647262},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1560520647279},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1560520647278},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1560520647280},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1560520647260},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ebc95eeb8966d17cdc7dd0de009deaef1fe65064","modified":1560520647224},{"_id":"themes/next/source/lib/jquery/index.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1560520647274},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"5c0ca7f801859cff254d2f5b7d1a70d66ff61a8d","modified":1560520647112},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"463817cbbd804ce134cb3e7e721431cb0e1616f2","modified":1560520647113},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1560520647114},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1560520647182},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1560520647115},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1560520647135},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1560520647114},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1560520647151},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1560520647152},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1560520647184},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9c6194177533619a6f6685dc7e890dcbec456241","modified":1560520647185},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1560520647183},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"107f42aa590ec4ba0765a0bc5d735f0f09edc0ff","modified":1560520647187},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1560520647186},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1560520647187},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1560520647198},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1560520647199},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1560520647199},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1560520647200},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1560520647201},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1560520647202},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1560520647207},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1560520647203},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1560520647210},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1560520647208},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1560520647214},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1560520647209},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1560520647211},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1560520647215},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1560520647217},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1560520647216},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1560520647218},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1560520647217},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1560520647263},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1560520647196},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1560520647264},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1560520647265},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1560520647270},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1560520647271},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1560520647125},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1560520647117},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1560520647126},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1560520647127},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1560520647119},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1560520647122},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1560520647120},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1560520647118},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1560520647123},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1560520647121},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1560520647130},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1560520647129},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1560520647132},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1560520647131},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1560520647133},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1560520647132},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1560520647134},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1560520647137},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1560520647139},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1560520647138},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1560520647142},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1560520647140},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1560520647141},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1560520647143},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1560520647144},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1560520647146},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1560520647145},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1560520647146},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1560520647147},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1560520647148},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1560520647149},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1560520647151},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1560520647154},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1560520647155},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1560520647150},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1560520647158},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1560520647157},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1560520647159},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1560520647156},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"0eadef0381f696de7f88d7dc5f0ddc3cd5d309b3","modified":1560520647162},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1560520647160},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1560520647162},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1560520647163},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1560520647168},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1560520647167},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1560520647165},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1560520647166},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1560520647169},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1560520647168},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1560520647171},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"1df9d36e2b0e9c94e0a959acc136026405ae0d73","modified":1560520647170},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1560520647175},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1560520647174},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1560520647173},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1560520647174},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1560520647176},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1560520647178},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1560520647177},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1560520647180},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1560520647180},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1560520647179},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1560520647268},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1560520647204},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1560520647206},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1560520647212},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1560520647277},{"_id":"public/calendar.json","hash":"490e439206ba52efdb539a1a97e9c49d4e4cd39b","modified":1568642634982},{"_id":"public/atom.xml","hash":"579470d90e4b14576149015aacf18bda921372db","modified":1568642634983},{"_id":"public/search.xml","hash":"a1edb560fe2ff16f936b03ab0d15545cf24c1269","modified":1568644259033},{"_id":"public/2019/01/18/javaWeb/spring/2019-01-18-spring-oauth2/index.html","hash":"69dce2f1a1bd9c3802cffb3d7ad67b2716b2ce4a","modified":1568644282224},{"_id":"public/2017/01/03/效率/2017-01-03-vim/index.html","hash":"f65c3da7566d9f59f662baf9a78b0547057107ae","modified":1568644282224},{"_id":"public/2016/12/30/javaWeb/spring/2016-12-30-spring-mvc-basic/index.html","hash":"943ac88c7b286c4cb8f58f8e029751aca2e0ef14","modified":1568644282225},{"_id":"public/2016/12/26/javaWeb/spring/2016-12-26-Spring-aop-basic/index.html","hash":"4ee77b4ed3548855f9ff718549f17b752c4f1ca4","modified":1568644282225},{"_id":"public/2016/12/06/algorithm/algorithm/2016-12-6-dynamic-programming/index.html","hash":"f11c523f86889b10200bc5d048efda996587e8a5","modified":1568644282225},{"_id":"public/2016/11/30/android/第三方库/2016-12-5-Glide-source_2/index.html","hash":"1903f0538cccc995ef22c9b8e3b7667655cadd72","modified":1568644282225},{"_id":"public/2016/11/21/android/UI相关/Bar/2016-11-26-Translucent-Bar/index.html","hash":"f6e6e5c9010de42b6c5cda38a75bac6398730782","modified":1568644282225},{"_id":"public/2016/10/30/python/raspberry/2016-10-30-raspberry-basic/index.html","hash":"a2674171d320cee888df91cf015e0e9c0f9b90fb","modified":1568644282238},{"_id":"public/2016/10/24/database/2016-11-06-mysql_basic/index.html","hash":"050a041919a5eac6a67317155ea4867bdd6bd828","modified":1568644282225},{"_id":"public/2016/07/06/效率/2016-07-06-proxy/index.html","hash":"18d1343bc6850d3f93e490949b9c5f8ba66bdf31","modified":1568644282225},{"_id":"public/2016/06/03/android/开发实战/Sunshine开发实战/2016-06-03-sunshine-build-custom/index.html","hash":"4cec347040ca3858cd1826d4dd85c6771236e8b4","modified":1568644282225},{"_id":"public/2016/06/02/android/开发实战/Sunshine开发实战/2016-06-02-data-persistence/index.html","hash":"5048f7a75f62f2f11909597d14ecb858426f0e02","modified":1568644282225},{"_id":"public/2016/05/15/android/并发编程/2016-05-15-async/index.html","hash":"d54ffe65eac9a2e553a38d0d30eb1eee6f24b479","modified":1568644282225},{"_id":"public/2016/05/11/android/开发实战/个人开发/2016-05-11-android-qa/index.html","hash":"49b38688f1d00cf9f50970fda3342b8d97179867","modified":1568644282225},{"_id":"public/2016/03/29/python/os/2016-03-29-python-os/index.html","hash":"96734e10028abc829f6ba6beeada2ad8461e40c4","modified":1568644282225},{"_id":"public/2016/01/01/about/index/index.html","hash":"122735462af25f0ffb56ecc9c0e2d21884fee027","modified":1568644282225},{"_id":"public/archives/index.html","hash":"3b638680d81f5d6a1cd14c9e164f2ce17aab9942","modified":1568644282225},{"_id":"public/archives/page/2/index.html","hash":"f19e4cf8e896bdffb9714f74e47dcb6a15b83e4e","modified":1568644282226},{"_id":"public/archives/page/3/index.html","hash":"76ee0964a398c85cfe190c8dd7a09a5f4b13a758","modified":1568644282226},{"_id":"public/archives/page/4/index.html","hash":"525a50626b3be55e74b708061f80360f04dfc585","modified":1568644282226},{"_id":"public/archives/page/5/index.html","hash":"d3c04d3bde1f0bec187f1e321843a4d8ed8724c8","modified":1568644282226},{"_id":"public/archives/page/6/index.html","hash":"5d3c3a4158ef8780724bbfb144e54ee6f5db0a5f","modified":1568644282226},{"_id":"public/archives/page/7/index.html","hash":"a8d5e550d8ad307669be667bfa94de7062d5fbbd","modified":1568644282226},{"_id":"public/archives/page/8/index.html","hash":"865e78cbde1a0a55a3e67041db246870601df11c","modified":1568644282226},{"_id":"public/archives/page/9/index.html","hash":"50453827f128225dba2ac33f494cf10311f837b3","modified":1568644282226},{"_id":"public/archives/page/10/index.html","hash":"e577c14baed6df07cdd6facae132d087bab5fae8","modified":1568644282226},{"_id":"public/archives/2016/index.html","hash":"ec5872991c3eee5ed1973f0657c6ea403e0db1af","modified":1568644282226},{"_id":"public/archives/2016/page/2/index.html","hash":"cdca6d2e417b4a22f2543dcc8885910025e74c64","modified":1568644282226},{"_id":"public/archives/2016/page/3/index.html","hash":"a015d5feedfd1d740df4fb992bae3430027a859c","modified":1568644282226},{"_id":"public/archives/2016/page/4/index.html","hash":"c5343c821795b111d9a578dba612ed4c888daf6a","modified":1568644282226},{"_id":"public/archives/2016/page/5/index.html","hash":"48b004fb43c8de6cfeab1ed4aa1eee15c4466908","modified":1568644282226},{"_id":"public/archives/2016/page/6/index.html","hash":"e0f5576ff39f94accd421ab3c53073a2a404f85f","modified":1568644282226},{"_id":"public/archives/2016/page/7/index.html","hash":"31cc89ab2d282c67cfe201060c1d11a17a9ed21d","modified":1568644282227},{"_id":"public/archives/2016/page/8/index.html","hash":"b1a7d8504e6e67c4aa088183f564781542a34445","modified":1568644282227},{"_id":"public/archives/2016/page/9/index.html","hash":"0add35657c15b1316b59ec6678e888ad1aa0b287","modified":1568644282227},{"_id":"public/archives/2016/01/index.html","hash":"82a6c060c55ffae3b5e07ce2bab41a0eed737765","modified":1568644282227},{"_id":"public/archives/2016/02/index.html","hash":"659cb651d63a086a4ab4e370e77bdb3ec1b2d560","modified":1568644282227},{"_id":"public/archives/2016/03/index.html","hash":"a6f323244babdc5e91e771adff9d30fc022a9cb5","modified":1568644282227},{"_id":"public/archives/2016/03/page/2/index.html","hash":"036583e39af74d9dfab1c32864d3420d4fc6cf87","modified":1568644282227},{"_id":"public/archives/2016/04/index.html","hash":"c4a64e9e209031d4c406aa16bc2853b6c04398cb","modified":1568644282227},{"_id":"public/archives/2016/05/index.html","hash":"480e4c7b3099b5c7e57dbaccdfbc476949d630e0","modified":1568644282227},{"_id":"public/archives/2016/06/index.html","hash":"d48f947d7eac441ef1b521b5221ac64b6500243d","modified":1568644282227},{"_id":"public/archives/2016/07/index.html","hash":"c8d2a19966d8b20c2c0aa74feaad40c22d474378","modified":1568644282227},{"_id":"public/archives/2016/09/index.html","hash":"27a5b8010b7eee8bce8d9c384af5f74531b1d181","modified":1568644282227},{"_id":"public/archives/2016/10/index.html","hash":"fce653e9d647c7edecc7d575d386672c020e6ce9","modified":1568644282227},{"_id":"public/archives/2016/10/page/2/index.html","hash":"fa147a289138ff48b86f3fdc801ef77996c8d5d5","modified":1568644282227},{"_id":"public/archives/2016/11/index.html","hash":"1abc25677e38c01e0a3e846c62647eaaf09b5c2e","modified":1568644282227},{"_id":"public/archives/2016/12/index.html","hash":"7d240ef000d765c6d736bd73114fc3f9af731b2b","modified":1568644282227},{"_id":"public/archives/2017/index.html","hash":"add0a87cf632bb0d0584c708436f18cf4897a03c","modified":1568644282228},{"_id":"public/archives/2017/01/index.html","hash":"8d9aad3b71c0b50a21e89fd00b21d573dd815da9","modified":1568644282228},{"_id":"public/archives/2017/03/index.html","hash":"399aa08d1c97dccbaa7ae38baaf6913b2df425d5","modified":1568644282228},{"_id":"public/archives/2018/index.html","hash":"8b5fc8cf76927e1a2a33208daa0e8a4e952c6c19","modified":1568644282228},{"_id":"public/archives/2018/03/index.html","hash":"55011b25061fe38d6493b568992ad544932aa481","modified":1568644282228},{"_id":"public/archives/2018/05/index.html","hash":"79fa48639f5ad9d811679073465d62b03b5840a4","modified":1568644282228},{"_id":"public/archives/2018/10/index.html","hash":"97ca6a38f7d59bf94684ac9512ae5345e7c3ea11","modified":1568644282228},{"_id":"public/archives/2018/12/index.html","hash":"514f71aec967f079959525fd70cf3316d0f20585","modified":1568644282228},{"_id":"public/archives/2019/index.html","hash":"9a39cb9bfc0d3bdfa5a2fe325cc195c54a7a95ab","modified":1568644282228},{"_id":"public/archives/2019/01/index.html","hash":"3099703acbcb8f1832dce5a16ed969430365d3e6","modified":1568644282228},{"_id":"public/archives/2019/08/index.html","hash":"9813f3a99b0bef08f1da1cbfad4adde835eb7d1b","modified":1568644282228},{"_id":"public/archives/2019/09/index.html","hash":"1cb0ae559509c03d425b7d4a880355d07f1b8507","modified":1568644282228},{"_id":"public/archives/2100/index.html","hash":"a332f5222f754e7907bbdc64a86d10eeaae1cddb","modified":1568644282228},{"_id":"public/archives/2100/01/index.html","hash":"a332f5222f754e7907bbdc64a86d10eeaae1cddb","modified":1568644282228},{"_id":"public/categories/Linux/index.html","hash":"642932fd6cceab90ccd3be81a311ea9475740671","modified":1568644282235},{"_id":"public/categories/Android/index.html","hash":"8ce41b03c5759cf87b47201d6eab0bb07b6a0b3d","modified":1568644282235},{"_id":"public/categories/Android/page/2/index.html","hash":"e72356c694178966a0b9b60fec7e2a83a4f1149d","modified":1568644282235},{"_id":"public/categories/Android/page/3/index.html","hash":"18ce16920dfd782293030516adcca5e844a6c11d","modified":1568644282236},{"_id":"public/categories/Android/page/4/index.html","hash":"613afa2eab71a9278502b87d6be74da9c49acc82","modified":1568644282236},{"_id":"public/categories/database/index.html","hash":"a699e534544b0e0ccfa12236bef7ed8ae534dcc5","modified":1568644282236},{"_id":"public/categories/OO/index.html","hash":"b3fb1b9bd95ceab88874178f270cd3ea1ea049bc","modified":1568644282236},{"_id":"public/categories/Java/index.html","hash":"9f76118d8cd359bdcea1b6ca7a03fa311a1ed1ff","modified":1568644282236},{"_id":"public/categories/Python/index.html","hash":"d8ba612b017d137938dfbfb879df735c14fb4e0d","modified":1568644282236},{"_id":"public/categories/Python/page/2/index.html","hash":"162d3a9b39ec97bed70caa607faffa36d13392c8","modified":1568644282236},{"_id":"public/categories/Math/index.html","hash":"ce9fefefdb76659eeb8ae2688e7b496ee5960172","modified":1568644282236},{"_id":"public/categories/效率/index.html","hash":"76b7a50a4a018d0ab2313a45b19b157a04858ef7","modified":1568644282236},{"_id":"public/categories/Algorithm/index.html","hash":"4c231df80ad7bd687d7aebc479d7339ef365b002","modified":1568644282236},{"_id":"public/categories/JavaWeb/index.html","hash":"e4fa1774838ae9e93a8bd74d7c000a943ce2aa81","modified":1568644282236},{"_id":"public/tags/backup/index.html","hash":"a1c21b3bcf4c74547281ba4a44a8df715119fdb4","modified":1568644282228},{"_id":"public/tags/blog/index.html","hash":"84327f6b930ddb301aac3789c648056b8837edce","modified":1568644282229},{"_id":"public/tags/linux/index.html","hash":"aa6bfa3a6faefaf053b694c243517a35ff43a16d","modified":1568644282229},{"_id":"public/tags/docker/index.html","hash":"364862d8e01d302f8e3c7b61b6b38b967c18459c","modified":1568644282229},{"_id":"public/tags/android/index.html","hash":"af3205db17541b1b18de513c5a0b983cd47eebaf","modified":1568644282229},{"_id":"public/tags/android/page/2/index.html","hash":"23d1be9c67fe475590449c992c629fb9f0e444bc","modified":1568644282229},{"_id":"public/tags/android/page/3/index.html","hash":"ce16163dd6eea551b33eab1c915ae8f06f1ad198","modified":1568644282229},{"_id":"public/tags/android/page/4/index.html","hash":"145d0a72a0083df3daef23e37d2ac55fadfde3c8","modified":1568644282229},{"_id":"public/tags/project/index.html","hash":"787efd262163e715f33e1e0700bda7519783d790","modified":1568644282229},{"_id":"public/tags/database/index.html","hash":"a699e534544b0e0ccfa12236bef7ed8ae534dcc5","modified":1568644282229},{"_id":"public/tags/设计模式/index.html","hash":"af0cb8580edeb5d40ff5363f91b497fd56e71780","modified":1568644282229},{"_id":"public/tags/Java/index.html","hash":"281f90ed8137108af9493fe0fe6d65df417cc554","modified":1568644282229},{"_id":"public/tags/callback/index.html","hash":"f45cfecc6d38fea9cef7604d0cb0540fd112f270","modified":1568644282229},{"_id":"public/tags/python3/index.html","hash":"43ffe1f741f26ede7fd60faa9f45e0ef1ed1d299","modified":1568644282231},{"_id":"public/tags/python/index.html","hash":"289cf021a185251218a008edf71b8a3ca6ca3fde","modified":1568644282231},{"_id":"public/tags/python/page/2/index.html","hash":"6a7aee44ec3958a42e693cf58e382662418bf146","modified":1568644282231},{"_id":"public/tags/math/index.html","hash":"683d2d6777012dafef29125c38fb5377b3215cc6","modified":1568644282231},{"_id":"public/tags/elipse/index.html","hash":"c6bd66d1e672840e0a55c1d1c802d69652ab793c","modified":1568644282231},{"_id":"public/tags/faq/index.html","hash":"734424f2d8167733ebfcd7a95b9285eb3fd20248","modified":1568644282231},{"_id":"public/tags/spider/index.html","hash":"84fa06c929713af79f4cf3a50c2f42b633e0ff15","modified":1568644282231},{"_id":"public/tags/bs4/index.html","hash":"23d53c50ea20ab132c1addc1432459f097c65b26","modified":1568644282231},{"_id":"public/tags/generators/index.html","hash":"49f56f0289d590a31da408c0d4354496e50dc979","modified":1568644282231},{"_id":"public/tags/git/index.html","hash":"c80f00b00f294376055fc58b833142668daec8d1","modified":1568644282231},{"_id":"public/tags/vim/index.html","hash":"ee417c187b5253a18ed227c6e4fa27414713e227","modified":1568644282231},{"_id":"public/tags/kafka/index.html","hash":"03e95e625e61c160b02ff8349f7d1ea85b78c179","modified":1568644282231},{"_id":"public/tags/vs-code/index.html","hash":"7bb8fcd1584ba6ff446f9b7e1eea9cf715c14f66","modified":1568644282231},{"_id":"public/tags/remote-ssh/index.html","hash":"b9545d859410b0da645ba7adec14e1b1e521f33c","modified":1568644282231},{"_id":"public/tags/maven/index.html","hash":"eb57823240143edb20874beb9152bf93073af96b","modified":1568644282231},{"_id":"public/tags/android-UI/index.html","hash":"42299624d84e947b9a83fdf0d337678529992a51","modified":1568644282232},{"_id":"public/tags/android-refresh/index.html","hash":"275381c855e9bc5ea97269faed5884cda6cd1b4a","modified":1568644282232},{"_id":"public/tags/algorithm/index.html","hash":"32c9ea2616eb08f1ae64a213c87e4578f3cf03fe","modified":1568644282232},{"_id":"public/tags/dynamic-programming/index.html","hash":"60a67aa29ed751008ae1590fd96b2daad4067400","modified":1568644282232},{"_id":"public/tags/android-lifecycle/index.html","hash":"509d9025c6ac5ade1405fa27e51acad6099ed330","modified":1568644282232},{"_id":"public/tags/android-RecyclerView/index.html","hash":"e031b2fa94dc66c7e2211caf4c976b1c143d5c82","modified":1568644282232},{"_id":"public/tags/android-adb/index.html","hash":"17f9a4a2e6e9d5ffa072c98ade1101325d064c27","modified":1568644282232},{"_id":"public/tags/android-broadcast/index.html","hash":"d31f7511ba1b4266ddd1dcc947b42c31c786180d","modified":1568644282232},{"_id":"public/tags/concurrency/index.html","hash":"baa8ae2aa6f940ef5ad8aeccd9289420b04c2316","modified":1568644282232},{"_id":"public/tags/android-service/index.html","hash":"e15219d9795da4810659e40fff39723affd1809b","modified":1568644282232},{"_id":"public/tags/android-lib/index.html","hash":"00f26ce0f4b2501539faaeaca98d63a644191ed5","modified":1568644282232},{"_id":"public/tags/android-data/index.html","hash":"db8095bc20ef4718e94c8789c63da34486ff193f","modified":1568644282232},{"_id":"public/tags/javaweb/index.html","hash":"8be168bed3654bcff46a6d4fd2831fc2d83a2c4a","modified":1568644282232},{"_id":"public/tags/spring/index.html","hash":"54585b4a8caf4143e9eeb64c387c342be52358c3","modified":1568644282232},{"_id":"public/tags/matplotlib/index.html","hash":"64a741cb5f062a9213008d70ffd21760d92467ac","modified":1568644282232},{"_id":"public/tags/numpy/index.html","hash":"9c1be4eab616c04e177a63c88946efccfd27239b","modified":1568644282233},{"_id":"public/tags/regex/index.html","hash":"88401640a9752025a059c5ed87464d92f63063e8","modified":1568644282233},{"_id":"public/tags/oauth2/index.html","hash":"f798acfd7771f06d124ade6480c844ec73b43f15","modified":1568644282233},{"_id":"public/tags/Fibonacci/index.html","hash":"c9c93ce7c45432c159f22e35e798a4a8b99036ef","modified":1568644282233},{"_id":"public/tags/todo/index.html","hash":"3df972042b42a0de19200dd154502de59b140248","modified":1568644282233},{"_id":"public/tags/onlinejudge/index.html","hash":"5bb030b1433719998e2b1d0525a17b1f77132a69","modified":1568644282233},{"_id":"public/tags/android-fragment/index.html","hash":"e9ff296609abb4fdd5dd222034a9d82d17650df4","modified":1568644282234},{"_id":"public/tags/binarysearch/index.html","hash":"65e30921b36291356dc7a097b4ae5b4ce38bb56b","modified":1568644282234},{"_id":"public/tags/linkedlist/index.html","hash":"2ed2c32bebe24c167f121da5bac0fe50cf6733c2","modified":1568644282234},{"_id":"public/tags/android-control/index.html","hash":"580d39667c90e4d03ade0b2e06bcc79c1930514f","modified":1568644282234},{"_id":"public/tags/algorithm-quicksort/index.html","hash":"045c0c62f4d987bbcf48c029fb4d0ce32cf932a7","modified":1568644282234},{"_id":"public/tags/algorithm-bit-manipulation/index.html","hash":"85990733a666670c6292c32071c52a39593586aa","modified":1568644282234},{"_id":"public/tags/algorithm-recursion/index.html","hash":"7a0f37e6e834b806c0cbce67e426ad2a2793d76d","modified":1568644282234},{"_id":"public/tags/algorithm-math/index.html","hash":"b3635473fb40bcf7ec0ecb7923fa23f39c1713a2","modified":1568644282234},{"_id":"public/tags/algorithm-array/index.html","hash":"b9dc41295adfd4f96670d52eca6e1009b1a2f8d8","modified":1568644282234},{"_id":"public/tags/algorithm-two-pointer/index.html","hash":"b55173b2416434237809d8e5bf5f89c37c7d8fa2","modified":1568644282234},{"_id":"public/tags/android-test/index.html","hash":"1486a2012a87bb972c7954c4485fd6f775c75731","modified":1568644282234},{"_id":"public/tags/java/index.html","hash":"1a4e0d30586bd1cdb06c5b666fbc8ea229452876","modified":1568644282234},{"_id":"public/tags/android-project/index.html","hash":"7e0b0bcb5407eb765c858b162aa159679f4cd245","modified":1568644282235},{"_id":"public/tags/android-bar/index.html","hash":"4f4f1df634b14f6ac31e60a48e005fc054235d31","modified":1568644282235},{"_id":"public/tags/xml/index.html","hash":"f9c97c2cc74f32989ddf85b50fe6fa52443ce886","modified":1568644282235},{"_id":"public/tags/pythonspider/index.html","hash":"2794d16917e8a8da18d2300fab9c2a74980c03c9","modified":1568644282235},{"_id":"public/tags/selenium/index.html","hash":"2e1f22679e38aa5e7a64426f5f8699c5cbaaf9fc","modified":1568644282235},{"_id":"public/tags/PhantomJS/index.html","hash":"1ebef38c89dde053641865fbbcf1e68af3eebb19","modified":1568644282235},{"_id":"public/tags/socket/index.html","hash":"6ce0c92ca5bd4d7d9f1de571e076bd7cb04abece","modified":1568644282235},{"_id":"public/tags/android-adapter/index.html","hash":"631edae412ea6fa4b8a2015f5a4a1e1b68dbdca6","modified":1568644282235},{"_id":"public/tags/android-activity/index.html","hash":"8f98eedb88b11f8fa161ce1f3bc1a3d8147a3343","modified":1568644282235},{"_id":"public/tags/android-view-pager/index.html","hash":"b6b46f013c91a44d1a16b898e214601f23c85965","modified":1568644282235},{"_id":"public/tags/格式化输出/index.html","hash":"76daf56f6882c5d45b06b519336403da0d2993bb","modified":1568644282235},{"_id":"public/tags/io/index.html","hash":"1cc3f535decd36d405221a16cec4dcc916e81871","modified":1568644282235},{"_id":"public/tags/线段树/index.html","hash":"3c855a4ee5cdee2fb0329726c674592b8dd88240","modified":1568644282235},{"_id":"public/tags/区间查询/index.html","hash":"d2e0452046e94d9a710210392479b1bec66c9dba","modified":1568644282235},{"_id":"public/2100/01/01/others-blog/index.html","hash":"0e43b037c8f7ff10c683a8fd181e78c414498d4b","modified":1568644282236},{"_id":"public/2019/09/10/效率/2019-09-10-remote-ssh/index.html","hash":"ae4ce7c266a62e9701e565eaa4991ea50aa8885b","modified":1568644282236},{"_id":"public/2019/08/09/Linux/2019-06-28-docker-basic/index.html","hash":"36aefdd76f68ba001c03c1c402c7e664f0baf065","modified":1568644282237},{"_id":"public/2019/08/09/Linux/2018-03-17-centos7-init/index.html","hash":"2cf54f73a6bd259e93719f5e5024e74f0578b5b6","modified":1568644282237},{"_id":"public/2019/08/09/java/disruptor/2019-06-30-disruptor-introduction/index.html","hash":"8960ba2aa83ef578eeffb48eedcff19371b689a9","modified":1568644282237},{"_id":"public/2018/12/30/math/2018-12-30-why-planet-orbits-the-sun-in-elipse/index.html","hash":"9ee7cd9f20e37fd208c40ade862d4e7a741de75c","modified":1568644282237},{"_id":"public/2018/12/08/效率/2018-12-08-deploy-to-maven-central/index.html","hash":"ea291336a5bd3f0e44ccb60665889f3e71724898","modified":1568644282237},{"_id":"public/2018/10/09/java/concurrency/2018-10-09-count++-thread-safe/index.html","hash":"2ffddfb4abb411b9749546bb14803499af6baacc","modified":1568644282237},{"_id":"public/2018/10/04/java/java11/2018-10-04-java11-examples-2/index.html","hash":"f56cd7feead6406790ad97a8bf6f02fdfeb89ccc","modified":1568644282237},{"_id":"public/2018/10/04/java/java11/2018-10-04-java11-examples-1/index.html","hash":"e93544b725c7f2c0120caa6d91af580b306afa61","modified":1568644282237},{"_id":"public/2018/05/05/效率/2018-05-05-build-Kafka/index.html","hash":"6824c8d54987e5d0e7a76f4171de47c792ccdec8","modified":1568644282237},{"_id":"public/2018/03/26/java/2018-03-26-how-to-get-resource/index.html","hash":"55bc789d00ce9139b84b7214c28ae4d5b0d16547","modified":1568644282237},{"_id":"public/2017/03/04/algorithm/CodeIntervieBook/LinkedList/2017-03-01-LinkedList-Cycle/index.html","hash":"e0cf6a75d15430bd01b51712904fc6e784ef7980","modified":1568644282237},{"_id":"public/2017/03/01/algorithm/CodeIntervieBook/RecursionAndDP/2017-03-01-Fibonacci/index.html","hash":"aa3997394ebc20db2dc119aba492b8cd02510287","modified":1568644282237},{"_id":"public/2017/01/08/design_pattern/2017-01-08-proxy-pattern/index.html","hash":"5cd9ba078b37922cdf82a269b1f1cbe89e3d1a00","modified":1568644282237},{"_id":"public/2016/12/25/javaWeb/spring/2016-12-25-Spring-Intermediate/index.html","hash":"b79e139ec06e255e67122a17f1c4a58e08434cef","modified":1568644282237},{"_id":"public/2016/12/20/javaWeb/spring/2016-12-20-Spring-bean/index.html","hash":"1a28b158677986b59e085da99e36944414ef9ca6","modified":1568644282237},{"_id":"public/2016/12/07/android/UI相关/2016-12-7-Pull-Refresh/index.html","hash":"119fc775775401f6f8f6e350319317bc29f7ac9f","modified":1568644282238},{"_id":"public/2016/11/30/android/第三方库/2016-11-30-Glide-source_1/index.html","hash":"899b8754b8e6e9580a252ecd49dd43cc722916eb","modified":1568644282238},{"_id":"public/2016/11/27/android/2016-11-27-zhihu-android/index.html","hash":"f666e1e43f0c5b1e4362dd4aafb97656b589baaa","modified":1568644282238},{"_id":"public/2016/11/25/android/第三方库/2016-11-25-retrofit-rxjava/index.html","hash":"5e85f838a203085a808c5f6c6258242bd2e82bc9","modified":1568644282238},{"_id":"public/2016/11/18/design_pattern/2016-11-18-observer/index.html","hash":"9ee68c48326f14eea52583850222c84584967fbc","modified":1568644282238},{"_id":"public/2016/11/18/design_pattern/2016-11-18-callback/index.html","hash":"1097b94f1dcf191d686bf6f28105adbc1e6f1b38","modified":1568644282238},{"_id":"public/2016/11/17/design_pattern/2016-11-17-builder/index.html","hash":"bb350067122ab551d5e1a1c178f1259718f7c61a","modified":1568644282238},{"_id":"public/2016/11/15/android/AndroidSamples/background/2016-11-15-jobscheduler/index.html","hash":"721da5273b3ae19cb93586612f873e200b80b431","modified":1568644282238},{"_id":"public/2016/10/30/python/Spider/基础知识/2016-10-30-socket-basic/index.html","hash":"e60f43b2b97ae6559dd18fe608837bb48296febb","modified":1568644282238},{"_id":"public/2016/10/30/python/Spider/douban/2016-10-30-douban-spider/index.html","hash":"2c82748ba2f332cfaa74659c8e1275ad072b4572","modified":1568644282238},{"_id":"public/2016/10/30/python/2016-10-30-generator/index.html","hash":"7645b3536ed7f7c3cf4b6d5acefa826607e61290","modified":1568644282238},{"_id":"public/2016/10/26/java/concurrency/2016-10-26-collections-thread-safety/index.html","hash":"b2c19714a41860aa794ba3d0c8ed98b30dced6e7","modified":1568644282238},{"_id":"public/2016/10/25/design_pattern/2016-10-25-factory-pattern/index.html","hash":"3315d1e65b6a4bdaf8423f9ec0231a020dc7c0ea","modified":1568644282238},{"_id":"public/2016/10/25/design_pattern/2016-10-25-singleton/index.html","hash":"39450d1be307f2d04f6a7934ded2c9a5d6242730","modified":1568644282238},{"_id":"public/2016/10/24/design_pattern/2016-10-24-basic-principle_1/index.html","hash":"c28fd1d1cf8277372548b867b416ee24d3c5fd96","modified":1568644282238},{"_id":"public/2016/10/24/design_pattern/2016-10-24-basic-principle_2/index.html","hash":"1db9d97f1d767c4ec8ac95f2fd666ae2c92a7926","modified":1568644282239},{"_id":"public/2016/10/23/python/Spider/基础知识/2016-10-23-selenium/index.html","hash":"07626c40a06944bbf0ba1bb4da48cb8f79c34b3b","modified":1568644282239},{"_id":"public/2016/10/23/python/Spider/基础知识/2016-10-29-xml-parse/index.html","hash":"b2940e442f69bf96da11da44d03a63c4045f24db","modified":1568644282239},{"_id":"public/2016/10/19/效率/2016-10-29-centos-update-glibc/index.html","hash":"72baaab332164eb45888efc0926fe313fa8313be","modified":1568644282239},{"_id":"public/2016/10/16/android/AndroidSamples/UI/2016-10-16-ActionBar-ShareActionProvider/index.html","hash":"9a4ebf8611f7983c52ca70d88d01975f86188f8e","modified":1568644282240},{"_id":"public/2016/10/14/效率/2016-10-14-git/index.html","hash":"b71321e32bce253a89e60217443413143e4a1013","modified":1568644282240},{"_id":"public/2016/10/10/Linux/2016-10-10-linux-bash/index.html","hash":"ecef9825e1b6d526b1f848bf366e0b29774efb2c","modified":1568644282240},{"_id":"public/2016/10/04/python/numpy/2016-10-04-numpy-basic/index.html","hash":"f63b1807a4b0fd2fa0f21b4a642be6c753143373","modified":1568644282240},{"_id":"public/2016/10/04/python/matplotlib/2016-10-04-matplotlib-basic/index.html","hash":"698c593f7d47f49e19df5281399840bfbea6bceb","modified":1568644282240},{"_id":"public/2016/09/24/android/AndroidSamples/controls/2016-10-18-custom-button/index.html","hash":"3ea1342a51968e8b539dcb448afc7823a6d0b2f9","modified":1568644282240},{"_id":"public/2016/09/24/android/AndroidSamples/UI/2016-09-24-ActionBar-PopupMenu/index.html","hash":"275006983d87041437f892566ab65330f8b05f64","modified":1568644282240},{"_id":"public/2016/09/24/android/AndroidSamples/UI/2016-09-24-ActionBar-Basic/index.html","hash":"6269fe8b8178d4290fefbd157da1b7621941f989","modified":1568644282240},{"_id":"public/2016/09/18/android/UI相关/2016-09-18-RecyclerView/index.html","hash":"c5a104da1a8ee94da75b6eed941d2c025029b3e9","modified":1568644282240},{"_id":"public/2016/07/08/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-08-ViewPager/index.html","hash":"cf95d48621d5230884bce4eb6b31d53e0fd83f60","modified":1568644282240},{"_id":"public/2016/07/07/android/开发实战/个人开发/2016-07-07-calculator/index.html","hash":"8a91fcb6e36b09d3ebad59405710cefd6bdb84fa","modified":1568644282240},{"_id":"public/2016/07/06/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-06-CriminalIntent-ListFragment/index.html","hash":"07bf8863a4f567cee995d88cc3eb5d2610e0880d","modified":1568644282240},{"_id":"public/2016/07/06/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-06-CriminalIntent-Intent/index.html","hash":"805c14014348b81e0fc35e38d6ca35a7589b7e8e","modified":1568644282240},{"_id":"public/2016/07/03/效率/2016-07-03-Reset-PC/index.html","hash":"848f55875dce67f9f1af02fae033a657ec61be08","modified":1568644282240},{"_id":"public/2016/06/09/效率/2016-06-09-update-python/index.html","hash":"dda4e5a40d970011b21895fcb774d3fbd0533288","modified":1568644282241},{"_id":"public/2016/06/03/android/开发实战/Sunshine开发实战/2016-06-03-android-test/index.html","hash":"c863947ec126e7a1c7423ef96c4c0432276a4553","modified":1568644282241},{"_id":"public/2016/06/02/android/lifecycle/2016-06-02-lifecycle-basic/index.html","hash":"c677afdf45c4238f1e9e1fef42d619278c15d561","modified":1568644282241},{"_id":"public/2016/05/13/android/第三方库/2016-05-13-volley/index.html","hash":"23853ef090559d8ac2e19e4be476992f6d32fe0e","modified":1568644282241},{"_id":"public/2016/05/06/android/四大组件/2016-05-06-service-basic/index.html","hash":"ddc2d7bcf19366d95e484bb48664fd2941ff1c11","modified":1568644282241},{"_id":"public/2016/04/26/algorithm/oj/LeetCode/2016-04-26-easy-MaximunDepthofBinary/index.html","hash":"47d62deed776463531f73fbf30a5bca7e984bb1c","modified":1568644282241},{"_id":"public/2016/04/26/algorithm/oj/LeetCode/2016-04-26-easy-add-digits/index.html","hash":"6aedd89b1448e207b6f96b031274a46c2efd3dc0","modified":1568644282241},{"_id":"public/2016/04/26/algorithm/oj/LeetCode/2016-04-26-easy-move-zeroes/index.html","hash":"2e966ccac0d34b7e083054005d4dceeb978c0ee0","modified":1568644282242},{"_id":"public/2016/04/21/algorithm/oj/LeetCode/2016-04-21-medium-SingleNum/index.html","hash":"fb307937fc33fc74a6b99d8205cebfbe68ee9a03","modified":1568644282242},{"_id":"public/2016/04/21/algorithm/oj/LeetCode/2016-04-21-medium-343-122/index.html","hash":"1784edebe52881165300d055a8f2be9211cfd454","modified":1568644282242},{"_id":"public/2016/04/05/android/并发编程/2016-04-05-handler-threads/index.html","hash":"044c1377024bd43c0505420911701fea0daab37b","modified":1568644282242},{"_id":"public/2016/04/01/效率/2016-04-01-Linux-python-env-tips/index.html","hash":"4b90f0dd2380912755803d6f600a18e107da7d04","modified":1568644282242},{"_id":"public/2016/03/31/python/Spider/基础知识/2016-03-31-scrapy/index.html","hash":"79d73c2869752d64003ad693cc6ec2fe4bc200b8","modified":1568644282242},{"_id":"public/2016/03/29/python/Spider/基础知识/2016-03-29-beautiful-soup4-basic/index.html","hash":"09e3d6e8ecc4085115bf77b75d216ac118f1d828","modified":1568644282242},{"_id":"public/2016/03/27/python/Spider/基础知识/2016-03-27-python-spider/index.html","hash":"eb96e77eb84aee4a55453d643db1cc56e6cbaebb","modified":1568644282243},{"_id":"public/2016/03/27/python/Spider/基础知识/2016-03-27-regex/index.html","hash":"de7428f39aa837a2f38229411de9254a7cfd9105","modified":1568644282243},{"_id":"public/2016/03/26/android/控件/Notification/2016-03-26-Notification-basic/index.html","hash":"69148a9b30bcac82a278fe9cace5822af82956f4","modified":1568644282243},{"_id":"public/2016/03/26/android/数据持久化/2016-03-26-content-provider/index.html","hash":"adac5c7c09b2ef86164f2330b3a5ea25e789d650","modified":1568644282243},{"_id":"public/2016/03/25/android/数据持久化/2016-03-25-data-persistence/index.html","hash":"9f144d32b1aec9675fb3647964688af1d5b1d2ce","modified":1568644282243},{"_id":"public/2016/03/25/android/控件/AlertDialog/2016-03-25-Alert-Dialog/index.html","hash":"5e5751ccd155fe46b4544ee8c6b505bcf97e8ab0","modified":1568644282243},{"_id":"public/2016/03/20/android/四大组件/2016-03-20-broadcast-basic/index.html","hash":"d480f068af1fc3d888f991fa1473541ab197e290","modified":1568644282243},{"_id":"public/2016/03/19/android/UI相关/Fragment/2016-03-19-Fragment-message-transportation/index.html","hash":"b2ada1a1e6e99ceb8aacc3f2825e3072af08c654","modified":1568644282243},{"_id":"public/2016/03/17/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-03-17-Diaglog/index.html","hash":"bab4a4eb22617593745369b3b5612a10b1825bad","modified":1568644282243},{"_id":"public/2016/03/14/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-03-14-CriminalIntent-Fragment/index.html","hash":"1384a18b230406c2e6c396ed342515921b235f2b","modified":1568644282243},{"_id":"public/2016/03/10/android/adb/2016-03-10-adb-console/index.html","hash":"fc4bf72b785b341a40299184fc1cd9cb387d4d8f","modified":1568644282243},{"_id":"public/2016/03/09/android/UI相关/Fragment/2016-03-09-Fragment-basic/index.html","hash":"e21d49c490003e4ce1585821aefb8eb900cdc391","modified":1568644282243},{"_id":"public/2016/03/09/android/控件/Bar/2016-03-09-ProgressBar/index.html","hash":"f12ca2970f30e038e302a51afc3c6c3a05abc44d","modified":1568644282243},{"_id":"public/2016/03/07/android/控件/WebView/2016-03-07-使用WebView显示网页/index.html","hash":"dfd64fc52f0c52ffe5b01108931a46bff9b57851","modified":1568644282243},{"_id":"public/2016/03/06/python/2016-03-06-python3-注意点/index.html","hash":"0f0eaf6dfbb3e9cd9c31dbbbb885d099acf04238","modified":1568644282243},{"_id":"public/2016/02/22/android/UI相关/布局/2016-02-22-Layout-Gravity和Gravity/index.html","hash":"ae9cd0f063e9c601bf8b48019c5fa55f3253f353","modified":1568644282243},{"_id":"public/2016/02/21/algorithm/oj/PAT/2016-02-21-1010题-Radix-25分/index.html","hash":"125f32130bfdb09f3c3fb3036ab26b98c35f3e5a","modified":1568644282244},{"_id":"public/2016/02/18/algorithm/oj/Codeforces/eduRound/2016-02-18-Codeforces-Edu-Round7总结/index.html","hash":"c723783a25729242bd67ecbb394e69a02de85623","modified":1568644282244},{"_id":"public/index.html","hash":"24a234a3f6d6767658f22caf1df4fa92c535c9c2","modified":1568644282244},{"_id":"public/page/2/index.html","hash":"f15e1673292b045c3f7284e525ee088b4abe0dc3","modified":1568644282244},{"_id":"public/page/3/index.html","hash":"e48d9cf5dee7540df8f7c1340f426462465fd399","modified":1568644282244},{"_id":"public/page/4/index.html","hash":"f593fe8a5d32b870848d674e15df13d6428d3f67","modified":1568644282244},{"_id":"public/page/5/index.html","hash":"8f62b3f83d48a1d687ee43a5c041179bb8ee2e71","modified":1568644282245},{"_id":"public/page/6/index.html","hash":"b3521228948d16b9b1f73b1a08ae9c4c705254d5","modified":1568644282245},{"_id":"public/page/7/index.html","hash":"b0c880cfc7c43c4435ef95f87ca0b6532bf3b17c","modified":1568644282245},{"_id":"public/page/8/index.html","hash":"cd5e613717448d2ab878a10b48d4419b3a3eb971","modified":1568644282245},{"_id":"public/page/9/index.html","hash":"277c4c938fef9fd6f5ccb2919872e0411916e645","modified":1568644282245},{"_id":"public/page/10/index.html","hash":"7e8996a5a0d7d0ae01ab0b1be6446480e897abf0","modified":1568644282245},{"_id":"public/favicon.ico","hash":"83ba696a277e1bd8e3140432ad5a7101a592f90e","modified":1568642635025},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1568642635025},{"_id":"public/css/style.scss","hash":"b89d8098b3799644de812892742e4e24b8e08a0e","modified":1568642635026},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1568642635026},{"_id":"public/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1568642635026},{"_id":"public/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1568642635026},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1568642635026},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1568642635026},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1568642635026},{"_id":"public/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1568642635026},{"_id":"public/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1568642635026},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1568642635026},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1568642635026},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1568642635026},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1568642635026},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1568642635026},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1568642635026},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1568642635026},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1568642635026},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1568642635026},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1568642635026},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1568642635026},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1568642635027},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1568642635027},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1568642635027},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1568642635027},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1568642635028},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1568642635028},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1568642635028},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1568642635028},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1568642635028},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1568642635262},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1568642635262},{"_id":"public/css/main.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568642635271},{"_id":"public/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1568642635271},{"_id":"public/css/normalize.css","hash":"24759804cb541e96db7b8eafa7e9fd32cbab59da","modified":1568642635271},{"_id":"public/css/jquery.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1568642635272},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1568642635272},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1568642635272},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1568642635272},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1568642635272},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1568642635272},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1568642635272},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1568642635272},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1568642635272},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1568642635272},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1568642635272},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1568642635272},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1568642635272},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1568642635272},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1568642635272},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1568642635272},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1568642635272},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1568642635272},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1568642635272},{"_id":"public/donate/index.html","hash":"04ada98363af3e45a4c8c6e7efb0340f3f236733","modified":1568642635272},{"_id":"public/css/grids-responsive-min.css","hash":"703826508193cbe21f2745d3e837256e224eb512","modified":1568642635281},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1568642635281},{"_id":"public/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1568642635281},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1568642635281},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1568642635281},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1568642635284},{"_id":"public/css/pure-min.css","hash":"8cf7ea3e9e00e752de63fbc443e9300366327cd9","modified":1568642635284},{"_id":"public/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1568642635288},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1568642635288},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1568642635365},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1568642635365},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1568642635365},{"_id":"public/css/style.css","hash":"2afb6e7e24abf81c8b7b7d472fb0bb9b9a1eac16","modified":1568642635429},{"_id":"public/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1568642635461},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1568642635528},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1568642635530},{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1568643579306}],"Category":[{"name":"Linux","_id":"ck0mglf7t000w28t1lh98419k"},{"name":"Android","_id":"ck0mglf7x001328t1lwlquurg"},{"name":"database","_id":"ck0mglf7x001528t1tkd280u2"},{"name":"OO","_id":"ck0mglf7y001728t13ll863ah"},{"name":"Java","_id":"ck0mglf83001l28t187fts9q2"},{"name":"Python","_id":"ck0mglf85001p28t1wkofrc06"},{"name":"Math","_id":"ck0mglf85001r28t10wlzc826"},{"name":"效率","_id":"ck0mglf85001t28t1kd3xu0wz"},{"name":"Algorithm","_id":"ck0mglf9w005728t1e8048ycq"},{"name":"JavaWeb","_id":"ck0mglf9z005e28t1q5o7jvwp"}],"Data":[],"Page":[],"Post":[{"author":"ivyxjc","date":"2099-12-31T16:00:00.000Z","title":"文章备份","category":null,"keywords":null,"description":"他人的一些比较好的文章备份","toc":true,"_content":"\n一些比较好的博客文章留档, 防止将来要用的时候又要浪费时间找.  （时间是2100年只是为了置顶...）\n\n## android\n\n### 第三方库\n1. [给 Android 开发者的 RxJava 详解](https://gank.io/post/560e15be2dca930e00da1083)<br>[archive.org备份页面](https://web.archive.org/web/20161023043938/http://gank.io/post/560e15be2dca930e00da1083)\n2. [RxJava 与 Retrofit 结合的最佳实践](https://gank.io/post/56e80c2c677659311bed9841)<br>[archive.org备份页面](https://web.archive.org/web/20161022232218/http://gank.io/post/56e80c2c677659311bed9841)\n\n\n### UI\n1. [Md系列3、CoordinatorLayout 里 Toobar和TabLayout等发生的一系列故事](http://www.jianshu.com/p/1edeff139de5)<br>[archive.org备份页面](https://web.archive.org/save/http://www.jianshu.com/p/1edeff139de5)\n2. [下拉刷新SwipeRefreshLayout](https://github.com/hanks-zyh/SwipeRefreshLayout)<br>[archive.org备份页面]()\n3. [Android LayoutInflater原理分析，带你一步步深入了解View(一)](http://blog.csdn.net/guolin_blog/article/details/12921889)<br>[archive.org备份页面](https://web.archive.org/web/20161021223718/http://blog.csdn.net/guolin_blog/article/details/12921889)\n4. [Android视图绘制流程完全解析，带你一步步深入了解View(二)](http://blog.csdn.net/guolin_blog/article/details/16330267)<br>[archive.org备份页面](https://web.archive.org/web/20161021215349/http://blog.csdn.net/guolin_blog/article/details/16330267)\n5. [Android视图状态及重绘流程分析，带你一步步深入了解View(三)](http://blog.csdn.net/guolin_blog/article/details/17045157)<br>[archive.org备份页面](https://web.archive.org/web/20151023100537/http://blog.csdn.net/guolin_blog/article/details/17045157)\n6. [Android自定义View的实现方法，带你一步步深入了解View(四)](http://blog.csdn.net/guolin_blog/article/details/17357967)<br>[archive.org备份页面](https://web.archive.org/save/http://blog.csdn.net/guolin_blog/article/details/17357967)\n7. [Understanding Android's LayoutInflater.inflate()](https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/)<br>[archive.org备份页面](https://web.archive.org/web/20160604203134/https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/)\n\n## java\n\n### java8\n\n1. [java8 默认方法](http://ebnbin.com/2015/12/20/java-8-default-methods/)<br>[jarchive.org备份页面 ](https://web.archive.org/web/20161023233757/http://ebnbin.com/2015/12/20/java-8-default-methods/)\n\n\n\n\n## python\n\n### Spider\n\n1. 500 or less中A Web Crawler With asyncio Coroutines的中文翻译版(关于python爬虫以及协程) :<br>[<译> A Web Crawler With asyncio Coroutines](http://drafts.damnever.com/2015/A-Web-Crawler-With-asyncio-Coroutines.html)<br>[archive.org备份页面](http://drafts.damnever.com/2015/A-Web-Crawler-With-asyncio-Coroutines.html)\n\n\n### python\n\n1. yield到底在做什么, 来自stackoverflow中的回答:<br>\n[what-does-the-yield-keyword-do](http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do)<br>[archive.org备份页面](https://web.archive.org/web/20161018133835/http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do)<br><br>[中文翻译版本](http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html)<br>[archive.org备份页面](https://web.archive.org/web/20161030082921/http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html)\n\n\n\n\n\n\n## Raspberry\n\n1. [树莓派3的使用(Raspbian)](https://www.zybuluo.com/yangxuan/note/321467#7%E4%B8%BAssh%E5%90%AF%E7%94%A8%E4%B8%A4%E6%AD%A5%E8%AE%A4%E8%AF%81)\n2. [树莓派通过邮件上报实时IP，随时随地远程登录树莓派](http://www.kawabangga.com/posts/1398)<br>[archive.org备份页面](https://web.archive.org/web/20160731051025/http://www.kawabangga.com/posts/1398)\n3. [树莓派 挂载SAMBA（小米路由器）](http://www.itdadao.com/articles/c15a588496p0.html)<br>[archive.org备份页面](https://web.archive.org/save/http://www.itdadao.com/articles/c15a588496p0.html)\n\n\n## proxy\n\n1. [kcp安装配置教程](http://www.8dlive.com/post/371.html)<br>[archive.org备份页面](https://web.archive.org/web/20161106035844/http://www.8dlive.com/post/371.html)\n\n## 工具\n\n1. [如何合并两个git仓库](https://github.com/deercoder/0-tech-notes/blob/master/Git/git_merge_local_repos.md)<br>[archive.org备份页面](https://web.archive.org/web/20161208141359/https://github.com/deercoder/0-tech-notes/blob/master/Git/git_merge_local_repos.md)","source":"_posts/others-blog.md","raw":"---\nauthor: ivyxjc\ndate: 2100-01-01\ntitle: 文章备份\ncategory:\ntags: [backup,blog]\nkeywords:\ndescription: 他人的一些比较好的文章备份\ntoc: true\n---\n\n一些比较好的博客文章留档, 防止将来要用的时候又要浪费时间找.  （时间是2100年只是为了置顶...）\n\n## android\n\n### 第三方库\n1. [给 Android 开发者的 RxJava 详解](https://gank.io/post/560e15be2dca930e00da1083)<br>[archive.org备份页面](https://web.archive.org/web/20161023043938/http://gank.io/post/560e15be2dca930e00da1083)\n2. [RxJava 与 Retrofit 结合的最佳实践](https://gank.io/post/56e80c2c677659311bed9841)<br>[archive.org备份页面](https://web.archive.org/web/20161022232218/http://gank.io/post/56e80c2c677659311bed9841)\n\n\n### UI\n1. [Md系列3、CoordinatorLayout 里 Toobar和TabLayout等发生的一系列故事](http://www.jianshu.com/p/1edeff139de5)<br>[archive.org备份页面](https://web.archive.org/save/http://www.jianshu.com/p/1edeff139de5)\n2. [下拉刷新SwipeRefreshLayout](https://github.com/hanks-zyh/SwipeRefreshLayout)<br>[archive.org备份页面]()\n3. [Android LayoutInflater原理分析，带你一步步深入了解View(一)](http://blog.csdn.net/guolin_blog/article/details/12921889)<br>[archive.org备份页面](https://web.archive.org/web/20161021223718/http://blog.csdn.net/guolin_blog/article/details/12921889)\n4. [Android视图绘制流程完全解析，带你一步步深入了解View(二)](http://blog.csdn.net/guolin_blog/article/details/16330267)<br>[archive.org备份页面](https://web.archive.org/web/20161021215349/http://blog.csdn.net/guolin_blog/article/details/16330267)\n5. [Android视图状态及重绘流程分析，带你一步步深入了解View(三)](http://blog.csdn.net/guolin_blog/article/details/17045157)<br>[archive.org备份页面](https://web.archive.org/web/20151023100537/http://blog.csdn.net/guolin_blog/article/details/17045157)\n6. [Android自定义View的实现方法，带你一步步深入了解View(四)](http://blog.csdn.net/guolin_blog/article/details/17357967)<br>[archive.org备份页面](https://web.archive.org/save/http://blog.csdn.net/guolin_blog/article/details/17357967)\n7. [Understanding Android's LayoutInflater.inflate()](https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/)<br>[archive.org备份页面](https://web.archive.org/web/20160604203134/https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/)\n\n## java\n\n### java8\n\n1. [java8 默认方法](http://ebnbin.com/2015/12/20/java-8-default-methods/)<br>[jarchive.org备份页面 ](https://web.archive.org/web/20161023233757/http://ebnbin.com/2015/12/20/java-8-default-methods/)\n\n\n\n\n## python\n\n### Spider\n\n1. 500 or less中A Web Crawler With asyncio Coroutines的中文翻译版(关于python爬虫以及协程) :<br>[<译> A Web Crawler With asyncio Coroutines](http://drafts.damnever.com/2015/A-Web-Crawler-With-asyncio-Coroutines.html)<br>[archive.org备份页面](http://drafts.damnever.com/2015/A-Web-Crawler-With-asyncio-Coroutines.html)\n\n\n### python\n\n1. yield到底在做什么, 来自stackoverflow中的回答:<br>\n[what-does-the-yield-keyword-do](http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do)<br>[archive.org备份页面](https://web.archive.org/web/20161018133835/http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do)<br><br>[中文翻译版本](http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html)<br>[archive.org备份页面](https://web.archive.org/web/20161030082921/http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html)\n\n\n\n\n\n\n## Raspberry\n\n1. [树莓派3的使用(Raspbian)](https://www.zybuluo.com/yangxuan/note/321467#7%E4%B8%BAssh%E5%90%AF%E7%94%A8%E4%B8%A4%E6%AD%A5%E8%AE%A4%E8%AF%81)\n2. [树莓派通过邮件上报实时IP，随时随地远程登录树莓派](http://www.kawabangga.com/posts/1398)<br>[archive.org备份页面](https://web.archive.org/web/20160731051025/http://www.kawabangga.com/posts/1398)\n3. [树莓派 挂载SAMBA（小米路由器）](http://www.itdadao.com/articles/c15a588496p0.html)<br>[archive.org备份页面](https://web.archive.org/save/http://www.itdadao.com/articles/c15a588496p0.html)\n\n\n## proxy\n\n1. [kcp安装配置教程](http://www.8dlive.com/post/371.html)<br>[archive.org备份页面](https://web.archive.org/web/20161106035844/http://www.8dlive.com/post/371.html)\n\n## 工具\n\n1. [如何合并两个git仓库](https://github.com/deercoder/0-tech-notes/blob/master/Git/git_merge_local_repos.md)<br>[archive.org备份页面](https://web.archive.org/web/20161208141359/https://github.com/deercoder/0-tech-notes/blob/master/Git/git_merge_local_repos.md)","slug":"others-blog","published":1,"updated":"2018-08-09T10:10:11.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf1i000028t15ghcrs5z","content":"<p>一些比较好的博客文章留档, 防止将来要用的时候又要浪费时间找.  （时间是2100年只是为了置顶…）</p>\n<h2 id=\"android\"><a href=\"#android\" class=\"headerlink\" title=\"android\"></a>android</h2><h3 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h3><ol>\n<li><a href=\"https://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener\">给 Android 开发者的 RxJava 详解</a><br><a href=\"https://web.archive.org/web/20161023043938/http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://gank.io/post/56e80c2c677659311bed9841\" target=\"_blank\" rel=\"noopener\">RxJava 与 Retrofit 结合的最佳实践</a><br><a href=\"https://web.archive.org/web/20161022232218/http://gank.io/post/56e80c2c677659311bed9841\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h3 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h3><ol>\n<li><a href=\"http://www.jianshu.com/p/1edeff139de5\" target=\"_blank\" rel=\"noopener\">Md系列3、CoordinatorLayout 里 Toobar和TabLayout等发生的一系列故事</a><br><a href=\"https://web.archive.org/save/http://www.jianshu.com/p/1edeff139de5\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://github.com/hanks-zyh/SwipeRefreshLayout\" target=\"_blank\" rel=\"noopener\">下拉刷新SwipeRefreshLayout</a><br><a href>archive.org备份页面</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/12921889\" target=\"_blank\" rel=\"noopener\">Android LayoutInflater原理分析，带你一步步深入了解View(一)</a><br><a href=\"https://web.archive.org/web/20161021223718/http://blog.csdn.net/guolin_blog/article/details/12921889\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/16330267\" target=\"_blank\" rel=\"noopener\">Android视图绘制流程完全解析，带你一步步深入了解View(二)</a><br><a href=\"https://web.archive.org/web/20161021215349/http://blog.csdn.net/guolin_blog/article/details/16330267\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/17045157\" target=\"_blank\" rel=\"noopener\">Android视图状态及重绘流程分析，带你一步步深入了解View(三)</a><br><a href=\"https://web.archive.org/web/20151023100537/http://blog.csdn.net/guolin_blog/article/details/17045157\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/17357967\" target=\"_blank\" rel=\"noopener\">Android自定义View的实现方法，带你一步步深入了解View(四)</a><br><a href=\"https://web.archive.org/save/http://blog.csdn.net/guolin_blog/article/details/17357967\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/\" target=\"_blank\" rel=\"noopener\">Understanding Android’s LayoutInflater.inflate()</a><br><a href=\"https://web.archive.org/web/20160604203134/https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><h3 id=\"java8\"><a href=\"#java8\" class=\"headerlink\" title=\"java8\"></a>java8</h3><ol>\n<li><a href=\"http://ebnbin.com/2015/12/20/java-8-default-methods/\" target=\"_blank\" rel=\"noopener\">java8 默认方法</a><br><a href=\"https://web.archive.org/web/20161023233757/http://ebnbin.com/2015/12/20/java-8-default-methods/\" target=\"_blank\" rel=\"noopener\">jarchive.org备份页面 </a></li>\n</ol>\n<h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><h3 id=\"Spider\"><a href=\"#Spider\" class=\"headerlink\" title=\"Spider\"></a>Spider</h3><ol>\n<li>500 or less中A Web Crawler With asyncio Coroutines的中文翻译版(关于python爬虫以及协程) :<br><a href=\"http://drafts.damnever.com/2015/A-Web-Crawler-With-asyncio-Coroutines.html\" target=\"_blank\" rel=\"noopener\">&lt;译&gt; A Web Crawler With asyncio Coroutines</a><br><a href=\"http://drafts.damnever.com/2015/A-Web-Crawler-With-asyncio-Coroutines.html\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h3 id=\"python-1\"><a href=\"#python-1\" class=\"headerlink\" title=\"python\"></a>python</h3><ol>\n<li>yield到底在做什么, 来自stackoverflow中的回答:<br><br><a href=\"http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do\" target=\"_blank\" rel=\"noopener\">what-does-the-yield-keyword-do</a><br><a href=\"https://web.archive.org/web/20161018133835/http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a><br><br><a href=\"http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html\" target=\"_blank\" rel=\"noopener\">中文翻译版本</a><br><a href=\"https://web.archive.org/web/20161030082921/http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h2 id=\"Raspberry\"><a href=\"#Raspberry\" class=\"headerlink\" title=\"Raspberry\"></a>Raspberry</h2><ol>\n<li><a href=\"https://www.zybuluo.com/yangxuan/note/321467#7%E4%B8%BAssh%E5%90%AF%E7%94%A8%E4%B8%A4%E6%AD%A5%E8%AE%A4%E8%AF%81\" target=\"_blank\" rel=\"noopener\">树莓派3的使用(Raspbian)</a></li>\n<li><a href=\"http://www.kawabangga.com/posts/1398\" target=\"_blank\" rel=\"noopener\">树莓派通过邮件上报实时IP，随时随地远程登录树莓派</a><br><a href=\"https://web.archive.org/web/20160731051025/http://www.kawabangga.com/posts/1398\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"http://www.itdadao.com/articles/c15a588496p0.html\" target=\"_blank\" rel=\"noopener\">树莓派 挂载SAMBA（小米路由器）</a><br><a href=\"https://web.archive.org/save/http://www.itdadao.com/articles/c15a588496p0.html\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h2 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h2><ol>\n<li><a href=\"http://www.8dlive.com/post/371.html\" target=\"_blank\" rel=\"noopener\">kcp安装配置教程</a><br><a href=\"https://web.archive.org/web/20161106035844/http://www.8dlive.com/post/371.html\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ol>\n<li><a href=\"https://github.com/deercoder/0-tech-notes/blob/master/Git/git_merge_local_repos.md\" target=\"_blank\" rel=\"noopener\">如何合并两个git仓库</a><br><a href=\"https://web.archive.org/web/20161208141359/https://github.com/deercoder/0-tech-notes/blob/master/Git/git_merge_local_repos.md\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>一些比较好的博客文章留档, 防止将来要用的时候又要浪费时间找.  （时间是2100年只是为了置顶…）</p>\n<h2 id=\"android\"><a href=\"#android\" class=\"headerlink\" title=\"android\"></a>android</h2><h3 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h3><ol>\n<li><a href=\"https://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener\">给 Android 开发者的 RxJava 详解</a><br><a href=\"https://web.archive.org/web/20161023043938/http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://gank.io/post/56e80c2c677659311bed9841\" target=\"_blank\" rel=\"noopener\">RxJava 与 Retrofit 结合的最佳实践</a><br><a href=\"https://web.archive.org/web/20161022232218/http://gank.io/post/56e80c2c677659311bed9841\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h3 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h3><ol>\n<li><a href=\"http://www.jianshu.com/p/1edeff139de5\" target=\"_blank\" rel=\"noopener\">Md系列3、CoordinatorLayout 里 Toobar和TabLayout等发生的一系列故事</a><br><a href=\"https://web.archive.org/save/http://www.jianshu.com/p/1edeff139de5\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://github.com/hanks-zyh/SwipeRefreshLayout\" target=\"_blank\" rel=\"noopener\">下拉刷新SwipeRefreshLayout</a><br><a href>archive.org备份页面</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/12921889\" target=\"_blank\" rel=\"noopener\">Android LayoutInflater原理分析，带你一步步深入了解View(一)</a><br><a href=\"https://web.archive.org/web/20161021223718/http://blog.csdn.net/guolin_blog/article/details/12921889\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/16330267\" target=\"_blank\" rel=\"noopener\">Android视图绘制流程完全解析，带你一步步深入了解View(二)</a><br><a href=\"https://web.archive.org/web/20161021215349/http://blog.csdn.net/guolin_blog/article/details/16330267\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/17045157\" target=\"_blank\" rel=\"noopener\">Android视图状态及重绘流程分析，带你一步步深入了解View(三)</a><br><a href=\"https://web.archive.org/web/20151023100537/http://blog.csdn.net/guolin_blog/article/details/17045157\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/17357967\" target=\"_blank\" rel=\"noopener\">Android自定义View的实现方法，带你一步步深入了解View(四)</a><br><a href=\"https://web.archive.org/save/http://blog.csdn.net/guolin_blog/article/details/17357967\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/\" target=\"_blank\" rel=\"noopener\">Understanding Android’s LayoutInflater.inflate()</a><br><a href=\"https://web.archive.org/web/20160604203134/https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><h3 id=\"java8\"><a href=\"#java8\" class=\"headerlink\" title=\"java8\"></a>java8</h3><ol>\n<li><a href=\"http://ebnbin.com/2015/12/20/java-8-default-methods/\" target=\"_blank\" rel=\"noopener\">java8 默认方法</a><br><a href=\"https://web.archive.org/web/20161023233757/http://ebnbin.com/2015/12/20/java-8-default-methods/\" target=\"_blank\" rel=\"noopener\">jarchive.org备份页面 </a></li>\n</ol>\n<h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><h3 id=\"Spider\"><a href=\"#Spider\" class=\"headerlink\" title=\"Spider\"></a>Spider</h3><ol>\n<li>500 or less中A Web Crawler With asyncio Coroutines的中文翻译版(关于python爬虫以及协程) :<br><a href=\"http://drafts.damnever.com/2015/A-Web-Crawler-With-asyncio-Coroutines.html\" target=\"_blank\" rel=\"noopener\">&lt;译&gt; A Web Crawler With asyncio Coroutines</a><br><a href=\"http://drafts.damnever.com/2015/A-Web-Crawler-With-asyncio-Coroutines.html\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h3 id=\"python-1\"><a href=\"#python-1\" class=\"headerlink\" title=\"python\"></a>python</h3><ol>\n<li>yield到底在做什么, 来自stackoverflow中的回答:<br><br><a href=\"http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do\" target=\"_blank\" rel=\"noopener\">what-does-the-yield-keyword-do</a><br><a href=\"https://web.archive.org/web/20161018133835/http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a><br><br><a href=\"http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html\" target=\"_blank\" rel=\"noopener\">中文翻译版本</a><br><a href=\"https://web.archive.org/web/20161030082921/http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h2 id=\"Raspberry\"><a href=\"#Raspberry\" class=\"headerlink\" title=\"Raspberry\"></a>Raspberry</h2><ol>\n<li><a href=\"https://www.zybuluo.com/yangxuan/note/321467#7%E4%B8%BAssh%E5%90%AF%E7%94%A8%E4%B8%A4%E6%AD%A5%E8%AE%A4%E8%AF%81\" target=\"_blank\" rel=\"noopener\">树莓派3的使用(Raspbian)</a></li>\n<li><a href=\"http://www.kawabangga.com/posts/1398\" target=\"_blank\" rel=\"noopener\">树莓派通过邮件上报实时IP，随时随地远程登录树莓派</a><br><a href=\"https://web.archive.org/web/20160731051025/http://www.kawabangga.com/posts/1398\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"http://www.itdadao.com/articles/c15a588496p0.html\" target=\"_blank\" rel=\"noopener\">树莓派 挂载SAMBA（小米路由器）</a><br><a href=\"https://web.archive.org/save/http://www.itdadao.com/articles/c15a588496p0.html\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h2 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h2><ol>\n<li><a href=\"http://www.8dlive.com/post/371.html\" target=\"_blank\" rel=\"noopener\">kcp安装配置教程</a><br><a href=\"https://web.archive.org/web/20161106035844/http://www.8dlive.com/post/371.html\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ol>\n<li><a href=\"https://github.com/deercoder/0-tech-notes/blob/master/Git/git_merge_local_repos.md\" target=\"_blank\" rel=\"noopener\">如何合并两个git仓库</a><br><a href=\"https://web.archive.org/web/20161208141359/https://github.com/deercoder/0-tech-notes/blob/master/Git/git_merge_local_repos.md\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n"},{"author":"ivyxjc","date":"2016-10-09T16:00:00.000Z","title":"Linux 常用命令","keywords":null,"description":"介绍与解压, 文件操作, vim操作, 进程等相关的bash命令.","toc":true,"_content":"\n## 解压\n\n### 解压.zip文件\n\n```bash\nunzip xxx.zip\n```\n\n### 解压tar.gz文件\n\n\n## 文件相关操作\n\n### 空间使用情况\n\n`df -h`: 查看空间使用情况\n### 移动\n\n\nmv dir1 dir2\n\n## 进程相关\n\n### 如何查看正在运行的进程\n\n`ps -A`:显示所有的进程\n`ps -a`:显示终端中包括其它用户的所有进程\n`ps -x`:显示无控制终端的进程\n\n### 如何关闭正在运行的进程\n\n`kill -9 xxx`:xxx是进程的PID\n\n### 显示端口占用情况\n\n`lsof -i`\n\n## vim相关操作\n\n### 查找\n\n?pattern 光标下方查找\n/pattern 光标上方查找\n\n\n## 定时任务\n\n`crontab -l`:可以查看正在进行的定时任务\n`crontab -e`:可以进行修改\n`/etc/init.d/cron restart`: 重新该服务\n","source":"_posts/Linux/2016-10-10-linux-bash.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-10\ntitle: Linux 常用命令\ncategory: Linux\ntags: [linux]\nkeywords:\ndescription: 介绍与解压, 文件操作, vim操作, 进程等相关的bash命令.\ntoc: true\n---\n\n## 解压\n\n### 解压.zip文件\n\n```bash\nunzip xxx.zip\n```\n\n### 解压tar.gz文件\n\n\n## 文件相关操作\n\n### 空间使用情况\n\n`df -h`: 查看空间使用情况\n### 移动\n\n\nmv dir1 dir2\n\n## 进程相关\n\n### 如何查看正在运行的进程\n\n`ps -A`:显示所有的进程\n`ps -a`:显示终端中包括其它用户的所有进程\n`ps -x`:显示无控制终端的进程\n\n### 如何关闭正在运行的进程\n\n`kill -9 xxx`:xxx是进程的PID\n\n### 显示端口占用情况\n\n`lsof -i`\n\n## vim相关操作\n\n### 查找\n\n?pattern 光标下方查找\n/pattern 光标上方查找\n\n\n## 定时任务\n\n`crontab -l`:可以查看正在进行的定时任务\n`crontab -e`:可以进行修改\n`/etc/init.d/cron restart`: 重新该服务\n","slug":"Linux/2016-10-10-linux-bash","published":1,"updated":"2018-08-09T10:10:11.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf6y000328t1kxa2jd75","content":"<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><h3 id=\"解压-zip文件\"><a href=\"#解压-zip文件\" class=\"headerlink\" title=\"解压.zip文件\"></a>解压.zip文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip xxx.zip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压tar-gz文件\"><a href=\"#解压tar-gz文件\" class=\"headerlink\" title=\"解压tar.gz文件\"></a>解压tar.gz文件</h3><h2 id=\"文件相关操作\"><a href=\"#文件相关操作\" class=\"headerlink\" title=\"文件相关操作\"></a>文件相关操作</h2><h3 id=\"空间使用情况\"><a href=\"#空间使用情况\" class=\"headerlink\" title=\"空间使用情况\"></a>空间使用情况</h3><p><code>df -h</code>: 查看空间使用情况</p>\n<h3 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h3><p>mv dir1 dir2</p>\n<h2 id=\"进程相关\"><a href=\"#进程相关\" class=\"headerlink\" title=\"进程相关\"></a>进程相关</h2><h3 id=\"如何查看正在运行的进程\"><a href=\"#如何查看正在运行的进程\" class=\"headerlink\" title=\"如何查看正在运行的进程\"></a>如何查看正在运行的进程</h3><p><code>ps -A</code>:显示所有的进程<br><code>ps -a</code>:显示终端中包括其它用户的所有进程<br><code>ps -x</code>:显示无控制终端的进程</p>\n<h3 id=\"如何关闭正在运行的进程\"><a href=\"#如何关闭正在运行的进程\" class=\"headerlink\" title=\"如何关闭正在运行的进程\"></a>如何关闭正在运行的进程</h3><p><code>kill -9 xxx</code>:xxx是进程的PID</p>\n<h3 id=\"显示端口占用情况\"><a href=\"#显示端口占用情况\" class=\"headerlink\" title=\"显示端口占用情况\"></a>显示端口占用情况</h3><p><code>lsof -i</code></p>\n<h2 id=\"vim相关操作\"><a href=\"#vim相关操作\" class=\"headerlink\" title=\"vim相关操作\"></a>vim相关操作</h2><h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><p>?pattern 光标下方查找<br>/pattern 光标上方查找</p>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><p><code>crontab -l</code>:可以查看正在进行的定时任务<br><code>crontab -e</code>:可以进行修改<br><code>/etc/init.d/cron restart</code>: 重新该服务</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><h3 id=\"解压-zip文件\"><a href=\"#解压-zip文件\" class=\"headerlink\" title=\"解压.zip文件\"></a>解压.zip文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip xxx.zip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压tar-gz文件\"><a href=\"#解压tar-gz文件\" class=\"headerlink\" title=\"解压tar.gz文件\"></a>解压tar.gz文件</h3><h2 id=\"文件相关操作\"><a href=\"#文件相关操作\" class=\"headerlink\" title=\"文件相关操作\"></a>文件相关操作</h2><h3 id=\"空间使用情况\"><a href=\"#空间使用情况\" class=\"headerlink\" title=\"空间使用情况\"></a>空间使用情况</h3><p><code>df -h</code>: 查看空间使用情况</p>\n<h3 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h3><p>mv dir1 dir2</p>\n<h2 id=\"进程相关\"><a href=\"#进程相关\" class=\"headerlink\" title=\"进程相关\"></a>进程相关</h2><h3 id=\"如何查看正在运行的进程\"><a href=\"#如何查看正在运行的进程\" class=\"headerlink\" title=\"如何查看正在运行的进程\"></a>如何查看正在运行的进程</h3><p><code>ps -A</code>:显示所有的进程<br><code>ps -a</code>:显示终端中包括其它用户的所有进程<br><code>ps -x</code>:显示无控制终端的进程</p>\n<h3 id=\"如何关闭正在运行的进程\"><a href=\"#如何关闭正在运行的进程\" class=\"headerlink\" title=\"如何关闭正在运行的进程\"></a>如何关闭正在运行的进程</h3><p><code>kill -9 xxx</code>:xxx是进程的PID</p>\n<h3 id=\"显示端口占用情况\"><a href=\"#显示端口占用情况\" class=\"headerlink\" title=\"显示端口占用情况\"></a>显示端口占用情况</h3><p><code>lsof -i</code></p>\n<h2 id=\"vim相关操作\"><a href=\"#vim相关操作\" class=\"headerlink\" title=\"vim相关操作\"></a>vim相关操作</h2><h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><p>?pattern 光标下方查找<br>/pattern 光标上方查找</p>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><p><code>crontab -l</code>:可以查看正在进行的定时任务<br><code>crontab -e</code>:可以进行修改<br><code>/etc/init.d/cron restart</code>: 重新该服务</p>\n"},{"layout":"post","title":"centos7 LNMP配置","keywords":"centos7","description":null,"_content":"\ncentos7环境搭建及相关配置。介绍如何开启SSH，安装Java，MySql，Python，Git，Docker。\n<!--more-->\n# 环境配置\n\n## 更改ssh端口以及防火墙开放端口\n[怎样修改 CentOS 7 SSH 端口](https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/)([archive存档](https://web.archive.org/web/20180317035653/https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/))\n\n\n## 安装Java\n直接wget下载地址并不能成功下载。使用下面的方式可以成功下载jdk-8u162.rpm.\n使用`rpm -qa | grep 'jdk'`查找已安装的jdk，使用`rpm -e jdk**`来删除。之后使用`rpm -ivh jdk**`来安装新的jdk.\n\n```\nwget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u162-b12/0da788060d494f5095bf8624735fa2f1/jdk-8u162-linux-x64.rpm?AuthParam=1521257408_9aefdf6daa3472d09007c0abd24832e1\"\n```\n\n## 安装MySql\n\n### 安装\n\n[Centos 7 安装 MySQL](https://www.jianshu.com/p/7cccdaa2d177)([google cache](https://webcache.googleusercontent.com/search?q=cache:E4urk8c-wMYJ:https://www.jianshu.com/p/7cccdaa2d177+&cd=1&hl=zh-CN&ct=clnk&gl=cn))\n\n\n### 允许外网访问\n\n1. 云服务安全组及系统防火墙放开该端口\n2. 进入`mysql`执行`grant all on *.* to root@% identified by 'pass';`即可外网访问且拥有全部权限。\n3. 若希望改用户具有分发权限的权限，则可以使用`grant all on *.* to root@% identified by 'pass' with grant option;`\n\n\n## 安装Python\n\n### 安装准备\n\n```\n yum groupinstall 'Development Tools'\n yum install zlib-devel bzip2-devel openssl-devel ncurese-devel\n```\n\n### 下载\n\n```bash\nwget --no-check-certificate https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz\n\ntar -xzvf Python-3.6.4.tgz\n\ncd Python-3.6.4\n```\n\n### 编译安装\n\n```bash\n./configure --prefix=/usr/local/python3\nmake\nmake install\n```\n\n### 配置\n\n```\n# 备份python\nmv /usr/bin/python /usr/bin/python_bak\n# 更改yum\nvi /usr/bin/yum\n# 建立软连接\nln -s /usr/local/python3/bin/python3 /usr/bin/python\nln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3\n```\n\n\n## 安装git\n\n### 安装准备\n\n```\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install  gcc perl-ExtUtils-MakeMaker\n``` \n\n### 下载git\n\n###\n\n```\ntar -zxf git.tar.gz\ncd **\nmake configure\n./configure --prefix=/usr/local\nmake install\n```\n\n\n## 安装docker\n`uname -r`检查内核版本号是否大于`3.10`\n\n`yum -y install docker`安装docker\n\n# 问题解决\n\n## enable ipv4_forwarding\n在 `/etc/sysctl.conf`以及 `/usr/lib/sysctl.d/50-default.conf`里面都添加`net.ipv4.ip_forward = 1 `","source":"_posts/Linux/2018-03-17-centos7-init.md","raw":"---\nlayout: post\ntitle: centos7 LNMP配置\ncategory: Linux\ntags: [linux]\nkeywords: centos7\ndescription:\n---\n\ncentos7环境搭建及相关配置。介绍如何开启SSH，安装Java，MySql，Python，Git，Docker。\n<!--more-->\n# 环境配置\n\n## 更改ssh端口以及防火墙开放端口\n[怎样修改 CentOS 7 SSH 端口](https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/)([archive存档](https://web.archive.org/web/20180317035653/https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/))\n\n\n## 安装Java\n直接wget下载地址并不能成功下载。使用下面的方式可以成功下载jdk-8u162.rpm.\n使用`rpm -qa | grep 'jdk'`查找已安装的jdk，使用`rpm -e jdk**`来删除。之后使用`rpm -ivh jdk**`来安装新的jdk.\n\n```\nwget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u162-b12/0da788060d494f5095bf8624735fa2f1/jdk-8u162-linux-x64.rpm?AuthParam=1521257408_9aefdf6daa3472d09007c0abd24832e1\"\n```\n\n## 安装MySql\n\n### 安装\n\n[Centos 7 安装 MySQL](https://www.jianshu.com/p/7cccdaa2d177)([google cache](https://webcache.googleusercontent.com/search?q=cache:E4urk8c-wMYJ:https://www.jianshu.com/p/7cccdaa2d177+&cd=1&hl=zh-CN&ct=clnk&gl=cn))\n\n\n### 允许外网访问\n\n1. 云服务安全组及系统防火墙放开该端口\n2. 进入`mysql`执行`grant all on *.* to root@% identified by 'pass';`即可外网访问且拥有全部权限。\n3. 若希望改用户具有分发权限的权限，则可以使用`grant all on *.* to root@% identified by 'pass' with grant option;`\n\n\n## 安装Python\n\n### 安装准备\n\n```\n yum groupinstall 'Development Tools'\n yum install zlib-devel bzip2-devel openssl-devel ncurese-devel\n```\n\n### 下载\n\n```bash\nwget --no-check-certificate https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz\n\ntar -xzvf Python-3.6.4.tgz\n\ncd Python-3.6.4\n```\n\n### 编译安装\n\n```bash\n./configure --prefix=/usr/local/python3\nmake\nmake install\n```\n\n### 配置\n\n```\n# 备份python\nmv /usr/bin/python /usr/bin/python_bak\n# 更改yum\nvi /usr/bin/yum\n# 建立软连接\nln -s /usr/local/python3/bin/python3 /usr/bin/python\nln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3\n```\n\n\n## 安装git\n\n### 安装准备\n\n```\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install  gcc perl-ExtUtils-MakeMaker\n``` \n\n### 下载git\n\n###\n\n```\ntar -zxf git.tar.gz\ncd **\nmake configure\n./configure --prefix=/usr/local\nmake install\n```\n\n\n## 安装docker\n`uname -r`检查内核版本号是否大于`3.10`\n\n`yum -y install docker`安装docker\n\n# 问题解决\n\n## enable ipv4_forwarding\n在 `/etc/sysctl.conf`以及 `/usr/lib/sysctl.d/50-default.conf`里面都添加`net.ipv4.ip_forward = 1 `","slug":"Linux/2018-03-17-centos7-init","published":1,"date":"2019-08-09T15:43:24.047Z","updated":"2018-10-14T10:13:29.222Z","comments":1,"photos":[],"link":"","_id":"ck0mglf70000528t1e6g3xtel","content":"<p>centos7环境搭建及相关配置。介绍如何开启SSH，安装Java，MySql，Python，Git，Docker。</p>\n<a id=\"more\"></a>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><h2 id=\"更改ssh端口以及防火墙开放端口\"><a href=\"#更改ssh端口以及防火墙开放端口\" class=\"headerlink\" title=\"更改ssh端口以及防火墙开放端口\"></a>更改ssh端口以及防火墙开放端口</h2><p><a href=\"https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/\" target=\"_blank\" rel=\"noopener\">怎样修改 CentOS 7 SSH 端口</a>(<a href=\"https://web.archive.org/web/20180317035653/https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/\" target=\"_blank\" rel=\"noopener\">archive存档</a>)</p>\n<h2 id=\"安装Java\"><a href=\"#安装Java\" class=\"headerlink\" title=\"安装Java\"></a>安装Java</h2><p>直接wget下载地址并不能成功下载。使用下面的方式可以成功下载jdk-8u162.rpm.<br>使用<code>rpm -qa | grep &#39;jdk&#39;</code>查找已安装的jdk，使用<code>rpm -e jdk**</code>来删除。之后使用<code>rpm -ivh jdk**</code>来安装新的jdk.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u162-b12/0da788060d494f5095bf8624735fa2f1/jdk-8u162-linux-x64.rpm?AuthParam=1521257408_9aefdf6daa3472d09007c0abd24832e1&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装MySql\"><a href=\"#安装MySql\" class=\"headerlink\" title=\"安装MySql\"></a>安装MySql</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><a href=\"https://www.jianshu.com/p/7cccdaa2d177\" target=\"_blank\" rel=\"noopener\">Centos 7 安装 MySQL</a>(<a href=\"https://webcache.googleusercontent.com/search?q=cache:E4urk8c-wMYJ:https://www.jianshu.com/p/7cccdaa2d177+&cd=1&hl=zh-CN&ct=clnk&gl=cn\" target=\"_blank\" rel=\"noopener\">google cache</a>)</p>\n<h3 id=\"允许外网访问\"><a href=\"#允许外网访问\" class=\"headerlink\" title=\"允许外网访问\"></a>允许外网访问</h3><ol>\n<li>云服务安全组及系统防火墙放开该端口</li>\n<li>进入<code>mysql</code>执行<code>grant all on *.* to root@% identified by &#39;pass&#39;;</code>即可外网访问且拥有全部权限。</li>\n<li>若希望改用户具有分发权限的权限，则可以使用<code>grant all on *.* to root@% identified by &#39;pass&#39; with grant option;</code></li>\n</ol>\n<h2 id=\"安装Python\"><a href=\"#安装Python\" class=\"headerlink\" title=\"安装Python\"></a>安装Python</h2><h3 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &apos;Development Tools&apos;</span><br><span class=\"line\">yum install zlib-devel bzip2-devel openssl-devel ncurese-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xzvf Python-3.6.4.tgz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.6.4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 备份python</span><br><span class=\"line\">mv /usr/bin/python /usr/bin/python_bak</span><br><span class=\"line\"># 更改yum</span><br><span class=\"line\">vi /usr/bin/yum</span><br><span class=\"line\"># 建立软连接</span><br><span class=\"line\">ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><h3 id=\"安装准备-1\"><a href=\"#安装准备-1\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\">yum install  gcc perl-ExtUtils-MakeMaker</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">### 下载git</span><br><span class=\"line\"></span><br><span class=\"line\">###</span><br></pre></td></tr></table></figure>\n\n<p>tar -zxf git.tar.gz<br>cd **<br>make configure<br>./configure –prefix=/usr/local<br>make install</p>\n<p>```</p>\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><p><code>uname -r</code>检查内核版本号是否大于<code>3.10</code></p>\n<p><code>yum -y install docker</code>安装docker</p>\n<h1 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h1><h2 id=\"enable-ipv4-forwarding\"><a href=\"#enable-ipv4-forwarding\" class=\"headerlink\" title=\"enable ipv4_forwarding\"></a>enable ipv4_forwarding</h2><p>在 <code>/etc/sysctl.conf</code>以及 <code>/usr/lib/sysctl.d/50-default.conf</code>里面都添加<code>net.ipv4.ip_forward = 1</code></p>\n","site":{"data":{}},"excerpt":"<p>centos7环境搭建及相关配置。介绍如何开启SSH，安装Java，MySql，Python，Git，Docker。</p>","more":"<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><h2 id=\"更改ssh端口以及防火墙开放端口\"><a href=\"#更改ssh端口以及防火墙开放端口\" class=\"headerlink\" title=\"更改ssh端口以及防火墙开放端口\"></a>更改ssh端口以及防火墙开放端口</h2><p><a href=\"https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/\" target=\"_blank\" rel=\"noopener\">怎样修改 CentOS 7 SSH 端口</a>(<a href=\"https://web.archive.org/web/20180317035653/https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/\" target=\"_blank\" rel=\"noopener\">archive存档</a>)</p>\n<h2 id=\"安装Java\"><a href=\"#安装Java\" class=\"headerlink\" title=\"安装Java\"></a>安装Java</h2><p>直接wget下载地址并不能成功下载。使用下面的方式可以成功下载jdk-8u162.rpm.<br>使用<code>rpm -qa | grep &#39;jdk&#39;</code>查找已安装的jdk，使用<code>rpm -e jdk**</code>来删除。之后使用<code>rpm -ivh jdk**</code>来安装新的jdk.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u162-b12/0da788060d494f5095bf8624735fa2f1/jdk-8u162-linux-x64.rpm?AuthParam=1521257408_9aefdf6daa3472d09007c0abd24832e1&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装MySql\"><a href=\"#安装MySql\" class=\"headerlink\" title=\"安装MySql\"></a>安装MySql</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><a href=\"https://www.jianshu.com/p/7cccdaa2d177\" target=\"_blank\" rel=\"noopener\">Centos 7 安装 MySQL</a>(<a href=\"https://webcache.googleusercontent.com/search?q=cache:E4urk8c-wMYJ:https://www.jianshu.com/p/7cccdaa2d177+&cd=1&hl=zh-CN&ct=clnk&gl=cn\" target=\"_blank\" rel=\"noopener\">google cache</a>)</p>\n<h3 id=\"允许外网访问\"><a href=\"#允许外网访问\" class=\"headerlink\" title=\"允许外网访问\"></a>允许外网访问</h3><ol>\n<li>云服务安全组及系统防火墙放开该端口</li>\n<li>进入<code>mysql</code>执行<code>grant all on *.* to root@% identified by &#39;pass&#39;;</code>即可外网访问且拥有全部权限。</li>\n<li>若希望改用户具有分发权限的权限，则可以使用<code>grant all on *.* to root@% identified by &#39;pass&#39; with grant option;</code></li>\n</ol>\n<h2 id=\"安装Python\"><a href=\"#安装Python\" class=\"headerlink\" title=\"安装Python\"></a>安装Python</h2><h3 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &apos;Development Tools&apos;</span><br><span class=\"line\">yum install zlib-devel bzip2-devel openssl-devel ncurese-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xzvf Python-3.6.4.tgz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.6.4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 备份python</span><br><span class=\"line\">mv /usr/bin/python /usr/bin/python_bak</span><br><span class=\"line\"># 更改yum</span><br><span class=\"line\">vi /usr/bin/yum</span><br><span class=\"line\"># 建立软连接</span><br><span class=\"line\">ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><h3 id=\"安装准备-1\"><a href=\"#安装准备-1\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\">yum install  gcc perl-ExtUtils-MakeMaker</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">### 下载git</span><br><span class=\"line\"></span><br><span class=\"line\">###</span><br></pre></td></tr></table></figure>\n\n<p>tar -zxf git.tar.gz<br>cd **<br>make configure<br>./configure –prefix=/usr/local<br>make install</p>\n<p>```</p>\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><p><code>uname -r</code>检查内核版本号是否大于<code>3.10</code></p>\n<p><code>yum -y install docker</code>安装docker</p>\n<h1 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h1><h2 id=\"enable-ipv4-forwarding\"><a href=\"#enable-ipv4-forwarding\" class=\"headerlink\" title=\"enable ipv4_forwarding\"></a>enable ipv4_forwarding</h2><p>在 <code>/etc/sysctl.conf</code>以及 <code>/usr/lib/sysctl.d/50-default.conf</code>里面都添加<code>net.ipv4.ip_forward = 1</code></p>"},{"date":"2015-12-31T16:00:00.000Z","layout":"page","title":"about","_content":"\nNickname: [ivyxjc](https://ivyxjc.xyz)\n\nEmail:[ivyxjc1994@hotmailc.com](mailto:ivyxjc@1994@hotmail.com)\n\nGithub: [@ivyxjc](https://github.com/ivyxjc)\n","source":"_posts/about/index.md","raw":"---\ndate: 2016-01-01\nlayout: page\ntitle: about\n---\n\nNickname: [ivyxjc](https://ivyxjc.xyz)\n\nEmail:[ivyxjc1994@hotmailc.com](mailto:ivyxjc@1994@hotmail.com)\n\nGithub: [@ivyxjc](https://github.com/ivyxjc)\n","slug":"about/index","published":1,"updated":"2018-08-09T10:10:11.278Z","comments":1,"photos":[],"link":"","_id":"ck0mglf71000728t16pqjfwzv","content":"<p>Nickname: <a href=\"https://ivyxjc.xyz\">ivyxjc</a></p>\n<p>Email:<a href=\"mailto:ivyxjc@1994@hotmail.com\" target=\"_blank\" rel=\"noopener\">ivyxjc1994@hotmailc.com</a></p>\n<p>Github: <a href=\"https://github.com/ivyxjc\" target=\"_blank\" rel=\"noopener\">@ivyxjc</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Nickname: <a href=\"https://ivyxjc.xyz\">ivyxjc</a></p>\n<p>Email:<a href=\"mailto:ivyxjc@1994@hotmail.com\" target=\"_blank\" rel=\"noopener\">ivyxjc1994@hotmailc.com</a></p>\n<p>Github: <a href=\"https://github.com/ivyxjc\" target=\"_blank\" rel=\"noopener\">@ivyxjc</a></p>\n"},{"layout":"post","title":"Docker相关命令","keywords":"docker","description":null,"_content":"\nDocker的相关命令\n<!--more-->\n\n\n## docker build\n\n### 基本的build\n\n`docker build -t hello:0.0.1 .`\n\n### 指定Dockerfile\n\n`docker build -t hello:0.0.1 -f dockerfilePath .`\n\n## 运行docker\n\n### 映射端口\n`-P`会随机选取一个宿主端口来映射容器暴露的端口（`Dockerfile`中被`expose`，或者`docker run`中指定`--expose`）\n\n-p 需要指明宿主端口和容器端口\n\n`docker run -p 宿主端口:容器端口 image_name`\n\n### 映射文件\n`docker run -v /logs:/var/log/ -p 5000:80 image_name`\n\n将宿主`/logs`目录加载到container中的`/var/log`\n\n### --add-host\n`docker run -it --add-host db-static:1.1.1.1 ubuntu cat /etc/hosts1`\n\n## docker其它相关命令\n\n### 进入container命令行\n\n`docker exec -i -t container_id /bin/bash`\n\n退出 `exit`\n\n## 垃圾清理\n\n### stop  remove container\n\n`docker stop $(docker ps -a -q)`\n\n`docker rm $(docker ps -a -q)`\n\n### 删除images\n\n`dangling`表明该`image`未被打标签且没有被任何容器引用的镜像\n\n`docker rmi $( docker images --filter dangling=true -q)`\n\n#### 删除指定image\n\n`docker rmi imagename:tag`\n\n### 相关博客\n\n1. [Docker网络原则入门：EXPOSE，-p，-P，-link](http://dockone.io/article/455)<br /> [archive.org备份页面](https://web.archive.org/web/20180809011552/http://dockone.io/article/455)\n2. [ENTRYPOINT 入口点](https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html) <br />[archive.org备份页面](https://web.archive.org/web/20190708170855/https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html)\n3. [Docker — 从入门到实践](https://yeasy.gitbooks.io/docker_practice)","source":"_posts/Linux/2019-06-28-docker-basic.md","raw":"---\nlayout: post\ntitle: Docker相关命令\ncategory: Linux\ntags: [docker]\nkeywords: docker\ndescription:\n---\n\nDocker的相关命令\n<!--more-->\n\n\n## docker build\n\n### 基本的build\n\n`docker build -t hello:0.0.1 .`\n\n### 指定Dockerfile\n\n`docker build -t hello:0.0.1 -f dockerfilePath .`\n\n## 运行docker\n\n### 映射端口\n`-P`会随机选取一个宿主端口来映射容器暴露的端口（`Dockerfile`中被`expose`，或者`docker run`中指定`--expose`）\n\n-p 需要指明宿主端口和容器端口\n\n`docker run -p 宿主端口:容器端口 image_name`\n\n### 映射文件\n`docker run -v /logs:/var/log/ -p 5000:80 image_name`\n\n将宿主`/logs`目录加载到container中的`/var/log`\n\n### --add-host\n`docker run -it --add-host db-static:1.1.1.1 ubuntu cat /etc/hosts1`\n\n## docker其它相关命令\n\n### 进入container命令行\n\n`docker exec -i -t container_id /bin/bash`\n\n退出 `exit`\n\n## 垃圾清理\n\n### stop  remove container\n\n`docker stop $(docker ps -a -q)`\n\n`docker rm $(docker ps -a -q)`\n\n### 删除images\n\n`dangling`表明该`image`未被打标签且没有被任何容器引用的镜像\n\n`docker rmi $( docker images --filter dangling=true -q)`\n\n#### 删除指定image\n\n`docker rmi imagename:tag`\n\n### 相关博客\n\n1. [Docker网络原则入门：EXPOSE，-p，-P，-link](http://dockone.io/article/455)<br /> [archive.org备份页面](https://web.archive.org/web/20180809011552/http://dockone.io/article/455)\n2. [ENTRYPOINT 入口点](https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html) <br />[archive.org备份页面](https://web.archive.org/web/20190708170855/https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html)\n3. [Docker — 从入门到实践](https://yeasy.gitbooks.io/docker_practice)","slug":"Linux/2019-06-28-docker-basic","published":1,"date":"2019-08-09T15:43:24.051Z","updated":"2019-09-16T13:13:39.407Z","comments":1,"photos":[],"link":"","_id":"ck0mglf72000828t11na66dn9","content":"<p>Docker的相关命令</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"docker-build\"><a href=\"#docker-build\" class=\"headerlink\" title=\"docker build\"></a>docker build</h2><h3 id=\"基本的build\"><a href=\"#基本的build\" class=\"headerlink\" title=\"基本的build\"></a>基本的build</h3><p><code>docker build -t hello:0.0.1 .</code></p>\n<h3 id=\"指定Dockerfile\"><a href=\"#指定Dockerfile\" class=\"headerlink\" title=\"指定Dockerfile\"></a>指定Dockerfile</h3><p><code>docker build -t hello:0.0.1 -f dockerfilePath .</code></p>\n<h2 id=\"运行docker\"><a href=\"#运行docker\" class=\"headerlink\" title=\"运行docker\"></a>运行docker</h2><h3 id=\"映射端口\"><a href=\"#映射端口\" class=\"headerlink\" title=\"映射端口\"></a>映射端口</h3><p><code>-P</code>会随机选取一个宿主端口来映射容器暴露的端口（<code>Dockerfile</code>中被<code>expose</code>，或者<code>docker run</code>中指定<code>--expose</code>）</p>\n<p>-p 需要指明宿主端口和容器端口</p>\n<p><code>docker run -p 宿主端口:容器端口 image_name</code></p>\n<h3 id=\"映射文件\"><a href=\"#映射文件\" class=\"headerlink\" title=\"映射文件\"></a>映射文件</h3><p><code>docker run -v /logs:/var/log/ -p 5000:80 image_name</code></p>\n<p>将宿主<code>/logs</code>目录加载到container中的<code>/var/log</code></p>\n<h3 id=\"–add-host\"><a href=\"#–add-host\" class=\"headerlink\" title=\"–add-host\"></a>–add-host</h3><p><code>docker run -it --add-host db-static:1.1.1.1 ubuntu cat /etc/hosts1</code></p>\n<h2 id=\"docker其它相关命令\"><a href=\"#docker其它相关命令\" class=\"headerlink\" title=\"docker其它相关命令\"></a>docker其它相关命令</h2><h3 id=\"进入container命令行\"><a href=\"#进入container命令行\" class=\"headerlink\" title=\"进入container命令行\"></a>进入container命令行</h3><p><code>docker exec -i -t container_id /bin/bash</code></p>\n<p>退出 <code>exit</code></p>\n<h2 id=\"垃圾清理\"><a href=\"#垃圾清理\" class=\"headerlink\" title=\"垃圾清理\"></a>垃圾清理</h2><h3 id=\"stop-remove-container\"><a href=\"#stop-remove-container\" class=\"headerlink\" title=\"stop  remove container\"></a>stop  remove container</h3><p><code>docker stop $(docker ps -a -q)</code></p>\n<p><code>docker rm $(docker ps -a -q)</code></p>\n<h3 id=\"删除images\"><a href=\"#删除images\" class=\"headerlink\" title=\"删除images\"></a>删除images</h3><p><code>dangling</code>表明该<code>image</code>未被打标签且没有被任何容器引用的镜像</p>\n<p><code>docker rmi $( docker images --filter dangling=true -q)</code></p>\n<h4 id=\"删除指定image\"><a href=\"#删除指定image\" class=\"headerlink\" title=\"删除指定image\"></a>删除指定image</h4><p><code>docker rmi imagename:tag</code></p>\n<h3 id=\"相关博客\"><a href=\"#相关博客\" class=\"headerlink\" title=\"相关博客\"></a>相关博客</h3><ol>\n<li><a href=\"http://dockone.io/article/455\" target=\"_blank\" rel=\"noopener\">Docker网络原则入门：EXPOSE，-p，-P，-link</a><br> <a href=\"https://web.archive.org/web/20180809011552/http://dockone.io/article/455\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html\" target=\"_blank\" rel=\"noopener\">ENTRYPOINT 入口点</a> <br><a href=\"https://web.archive.org/web/20190708170855/https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice\" target=\"_blank\" rel=\"noopener\">Docker — 从入门到实践</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Docker的相关命令</p>","more":"<h2 id=\"docker-build\"><a href=\"#docker-build\" class=\"headerlink\" title=\"docker build\"></a>docker build</h2><h3 id=\"基本的build\"><a href=\"#基本的build\" class=\"headerlink\" title=\"基本的build\"></a>基本的build</h3><p><code>docker build -t hello:0.0.1 .</code></p>\n<h3 id=\"指定Dockerfile\"><a href=\"#指定Dockerfile\" class=\"headerlink\" title=\"指定Dockerfile\"></a>指定Dockerfile</h3><p><code>docker build -t hello:0.0.1 -f dockerfilePath .</code></p>\n<h2 id=\"运行docker\"><a href=\"#运行docker\" class=\"headerlink\" title=\"运行docker\"></a>运行docker</h2><h3 id=\"映射端口\"><a href=\"#映射端口\" class=\"headerlink\" title=\"映射端口\"></a>映射端口</h3><p><code>-P</code>会随机选取一个宿主端口来映射容器暴露的端口（<code>Dockerfile</code>中被<code>expose</code>，或者<code>docker run</code>中指定<code>--expose</code>）</p>\n<p>-p 需要指明宿主端口和容器端口</p>\n<p><code>docker run -p 宿主端口:容器端口 image_name</code></p>\n<h3 id=\"映射文件\"><a href=\"#映射文件\" class=\"headerlink\" title=\"映射文件\"></a>映射文件</h3><p><code>docker run -v /logs:/var/log/ -p 5000:80 image_name</code></p>\n<p>将宿主<code>/logs</code>目录加载到container中的<code>/var/log</code></p>\n<h3 id=\"–add-host\"><a href=\"#–add-host\" class=\"headerlink\" title=\"–add-host\"></a>–add-host</h3><p><code>docker run -it --add-host db-static:1.1.1.1 ubuntu cat /etc/hosts1</code></p>\n<h2 id=\"docker其它相关命令\"><a href=\"#docker其它相关命令\" class=\"headerlink\" title=\"docker其它相关命令\"></a>docker其它相关命令</h2><h3 id=\"进入container命令行\"><a href=\"#进入container命令行\" class=\"headerlink\" title=\"进入container命令行\"></a>进入container命令行</h3><p><code>docker exec -i -t container_id /bin/bash</code></p>\n<p>退出 <code>exit</code></p>\n<h2 id=\"垃圾清理\"><a href=\"#垃圾清理\" class=\"headerlink\" title=\"垃圾清理\"></a>垃圾清理</h2><h3 id=\"stop-remove-container\"><a href=\"#stop-remove-container\" class=\"headerlink\" title=\"stop  remove container\"></a>stop  remove container</h3><p><code>docker stop $(docker ps -a -q)</code></p>\n<p><code>docker rm $(docker ps -a -q)</code></p>\n<h3 id=\"删除images\"><a href=\"#删除images\" class=\"headerlink\" title=\"删除images\"></a>删除images</h3><p><code>dangling</code>表明该<code>image</code>未被打标签且没有被任何容器引用的镜像</p>\n<p><code>docker rmi $( docker images --filter dangling=true -q)</code></p>\n<h4 id=\"删除指定image\"><a href=\"#删除指定image\" class=\"headerlink\" title=\"删除指定image\"></a>删除指定image</h4><p><code>docker rmi imagename:tag</code></p>\n<h3 id=\"相关博客\"><a href=\"#相关博客\" class=\"headerlink\" title=\"相关博客\"></a>相关博客</h3><ol>\n<li><a href=\"http://dockone.io/article/455\" target=\"_blank\" rel=\"noopener\">Docker网络原则入门：EXPOSE，-p，-P，-link</a><br> <a href=\"https://web.archive.org/web/20180809011552/http://dockone.io/article/455\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html\" target=\"_blank\" rel=\"noopener\">ENTRYPOINT 入口点</a> <br><a href=\"https://web.archive.org/web/20190708170855/https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice\" target=\"_blank\" rel=\"noopener\">Docker — 从入门到实践</a></li>\n</ol>"},{"author":"ivyxjc","date":"2016-11-26T16:00:00.000Z","title":"知乎专栏android app开发中的一些问题及解决方法","keywords":null,"description":"知乎专栏android app开发中的一些问题及解决方法","_content":"\n\n经过一段时间的开发, 知乎专栏app主体上完成, 但还有很多功能没有做出来, 下面是开发过程中的一些问题以及将要完善的功能.\n\n## 如何根据点击自定义创建Fragment\n\n当我们使用tablayout时, 根据点击选择创建fragment, 这时可以使用下面的方法根据传入的内容自定义生成fragment.\n\n\n```java\nprivate void replaceFragment(Fragment fragment){\n       fm.beginTransaction()\n               .replace(R.id.fragment_container,fragment)\n               .commit();\n   }\n\n...\nreplaceFragment(FragmentTab.newSingleton(R.array.develop,R.array.develop_suffix));\n\npublic static FragmentTab newSingleton(int titleId, int suffixId){\n       FragmentTab fragment=new FragmentTab();\n       Bundle bundle=new Bundle();\n       bundle.putInt(Constant.LIST_ACTIVITY_NAV_TITLE,titleId);\n       bundle.putInt(Constant.LIST_ACTIVITY_NAV_SUFFIX,suffixId);\n       fragment.setArguments(bundle);\n       return fragment;\n   }\n```\n\n## 如何设置夜间模式\n\n\n\n## 如何进行数据缓存\n\n关于图片的缓存, Glide库已经完成\n\n其它内容的缓存使用的是序列化来完成的. 加了缓存后, 就要注意从网络中获得数据之后如何处理这些缓存的数据. 我目前选择的方法是, 一旦从网络中获取到新的\n\n\n```java\npublic  static void save(Context context, String filename,Object list){\n    FileOutputStream out=null;\n    ObjectOutputStream writer=null;\n    try{\n        out=context.openFileOutput(filename, Context.MODE_PRIVATE);\n        writer=new ObjectOutputStream(out);\n        writer.writeObject(list);\n        Log.i(TAG.CACHE_UTIL,\"cache list\");\n    }catch (FileNotFoundException e) {\n        e.printStackTrace();\n        Log.i(TAG.CACHE_UTIL,e.toString());\n    }catch (IOException e){\n        e.printStackTrace();\n        Log.i(TAG.CACHE_UTIL,e.toString());\n    }finally {\n        try{\n            if(writer!=null){\n                writer.close();\n            }\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}\npublic static Object load(Context context,String filename){\n    FileInputStream in=null;\n    ObjectInputStream reader=null;\n    Object res=null;\n    try{\n        in=context.openFileInput(filename);\n        reader=new ObjectInputStream(in);\n        res=reader.readObject();\n    }catch (FileNotFoundException e) {\n        e.printStackTrace();\n    }catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }catch (IOException e){\n        e.printStackTrace();\n    }finally {\n        if(reader!=null){\n            try{\n                reader.close();\n            }catch (IOException e){\n                e.printStackTrace();\n            }\n        }\n    }\n    return res;\n}\n```","source":"_posts/android/2016-11-27-zhihu-android.md","raw":"---\nauthor: ivyxjc\ndate: 2016-11-27\ntitle: 知乎专栏android app开发中的一些问题及解决方法\ncategory: Android\ntags: [android,project]\nkeywords:\ndescription: 知乎专栏android app开发中的一些问题及解决方法\n---\n\n\n经过一段时间的开发, 知乎专栏app主体上完成, 但还有很多功能没有做出来, 下面是开发过程中的一些问题以及将要完善的功能.\n\n## 如何根据点击自定义创建Fragment\n\n当我们使用tablayout时, 根据点击选择创建fragment, 这时可以使用下面的方法根据传入的内容自定义生成fragment.\n\n\n```java\nprivate void replaceFragment(Fragment fragment){\n       fm.beginTransaction()\n               .replace(R.id.fragment_container,fragment)\n               .commit();\n   }\n\n...\nreplaceFragment(FragmentTab.newSingleton(R.array.develop,R.array.develop_suffix));\n\npublic static FragmentTab newSingleton(int titleId, int suffixId){\n       FragmentTab fragment=new FragmentTab();\n       Bundle bundle=new Bundle();\n       bundle.putInt(Constant.LIST_ACTIVITY_NAV_TITLE,titleId);\n       bundle.putInt(Constant.LIST_ACTIVITY_NAV_SUFFIX,suffixId);\n       fragment.setArguments(bundle);\n       return fragment;\n   }\n```\n\n## 如何设置夜间模式\n\n\n\n## 如何进行数据缓存\n\n关于图片的缓存, Glide库已经完成\n\n其它内容的缓存使用的是序列化来完成的. 加了缓存后, 就要注意从网络中获得数据之后如何处理这些缓存的数据. 我目前选择的方法是, 一旦从网络中获取到新的\n\n\n```java\npublic  static void save(Context context, String filename,Object list){\n    FileOutputStream out=null;\n    ObjectOutputStream writer=null;\n    try{\n        out=context.openFileOutput(filename, Context.MODE_PRIVATE);\n        writer=new ObjectOutputStream(out);\n        writer.writeObject(list);\n        Log.i(TAG.CACHE_UTIL,\"cache list\");\n    }catch (FileNotFoundException e) {\n        e.printStackTrace();\n        Log.i(TAG.CACHE_UTIL,e.toString());\n    }catch (IOException e){\n        e.printStackTrace();\n        Log.i(TAG.CACHE_UTIL,e.toString());\n    }finally {\n        try{\n            if(writer!=null){\n                writer.close();\n            }\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}\npublic static Object load(Context context,String filename){\n    FileInputStream in=null;\n    ObjectInputStream reader=null;\n    Object res=null;\n    try{\n        in=context.openFileInput(filename);\n        reader=new ObjectInputStream(in);\n        res=reader.readObject();\n    }catch (FileNotFoundException e) {\n        e.printStackTrace();\n    }catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }catch (IOException e){\n        e.printStackTrace();\n    }finally {\n        if(reader!=null){\n            try{\n                reader.close();\n            }catch (IOException e){\n                e.printStackTrace();\n            }\n        }\n    }\n    return res;\n}\n```","slug":"android/2016-11-27-zhihu-android","published":1,"updated":"2018-08-09T10:10:11.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf73000928t1d61oa72l","content":"<p>经过一段时间的开发, 知乎专栏app主体上完成, 但还有很多功能没有做出来, 下面是开发过程中的一些问题以及将要完善的功能.</p>\n<h2 id=\"如何根据点击自定义创建Fragment\"><a href=\"#如何根据点击自定义创建Fragment\" class=\"headerlink\" title=\"如何根据点击自定义创建Fragment\"></a>如何根据点击自定义创建Fragment</h2><p>当我们使用tablayout时, 根据点击选择创建fragment, 这时可以使用下面的方法根据传入的内容自定义生成fragment.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">replaceFragment</span><span class=\"params\">(Fragment fragment)</span></span>&#123;</span><br><span class=\"line\">       fm.beginTransaction()</span><br><span class=\"line\">               .replace(R.id.fragment_container,fragment)</span><br><span class=\"line\">               .commit();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">replaceFragment(FragmentTab.newSingleton(R.array.develop,R.array.develop_suffix));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FragmentTab <span class=\"title\">newSingleton</span><span class=\"params\">(<span class=\"keyword\">int</span> titleId, <span class=\"keyword\">int</span> suffixId)</span></span>&#123;</span><br><span class=\"line\">       FragmentTab fragment=<span class=\"keyword\">new</span> FragmentTab();</span><br><span class=\"line\">       Bundle bundle=<span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">       bundle.putInt(Constant.LIST_ACTIVITY_NAV_TITLE,titleId);</span><br><span class=\"line\">       bundle.putInt(Constant.LIST_ACTIVITY_NAV_SUFFIX,suffixId);</span><br><span class=\"line\">       fragment.setArguments(bundle);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何设置夜间模式\"><a href=\"#如何设置夜间模式\" class=\"headerlink\" title=\"如何设置夜间模式\"></a>如何设置夜间模式</h2><h2 id=\"如何进行数据缓存\"><a href=\"#如何进行数据缓存\" class=\"headerlink\" title=\"如何进行数据缓存\"></a>如何进行数据缓存</h2><p>关于图片的缓存, Glide库已经完成</p>\n<p>其它内容的缓存使用的是序列化来完成的. 加了缓存后, 就要注意从网络中获得数据之后如何处理这些缓存的数据. 我目前选择的方法是, 一旦从网络中获取到新的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Context context, String filename,Object list)</span></span>&#123;</span><br><span class=\"line\">    FileOutputStream out=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ObjectOutputStream writer=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        out=context.openFileOutput(filename, Context.MODE_PRIVATE);</span><br><span class=\"line\">        writer=<span class=\"keyword\">new</span> ObjectOutputStream(out);</span><br><span class=\"line\">        writer.writeObject(list);</span><br><span class=\"line\">        Log.i(TAG.CACHE_UTIL,<span class=\"string\">\"cache list\"</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        Log.i(TAG.CACHE_UTIL,e.toString());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        Log.i(TAG.CACHE_UTIL,e.toString());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(writer!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">load</span><span class=\"params\">(Context context,String filename)</span></span>&#123;</span><br><span class=\"line\">    FileInputStream in=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ObjectInputStream reader=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Object res=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        in=context.openFileInput(filename);</span><br><span class=\"line\">        reader=<span class=\"keyword\">new</span> ObjectInputStream(in);</span><br><span class=\"line\">        res=reader.readObject();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reader!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                reader.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>经过一段时间的开发, 知乎专栏app主体上完成, 但还有很多功能没有做出来, 下面是开发过程中的一些问题以及将要完善的功能.</p>\n<h2 id=\"如何根据点击自定义创建Fragment\"><a href=\"#如何根据点击自定义创建Fragment\" class=\"headerlink\" title=\"如何根据点击自定义创建Fragment\"></a>如何根据点击自定义创建Fragment</h2><p>当我们使用tablayout时, 根据点击选择创建fragment, 这时可以使用下面的方法根据传入的内容自定义生成fragment.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">replaceFragment</span><span class=\"params\">(Fragment fragment)</span></span>&#123;</span><br><span class=\"line\">       fm.beginTransaction()</span><br><span class=\"line\">               .replace(R.id.fragment_container,fragment)</span><br><span class=\"line\">               .commit();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">replaceFragment(FragmentTab.newSingleton(R.array.develop,R.array.develop_suffix));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FragmentTab <span class=\"title\">newSingleton</span><span class=\"params\">(<span class=\"keyword\">int</span> titleId, <span class=\"keyword\">int</span> suffixId)</span></span>&#123;</span><br><span class=\"line\">       FragmentTab fragment=<span class=\"keyword\">new</span> FragmentTab();</span><br><span class=\"line\">       Bundle bundle=<span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">       bundle.putInt(Constant.LIST_ACTIVITY_NAV_TITLE,titleId);</span><br><span class=\"line\">       bundle.putInt(Constant.LIST_ACTIVITY_NAV_SUFFIX,suffixId);</span><br><span class=\"line\">       fragment.setArguments(bundle);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何设置夜间模式\"><a href=\"#如何设置夜间模式\" class=\"headerlink\" title=\"如何设置夜间模式\"></a>如何设置夜间模式</h2><h2 id=\"如何进行数据缓存\"><a href=\"#如何进行数据缓存\" class=\"headerlink\" title=\"如何进行数据缓存\"></a>如何进行数据缓存</h2><p>关于图片的缓存, Glide库已经完成</p>\n<p>其它内容的缓存使用的是序列化来完成的. 加了缓存后, 就要注意从网络中获得数据之后如何处理这些缓存的数据. 我目前选择的方法是, 一旦从网络中获取到新的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Context context, String filename,Object list)</span></span>&#123;</span><br><span class=\"line\">    FileOutputStream out=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ObjectOutputStream writer=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        out=context.openFileOutput(filename, Context.MODE_PRIVATE);</span><br><span class=\"line\">        writer=<span class=\"keyword\">new</span> ObjectOutputStream(out);</span><br><span class=\"line\">        writer.writeObject(list);</span><br><span class=\"line\">        Log.i(TAG.CACHE_UTIL,<span class=\"string\">\"cache list\"</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        Log.i(TAG.CACHE_UTIL,e.toString());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        Log.i(TAG.CACHE_UTIL,e.toString());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(writer!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">load</span><span class=\"params\">(Context context,String filename)</span></span>&#123;</span><br><span class=\"line\">    FileInputStream in=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ObjectInputStream reader=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Object res=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        in=context.openFileInput(filename);</span><br><span class=\"line\">        reader=<span class=\"keyword\">new</span> ObjectInputStream(in);</span><br><span class=\"line\">        res=reader.readObject();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reader!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                reader.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"author":"ivyxjc","date":"2016-10-23T16:00:00.000Z","title":"mysql基本命令","keywords":null,"description":"mysql基本命令","toc":true,"_content":"\n\n`select count(column_name) from table_name;` 计数\n\n`UPDATE movie_name SET flag='1' WHERE movie_id=214143` 更新\n``\n","source":"_posts/database/2016-11-06-mysql_basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-24\ntitle: mysql基本命令\ncategory: database\ntags: [database]\nkeywords:\ndescription: mysql基本命令\ntoc: true\n---\n\n\n`select count(column_name) from table_name;` 计数\n\n`UPDATE movie_name SET flag='1' WHERE movie_id=214143` 更新\n``\n","slug":"database/2016-11-06-mysql_basic","published":1,"updated":"2018-08-09T10:10:11.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf74000a28t1fuioqdbd","content":"<p><code>select count(column_name) from table_name;</code> 计数</p>\n<p><code>UPDATE movie_name SET flag=&#39;1&#39; WHERE movie_id=214143</code> 更新<br>``</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>select count(column_name) from table_name;</code> 计数</p>\n<p><code>UPDATE movie_name SET flag=&#39;1&#39; WHERE movie_id=214143</code> 更新<br>``</p>\n"},{"author":"ivyxjc","date":"2016-10-23T16:00:00.000Z","title":"面向对象六大原则(上)","keywords":null,"description":"设计模式中的六大原则：单一职责原则, 里氏替换原则, 依赖倒置原则","toc":true,"_content":"\n## 单一职责原则\n\n单一职责原则(Single Responsibility Principle,SRP)简而言之就是对于一个类或者接口, 引起其改变的应该只能有一个原因. 比如要将负责属性和行为的类分开.\n\n\n## 里氏替换原则\n\n定义：所有引用基类的地方必须能透明地使用其子类的对象. 只要父类出现的地方, 子类就可以出现, 而且替换为子类不会产生任何错误或者一场. 但是反过来不一定可行.\n\n\n\n\n1. 子类中可以增加自己特有的方法。\n2. 当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。\n3. 当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。\n\n### 前置条件\n\n当子类的方法**重载**父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。\n\n```java\nclass Father {\n\n    public Collection doSomething(HashMap map){\n        StdOut.println(\"父类被执行...\");\n        return map.values();\n    }\n}\n\nclass Son extends Father{\n\n    public Collection doSomething(Map map) {\n        StdOut.println(\"子类被执行\");\n        return map.values();\n    }\n}\n```\n\n子类方法和父类方法, 方法名相同, 返回类型相同, 但是参数不同, 所以不是Override, 而是Overload. 在这种情况下, 如果传入`HashMap`, 子类的`doSomething()`不会被执行.\n这是**正确**的, 因为子类并没有重写父类方法, 而是重载父类方法, 所以如果父类的前置条件(形参) 范围宽于子类则不正确.\n\n\n```java\npublic static void main(String[] args){\n    Father f=new Father();\n    HashMap map=new HashMap();\n    f.doSomething(map);\n}\n\n父类被执行\n```\n\n```java\npublic static void main(String[] args){\n    //父类出现的地方都可以被子类代替, 且不会改变逻辑\n    Son f=new Son();\n    HashMap map=new HashMap();\n    f.doSomething(map);\n}\n\n父类被执行\n```\n\n```java\npublic static void main(String[] args){\n   //子类出现的地方, 父类不一定可以代替\n    Son f=new Son();\n    Map map=new HashMap();\n    f.doSomething(map);\n}\n\n子类被执行\n```\n\n\n\n\n```java\nclass Father {\n\n    public Collection doSomething(Map map){\n        StdOut.println(\"父类被执行...\");\n        return map.values();\n    }\n}\n\nclass Son extends Father{\n\n    public Collection doSomething(HashMap map) {\n        StdOut.println(\"子类被执行\");\n        return map.values();\n    }\n}\n```\n\n\n```java\npublic static void main(String[] args){\n    Father f=new Father();\n    HashMap map=new HashMap();\n    f.doSomething(map);\n}\n\n父类被执行\n```\n\n```java\npublic static void main(String[] args){\n    //父类出现的地方都可以用子类代替\n    Son f=new Son();\n    HashMap map=new HashMap();\n    f.doSomething(map);\n}\n\n子类被执行\n```\n\n可以注意到, 此时子类方法被执行了, 而子类并没有重写父类的相应的方法, 而是重载了父类的方法.\n\n```java\npublic static void main(String[] args){\n    Son f=new Son();\n    Map map=new HashMap();\n    f.doSomething(map);\n}\n\n父类被执行\n```\n\n### 后置条件\n\n当子类的方法实现或覆写父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格或相同。\n\n\n### 注意点\n\n1. 在类中调用其他类时务必使用其父类或者接口, 如果不能使用父类或者接口, 则说明类的设计已经违背了LSP原则.\n2. 如果子类不能完整地实现父类的方法, 或者父类的一些方法在子类中完全和父类业务逻辑不同, 则建议不使用继承关系, 而是用依赖, 聚集, 组合等关系代替.\n\n\n## 依赖倒置原则\n\nDependence Inversion Principle\n\n1. 高层模块不应该依赖低层模块\n2. 抽象不应该依赖细节\n3. 细节应依赖抽象\n\n|||\n|--|--|\n|高层模块|原子逻辑再组装就是高层模块|\n|低层模块|每一个逻辑的实现都由院子逻辑组成,不分割的原子逻辑就是低层模块|\n\n对于Java来说.\n\n1. 模块间的依赖通过抽象产生,实现类之间不发生直接依赖关系, 其依赖关系是通过接口或者抽象类产生的\n2. 接口或这抽象类不依赖于实现类\n3. 实现类依赖接口或抽象类\n\n这样也有利于并行开发, 即使只完成了一部分工作, 仍可以进行单元测试.\n\n这也符合现代开发的流程, 先写好单元测试类, 再写实现类.\n\n### 规则\n\n1. 每个类尽量都有接口或抽象类, 或者抽象类和接口都具备\n2. 变量的表面类型尽量是接口或者是抽象类(如果使用类的clone方法, 就必须使用实现类)\n3. 任何类都不应该从具体类中派生(如果实在需要继承自具体类, 尽量不要超过两层的继承)\n4. 尽量不要覆写基类的方法\n\n\n总体而言, 依赖倒置原则是六大原则中最难实现的, 也是实现开闭原则的重要途径. 总体而言, 把握住*面向接口编程*即可.\n","source":"_posts/design_pattern/2016-10-24-basic-principle_1.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-24\ntitle: 面向对象六大原则(上)\ncategory: OO\ntags: [设计模式]\nkeywords:\ndescription: 设计模式中的六大原则：单一职责原则, 里氏替换原则, 依赖倒置原则\ntoc: true\n---\n\n## 单一职责原则\n\n单一职责原则(Single Responsibility Principle,SRP)简而言之就是对于一个类或者接口, 引起其改变的应该只能有一个原因. 比如要将负责属性和行为的类分开.\n\n\n## 里氏替换原则\n\n定义：所有引用基类的地方必须能透明地使用其子类的对象. 只要父类出现的地方, 子类就可以出现, 而且替换为子类不会产生任何错误或者一场. 但是反过来不一定可行.\n\n\n\n\n1. 子类中可以增加自己特有的方法。\n2. 当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。\n3. 当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。\n\n### 前置条件\n\n当子类的方法**重载**父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。\n\n```java\nclass Father {\n\n    public Collection doSomething(HashMap map){\n        StdOut.println(\"父类被执行...\");\n        return map.values();\n    }\n}\n\nclass Son extends Father{\n\n    public Collection doSomething(Map map) {\n        StdOut.println(\"子类被执行\");\n        return map.values();\n    }\n}\n```\n\n子类方法和父类方法, 方法名相同, 返回类型相同, 但是参数不同, 所以不是Override, 而是Overload. 在这种情况下, 如果传入`HashMap`, 子类的`doSomething()`不会被执行.\n这是**正确**的, 因为子类并没有重写父类方法, 而是重载父类方法, 所以如果父类的前置条件(形参) 范围宽于子类则不正确.\n\n\n```java\npublic static void main(String[] args){\n    Father f=new Father();\n    HashMap map=new HashMap();\n    f.doSomething(map);\n}\n\n父类被执行\n```\n\n```java\npublic static void main(String[] args){\n    //父类出现的地方都可以被子类代替, 且不会改变逻辑\n    Son f=new Son();\n    HashMap map=new HashMap();\n    f.doSomething(map);\n}\n\n父类被执行\n```\n\n```java\npublic static void main(String[] args){\n   //子类出现的地方, 父类不一定可以代替\n    Son f=new Son();\n    Map map=new HashMap();\n    f.doSomething(map);\n}\n\n子类被执行\n```\n\n\n\n\n```java\nclass Father {\n\n    public Collection doSomething(Map map){\n        StdOut.println(\"父类被执行...\");\n        return map.values();\n    }\n}\n\nclass Son extends Father{\n\n    public Collection doSomething(HashMap map) {\n        StdOut.println(\"子类被执行\");\n        return map.values();\n    }\n}\n```\n\n\n```java\npublic static void main(String[] args){\n    Father f=new Father();\n    HashMap map=new HashMap();\n    f.doSomething(map);\n}\n\n父类被执行\n```\n\n```java\npublic static void main(String[] args){\n    //父类出现的地方都可以用子类代替\n    Son f=new Son();\n    HashMap map=new HashMap();\n    f.doSomething(map);\n}\n\n子类被执行\n```\n\n可以注意到, 此时子类方法被执行了, 而子类并没有重写父类的相应的方法, 而是重载了父类的方法.\n\n```java\npublic static void main(String[] args){\n    Son f=new Son();\n    Map map=new HashMap();\n    f.doSomething(map);\n}\n\n父类被执行\n```\n\n### 后置条件\n\n当子类的方法实现或覆写父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格或相同。\n\n\n### 注意点\n\n1. 在类中调用其他类时务必使用其父类或者接口, 如果不能使用父类或者接口, 则说明类的设计已经违背了LSP原则.\n2. 如果子类不能完整地实现父类的方法, 或者父类的一些方法在子类中完全和父类业务逻辑不同, 则建议不使用继承关系, 而是用依赖, 聚集, 组合等关系代替.\n\n\n## 依赖倒置原则\n\nDependence Inversion Principle\n\n1. 高层模块不应该依赖低层模块\n2. 抽象不应该依赖细节\n3. 细节应依赖抽象\n\n|||\n|--|--|\n|高层模块|原子逻辑再组装就是高层模块|\n|低层模块|每一个逻辑的实现都由院子逻辑组成,不分割的原子逻辑就是低层模块|\n\n对于Java来说.\n\n1. 模块间的依赖通过抽象产生,实现类之间不发生直接依赖关系, 其依赖关系是通过接口或者抽象类产生的\n2. 接口或这抽象类不依赖于实现类\n3. 实现类依赖接口或抽象类\n\n这样也有利于并行开发, 即使只完成了一部分工作, 仍可以进行单元测试.\n\n这也符合现代开发的流程, 先写好单元测试类, 再写实现类.\n\n### 规则\n\n1. 每个类尽量都有接口或抽象类, 或者抽象类和接口都具备\n2. 变量的表面类型尽量是接口或者是抽象类(如果使用类的clone方法, 就必须使用实现类)\n3. 任何类都不应该从具体类中派生(如果实在需要继承自具体类, 尽量不要超过两层的继承)\n4. 尽量不要覆写基类的方法\n\n\n总体而言, 依赖倒置原则是六大原则中最难实现的, 也是实现开闭原则的重要途径. 总体而言, 把握住*面向接口编程*即可.\n","slug":"design_pattern/2016-10-24-basic-principle_1","published":1,"updated":"2018-08-09T10:10:11.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf75000b28t175yd11dc","content":"<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p>单一职责原则(Single Responsibility Principle,SRP)简而言之就是对于一个类或者接口, 引起其改变的应该只能有一个原因. 比如要将负责属性和行为的类分开.</p>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p>定义：所有引用基类的地方必须能透明地使用其子类的对象. 只要父类出现的地方, 子类就可以出现, 而且替换为子类不会产生任何错误或者一场. 但是反过来不一定可行.</p>\n<ol>\n<li>子类中可以增加自己特有的方法。</li>\n<li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</li>\n<li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li>\n</ol>\n<h3 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h3><p>当子类的方法<strong>重载</strong>父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Collection <span class=\"title\">doSomething</span><span class=\"params\">(HashMap map)</span></span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"父类被执行...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.values();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Collection <span class=\"title\">doSomething</span><span class=\"params\">(Map map)</span> </span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"子类被执行\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.values();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>子类方法和父类方法, 方法名相同, 返回类型相同, 但是参数不同, 所以不是Override, 而是Overload. 在这种情况下, 如果传入<code>HashMap</code>, 子类的<code>doSomething()</code>不会被执行.<br>这是<strong>正确</strong>的, 因为子类并没有重写父类方法, 而是重载父类方法, 所以如果父类的前置条件(形参) 范围宽于子类则不正确.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Father f=<span class=\"keyword\">new</span> Father();</span><br><span class=\"line\">    HashMap map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">父类被执行</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//父类出现的地方都可以被子类代替, 且不会改变逻辑</span></span><br><span class=\"line\">    Son f=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    HashMap map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">父类被执行</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//子类出现的地方, 父类不一定可以代替</span></span><br><span class=\"line\">    Son f=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    Map map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">子类被执行</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Collection <span class=\"title\">doSomething</span><span class=\"params\">(Map map)</span></span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"父类被执行...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.values();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Collection <span class=\"title\">doSomething</span><span class=\"params\">(HashMap map)</span> </span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"子类被执行\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.values();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Father f=<span class=\"keyword\">new</span> Father();</span><br><span class=\"line\">    HashMap map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">父类被执行</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//父类出现的地方都可以用子类代替</span></span><br><span class=\"line\">    Son f=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    HashMap map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">子类被执行</span><br></pre></td></tr></table></figure>\n\n<p>可以注意到, 此时子类方法被执行了, 而子类并没有重写父类的相应的方法, 而是重载了父类的方法.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Son f=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    Map map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">父类被执行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后置条件\"><a href=\"#后置条件\" class=\"headerlink\" title=\"后置条件\"></a>后置条件</h3><p>当子类的方法实现或覆写父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格或相同。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ol>\n<li>在类中调用其他类时务必使用其父类或者接口, 如果不能使用父类或者接口, 则说明类的设计已经违背了LSP原则.</li>\n<li>如果子类不能完整地实现父类的方法, 或者父类的一些方法在子类中完全和父类业务逻辑不同, 则建议不使用继承关系, 而是用依赖, 聚集, 组合等关系代替.</li>\n</ol>\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><p>Dependence Inversion Principle</p>\n<ol>\n<li>高层模块不应该依赖低层模块</li>\n<li>抽象不应该依赖细节</li>\n<li>细节应依赖抽象</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>高层模块</td>\n<td>原子逻辑再组装就是高层模块</td>\n</tr>\n<tr>\n<td>低层模块</td>\n<td>每一个逻辑的实现都由院子逻辑组成,不分割的原子逻辑就是低层模块</td>\n</tr>\n</tbody></table>\n<p>对于Java来说.</p>\n<ol>\n<li>模块间的依赖通过抽象产生,实现类之间不发生直接依赖关系, 其依赖关系是通过接口或者抽象类产生的</li>\n<li>接口或这抽象类不依赖于实现类</li>\n<li>实现类依赖接口或抽象类</li>\n</ol>\n<p>这样也有利于并行开发, 即使只完成了一部分工作, 仍可以进行单元测试.</p>\n<p>这也符合现代开发的流程, 先写好单元测试类, 再写实现类.</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><ol>\n<li>每个类尽量都有接口或抽象类, 或者抽象类和接口都具备</li>\n<li>变量的表面类型尽量是接口或者是抽象类(如果使用类的clone方法, 就必须使用实现类)</li>\n<li>任何类都不应该从具体类中派生(如果实在需要继承自具体类, 尽量不要超过两层的继承)</li>\n<li>尽量不要覆写基类的方法</li>\n</ol>\n<p>总体而言, 依赖倒置原则是六大原则中最难实现的, 也是实现开闭原则的重要途径. 总体而言, 把握住<em>面向接口编程</em>即可.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p>单一职责原则(Single Responsibility Principle,SRP)简而言之就是对于一个类或者接口, 引起其改变的应该只能有一个原因. 比如要将负责属性和行为的类分开.</p>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p>定义：所有引用基类的地方必须能透明地使用其子类的对象. 只要父类出现的地方, 子类就可以出现, 而且替换为子类不会产生任何错误或者一场. 但是反过来不一定可行.</p>\n<ol>\n<li>子类中可以增加自己特有的方法。</li>\n<li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</li>\n<li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li>\n</ol>\n<h3 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h3><p>当子类的方法<strong>重载</strong>父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Collection <span class=\"title\">doSomething</span><span class=\"params\">(HashMap map)</span></span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"父类被执行...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.values();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Collection <span class=\"title\">doSomething</span><span class=\"params\">(Map map)</span> </span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"子类被执行\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.values();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>子类方法和父类方法, 方法名相同, 返回类型相同, 但是参数不同, 所以不是Override, 而是Overload. 在这种情况下, 如果传入<code>HashMap</code>, 子类的<code>doSomething()</code>不会被执行.<br>这是<strong>正确</strong>的, 因为子类并没有重写父类方法, 而是重载父类方法, 所以如果父类的前置条件(形参) 范围宽于子类则不正确.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Father f=<span class=\"keyword\">new</span> Father();</span><br><span class=\"line\">    HashMap map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">父类被执行</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//父类出现的地方都可以被子类代替, 且不会改变逻辑</span></span><br><span class=\"line\">    Son f=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    HashMap map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">父类被执行</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//子类出现的地方, 父类不一定可以代替</span></span><br><span class=\"line\">    Son f=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    Map map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">子类被执行</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Collection <span class=\"title\">doSomething</span><span class=\"params\">(Map map)</span></span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"父类被执行...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.values();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Collection <span class=\"title\">doSomething</span><span class=\"params\">(HashMap map)</span> </span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"子类被执行\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.values();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Father f=<span class=\"keyword\">new</span> Father();</span><br><span class=\"line\">    HashMap map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">父类被执行</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//父类出现的地方都可以用子类代替</span></span><br><span class=\"line\">    Son f=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    HashMap map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">子类被执行</span><br></pre></td></tr></table></figure>\n\n<p>可以注意到, 此时子类方法被执行了, 而子类并没有重写父类的相应的方法, 而是重载了父类的方法.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Son f=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">    Map map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    f.doSomething(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">父类被执行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后置条件\"><a href=\"#后置条件\" class=\"headerlink\" title=\"后置条件\"></a>后置条件</h3><p>当子类的方法实现或覆写父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格或相同。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ol>\n<li>在类中调用其他类时务必使用其父类或者接口, 如果不能使用父类或者接口, 则说明类的设计已经违背了LSP原则.</li>\n<li>如果子类不能完整地实现父类的方法, 或者父类的一些方法在子类中完全和父类业务逻辑不同, 则建议不使用继承关系, 而是用依赖, 聚集, 组合等关系代替.</li>\n</ol>\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><p>Dependence Inversion Principle</p>\n<ol>\n<li>高层模块不应该依赖低层模块</li>\n<li>抽象不应该依赖细节</li>\n<li>细节应依赖抽象</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>高层模块</td>\n<td>原子逻辑再组装就是高层模块</td>\n</tr>\n<tr>\n<td>低层模块</td>\n<td>每一个逻辑的实现都由院子逻辑组成,不分割的原子逻辑就是低层模块</td>\n</tr>\n</tbody></table>\n<p>对于Java来说.</p>\n<ol>\n<li>模块间的依赖通过抽象产生,实现类之间不发生直接依赖关系, 其依赖关系是通过接口或者抽象类产生的</li>\n<li>接口或这抽象类不依赖于实现类</li>\n<li>实现类依赖接口或抽象类</li>\n</ol>\n<p>这样也有利于并行开发, 即使只完成了一部分工作, 仍可以进行单元测试.</p>\n<p>这也符合现代开发的流程, 先写好单元测试类, 再写实现类.</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><ol>\n<li>每个类尽量都有接口或抽象类, 或者抽象类和接口都具备</li>\n<li>变量的表面类型尽量是接口或者是抽象类(如果使用类的clone方法, 就必须使用实现类)</li>\n<li>任何类都不应该从具体类中派生(如果实在需要继承自具体类, 尽量不要超过两层的继承)</li>\n<li>尽量不要覆写基类的方法</li>\n</ol>\n<p>总体而言, 依赖倒置原则是六大原则中最难实现的, 也是实现开闭原则的重要途径. 总体而言, 把握住<em>面向接口编程</em>即可.</p>\n"},{"author":"ivyxjc","date":"2016-10-23T16:00:00.000Z","title":"面向对象六大原则(下)","keywords":null,"description":"设计模式中的六大原则：接口隔离原则, 迪米特法则, 开闭原则","toc":true,"_content":"\n## 接口隔离原则\nInterface Segregation Principles(ISP)\n\n1. 客户端不应该依赖它不需要的接口\n2. 类似的依赖关系应该建立在最小的接口上\n\n接口应该细化, 不要使用过于臃肿的接口. 客户端需要什么接口就提供什么接口, 将不需要的接口剔除掉.\n不要将太多的方法放在同一个接口之中.\n\n但是接口设计也要有度, 不可过度设计, 这个度往往根据经验和常识判断.\n\n## 迪米特法则\n\nLaw of Demeter(LOD) , 最少知识原则(Least Knowledge Principle))\n\n一个对象应该对其它对象有最少的了解, 另一个解释是只与直接的朋友通信.\n\n```\n朋友类: 出现在成员变量, 方法的输入输出参数中的类称为成员朋友类, 而出现在方法体内部的类不属于朋友类\n```\n\n## 开闭原则\n\nOpen Close Principle(OCP)\n\n一个软件实体如类, 模块和函数等应该对扩展开放, 对修改关闭.\n\n### 实例\n```java\ninterface IBook{\n\n    public String getName();\n\n    public int getPrice();\n\n    public String getAuthor();\n}\n\nclass NovelBook implements IBook{\n    private String name;\n    private int price;\n    private String author;\n\n    public NovelBook(String name, int price, String author){\n        this.name=name;\n        this.price=price;\n        this.author=author;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getPrice() {\n        return price;\n    }\n\n    @Override\n    public String getAuthor() {\n        return author;\n    }\n}\n```\n\n如果将来要搞打折, 一般可能会用以下两个方法来解决:\n\n1. 在接口中添加`getOffPrice()`方法. 但是这需要对每一个实现`IBook`接口的实现类都添加该方法, 工作繁琐. 且接口应该是稳定且可靠的, 不应该经常发生变化.\n2. 修改实现类, 直接在`getPrice()`中实现打折处理, 但是如果仍需要知道原价是多少, 就会出问题.\n3. 通过扩展实现\n\n添加一个子类\n\n```java\nclass OffNovelBook extends NovelBook{\n\n    public OffNovelBook(String name,int price, String author){\n        super(name,price,author);\n    }\n\n    @Override\n    public int getPrice(){\n        int selfPrice=super.getPrice();\n        int offPrice=selfPrice*90/100;\n        return offPrice;\n    }\n}\n```\n\n![](http://oezmbgg4j.bkt.clouddn.com/ocp_.jpg)\n","source":"_posts/design_pattern/2016-10-24-basic-principle_2.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-24\ntitle: 面向对象六大原则(下)\ncategory: OO\ntags: [设计模式]\nkeywords:\ndescription: 设计模式中的六大原则：接口隔离原则, 迪米特法则, 开闭原则\ntoc: true\n---\n\n## 接口隔离原则\nInterface Segregation Principles(ISP)\n\n1. 客户端不应该依赖它不需要的接口\n2. 类似的依赖关系应该建立在最小的接口上\n\n接口应该细化, 不要使用过于臃肿的接口. 客户端需要什么接口就提供什么接口, 将不需要的接口剔除掉.\n不要将太多的方法放在同一个接口之中.\n\n但是接口设计也要有度, 不可过度设计, 这个度往往根据经验和常识判断.\n\n## 迪米特法则\n\nLaw of Demeter(LOD) , 最少知识原则(Least Knowledge Principle))\n\n一个对象应该对其它对象有最少的了解, 另一个解释是只与直接的朋友通信.\n\n```\n朋友类: 出现在成员变量, 方法的输入输出参数中的类称为成员朋友类, 而出现在方法体内部的类不属于朋友类\n```\n\n## 开闭原则\n\nOpen Close Principle(OCP)\n\n一个软件实体如类, 模块和函数等应该对扩展开放, 对修改关闭.\n\n### 实例\n```java\ninterface IBook{\n\n    public String getName();\n\n    public int getPrice();\n\n    public String getAuthor();\n}\n\nclass NovelBook implements IBook{\n    private String name;\n    private int price;\n    private String author;\n\n    public NovelBook(String name, int price, String author){\n        this.name=name;\n        this.price=price;\n        this.author=author;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getPrice() {\n        return price;\n    }\n\n    @Override\n    public String getAuthor() {\n        return author;\n    }\n}\n```\n\n如果将来要搞打折, 一般可能会用以下两个方法来解决:\n\n1. 在接口中添加`getOffPrice()`方法. 但是这需要对每一个实现`IBook`接口的实现类都添加该方法, 工作繁琐. 且接口应该是稳定且可靠的, 不应该经常发生变化.\n2. 修改实现类, 直接在`getPrice()`中实现打折处理, 但是如果仍需要知道原价是多少, 就会出问题.\n3. 通过扩展实现\n\n添加一个子类\n\n```java\nclass OffNovelBook extends NovelBook{\n\n    public OffNovelBook(String name,int price, String author){\n        super(name,price,author);\n    }\n\n    @Override\n    public int getPrice(){\n        int selfPrice=super.getPrice();\n        int offPrice=selfPrice*90/100;\n        return offPrice;\n    }\n}\n```\n\n![](http://oezmbgg4j.bkt.clouddn.com/ocp_.jpg)\n","slug":"design_pattern/2016-10-24-basic-principle_2","published":1,"updated":"2018-08-09T10:10:11.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf76000c28t1lxv3wxqv","content":"<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><p>Interface Segregation Principles(ISP)</p>\n<ol>\n<li>客户端不应该依赖它不需要的接口</li>\n<li>类似的依赖关系应该建立在最小的接口上</li>\n</ol>\n<p>接口应该细化, 不要使用过于臃肿的接口. 客户端需要什么接口就提供什么接口, 将不需要的接口剔除掉.<br>不要将太多的方法放在同一个接口之中.</p>\n<p>但是接口设计也要有度, 不可过度设计, 这个度往往根据经验和常识判断.</p>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p>Law of Demeter(LOD) , 最少知识原则(Least Knowledge Principle))</p>\n<p>一个对象应该对其它对象有最少的了解, 另一个解释是只与直接的朋友通信.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">朋友类: 出现在成员变量, 方法的输入输出参数中的类称为成员朋友类, 而出现在方法体内部的类不属于朋友类</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><p>Open Close Principle(OCP)</p>\n<p>一个软件实体如类, 模块和函数等应该对扩展开放, 对修改关闭.</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBook</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAuthor</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NovelBook</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBook</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> price;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String author;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NovelBook</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> price, String author)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price=price;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.author=author;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAuthor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> author;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果将来要搞打折, 一般可能会用以下两个方法来解决:</p>\n<ol>\n<li>在接口中添加<code>getOffPrice()</code>方法. 但是这需要对每一个实现<code>IBook</code>接口的实现类都添加该方法, 工作繁琐. 且接口应该是稳定且可靠的, 不应该经常发生变化.</li>\n<li>修改实现类, 直接在<code>getPrice()</code>中实现打折处理, 但是如果仍需要知道原价是多少, 就会出问题.</li>\n<li>通过扩展实现</li>\n</ol>\n<p>添加一个子类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OffNovelBook</span> <span class=\"keyword\">extends</span> <span class=\"title\">NovelBook</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OffNovelBook</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> price, String author)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name,price,author);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> selfPrice=<span class=\"keyword\">super</span>.getPrice();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> offPrice=selfPrice*<span class=\"number\">90</span>/<span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> offPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/ocp_.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><p>Interface Segregation Principles(ISP)</p>\n<ol>\n<li>客户端不应该依赖它不需要的接口</li>\n<li>类似的依赖关系应该建立在最小的接口上</li>\n</ol>\n<p>接口应该细化, 不要使用过于臃肿的接口. 客户端需要什么接口就提供什么接口, 将不需要的接口剔除掉.<br>不要将太多的方法放在同一个接口之中.</p>\n<p>但是接口设计也要有度, 不可过度设计, 这个度往往根据经验和常识判断.</p>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p>Law of Demeter(LOD) , 最少知识原则(Least Knowledge Principle))</p>\n<p>一个对象应该对其它对象有最少的了解, 另一个解释是只与直接的朋友通信.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">朋友类: 出现在成员变量, 方法的输入输出参数中的类称为成员朋友类, 而出现在方法体内部的类不属于朋友类</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><p>Open Close Principle(OCP)</p>\n<p>一个软件实体如类, 模块和函数等应该对扩展开放, 对修改关闭.</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBook</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAuthor</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NovelBook</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBook</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> price;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String author;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NovelBook</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> price, String author)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price=price;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.author=author;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAuthor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> author;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果将来要搞打折, 一般可能会用以下两个方法来解决:</p>\n<ol>\n<li>在接口中添加<code>getOffPrice()</code>方法. 但是这需要对每一个实现<code>IBook</code>接口的实现类都添加该方法, 工作繁琐. 且接口应该是稳定且可靠的, 不应该经常发生变化.</li>\n<li>修改实现类, 直接在<code>getPrice()</code>中实现打折处理, 但是如果仍需要知道原价是多少, 就会出问题.</li>\n<li>通过扩展实现</li>\n</ol>\n<p>添加一个子类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OffNovelBook</span> <span class=\"keyword\">extends</span> <span class=\"title\">NovelBook</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OffNovelBook</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> price, String author)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name,price,author);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> selfPrice=<span class=\"keyword\">super</span>.getPrice();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> offPrice=selfPrice*<span class=\"number\">90</span>/<span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> offPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/ocp_.jpg\" alt></p>\n"},{"author":"ivyxjc","date":"2016-10-24T16:00:00.000Z","title":"工厂方法模式","keywords":null,"description":"设计模式中的工厂方法模式","toc":true,"_content":"\n## 工厂方法的通用源码\n\n### 抽象产品类\n\n```java\npublic abstract class Product{\n  public void method(){\n\n  }\n  public abstract void method2();\n}\n```\n### 具体产品类\n```java\npublic class ConcreteProduct1 extends Product{\n  public void method2(){\n\n  }\n}\n\npublic class ConcreteProduct2 extends Product{\n  public void method2(){\n\n  }\n}\n```\n\n### 抽象工厂类\n\n```java\npublic abstract class Creator{\n  public abstract <T extends Product> T createProduct(Class<T> c);\n}\n```\n\n### 具体工厂类\n\n```java\npublic class ConcreteCreator extends Creator{\n  public <T extends Product> T createProduct(Class<T> c){\n    Product product=null;\n    try{\n      product=(Product)Class.forName(c.getName()).newInstance();\n    }catch(Exception e){\n      ....\n    }\n    return (T)product;\n  }\n}\n\n```\n\n##  简单工厂模式\n\n简单工厂模式去掉了抽象工厂类, 并且`createProduct()`方法添加了`static`. 该模式调用过程更为简单, 方便理解. 但是扩展较为困难, 不符合开闭原则.\n\n## 多工厂模式\n\n## 利用工厂模式生成单例\n\n\n```java\nclass Singleton{\n    private Singleton(){}\n    public void doSomething(){}\n}\npublic class FactorySingle {\n    private static Singleton sSingleton;\n\n    static {\n        try{\n            Class cl=Class.forName(Singleton.class.getName());\n            Constructor constructor=cl.getDeclaredConstructor();\n            constructor.setAccessible(true);\n            sSingleton=(Singleton)constructor.newInstance();\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    public static Singleton getSingleton(){\n        return sSingleton;\n    }\n}\n```\n\n## 抽象工厂模式\n\n为创建一组相关或者是相互依赖的对象提供一个接口, 而不需要制定它们的具体类.\n","source":"_posts/design_pattern/2016-10-25-factory-pattern.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-25\ntitle: 工厂方法模式\ncategory: OO\ntags: [设计模式]\nkeywords:\ndescription: 设计模式中的工厂方法模式\ntoc: true\n---\n\n## 工厂方法的通用源码\n\n### 抽象产品类\n\n```java\npublic abstract class Product{\n  public void method(){\n\n  }\n  public abstract void method2();\n}\n```\n### 具体产品类\n```java\npublic class ConcreteProduct1 extends Product{\n  public void method2(){\n\n  }\n}\n\npublic class ConcreteProduct2 extends Product{\n  public void method2(){\n\n  }\n}\n```\n\n### 抽象工厂类\n\n```java\npublic abstract class Creator{\n  public abstract <T extends Product> T createProduct(Class<T> c);\n}\n```\n\n### 具体工厂类\n\n```java\npublic class ConcreteCreator extends Creator{\n  public <T extends Product> T createProduct(Class<T> c){\n    Product product=null;\n    try{\n      product=(Product)Class.forName(c.getName()).newInstance();\n    }catch(Exception e){\n      ....\n    }\n    return (T)product;\n  }\n}\n\n```\n\n##  简单工厂模式\n\n简单工厂模式去掉了抽象工厂类, 并且`createProduct()`方法添加了`static`. 该模式调用过程更为简单, 方便理解. 但是扩展较为困难, 不符合开闭原则.\n\n## 多工厂模式\n\n## 利用工厂模式生成单例\n\n\n```java\nclass Singleton{\n    private Singleton(){}\n    public void doSomething(){}\n}\npublic class FactorySingle {\n    private static Singleton sSingleton;\n\n    static {\n        try{\n            Class cl=Class.forName(Singleton.class.getName());\n            Constructor constructor=cl.getDeclaredConstructor();\n            constructor.setAccessible(true);\n            sSingleton=(Singleton)constructor.newInstance();\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    public static Singleton getSingleton(){\n        return sSingleton;\n    }\n}\n```\n\n## 抽象工厂模式\n\n为创建一组相关或者是相互依赖的对象提供一个接口, 而不需要制定它们的具体类.\n","slug":"design_pattern/2016-10-25-factory-pattern","published":1,"updated":"2018-08-09T10:10:11.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf77000d28t1vav9vjo2","content":"<h2 id=\"工厂方法的通用源码\"><a href=\"#工厂方法的通用源码\" class=\"headerlink\" title=\"工厂方法的通用源码\"></a>工厂方法的通用源码</h2><h3 id=\"抽象产品类\"><a href=\"#抽象产品类\" class=\"headerlink\" title=\"抽象产品类\"></a>抽象产品类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具体产品类\"><a href=\"#具体产品类\" class=\"headerlink\" title=\"具体产品类\"></a>具体产品类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"抽象工厂类\"><a href=\"#抽象工厂类\" class=\"headerlink\" title=\"抽象工厂类\"></a>抽象工厂类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> &lt;T extends Product&gt; <span class=\"function\">T <span class=\"title\">createProduct</span><span class=\"params\">(Class&lt;T&gt; c)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具体工厂类\"><a href=\"#具体工厂类\" class=\"headerlink\" title=\"具体工厂类\"></a>具体工厂类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCreator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creator</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;T extends Product&gt; <span class=\"function\">T <span class=\"title\">createProduct</span><span class=\"params\">(Class&lt;T&gt; c)</span></span>&#123;</span><br><span class=\"line\">    Product product=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      product=(Product)Class.forName(c.getName()).newInstance();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">      ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T)product;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>简单工厂模式去掉了抽象工厂类, 并且<code>createProduct()</code>方法添加了<code>static</code>. 该模式调用过程更为简单, 方便理解. 但是扩展较为困难, 不符合开闭原则.</p>\n<h2 id=\"多工厂模式\"><a href=\"#多工厂模式\" class=\"headerlink\" title=\"多工厂模式\"></a>多工厂模式</h2><h2 id=\"利用工厂模式生成单例\"><a href=\"#利用工厂模式生成单例\" class=\"headerlink\" title=\"利用工厂模式生成单例\"></a>利用工厂模式生成单例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactorySingle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton sSingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Class cl=Class.forName(Singleton.class.getName());</span><br><span class=\"line\">            Constructor constructor=cl.getDeclaredConstructor();</span><br><span class=\"line\">            constructor.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            sSingleton=(Singleton)constructor.newInstance();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getSingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sSingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p>为创建一组相关或者是相互依赖的对象提供一个接口, 而不需要制定它们的具体类.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工厂方法的通用源码\"><a href=\"#工厂方法的通用源码\" class=\"headerlink\" title=\"工厂方法的通用源码\"></a>工厂方法的通用源码</h2><h3 id=\"抽象产品类\"><a href=\"#抽象产品类\" class=\"headerlink\" title=\"抽象产品类\"></a>抽象产品类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具体产品类\"><a href=\"#具体产品类\" class=\"headerlink\" title=\"具体产品类\"></a>具体产品类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"抽象工厂类\"><a href=\"#抽象工厂类\" class=\"headerlink\" title=\"抽象工厂类\"></a>抽象工厂类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> &lt;T extends Product&gt; <span class=\"function\">T <span class=\"title\">createProduct</span><span class=\"params\">(Class&lt;T&gt; c)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具体工厂类\"><a href=\"#具体工厂类\" class=\"headerlink\" title=\"具体工厂类\"></a>具体工厂类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCreator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creator</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;T extends Product&gt; <span class=\"function\">T <span class=\"title\">createProduct</span><span class=\"params\">(Class&lt;T&gt; c)</span></span>&#123;</span><br><span class=\"line\">    Product product=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      product=(Product)Class.forName(c.getName()).newInstance();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">      ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T)product;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>简单工厂模式去掉了抽象工厂类, 并且<code>createProduct()</code>方法添加了<code>static</code>. 该模式调用过程更为简单, 方便理解. 但是扩展较为困难, 不符合开闭原则.</p>\n<h2 id=\"多工厂模式\"><a href=\"#多工厂模式\" class=\"headerlink\" title=\"多工厂模式\"></a>多工厂模式</h2><h2 id=\"利用工厂模式生成单例\"><a href=\"#利用工厂模式生成单例\" class=\"headerlink\" title=\"利用工厂模式生成单例\"></a>利用工厂模式生成单例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactorySingle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton sSingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Class cl=Class.forName(Singleton.class.getName());</span><br><span class=\"line\">            Constructor constructor=cl.getDeclaredConstructor();</span><br><span class=\"line\">            constructor.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            sSingleton=(Singleton)constructor.newInstance();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getSingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sSingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p>为创建一组相关或者是相互依赖的对象提供一个接口, 而不需要制定它们的具体类.</p>\n"},{"author":"ivyxjc","date":"2016-10-24T16:00:00.000Z","title":"单例模式","keywords":null,"description":"设计模式中的单例模式","toc":true,"_content":"\n>In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects. The term comes from the mathematical concept of a singleton\n\n\n## 简介\n\n### 最基本的实例\n\n```java\npublic class Emperor {\n    private static final Emperor emperor=new Emperor();\n\n    private Emperor(){}\n\n    public static Emperor getInstance(){\n        return emperor;\n    }\n}\n```\n\nJava Language Specification 中规定了一个类只会被初始化一次.所以该方法是**线程安全**的, 但是其在方法调用前就初始化了, 比较浪费资源.\n\n### 优点\n\n1. 只有一个实例, 节约内存空间, 减少了系统的性能开销, 如果某一个对象的产生需要比较多的资源时, 可以在启动时直接产生一个单例对象, 使其永驻内存.\n2. 可以避免对资源的多重占用,\n3. 可以在系统设置全局的访问点, 优化和共享资源访问.\n\n### 缺点\n\n1. 单例模式一般没有接口, 扩展很困难, 除了修改代码基本上没有第二种途径可以实现\n2. 单例模式不利于测试, 如果单例模式没有完成, 无法进行测试\n3. 与单一职责原则相冲突.\n\n## 其它实现方式\n\n### 懒汉模式\n\n```java\nclass Singleton {\n    private static Singleton instance;\n\n    private Singleton(){}\n\n    public static synchronized Singleton getInstance(){\n        if(instance==null){\n            instance=new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n该实现只会在需要的时候才会进行初始化且是线程安全的, 但是每次调用`getInstance()`都会进行同步, 会浪费资源\n\n### Double Check Lock\n\n```java\nclass SingletonDCL{\n    private static SingletonDCL sInstance;\n\n    private SingletonDCL(){}\n\n    public static SingletonDCL getInstance(){\n        if(sInstance==null){\n            synchronized (SingletonDCL.class){\n                if(sInstance==null){\n                    sInstance=new SingletonDCL();\n                }\n            }\n        }\n\n        return sInstance;\n    }\n}\n```\n该实现只会在需要的时候才会进行初始化, 看似线程安全, 但实际并不是.\n\n假设线程A执行到`sInstance=new SingletonDCL()`, 这句代码并不是一个原子操作, 这句代码大致会被分为下面3个步骤来处理:\n1. 给SingletonDCL的实例分配内存\n2. 调用SingletonDCL的构造函数, 初始化成员字段\n3. 将sInstance对象指向分配的内存空间 (此时sInstance就不是null了).\n\n如果这句代码严格按照这个顺序执行,该DCL单例模式便是线程安全的, 但是事实并非如此. 原因是JVM并没有保证上述第2和第3步的执行顺序.\n也就是说执行步骤可能是1-3-2, 这种执行步骤就会出问题:\n\n\n当先执行第3步时, 另一个线程B开始执行`getInstance()`, 由于此时`sInstance`已经不是`null`了, 所以线程B会返回一个还未初始化的`sInstance`, 出现了错误.\n\nJVM1.5之后改善了这个问题, 在`sInstance`前加上`volatile`关键字可以确保线程安全.\n即`private static volatile SingletonDCL sInstance;`\n\n### 静态内部类单例模式\n\nDCL单例模式并不推荐使用,《Java并发编程实践》推荐使用下面这个方法:\n\n```java\nclass SingletonStatic{\n    private SingletonStatic(){}\n\n    public static SingletonStatic getInstance(){\n        return SingletonStaticHolder.sInstance;\n    }\n\n    private static class SingletonStaticHolder{\n        private static final SingletonStatic sInstance=new SingletonStatic();\n    }\n}\n```\n\n第一次加载时, 并不会初始化`sInstance`, 只在第一调用`getInstance()`时初始化, 且该方法是线程安全的.\n\n### 枚举单例\n\n```java\nenum SingletonEnum{\n    INSTACNE;\n    public void doSomething(){\n        StdOut.println(\"doSomething...\");\n    }\n}\n```\n\n枚举单例模式有以下3个优点:\n1. 线程安全, 任何时候都只有一个实例\n2. 反序列化时, 都只会有一个实例\n3. 可以防止反射攻击\n\n\n## 选择哪一种实现方式\n\n无论采用哪一种实现方式, 都要确保线程安全, 防止反序列化导致重新生成实例对象等一些问题. 具体选择哪一种实现方式取决于项目本身.\n\n## 关于序列化\n\n除了枚举单例, 为了避免单例对象在被反序列化时重新生成对象, 必须加入以下方法\n\n```java\nprivate Object readResolve() throws ObjectStreamException{\n    return sInstance;\n}\n```\n\n## 单例模式扩展\n\n如果生成对象的数量不受限制, 可以直接使用`new`. 如果只要有一个对象, 使用单例模式即可, 若需要且只需要两个或者三个对象, 则可以按照下面的方法:\n","source":"_posts/design_pattern/2016-10-25-singleton.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-25\ntitle: 单例模式\ncategory: OO\ntags: [设计模式]\nkeywords:\ndescription: 设计模式中的单例模式\ntoc: true\n---\n\n>In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects. The term comes from the mathematical concept of a singleton\n\n\n## 简介\n\n### 最基本的实例\n\n```java\npublic class Emperor {\n    private static final Emperor emperor=new Emperor();\n\n    private Emperor(){}\n\n    public static Emperor getInstance(){\n        return emperor;\n    }\n}\n```\n\nJava Language Specification 中规定了一个类只会被初始化一次.所以该方法是**线程安全**的, 但是其在方法调用前就初始化了, 比较浪费资源.\n\n### 优点\n\n1. 只有一个实例, 节约内存空间, 减少了系统的性能开销, 如果某一个对象的产生需要比较多的资源时, 可以在启动时直接产生一个单例对象, 使其永驻内存.\n2. 可以避免对资源的多重占用,\n3. 可以在系统设置全局的访问点, 优化和共享资源访问.\n\n### 缺点\n\n1. 单例模式一般没有接口, 扩展很困难, 除了修改代码基本上没有第二种途径可以实现\n2. 单例模式不利于测试, 如果单例模式没有完成, 无法进行测试\n3. 与单一职责原则相冲突.\n\n## 其它实现方式\n\n### 懒汉模式\n\n```java\nclass Singleton {\n    private static Singleton instance;\n\n    private Singleton(){}\n\n    public static synchronized Singleton getInstance(){\n        if(instance==null){\n            instance=new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n该实现只会在需要的时候才会进行初始化且是线程安全的, 但是每次调用`getInstance()`都会进行同步, 会浪费资源\n\n### Double Check Lock\n\n```java\nclass SingletonDCL{\n    private static SingletonDCL sInstance;\n\n    private SingletonDCL(){}\n\n    public static SingletonDCL getInstance(){\n        if(sInstance==null){\n            synchronized (SingletonDCL.class){\n                if(sInstance==null){\n                    sInstance=new SingletonDCL();\n                }\n            }\n        }\n\n        return sInstance;\n    }\n}\n```\n该实现只会在需要的时候才会进行初始化, 看似线程安全, 但实际并不是.\n\n假设线程A执行到`sInstance=new SingletonDCL()`, 这句代码并不是一个原子操作, 这句代码大致会被分为下面3个步骤来处理:\n1. 给SingletonDCL的实例分配内存\n2. 调用SingletonDCL的构造函数, 初始化成员字段\n3. 将sInstance对象指向分配的内存空间 (此时sInstance就不是null了).\n\n如果这句代码严格按照这个顺序执行,该DCL单例模式便是线程安全的, 但是事实并非如此. 原因是JVM并没有保证上述第2和第3步的执行顺序.\n也就是说执行步骤可能是1-3-2, 这种执行步骤就会出问题:\n\n\n当先执行第3步时, 另一个线程B开始执行`getInstance()`, 由于此时`sInstance`已经不是`null`了, 所以线程B会返回一个还未初始化的`sInstance`, 出现了错误.\n\nJVM1.5之后改善了这个问题, 在`sInstance`前加上`volatile`关键字可以确保线程安全.\n即`private static volatile SingletonDCL sInstance;`\n\n### 静态内部类单例模式\n\nDCL单例模式并不推荐使用,《Java并发编程实践》推荐使用下面这个方法:\n\n```java\nclass SingletonStatic{\n    private SingletonStatic(){}\n\n    public static SingletonStatic getInstance(){\n        return SingletonStaticHolder.sInstance;\n    }\n\n    private static class SingletonStaticHolder{\n        private static final SingletonStatic sInstance=new SingletonStatic();\n    }\n}\n```\n\n第一次加载时, 并不会初始化`sInstance`, 只在第一调用`getInstance()`时初始化, 且该方法是线程安全的.\n\n### 枚举单例\n\n```java\nenum SingletonEnum{\n    INSTACNE;\n    public void doSomething(){\n        StdOut.println(\"doSomething...\");\n    }\n}\n```\n\n枚举单例模式有以下3个优点:\n1. 线程安全, 任何时候都只有一个实例\n2. 反序列化时, 都只会有一个实例\n3. 可以防止反射攻击\n\n\n## 选择哪一种实现方式\n\n无论采用哪一种实现方式, 都要确保线程安全, 防止反序列化导致重新生成实例对象等一些问题. 具体选择哪一种实现方式取决于项目本身.\n\n## 关于序列化\n\n除了枚举单例, 为了避免单例对象在被反序列化时重新生成对象, 必须加入以下方法\n\n```java\nprivate Object readResolve() throws ObjectStreamException{\n    return sInstance;\n}\n```\n\n## 单例模式扩展\n\n如果生成对象的数量不受限制, 可以直接使用`new`. 如果只要有一个对象, 使用单例模式即可, 若需要且只需要两个或者三个对象, 则可以按照下面的方法:\n","slug":"design_pattern/2016-10-25-singleton","published":1,"updated":"2018-10-14T07:47:18.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf78000e28t11mje1kj7","content":"<blockquote>\n<p>In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects. The term comes from the mathematical concept of a singleton</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"最基本的实例\"><a href=\"#最基本的实例\" class=\"headerlink\" title=\"最基本的实例\"></a>最基本的实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emperor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Emperor emperor=<span class=\"keyword\">new</span> Emperor();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Emperor</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Emperor <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> emperor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Java Language Specification 中规定了一个类只会被初始化一次.所以该方法是<strong>线程安全</strong>的, 但是其在方法调用前就初始化了, 比较浪费资源.</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>只有一个实例, 节约内存空间, 减少了系统的性能开销, 如果某一个对象的产生需要比较多的资源时, 可以在启动时直接产生一个单例对象, 使其永驻内存.</li>\n<li>可以避免对资源的多重占用,</li>\n<li>可以在系统设置全局的访问点, 优化和共享资源访问.</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>单例模式一般没有接口, 扩展很困难, 除了修改代码基本上没有第二种途径可以实现</li>\n<li>单例模式不利于测试, 如果单例模式没有完成, 无法进行测试</li>\n<li>与单一职责原则相冲突.</li>\n</ol>\n<h2 id=\"其它实现方式\"><a href=\"#其它实现方式\" class=\"headerlink\" title=\"其它实现方式\"></a>其它实现方式</h2><h3 id=\"懒汉模式\"><a href=\"#懒汉模式\" class=\"headerlink\" title=\"懒汉模式\"></a>懒汉模式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instance=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该实现只会在需要的时候才会进行初始化且是线程安全的, 但是每次调用<code>getInstance()</code>都会进行同步, 会浪费资源</p>\n<h3 id=\"Double-Check-Lock\"><a href=\"#Double-Check-Lock\" class=\"headerlink\" title=\"Double Check Lock\"></a>Double Check Lock</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDCL</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDCL sInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDCL</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDCL <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sInstance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonDCL.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sInstance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    sInstance=<span class=\"keyword\">new</span> SingletonDCL();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该实现只会在需要的时候才会进行初始化, 看似线程安全, 但实际并不是.</p>\n<p>假设线程A执行到<code>sInstance=new SingletonDCL()</code>, 这句代码并不是一个原子操作, 这句代码大致会被分为下面3个步骤来处理:</p>\n<ol>\n<li>给SingletonDCL的实例分配内存</li>\n<li>调用SingletonDCL的构造函数, 初始化成员字段</li>\n<li>将sInstance对象指向分配的内存空间 (此时sInstance就不是null了).</li>\n</ol>\n<p>如果这句代码严格按照这个顺序执行,该DCL单例模式便是线程安全的, 但是事实并非如此. 原因是JVM并没有保证上述第2和第3步的执行顺序.<br>也就是说执行步骤可能是1-3-2, 这种执行步骤就会出问题:</p>\n<p>当先执行第3步时, 另一个线程B开始执行<code>getInstance()</code>, 由于此时<code>sInstance</code>已经不是<code>null</code>了, 所以线程B会返回一个还未初始化的<code>sInstance</code>, 出现了错误.</p>\n<p>JVM1.5之后改善了这个问题, 在<code>sInstance</code>前加上<code>volatile</code>关键字可以确保线程安全.<br>即<code>private static volatile SingletonDCL sInstance;</code></p>\n<h3 id=\"静态内部类单例模式\"><a href=\"#静态内部类单例模式\" class=\"headerlink\" title=\"静态内部类单例模式\"></a>静态内部类单例模式</h3><p>DCL单例模式并不推荐使用,《Java并发编程实践》推荐使用下面这个方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonStatic</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonStatic</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonStatic <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonStaticHolder.sInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonStaticHolder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonStatic sInstance=<span class=\"keyword\">new</span> SingletonStatic();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一次加载时, 并不会初始化<code>sInstance</code>, 只在第一调用<code>getInstance()</code>时初始化, 且该方法是线程安全的.</p>\n<h3 id=\"枚举单例\"><a href=\"#枚举单例\" class=\"headerlink\" title=\"枚举单例\"></a>枚举单例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> SingletonEnum&#123;</span><br><span class=\"line\">    INSTACNE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"doSomething...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举单例模式有以下3个优点:</p>\n<ol>\n<li>线程安全, 任何时候都只有一个实例</li>\n<li>反序列化时, 都只会有一个实例</li>\n<li>可以防止反射攻击</li>\n</ol>\n<h2 id=\"选择哪一种实现方式\"><a href=\"#选择哪一种实现方式\" class=\"headerlink\" title=\"选择哪一种实现方式\"></a>选择哪一种实现方式</h2><p>无论采用哪一种实现方式, 都要确保线程安全, 防止反序列化导致重新生成实例对象等一些问题. 具体选择哪一种实现方式取决于项目本身.</p>\n<h2 id=\"关于序列化\"><a href=\"#关于序列化\" class=\"headerlink\" title=\"关于序列化\"></a>关于序列化</h2><p>除了枚举单例, 为了避免单例对象在被反序列化时重新生成对象, 必须加入以下方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sInstance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单例模式扩展\"><a href=\"#单例模式扩展\" class=\"headerlink\" title=\"单例模式扩展\"></a>单例模式扩展</h2><p>如果生成对象的数量不受限制, 可以直接使用<code>new</code>. 如果只要有一个对象, 使用单例模式即可, 若需要且只需要两个或者三个对象, 则可以按照下面的方法:</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects. The term comes from the mathematical concept of a singleton</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"最基本的实例\"><a href=\"#最基本的实例\" class=\"headerlink\" title=\"最基本的实例\"></a>最基本的实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emperor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Emperor emperor=<span class=\"keyword\">new</span> Emperor();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Emperor</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Emperor <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> emperor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Java Language Specification 中规定了一个类只会被初始化一次.所以该方法是<strong>线程安全</strong>的, 但是其在方法调用前就初始化了, 比较浪费资源.</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>只有一个实例, 节约内存空间, 减少了系统的性能开销, 如果某一个对象的产生需要比较多的资源时, 可以在启动时直接产生一个单例对象, 使其永驻内存.</li>\n<li>可以避免对资源的多重占用,</li>\n<li>可以在系统设置全局的访问点, 优化和共享资源访问.</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>单例模式一般没有接口, 扩展很困难, 除了修改代码基本上没有第二种途径可以实现</li>\n<li>单例模式不利于测试, 如果单例模式没有完成, 无法进行测试</li>\n<li>与单一职责原则相冲突.</li>\n</ol>\n<h2 id=\"其它实现方式\"><a href=\"#其它实现方式\" class=\"headerlink\" title=\"其它实现方式\"></a>其它实现方式</h2><h3 id=\"懒汉模式\"><a href=\"#懒汉模式\" class=\"headerlink\" title=\"懒汉模式\"></a>懒汉模式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instance=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该实现只会在需要的时候才会进行初始化且是线程安全的, 但是每次调用<code>getInstance()</code>都会进行同步, 会浪费资源</p>\n<h3 id=\"Double-Check-Lock\"><a href=\"#Double-Check-Lock\" class=\"headerlink\" title=\"Double Check Lock\"></a>Double Check Lock</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDCL</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDCL sInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDCL</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDCL <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sInstance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonDCL.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sInstance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    sInstance=<span class=\"keyword\">new</span> SingletonDCL();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该实现只会在需要的时候才会进行初始化, 看似线程安全, 但实际并不是.</p>\n<p>假设线程A执行到<code>sInstance=new SingletonDCL()</code>, 这句代码并不是一个原子操作, 这句代码大致会被分为下面3个步骤来处理:</p>\n<ol>\n<li>给SingletonDCL的实例分配内存</li>\n<li>调用SingletonDCL的构造函数, 初始化成员字段</li>\n<li>将sInstance对象指向分配的内存空间 (此时sInstance就不是null了).</li>\n</ol>\n<p>如果这句代码严格按照这个顺序执行,该DCL单例模式便是线程安全的, 但是事实并非如此. 原因是JVM并没有保证上述第2和第3步的执行顺序.<br>也就是说执行步骤可能是1-3-2, 这种执行步骤就会出问题:</p>\n<p>当先执行第3步时, 另一个线程B开始执行<code>getInstance()</code>, 由于此时<code>sInstance</code>已经不是<code>null</code>了, 所以线程B会返回一个还未初始化的<code>sInstance</code>, 出现了错误.</p>\n<p>JVM1.5之后改善了这个问题, 在<code>sInstance</code>前加上<code>volatile</code>关键字可以确保线程安全.<br>即<code>private static volatile SingletonDCL sInstance;</code></p>\n<h3 id=\"静态内部类单例模式\"><a href=\"#静态内部类单例模式\" class=\"headerlink\" title=\"静态内部类单例模式\"></a>静态内部类单例模式</h3><p>DCL单例模式并不推荐使用,《Java并发编程实践》推荐使用下面这个方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonStatic</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonStatic</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonStatic <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonStaticHolder.sInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonStaticHolder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonStatic sInstance=<span class=\"keyword\">new</span> SingletonStatic();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一次加载时, 并不会初始化<code>sInstance</code>, 只在第一调用<code>getInstance()</code>时初始化, 且该方法是线程安全的.</p>\n<h3 id=\"枚举单例\"><a href=\"#枚举单例\" class=\"headerlink\" title=\"枚举单例\"></a>枚举单例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> SingletonEnum&#123;</span><br><span class=\"line\">    INSTACNE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"doSomething...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举单例模式有以下3个优点:</p>\n<ol>\n<li>线程安全, 任何时候都只有一个实例</li>\n<li>反序列化时, 都只会有一个实例</li>\n<li>可以防止反射攻击</li>\n</ol>\n<h2 id=\"选择哪一种实现方式\"><a href=\"#选择哪一种实现方式\" class=\"headerlink\" title=\"选择哪一种实现方式\"></a>选择哪一种实现方式</h2><p>无论采用哪一种实现方式, 都要确保线程安全, 防止反序列化导致重新生成实例对象等一些问题. 具体选择哪一种实现方式取决于项目本身.</p>\n<h2 id=\"关于序列化\"><a href=\"#关于序列化\" class=\"headerlink\" title=\"关于序列化\"></a>关于序列化</h2><p>除了枚举单例, 为了避免单例对象在被反序列化时重新生成对象, 必须加入以下方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sInstance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单例模式扩展\"><a href=\"#单例模式扩展\" class=\"headerlink\" title=\"单例模式扩展\"></a>单例模式扩展</h2><p>如果生成对象的数量不受限制, 可以直接使用<code>new</code>. 如果只要有一个对象, 使用单例模式即可, 若需要且只需要两个或者三个对象, 则可以按照下面的方法:</p>\n"},{"author":"ivyxjc","date":"2016-11-16T16:00:00.000Z","title":"Builder","keywords":null,"description":"创建者模式是为了将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示","toc":true,"_content":"\n\n## Builder模式的使用情景\n\n1. 相同的方法, 不同的执行顺序, 产生不同的事件结果\n2. 多个部件或零件, 都可以装配到一个对象中, 但是产生的运行结果又不相同\n3.  产品类比较复杂, 或者产品类中的调用顺序不同产生了不同的作用.\n4. 当初始化一个对象特别复杂, 如参数多, 且很多参数都具有默认值.\n\n## Builder模式的整体构造\n\n![](http://oezmbgg4j.bkt.clouddn.com/builder.jpg)\n\n\n\n### 产品类\n\n```java\nabstract class Computer {\n    protected String mBoard;\n    protected String mDisplay;\n    protected String mOS;\n\n    protected Computer(){\n\n    }\n\n    public void setBoard(String board){\n        mBoard=board;\n    }\n\n    public void setDisplay(String display){\n        mDisplay=display;\n    }\n\n    public abstract void setOS();\n\n    @Override\n    public String toString() {\n        return \"Computer [mBoard=\"+ mBoard+\", mDisplay=\"+mDisplay+\", mOS=\"+mOS+\"]\";\n    }\n}\n\n\nclass Macbook extends Computer{\n    protected Macbook(){\n\n    }\n    @Override\n    public void setOS() {\n        mOS=\"Mac OS X 10.10\";\n    }\n}\n\n```\n\n### Builder类\n\n```java\n//抽象Builder类\nabstract class Builder{\n\n    public abstract void buildBoard(String board);\n    public abstract void buildDispaly(String display);\n    public abstract void buildOS();\n    public abstract Computer create();\n}\n\n//具体Builder类\nclass MacbookBuilder extends Builder{\n\n    private Computer mComputer=new Macbook();\n\n    @Override\n    public void buildBoard(String board) {\n        mComputer.setBoard(board);\n    }\n\n    @Override\n    public void buildDispaly(String display) {\n        mComputer.setDisplay(display);\n    }\n\n    @Override\n    public void buildOS() {\n        mComputer.setOS();\n    }\n\n    @Override\n    public Computer create() {\n        return mComputer;\n    }\n}\n```\n\n### 导演类\n导演类起到封装的作用, 避免高层模块深入到建造者内部的实现类\n```java\nclass Direcotr{\n    Builder mBuilder=null;\n\n    public Direcotr(Builder builder){\n        mBuilder=builder;\n    }\n\n    public void construct(String board,String dispaly){\n        mBuilder.buildBoard(board);\n        mBuilder.buildDispaly(dispaly);\n        mBuilder.buildOS();\n    }\n\n}\n\n```\n\n```java\npublic class BuildTest{\n    public static void main(String[] args){\n        Builder builder=new MacbookBuilder();\n\n        Direcotr pcDirector=new Direcotr(builder);\n\n        pcDirector.construct(\"intel\",\"retina\");\n        StdOut.println(\"Computer Info : \"+builder.create().toString());\n    }\n}\n```\n\n## 忽略Director类\n\n在开发过程中, 可以忽略Director类, 直接使用Builder来进行对象的组装, 可以使用setter方法进行链式调用.\n`new Builder().setA(\"A\").setB(\"B\").create()`\n\n\n```java\npublic class BuildTest {\n    public static void main(String[] args){\n        ConcreteProductA A= (ConcreteProductA)new A_Buider().setArg_1(\"aa\")\n                                        .setArg_2(\"bb\").create();\n        StdOut.print(A);\n\n    }\n}\n\nabstract class abstractProduct{\n    protected String arg_1;\n    protected String arg_2;\n\n    protected abstract void setArg_1(String arg_1);\n\n    protected abstract void setArg_2(String arg_2);\n\n    @Override\n    public String toString() {\n        return \"arg_1: \"+arg_1+\", arg_2: \"+arg_2;\n    }\n}\n\nclass ConcreteProductA extends abstractProduct{\n\n    protected void setArg_1(String arg_1){\n        this.arg_1=arg_1;\n    }\n\n    protected void setArg_2(String arg_2){\n        this.arg_2=arg_2;\n    }\n}\n\nabstract class Builder {\n    public abstract Builder setArg_1(String arg_1);\n\n    public abstract Builder setArg_2(String arg_2);\n\n    public abstract abstractProduct create();\n}\n\nclass A_Buider extends Builder{\n    private ConcreteProductA mConcreteProductA=new ConcreteProductA();\n\n    @Override\n    public Builder setArg_1(String arg_1) {\n        mConcreteProductA.setArg_1(arg_1);\n        return this;\n    }\n\n    @Override\n    public Builder setArg_2(String arg_2) {\n        mConcreteProductA.setArg_2(arg_2);\n        return this;\n    }\n\n    @Override\n    public abstractProduct create(){\n        return mConcreteProductA;\n    }\n}\n```\n\n![](http://oezmbgg4j.bkt.clouddn.com/linked_builder.jpg)\n","source":"_posts/design_pattern/2016-11-17-builder.md","raw":"---\nauthor: ivyxjc\ndate: 2016-11-17\ntitle: Builder\ncategory: OO\ntags: [设计模式]\nkeywords:\ndescription: 创建者模式是为了将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示\ntoc: true\n---\n\n\n## Builder模式的使用情景\n\n1. 相同的方法, 不同的执行顺序, 产生不同的事件结果\n2. 多个部件或零件, 都可以装配到一个对象中, 但是产生的运行结果又不相同\n3.  产品类比较复杂, 或者产品类中的调用顺序不同产生了不同的作用.\n4. 当初始化一个对象特别复杂, 如参数多, 且很多参数都具有默认值.\n\n## Builder模式的整体构造\n\n![](http://oezmbgg4j.bkt.clouddn.com/builder.jpg)\n\n\n\n### 产品类\n\n```java\nabstract class Computer {\n    protected String mBoard;\n    protected String mDisplay;\n    protected String mOS;\n\n    protected Computer(){\n\n    }\n\n    public void setBoard(String board){\n        mBoard=board;\n    }\n\n    public void setDisplay(String display){\n        mDisplay=display;\n    }\n\n    public abstract void setOS();\n\n    @Override\n    public String toString() {\n        return \"Computer [mBoard=\"+ mBoard+\", mDisplay=\"+mDisplay+\", mOS=\"+mOS+\"]\";\n    }\n}\n\n\nclass Macbook extends Computer{\n    protected Macbook(){\n\n    }\n    @Override\n    public void setOS() {\n        mOS=\"Mac OS X 10.10\";\n    }\n}\n\n```\n\n### Builder类\n\n```java\n//抽象Builder类\nabstract class Builder{\n\n    public abstract void buildBoard(String board);\n    public abstract void buildDispaly(String display);\n    public abstract void buildOS();\n    public abstract Computer create();\n}\n\n//具体Builder类\nclass MacbookBuilder extends Builder{\n\n    private Computer mComputer=new Macbook();\n\n    @Override\n    public void buildBoard(String board) {\n        mComputer.setBoard(board);\n    }\n\n    @Override\n    public void buildDispaly(String display) {\n        mComputer.setDisplay(display);\n    }\n\n    @Override\n    public void buildOS() {\n        mComputer.setOS();\n    }\n\n    @Override\n    public Computer create() {\n        return mComputer;\n    }\n}\n```\n\n### 导演类\n导演类起到封装的作用, 避免高层模块深入到建造者内部的实现类\n```java\nclass Direcotr{\n    Builder mBuilder=null;\n\n    public Direcotr(Builder builder){\n        mBuilder=builder;\n    }\n\n    public void construct(String board,String dispaly){\n        mBuilder.buildBoard(board);\n        mBuilder.buildDispaly(dispaly);\n        mBuilder.buildOS();\n    }\n\n}\n\n```\n\n```java\npublic class BuildTest{\n    public static void main(String[] args){\n        Builder builder=new MacbookBuilder();\n\n        Direcotr pcDirector=new Direcotr(builder);\n\n        pcDirector.construct(\"intel\",\"retina\");\n        StdOut.println(\"Computer Info : \"+builder.create().toString());\n    }\n}\n```\n\n## 忽略Director类\n\n在开发过程中, 可以忽略Director类, 直接使用Builder来进行对象的组装, 可以使用setter方法进行链式调用.\n`new Builder().setA(\"A\").setB(\"B\").create()`\n\n\n```java\npublic class BuildTest {\n    public static void main(String[] args){\n        ConcreteProductA A= (ConcreteProductA)new A_Buider().setArg_1(\"aa\")\n                                        .setArg_2(\"bb\").create();\n        StdOut.print(A);\n\n    }\n}\n\nabstract class abstractProduct{\n    protected String arg_1;\n    protected String arg_2;\n\n    protected abstract void setArg_1(String arg_1);\n\n    protected abstract void setArg_2(String arg_2);\n\n    @Override\n    public String toString() {\n        return \"arg_1: \"+arg_1+\", arg_2: \"+arg_2;\n    }\n}\n\nclass ConcreteProductA extends abstractProduct{\n\n    protected void setArg_1(String arg_1){\n        this.arg_1=arg_1;\n    }\n\n    protected void setArg_2(String arg_2){\n        this.arg_2=arg_2;\n    }\n}\n\nabstract class Builder {\n    public abstract Builder setArg_1(String arg_1);\n\n    public abstract Builder setArg_2(String arg_2);\n\n    public abstract abstractProduct create();\n}\n\nclass A_Buider extends Builder{\n    private ConcreteProductA mConcreteProductA=new ConcreteProductA();\n\n    @Override\n    public Builder setArg_1(String arg_1) {\n        mConcreteProductA.setArg_1(arg_1);\n        return this;\n    }\n\n    @Override\n    public Builder setArg_2(String arg_2) {\n        mConcreteProductA.setArg_2(arg_2);\n        return this;\n    }\n\n    @Override\n    public abstractProduct create(){\n        return mConcreteProductA;\n    }\n}\n```\n\n![](http://oezmbgg4j.bkt.clouddn.com/linked_builder.jpg)\n","slug":"design_pattern/2016-11-17-builder","published":1,"updated":"2018-08-09T10:10:11.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf79000f28t1pv2bohnf","content":"<h2 id=\"Builder模式的使用情景\"><a href=\"#Builder模式的使用情景\" class=\"headerlink\" title=\"Builder模式的使用情景\"></a>Builder模式的使用情景</h2><ol>\n<li>相同的方法, 不同的执行顺序, 产生不同的事件结果</li>\n<li>多个部件或零件, 都可以装配到一个对象中, 但是产生的运行结果又不相同</li>\n<li>产品类比较复杂, 或者产品类中的调用顺序不同产生了不同的作用.</li>\n<li>当初始化一个对象特别复杂, 如参数多, 且很多参数都具有默认值.</li>\n</ol>\n<h2 id=\"Builder模式的整体构造\"><a href=\"#Builder模式的整体构造\" class=\"headerlink\" title=\"Builder模式的整体构造\"></a>Builder模式的整体构造</h2><p><img src=\"http://oezmbgg4j.bkt.clouddn.com/builder.jpg\" alt></p>\n<h3 id=\"产品类\"><a href=\"#产品类\" class=\"headerlink\" title=\"产品类\"></a>产品类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String mBoard;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String mDisplay;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String mOS;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Computer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBoard</span><span class=\"params\">(String board)</span></span>&#123;</span><br><span class=\"line\">        mBoard=board;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDisplay</span><span class=\"params\">(String display)</span></span>&#123;</span><br><span class=\"line\">        mDisplay=display;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setOS</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Computer [mBoard=\"</span>+ mBoard+<span class=\"string\">\", mDisplay=\"</span>+mDisplay+<span class=\"string\">\", mOS=\"</span>+mOS+<span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Macbook</span> <span class=\"keyword\">extends</span> <span class=\"title\">Computer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Macbook</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mOS=<span class=\"string\">\"Mac OS X 10.10\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Builder类\"><a href=\"#Builder类\" class=\"headerlink\" title=\"Builder类\"></a>Builder类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象Builder类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildBoard</span><span class=\"params\">(String board)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildDispaly</span><span class=\"params\">(String display)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildOS</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Computer <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体Builder类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacbookBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Computer mComputer=<span class=\"keyword\">new</span> Macbook();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildBoard</span><span class=\"params\">(String board)</span> </span>&#123;</span><br><span class=\"line\">        mComputer.setBoard(board);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildDispaly</span><span class=\"params\">(String display)</span> </span>&#123;</span><br><span class=\"line\">        mComputer.setDisplay(display);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildOS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mComputer.setOS();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Computer <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mComputer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导演类\"><a href=\"#导演类\" class=\"headerlink\" title=\"导演类\"></a>导演类</h3><p>导演类起到封装的作用, 避免高层模块深入到建造者内部的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Direcotr</span></span>&#123;</span><br><span class=\"line\">    Builder mBuilder=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Direcotr</span><span class=\"params\">(Builder builder)</span></span>&#123;</span><br><span class=\"line\">        mBuilder=builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">construct</span><span class=\"params\">(String board,String dispaly)</span></span>&#123;</span><br><span class=\"line\">        mBuilder.buildBoard(board);</span><br><span class=\"line\">        mBuilder.buildDispaly(dispaly);</span><br><span class=\"line\">        mBuilder.buildOS();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuildTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Builder builder=<span class=\"keyword\">new</span> MacbookBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">        Direcotr pcDirector=<span class=\"keyword\">new</span> Direcotr(builder);</span><br><span class=\"line\"></span><br><span class=\"line\">        pcDirector.construct(<span class=\"string\">\"intel\"</span>,<span class=\"string\">\"retina\"</span>);</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"Computer Info : \"</span>+builder.create().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略Director类\"><a href=\"#忽略Director类\" class=\"headerlink\" title=\"忽略Director类\"></a>忽略Director类</h2><p>在开发过程中, 可以忽略Director类, 直接使用Builder来进行对象的组装, 可以使用setter方法进行链式调用.<br><code>new Builder().setA(&quot;A&quot;).setB(&quot;B&quot;).create()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuildTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        ConcreteProductA A= (ConcreteProductA)<span class=\"keyword\">new</span> A_Buider().setArg_1(<span class=\"string\">\"aa\"</span>)</span><br><span class=\"line\">                                        .setArg_2(<span class=\"string\">\"bb\"</span>).create();</span><br><span class=\"line\">        StdOut.print(A);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">abstractProduct</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String arg_1;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String arg_2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setArg_1</span><span class=\"params\">(String arg_1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setArg_2</span><span class=\"params\">(String arg_2)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"arg_1: \"</span>+arg_1+<span class=\"string\">\", arg_2: \"</span>+arg_2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProductA</span> <span class=\"keyword\">extends</span> <span class=\"title\">abstractProduct</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setArg_1</span><span class=\"params\">(String arg_1)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arg_1=arg_1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setArg_2</span><span class=\"params\">(String arg_2)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arg_2=arg_2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Builder <span class=\"title\">setArg_1</span><span class=\"params\">(String arg_1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Builder <span class=\"title\">setArg_2</span><span class=\"params\">(String arg_2)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> abstractProduct <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A_Buider</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcreteProductA mConcreteProductA=<span class=\"keyword\">new</span> ConcreteProductA();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setArg_1</span><span class=\"params\">(String arg_1)</span> </span>&#123;</span><br><span class=\"line\">        mConcreteProductA.setArg_1(arg_1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setArg_2</span><span class=\"params\">(String arg_2)</span> </span>&#123;</span><br><span class=\"line\">        mConcreteProductA.setArg_2(arg_2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> abstractProduct <span class=\"title\">create</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mConcreteProductA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/linked_builder.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Builder模式的使用情景\"><a href=\"#Builder模式的使用情景\" class=\"headerlink\" title=\"Builder模式的使用情景\"></a>Builder模式的使用情景</h2><ol>\n<li>相同的方法, 不同的执行顺序, 产生不同的事件结果</li>\n<li>多个部件或零件, 都可以装配到一个对象中, 但是产生的运行结果又不相同</li>\n<li>产品类比较复杂, 或者产品类中的调用顺序不同产生了不同的作用.</li>\n<li>当初始化一个对象特别复杂, 如参数多, 且很多参数都具有默认值.</li>\n</ol>\n<h2 id=\"Builder模式的整体构造\"><a href=\"#Builder模式的整体构造\" class=\"headerlink\" title=\"Builder模式的整体构造\"></a>Builder模式的整体构造</h2><p><img src=\"http://oezmbgg4j.bkt.clouddn.com/builder.jpg\" alt></p>\n<h3 id=\"产品类\"><a href=\"#产品类\" class=\"headerlink\" title=\"产品类\"></a>产品类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String mBoard;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String mDisplay;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String mOS;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Computer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBoard</span><span class=\"params\">(String board)</span></span>&#123;</span><br><span class=\"line\">        mBoard=board;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDisplay</span><span class=\"params\">(String display)</span></span>&#123;</span><br><span class=\"line\">        mDisplay=display;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setOS</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Computer [mBoard=\"</span>+ mBoard+<span class=\"string\">\", mDisplay=\"</span>+mDisplay+<span class=\"string\">\", mOS=\"</span>+mOS+<span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Macbook</span> <span class=\"keyword\">extends</span> <span class=\"title\">Computer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Macbook</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mOS=<span class=\"string\">\"Mac OS X 10.10\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Builder类\"><a href=\"#Builder类\" class=\"headerlink\" title=\"Builder类\"></a>Builder类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象Builder类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildBoard</span><span class=\"params\">(String board)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildDispaly</span><span class=\"params\">(String display)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildOS</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Computer <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体Builder类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacbookBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Computer mComputer=<span class=\"keyword\">new</span> Macbook();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildBoard</span><span class=\"params\">(String board)</span> </span>&#123;</span><br><span class=\"line\">        mComputer.setBoard(board);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildDispaly</span><span class=\"params\">(String display)</span> </span>&#123;</span><br><span class=\"line\">        mComputer.setDisplay(display);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildOS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mComputer.setOS();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Computer <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mComputer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导演类\"><a href=\"#导演类\" class=\"headerlink\" title=\"导演类\"></a>导演类</h3><p>导演类起到封装的作用, 避免高层模块深入到建造者内部的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Direcotr</span></span>&#123;</span><br><span class=\"line\">    Builder mBuilder=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Direcotr</span><span class=\"params\">(Builder builder)</span></span>&#123;</span><br><span class=\"line\">        mBuilder=builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">construct</span><span class=\"params\">(String board,String dispaly)</span></span>&#123;</span><br><span class=\"line\">        mBuilder.buildBoard(board);</span><br><span class=\"line\">        mBuilder.buildDispaly(dispaly);</span><br><span class=\"line\">        mBuilder.buildOS();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuildTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Builder builder=<span class=\"keyword\">new</span> MacbookBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">        Direcotr pcDirector=<span class=\"keyword\">new</span> Direcotr(builder);</span><br><span class=\"line\"></span><br><span class=\"line\">        pcDirector.construct(<span class=\"string\">\"intel\"</span>,<span class=\"string\">\"retina\"</span>);</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"Computer Info : \"</span>+builder.create().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略Director类\"><a href=\"#忽略Director类\" class=\"headerlink\" title=\"忽略Director类\"></a>忽略Director类</h2><p>在开发过程中, 可以忽略Director类, 直接使用Builder来进行对象的组装, 可以使用setter方法进行链式调用.<br><code>new Builder().setA(&quot;A&quot;).setB(&quot;B&quot;).create()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuildTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        ConcreteProductA A= (ConcreteProductA)<span class=\"keyword\">new</span> A_Buider().setArg_1(<span class=\"string\">\"aa\"</span>)</span><br><span class=\"line\">                                        .setArg_2(<span class=\"string\">\"bb\"</span>).create();</span><br><span class=\"line\">        StdOut.print(A);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">abstractProduct</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String arg_1;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String arg_2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setArg_1</span><span class=\"params\">(String arg_1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setArg_2</span><span class=\"params\">(String arg_2)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"arg_1: \"</span>+arg_1+<span class=\"string\">\", arg_2: \"</span>+arg_2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProductA</span> <span class=\"keyword\">extends</span> <span class=\"title\">abstractProduct</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setArg_1</span><span class=\"params\">(String arg_1)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arg_1=arg_1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setArg_2</span><span class=\"params\">(String arg_2)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arg_2=arg_2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Builder <span class=\"title\">setArg_1</span><span class=\"params\">(String arg_1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Builder <span class=\"title\">setArg_2</span><span class=\"params\">(String arg_2)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> abstractProduct <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A_Buider</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcreteProductA mConcreteProductA=<span class=\"keyword\">new</span> ConcreteProductA();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setArg_1</span><span class=\"params\">(String arg_1)</span> </span>&#123;</span><br><span class=\"line\">        mConcreteProductA.setArg_1(arg_1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setArg_2</span><span class=\"params\">(String arg_2)</span> </span>&#123;</span><br><span class=\"line\">        mConcreteProductA.setArg_2(arg_2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> abstractProduct <span class=\"title\">create</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mConcreteProductA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/linked_builder.jpg\" alt></p>\n"},{"author":"ivyxjc","date":"2016-11-17T16:00:00.000Z","title":"观察者模式","keywords":null,"description":"观察者模式定义对象间一种一对多的依赖关系, 使得每当一个对象改变状态, 则所有依赖于它的对象都会得到通知并被自动更新.","toc":true,"_content":"\n\n### 被观察者\n\n所有被观察者都继承Observable接口 ( java标准库中`Observable`是一个抽象类)\n\n```java\ninterface Observable{\n    public void addObserver(Observer observer);\n    public void deleteObserver(Observer observer);\n    public void notifyObserver(String context);\n}\n```\n\n\n```java\nclass AA implements Observable,IHanFeiZi_3{\n    //存放observer\n    private ArrayList<Observer> observerList=new ArrayList<Observer>();\n\n    @Override\n    public void addObserver(Observer observer) {\n        observerList.add(observer);\n    }\n\n    @Override\n    public void deleteObserver(Observer observer) {\n        this.observerList.remove(observer);\n    }\n\n    @Override\n    public void notifyObserver(String context) {\n        for(Observer observer:observerList){\n            observer.update(context);\n        }\n    }\n\n    @Override\n    public void method1() {\n      ...\n    }\n\n    @Override\n    public void method2() {\n      ...\n    }\n}\n```\n\n### 观察者\n\n所有的观察者都继承Observer接口\n\n```java\ninterface Observer{\n    public void update(String str);\n}\n```\n\n```java\nclass BB implements Observer{\n    @Override\n    public void update(String context) {\n      ...\n    }\n}\n```\n\n### 场景\n\n```java\npublic static void main(String[] args){\n        Observer a1=new AA_1();\n        Observer a2=new AA_2();\n        Observer a3=new AA_1();\n        BB bb=new BB();\n\n        bb.addObserver(a1);\n        bb.addObserver(a2);\n        bb.addObserver(a3);\n\n        bb.method1();\n    }\n```\n\n## 观察者模式的注意事项\n\n1. 需要注意效率问题\n2. 由于消息通知是顺序执行的, 如有需要, 可采用异步方式\n3. 消息不能无限制的传递下去, 一般而言, 在一个观察者模式中最多出现一个对象既是被观察者又是观察者. 否则程序的维护性会变得很差.\n","source":"_posts/design_pattern/2016-11-18-observer.md","raw":"---\nauthor: ivyxjc\ndate: 2016-11-18\ntitle: 观察者模式\ncategory: OO\ntags: [设计模式]\nkeywords:\ndescription: 观察者模式定义对象间一种一对多的依赖关系, 使得每当一个对象改变状态, 则所有依赖于它的对象都会得到通知并被自动更新.\ntoc: true\n---\n\n\n### 被观察者\n\n所有被观察者都继承Observable接口 ( java标准库中`Observable`是一个抽象类)\n\n```java\ninterface Observable{\n    public void addObserver(Observer observer);\n    public void deleteObserver(Observer observer);\n    public void notifyObserver(String context);\n}\n```\n\n\n```java\nclass AA implements Observable,IHanFeiZi_3{\n    //存放observer\n    private ArrayList<Observer> observerList=new ArrayList<Observer>();\n\n    @Override\n    public void addObserver(Observer observer) {\n        observerList.add(observer);\n    }\n\n    @Override\n    public void deleteObserver(Observer observer) {\n        this.observerList.remove(observer);\n    }\n\n    @Override\n    public void notifyObserver(String context) {\n        for(Observer observer:observerList){\n            observer.update(context);\n        }\n    }\n\n    @Override\n    public void method1() {\n      ...\n    }\n\n    @Override\n    public void method2() {\n      ...\n    }\n}\n```\n\n### 观察者\n\n所有的观察者都继承Observer接口\n\n```java\ninterface Observer{\n    public void update(String str);\n}\n```\n\n```java\nclass BB implements Observer{\n    @Override\n    public void update(String context) {\n      ...\n    }\n}\n```\n\n### 场景\n\n```java\npublic static void main(String[] args){\n        Observer a1=new AA_1();\n        Observer a2=new AA_2();\n        Observer a3=new AA_1();\n        BB bb=new BB();\n\n        bb.addObserver(a1);\n        bb.addObserver(a2);\n        bb.addObserver(a3);\n\n        bb.method1();\n    }\n```\n\n## 观察者模式的注意事项\n\n1. 需要注意效率问题\n2. 由于消息通知是顺序执行的, 如有需要, 可采用异步方式\n3. 消息不能无限制的传递下去, 一般而言, 在一个观察者模式中最多出现一个对象既是被观察者又是观察者. 否则程序的维护性会变得很差.\n","slug":"design_pattern/2016-11-18-observer","published":1,"updated":"2018-08-09T10:10:11.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7a000g28t1r5uhvxaj","content":"<h3 id=\"被观察者\"><a href=\"#被观察者\" class=\"headerlink\" title=\"被观察者\"></a>被观察者</h3><p>所有被观察者都继承Observable接口 ( java标准库中<code>Observable</code>是一个抽象类)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer observer)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObserver</span><span class=\"params\">(Observer observer)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObserver</span><span class=\"params\">(String context)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AA</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observable</span>,<span class=\"title\">IHanFeiZi_3</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放observer</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;Observer&gt; observerList=<span class=\"keyword\">new</span> ArrayList&lt;Observer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer observer)</span> </span>&#123;</span><br><span class=\"line\">        observerList.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObserver</span><span class=\"params\">(Observer observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observerList.remove(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObserver</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Observer observer:observerList)&#123;</span><br><span class=\"line\">            observer.update(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"观察者\"><a href=\"#观察者\" class=\"headerlink\" title=\"观察者\"></a>观察者</h3><p>所有的观察者都继承Observer接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(String str)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BB</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Observer a1=<span class=\"keyword\">new</span> AA_1();</span><br><span class=\"line\">        Observer a2=<span class=\"keyword\">new</span> AA_2();</span><br><span class=\"line\">        Observer a3=<span class=\"keyword\">new</span> AA_1();</span><br><span class=\"line\">        BB bb=<span class=\"keyword\">new</span> BB();</span><br><span class=\"line\"></span><br><span class=\"line\">        bb.addObserver(a1);</span><br><span class=\"line\">        bb.addObserver(a2);</span><br><span class=\"line\">        bb.addObserver(a3);</span><br><span class=\"line\"></span><br><span class=\"line\">        bb.method1();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"观察者模式的注意事项\"><a href=\"#观察者模式的注意事项\" class=\"headerlink\" title=\"观察者模式的注意事项\"></a>观察者模式的注意事项</h2><ol>\n<li>需要注意效率问题</li>\n<li>由于消息通知是顺序执行的, 如有需要, 可采用异步方式</li>\n<li>消息不能无限制的传递下去, 一般而言, 在一个观察者模式中最多出现一个对象既是被观察者又是观察者. 否则程序的维护性会变得很差.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"被观察者\"><a href=\"#被观察者\" class=\"headerlink\" title=\"被观察者\"></a>被观察者</h3><p>所有被观察者都继承Observable接口 ( java标准库中<code>Observable</code>是一个抽象类)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer observer)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObserver</span><span class=\"params\">(Observer observer)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObserver</span><span class=\"params\">(String context)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AA</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observable</span>,<span class=\"title\">IHanFeiZi_3</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放observer</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;Observer&gt; observerList=<span class=\"keyword\">new</span> ArrayList&lt;Observer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer observer)</span> </span>&#123;</span><br><span class=\"line\">        observerList.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObserver</span><span class=\"params\">(Observer observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observerList.remove(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObserver</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Observer observer:observerList)&#123;</span><br><span class=\"line\">            observer.update(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"观察者\"><a href=\"#观察者\" class=\"headerlink\" title=\"观察者\"></a>观察者</h3><p>所有的观察者都继承Observer接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(String str)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BB</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Observer a1=<span class=\"keyword\">new</span> AA_1();</span><br><span class=\"line\">        Observer a2=<span class=\"keyword\">new</span> AA_2();</span><br><span class=\"line\">        Observer a3=<span class=\"keyword\">new</span> AA_1();</span><br><span class=\"line\">        BB bb=<span class=\"keyword\">new</span> BB();</span><br><span class=\"line\"></span><br><span class=\"line\">        bb.addObserver(a1);</span><br><span class=\"line\">        bb.addObserver(a2);</span><br><span class=\"line\">        bb.addObserver(a3);</span><br><span class=\"line\"></span><br><span class=\"line\">        bb.method1();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"观察者模式的注意事项\"><a href=\"#观察者模式的注意事项\" class=\"headerlink\" title=\"观察者模式的注意事项\"></a>观察者模式的注意事项</h2><ol>\n<li>需要注意效率问题</li>\n<li>由于消息通知是顺序执行的, 如有需要, 可采用异步方式</li>\n<li>消息不能无限制的传递下去, 一般而言, 在一个观察者模式中最多出现一个对象既是被观察者又是观察者. 否则程序的维护性会变得很差.</li>\n</ol>\n"},{"author":"ivyxjc","date":"2017-01-07T16:00:00.000Z","title":"代理模式","keywords":null,"description":null,"toc":true,"_content":"\n\n代理模式也叫委托模式, 应用非常广泛. 其定义:<br>\nProvide a surrogate or placehoder for another object to control access to it.(为其它对象提供一种代理以控制对这个对象的访问)\n\n<!--more-->\n\n\n## 基本用法\n\n### 抽象主题类\n\n```java\npublic interface Subject{\n    //定义一个方法\n\n    public void request();\n}\n\n```\n\n###真实主题类\n\n```java\npublic class RealSubject implements Subject{\n    @Override\n    public void request(){\n\n    }\n}\n```\n\n### 代理类\n\n```java\npublic class Proxy implements Subject{\n    private Subject subject = null;\n\n    public Proxy(){\n        this.subject=new Proxy();\n    }\n\n    public Proxy(Subject subject){\n        this.subject=subject;\n    }\n\n    public Proxy(Object... objects){\n        //todo\n    }\n\n    public void request(){\n        //todo\n    }\n\n    public void before(){\n        //todo\n    }\n\n    public void after(){\n        //todo\n    }\n}\n```\n\n一个代理类可以代理多个被代理者, 而在使用时, 该代理类到底代理哪个真实类, 可以由场景类决定.\n\n\n## 优点\n\n1. 职责清晰\n2. 高扩展性\n3. 智能化\n\n## 代理分类\n\n设计模式中的代理分为普通代理和强制代理.\n\n###　普通代理\n\n普通代理的要求便是: 客户端只能访问代理角色, 而不能访问真实角色. 可以通过代理角色传递真实角色所需要的参数.\n\n```java\n\npublic interface IGamePlayer {\n\n    public void login(String user, String password);\n}\n\n\npublic class GamePlayer implements IGamePlayer {\n    private String name=\"\";\n\n    public GamePlayer(IGamePlayer gamePlayer,String name)throws Exception{\n        if(gamePlayer==null){\n            throw new Exception(\"不能创建真实角色\");\n        }else{\n            this.name=name;\n        }\n    }\n\n    @Override\n    public void login(String user, String password) {\n        System.out.println(\"登录名\"+user+\"的用户\"+this.name+\"登录成功!\");\n    }\n\n}\n\npublic class GamePlayerProxy implements IGamePlayer {\n\n    private IGamePlayer mIGamePlayer=null;\n\n    public GamePlayerProxy(String name){\n        try{\n            mIGamePlayer=new GamePlayer(this,name);\n        }catch(Exception e ){\n            e.printStackTrace();\n        }\n    }\n    @Override\n    public void login(String user, String password) {\n        this.mIGamePlayer.login(user,password);\n    }\n}\n```\n\n```java\n客户类代码\n\npublic static void main(String[] args){\n    IGamePlayer proxy=new GamePlayerProxy(\"张三\");\n    \n    System.out.println(\"start time\");  \n    proxy.login(\"zhangsan\",\"password\");\n    System.out.println(\"end time\");\n}\n```\n\n###　强制代理\n\n强制代理要求必须通过真实角色去寻找代理角色, 否则不能访问.\n\n```java\n\npublic interface IGamePlayer {\n    public void login(String user, String password);\n\n    //每个人都可以找到自己的代理\n    public IGamePlayer getProxy();\n}\n\npublic class GamePlayer implements IGamePlayer {\n    private String name=\"\";\n\n    //我的代理是谁\n    private IGamePlayer proxy=null;\n\n    public GamePlayer(String name){\n        this.name=name;\n    }\n\n    @Override\n    public void login(String user, String password) {\n        if(this.isProxy()){\n            System.out.println(\"登录名\"+user+\"的用户\"+this.name+\"登录成功!\");\n        }else{\n            System.out.println(\"请使用指定的代理访问\");\n        }\n    }\n\n    @Override\n    public IGamePlayer getProxy() {\n        this.proxy=new GamePlayerProxy(this);\n        return this.proxy;\n    }\n\n    private boolean isProxy(){\n        if(this.proxy==null){\n            return false;\n        }else{\n            return true;\n        }\n    }\n\n}\n\npublic class GamePlayerProxy implements IGamePlayer {\n    private IGamePlayer gameplayer=null;\n\n    public GamePlayerProxy(IGamePlayer gamePlayer){\n        this.gameplayer=gamePlayer;\n    }\n\n    @Override\n    public void login(String user, String password) {\n        this.gameplayer.login(user,password);\n    }\n\n    @Override\n    public IGamePlayer getProxy() {\n        return this;\n    }\n}\n```\n\n```java\n客户类代码\n\npublic class Client {\n    public static void main(String[] args){\n        IGamePlayer gameplayer=new GamePlayer(\"张三\");\n        IGamePlayer proxy=gameplayer.getProxy();\n        System.out.println(\"start time\");\n        proxy.login(\"zhangsan\",\"password\");\n        System.out.println(\"end time\");\n    }\n}\n```\n\n## 动态代理\n\n\n```java\n\npublic class GamePlayIH implements InvocationHandler{\n    //被代理者\n    Class cls=null;\n\n    //被代理的实例\n    Object obj=null;\n\n    public GamePlayIH(Object obj){\n        this.obj=obj;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        Object result=method.invoke(this.obj,args);\n        if(method.getName().equalsIgnoreCase(\"login\")){\n            System.out.println(\"有人正在用我账号登录\");\n        }\n        return result;\n    }\n}\n```\n\n```java\n\npublic class GamePlayer implements IGamePlayer {\n    private String name=\"\";\n\n    public GamePlayer(String name){\n        this.name=name;\n    }\n\n    @Override\n    public void login(String user, String password) {\n        System.out.println(\"登录名\"+user+\"的用户\"+this.name+\"登录成功!\");\n    }\n}\n```\n\n```java\n客户类代码\npublic static void main(String[] args) throws Throwable{\n    IGamePlayer player=new GamePlayer(\"张三\");\n    InvocationHandler handler=new GamePlayIH(player);\n\n    System.out.println(\"start time\");\n    //获取类的ClassLoader\n    ClassLoader cl=player.getClass().getClassLoader();\n    //动态生产一个代理者\n    IGamePlayer proxy=(IGamePlayer) Proxy.newProxyInstance(cl,new Class[]{IGamePlayer.class},handler);\n    \n    proxy.login(\"zhangsan\",\"password\");\n    System.out.println(\"end time    \");\n}\n```","source":"_posts/design_pattern/2017-01-08-proxy-pattern.md","raw":"---\nauthor: ivyxjc\ndate: 2017-01-08\ntitle: 代理模式\ncategory: OO\ntags: [设计模式]\nkeywords:\ndescription: \ntoc: true\n---\n\n\n代理模式也叫委托模式, 应用非常广泛. 其定义:<br>\nProvide a surrogate or placehoder for another object to control access to it.(为其它对象提供一种代理以控制对这个对象的访问)\n\n<!--more-->\n\n\n## 基本用法\n\n### 抽象主题类\n\n```java\npublic interface Subject{\n    //定义一个方法\n\n    public void request();\n}\n\n```\n\n###真实主题类\n\n```java\npublic class RealSubject implements Subject{\n    @Override\n    public void request(){\n\n    }\n}\n```\n\n### 代理类\n\n```java\npublic class Proxy implements Subject{\n    private Subject subject = null;\n\n    public Proxy(){\n        this.subject=new Proxy();\n    }\n\n    public Proxy(Subject subject){\n        this.subject=subject;\n    }\n\n    public Proxy(Object... objects){\n        //todo\n    }\n\n    public void request(){\n        //todo\n    }\n\n    public void before(){\n        //todo\n    }\n\n    public void after(){\n        //todo\n    }\n}\n```\n\n一个代理类可以代理多个被代理者, 而在使用时, 该代理类到底代理哪个真实类, 可以由场景类决定.\n\n\n## 优点\n\n1. 职责清晰\n2. 高扩展性\n3. 智能化\n\n## 代理分类\n\n设计模式中的代理分为普通代理和强制代理.\n\n###　普通代理\n\n普通代理的要求便是: 客户端只能访问代理角色, 而不能访问真实角色. 可以通过代理角色传递真实角色所需要的参数.\n\n```java\n\npublic interface IGamePlayer {\n\n    public void login(String user, String password);\n}\n\n\npublic class GamePlayer implements IGamePlayer {\n    private String name=\"\";\n\n    public GamePlayer(IGamePlayer gamePlayer,String name)throws Exception{\n        if(gamePlayer==null){\n            throw new Exception(\"不能创建真实角色\");\n        }else{\n            this.name=name;\n        }\n    }\n\n    @Override\n    public void login(String user, String password) {\n        System.out.println(\"登录名\"+user+\"的用户\"+this.name+\"登录成功!\");\n    }\n\n}\n\npublic class GamePlayerProxy implements IGamePlayer {\n\n    private IGamePlayer mIGamePlayer=null;\n\n    public GamePlayerProxy(String name){\n        try{\n            mIGamePlayer=new GamePlayer(this,name);\n        }catch(Exception e ){\n            e.printStackTrace();\n        }\n    }\n    @Override\n    public void login(String user, String password) {\n        this.mIGamePlayer.login(user,password);\n    }\n}\n```\n\n```java\n客户类代码\n\npublic static void main(String[] args){\n    IGamePlayer proxy=new GamePlayerProxy(\"张三\");\n    \n    System.out.println(\"start time\");  \n    proxy.login(\"zhangsan\",\"password\");\n    System.out.println(\"end time\");\n}\n```\n\n###　强制代理\n\n强制代理要求必须通过真实角色去寻找代理角色, 否则不能访问.\n\n```java\n\npublic interface IGamePlayer {\n    public void login(String user, String password);\n\n    //每个人都可以找到自己的代理\n    public IGamePlayer getProxy();\n}\n\npublic class GamePlayer implements IGamePlayer {\n    private String name=\"\";\n\n    //我的代理是谁\n    private IGamePlayer proxy=null;\n\n    public GamePlayer(String name){\n        this.name=name;\n    }\n\n    @Override\n    public void login(String user, String password) {\n        if(this.isProxy()){\n            System.out.println(\"登录名\"+user+\"的用户\"+this.name+\"登录成功!\");\n        }else{\n            System.out.println(\"请使用指定的代理访问\");\n        }\n    }\n\n    @Override\n    public IGamePlayer getProxy() {\n        this.proxy=new GamePlayerProxy(this);\n        return this.proxy;\n    }\n\n    private boolean isProxy(){\n        if(this.proxy==null){\n            return false;\n        }else{\n            return true;\n        }\n    }\n\n}\n\npublic class GamePlayerProxy implements IGamePlayer {\n    private IGamePlayer gameplayer=null;\n\n    public GamePlayerProxy(IGamePlayer gamePlayer){\n        this.gameplayer=gamePlayer;\n    }\n\n    @Override\n    public void login(String user, String password) {\n        this.gameplayer.login(user,password);\n    }\n\n    @Override\n    public IGamePlayer getProxy() {\n        return this;\n    }\n}\n```\n\n```java\n客户类代码\n\npublic class Client {\n    public static void main(String[] args){\n        IGamePlayer gameplayer=new GamePlayer(\"张三\");\n        IGamePlayer proxy=gameplayer.getProxy();\n        System.out.println(\"start time\");\n        proxy.login(\"zhangsan\",\"password\");\n        System.out.println(\"end time\");\n    }\n}\n```\n\n## 动态代理\n\n\n```java\n\npublic class GamePlayIH implements InvocationHandler{\n    //被代理者\n    Class cls=null;\n\n    //被代理的实例\n    Object obj=null;\n\n    public GamePlayIH(Object obj){\n        this.obj=obj;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        Object result=method.invoke(this.obj,args);\n        if(method.getName().equalsIgnoreCase(\"login\")){\n            System.out.println(\"有人正在用我账号登录\");\n        }\n        return result;\n    }\n}\n```\n\n```java\n\npublic class GamePlayer implements IGamePlayer {\n    private String name=\"\";\n\n    public GamePlayer(String name){\n        this.name=name;\n    }\n\n    @Override\n    public void login(String user, String password) {\n        System.out.println(\"登录名\"+user+\"的用户\"+this.name+\"登录成功!\");\n    }\n}\n```\n\n```java\n客户类代码\npublic static void main(String[] args) throws Throwable{\n    IGamePlayer player=new GamePlayer(\"张三\");\n    InvocationHandler handler=new GamePlayIH(player);\n\n    System.out.println(\"start time\");\n    //获取类的ClassLoader\n    ClassLoader cl=player.getClass().getClassLoader();\n    //动态生产一个代理者\n    IGamePlayer proxy=(IGamePlayer) Proxy.newProxyInstance(cl,new Class[]{IGamePlayer.class},handler);\n    \n    proxy.login(\"zhangsan\",\"password\");\n    System.out.println(\"end time    \");\n}\n```","slug":"design_pattern/2017-01-08-proxy-pattern","published":1,"updated":"2018-08-09T10:10:11.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7b000h28t1qyeu6482","content":"<p>代理模式也叫委托模式, 应用非常广泛. 其定义:<br><br>Provide a surrogate or placehoder for another object to control access to it.(为其它对象提供一种代理以控制对这个对象的访问)</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"抽象主题类\"><a href=\"#抽象主题类\" class=\"headerlink\" title=\"抽象主题类\"></a>抽象主题类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义一个方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###真实主题类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代理类\"><a href=\"#代理类\" class=\"headerlink\" title=\"代理类\"></a>代理类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject subject = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject=<span class=\"keyword\">new</span> Proxy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(Subject subject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject=subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(Object... objects)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个代理类可以代理多个被代理者, 而在使用时, 该代理类到底代理哪个真实类, 可以由场景类决定.</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>职责清晰</li>\n<li>高扩展性</li>\n<li>智能化</li>\n</ol>\n<h2 id=\"代理分类\"><a href=\"#代理分类\" class=\"headerlink\" title=\"代理分类\"></a>代理分类</h2><p>设计模式中的代理分为普通代理和强制代理.</p>\n<p>###　普通代理</p>\n<p>普通代理的要求便是: 客户端只能访问代理角色, 而不能访问真实角色. 可以通过代理角色传递真实角色所需要的参数.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayer</span><span class=\"params\">(IGamePlayer gamePlayer,String name)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(gamePlayer==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"不能创建真实角色\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"登录名\"</span>+user+<span class=\"string\">\"的用户\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\"登录成功!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IGamePlayer mIGamePlayer=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayerProxy</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            mIGamePlayer=<span class=\"keyword\">new</span> GamePlayer(<span class=\"keyword\">this</span>,name);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e )&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mIGamePlayer.login(user,password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户类代码</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    IGamePlayer proxy=<span class=\"keyword\">new</span> GamePlayerProxy(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"start time\"</span>);  </span><br><span class=\"line\">    proxy.login(<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"end time\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###　强制代理</p>\n<p>强制代理要求必须通过真实角色去寻找代理角色, 否则不能访问.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//每个人都可以找到自己的代理</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IGamePlayer <span class=\"title\">getProxy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//我的代理是谁</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IGamePlayer proxy=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayer</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isProxy())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"登录名\"</span>+user+<span class=\"string\">\"的用户\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\"登录成功!\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请使用指定的代理访问\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IGamePlayer <span class=\"title\">getProxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxy=<span class=\"keyword\">new</span> GamePlayerProxy(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.proxy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.proxy==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IGamePlayer gameplayer=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayerProxy</span><span class=\"params\">(IGamePlayer gamePlayer)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gameplayer=gamePlayer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gameplayer.login(user,password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IGamePlayer <span class=\"title\">getProxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户类代码</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        IGamePlayer gameplayer=<span class=\"keyword\">new</span> GamePlayer(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        IGamePlayer proxy=gameplayer.getProxy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start time\"</span>);</span><br><span class=\"line\">        proxy.login(<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"end time\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayIH</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被代理者</span></span><br><span class=\"line\">    Class cls=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//被代理的实例</span></span><br><span class=\"line\">    Object obj=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayIH</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj=obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Object result=method.invoke(<span class=\"keyword\">this</span>.obj,args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(method.getName().equalsIgnoreCase(<span class=\"string\">\"login\"</span>))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"有人正在用我账号登录\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayer</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"登录名\"</span>+user+<span class=\"string\">\"的用户\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\"登录成功!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户类代码</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Throwable</span>&#123;</span><br><span class=\"line\">    IGamePlayer player=<span class=\"keyword\">new</span> GamePlayer(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">    InvocationHandler handler=<span class=\"keyword\">new</span> GamePlayIH(player);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"start time\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//获取类的ClassLoader</span></span><br><span class=\"line\">    ClassLoader cl=player.getClass().getClassLoader();</span><br><span class=\"line\">    <span class=\"comment\">//动态生产一个代理者</span></span><br><span class=\"line\">    IGamePlayer proxy=(IGamePlayer) Proxy.newProxyInstance(cl,<span class=\"keyword\">new</span> Class[]&#123;IGamePlayer.class&#125;,handler);</span><br><span class=\"line\">    </span><br><span class=\"line\">    proxy.login(<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"end time    \"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>代理模式也叫委托模式, 应用非常广泛. 其定义:<br><br>Provide a surrogate or placehoder for another object to control access to it.(为其它对象提供一种代理以控制对这个对象的访问)</p>","more":"<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"抽象主题类\"><a href=\"#抽象主题类\" class=\"headerlink\" title=\"抽象主题类\"></a>抽象主题类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义一个方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###真实主题类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代理类\"><a href=\"#代理类\" class=\"headerlink\" title=\"代理类\"></a>代理类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject subject = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject=<span class=\"keyword\">new</span> Proxy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(Subject subject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject=subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(Object... objects)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//todo</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个代理类可以代理多个被代理者, 而在使用时, 该代理类到底代理哪个真实类, 可以由场景类决定.</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>职责清晰</li>\n<li>高扩展性</li>\n<li>智能化</li>\n</ol>\n<h2 id=\"代理分类\"><a href=\"#代理分类\" class=\"headerlink\" title=\"代理分类\"></a>代理分类</h2><p>设计模式中的代理分为普通代理和强制代理.</p>\n<p>###　普通代理</p>\n<p>普通代理的要求便是: 客户端只能访问代理角色, 而不能访问真实角色. 可以通过代理角色传递真实角色所需要的参数.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayer</span><span class=\"params\">(IGamePlayer gamePlayer,String name)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(gamePlayer==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"不能创建真实角色\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"登录名\"</span>+user+<span class=\"string\">\"的用户\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\"登录成功!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IGamePlayer mIGamePlayer=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayerProxy</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            mIGamePlayer=<span class=\"keyword\">new</span> GamePlayer(<span class=\"keyword\">this</span>,name);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e )&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mIGamePlayer.login(user,password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户类代码</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    IGamePlayer proxy=<span class=\"keyword\">new</span> GamePlayerProxy(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"start time\"</span>);  </span><br><span class=\"line\">    proxy.login(<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"end time\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###　强制代理</p>\n<p>强制代理要求必须通过真实角色去寻找代理角色, 否则不能访问.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//每个人都可以找到自己的代理</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IGamePlayer <span class=\"title\">getProxy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//我的代理是谁</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IGamePlayer proxy=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayer</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isProxy())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"登录名\"</span>+user+<span class=\"string\">\"的用户\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\"登录成功!\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请使用指定的代理访问\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IGamePlayer <span class=\"title\">getProxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxy=<span class=\"keyword\">new</span> GamePlayerProxy(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.proxy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.proxy==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IGamePlayer gameplayer=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayerProxy</span><span class=\"params\">(IGamePlayer gamePlayer)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gameplayer=gamePlayer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gameplayer.login(user,password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IGamePlayer <span class=\"title\">getProxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户类代码</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        IGamePlayer gameplayer=<span class=\"keyword\">new</span> GamePlayer(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        IGamePlayer proxy=gameplayer.getProxy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start time\"</span>);</span><br><span class=\"line\">        proxy.login(<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"end time\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayIH</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被代理者</span></span><br><span class=\"line\">    Class cls=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//被代理的实例</span></span><br><span class=\"line\">    Object obj=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayIH</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj=obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Object result=method.invoke(<span class=\"keyword\">this</span>.obj,args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(method.getName().equalsIgnoreCase(<span class=\"string\">\"login\"</span>))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"有人正在用我账号登录\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGamePlayer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePlayer</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String user, String password)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"登录名\"</span>+user+<span class=\"string\">\"的用户\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\"登录成功!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户类代码</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Throwable</span>&#123;</span><br><span class=\"line\">    IGamePlayer player=<span class=\"keyword\">new</span> GamePlayer(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">    InvocationHandler handler=<span class=\"keyword\">new</span> GamePlayIH(player);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"start time\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//获取类的ClassLoader</span></span><br><span class=\"line\">    ClassLoader cl=player.getClass().getClassLoader();</span><br><span class=\"line\">    <span class=\"comment\">//动态生产一个代理者</span></span><br><span class=\"line\">    IGamePlayer proxy=(IGamePlayer) Proxy.newProxyInstance(cl,<span class=\"keyword\">new</span> Class[]&#123;IGamePlayer.class&#125;,handler);</span><br><span class=\"line\">    </span><br><span class=\"line\">    proxy.login(<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"end time    \"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"author":"ivyxjc","date":"2018-03-25T16:00:00.000Z","title":"class.getResource() class.getClassLoader.getResource()之间的区别","keywords":null,"description":null,"toc":true,"_content":"\n使用`*.class.getResouce()`和`*.class.getClassLoader.getResource()`是有一定的区别的。\n\n在maven，gradle等构建工具构建的项目，resouces文件夹下的内容默认在classpath下面。\n\n所以可以直接用`this.class.getClassLoader.getResource(...)`来获取对应的文件。\n\n<!--more-->\n\n##  Class与ClassLoader.getResource()之间的区别\n\n使用`*.class.getResouce()`和`*.class.getClassLoader.getResource()`是有一定的区别的。\n\n`*.class.getResouce()`先会`resolveName(name)`然后在委托给`classLoader`来处理。所以区别主要在于`resolveName(name)`。 `resolveName(name)`主要是功能是：若`name`以`/`开头，那么则直接调用`classLoader`来处理。若没有以`/`开头，则会将类全名中的点替换成`/`作为路径再加上name委托给`classLoader`来处理。\n\n所以要获取`resources`文件夹下的内容，`*.class.getResouce(name)`中的`name`要以`/`开头。而`this.class.getClassLoader.getResource(...)`不需要。\n\n```java\npublic java.net.URL getResource(String name) {\n    name = resolveName(name);\n    ClassLoader cl = getClassLoader0();\n    if (cl==null) {\n        // A system class.\n        return ClassLoader.getSystemResource(name);\n    }\n    return cl.getResource(name);\n}\n\nprivate String resolveName(String name) {\n        if (name == null) {\n            return name;\n        }\n        if (!name.startsWith(\"/\")) {\n            Class<?> c = this;\n            while (c.isArray()) {\n                c = c.getComponentType();\n            }\n            String baseName = c.getName();\n            int index = baseName.lastIndexOf('.');\n            if (index != -1) {\n                name = baseName.substring(0, index).replace('.', '/')\n                    +\"/\"+name;\n            }\n        } else {\n            name = name.substring(1);\n        }\n        return name;\n    }\n```\n\n","source":"_posts/java/2018-03-26-how-to-get-resource.md","raw":"---\nauthor: ivyxjc\ndate: 2018-03-26\ntitle: class.getResource() class.getClassLoader.getResource()之间的区别\ncategory: Java\ntags: [Java]\nkeywords:\ndescription:\ntoc: true\n---\n\n使用`*.class.getResouce()`和`*.class.getClassLoader.getResource()`是有一定的区别的。\n\n在maven，gradle等构建工具构建的项目，resouces文件夹下的内容默认在classpath下面。\n\n所以可以直接用`this.class.getClassLoader.getResource(...)`来获取对应的文件。\n\n<!--more-->\n\n##  Class与ClassLoader.getResource()之间的区别\n\n使用`*.class.getResouce()`和`*.class.getClassLoader.getResource()`是有一定的区别的。\n\n`*.class.getResouce()`先会`resolveName(name)`然后在委托给`classLoader`来处理。所以区别主要在于`resolveName(name)`。 `resolveName(name)`主要是功能是：若`name`以`/`开头，那么则直接调用`classLoader`来处理。若没有以`/`开头，则会将类全名中的点替换成`/`作为路径再加上name委托给`classLoader`来处理。\n\n所以要获取`resources`文件夹下的内容，`*.class.getResouce(name)`中的`name`要以`/`开头。而`this.class.getClassLoader.getResource(...)`不需要。\n\n```java\npublic java.net.URL getResource(String name) {\n    name = resolveName(name);\n    ClassLoader cl = getClassLoader0();\n    if (cl==null) {\n        // A system class.\n        return ClassLoader.getSystemResource(name);\n    }\n    return cl.getResource(name);\n}\n\nprivate String resolveName(String name) {\n        if (name == null) {\n            return name;\n        }\n        if (!name.startsWith(\"/\")) {\n            Class<?> c = this;\n            while (c.isArray()) {\n                c = c.getComponentType();\n            }\n            String baseName = c.getName();\n            int index = baseName.lastIndexOf('.');\n            if (index != -1) {\n                name = baseName.substring(0, index).replace('.', '/')\n                    +\"/\"+name;\n            }\n        } else {\n            name = name.substring(1);\n        }\n        return name;\n    }\n```\n\n","slug":"java/2018-03-26-how-to-get-resource","published":1,"updated":"2018-10-14T10:14:43.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7b000i28t1in90r072","content":"<p>使用<code>*.class.getResouce()</code>和<code>*.class.getClassLoader.getResource()</code>是有一定的区别的。</p>\n<p>在maven，gradle等构建工具构建的项目，resouces文件夹下的内容默认在classpath下面。</p>\n<p>所以可以直接用<code>this.class.getClassLoader.getResource(...)</code>来获取对应的文件。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Class与ClassLoader-getResource-之间的区别\"><a href=\"#Class与ClassLoader-getResource-之间的区别\" class=\"headerlink\" title=\"Class与ClassLoader.getResource()之间的区别\"></a>Class与ClassLoader.getResource()之间的区别</h2><p>使用<code>*.class.getResouce()</code>和<code>*.class.getClassLoader.getResource()</code>是有一定的区别的。</p>\n<p><code>*.class.getResouce()</code>先会<code>resolveName(name)</code>然后在委托给<code>classLoader</code>来处理。所以区别主要在于<code>resolveName(name)</code>。 <code>resolveName(name)</code>主要是功能是：若<code>name</code>以<code>/</code>开头，那么则直接调用<code>classLoader</code>来处理。若没有以<code>/</code>开头，则会将类全名中的点替换成<code>/</code>作为路径再加上name委托给<code>classLoader</code>来处理。</p>\n<p>所以要获取<code>resources</code>文件夹下的内容，<code>*.class.getResouce(name)</code>中的<code>name</code>要以<code>/</code>开头。而<code>this.class.getClassLoader.getResource(...)</code>不需要。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> java.net.<span class=\"function\">URL <span class=\"title\">getResource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    name = resolveName(name);</span><br><span class=\"line\">    ClassLoader cl = getClassLoader0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A system class.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ClassLoader.getSystemResource(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cl.getResource(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">resolveName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!name.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; c = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (c.isArray()) &#123;</span><br><span class=\"line\">                c = c.getComponentType();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String baseName = c.getName();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = baseName.lastIndexOf(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                name = baseName.substring(<span class=\"number\">0</span>, index).replace(<span class=\"string\">'.'</span>, <span class=\"string\">'/'</span>)</span><br><span class=\"line\">                    +<span class=\"string\">\"/\"</span>+name;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            name = name.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>使用<code>*.class.getResouce()</code>和<code>*.class.getClassLoader.getResource()</code>是有一定的区别的。</p>\n<p>在maven，gradle等构建工具构建的项目，resouces文件夹下的内容默认在classpath下面。</p>\n<p>所以可以直接用<code>this.class.getClassLoader.getResource(...)</code>来获取对应的文件。</p>","more":"<h2 id=\"Class与ClassLoader-getResource-之间的区别\"><a href=\"#Class与ClassLoader-getResource-之间的区别\" class=\"headerlink\" title=\"Class与ClassLoader.getResource()之间的区别\"></a>Class与ClassLoader.getResource()之间的区别</h2><p>使用<code>*.class.getResouce()</code>和<code>*.class.getClassLoader.getResource()</code>是有一定的区别的。</p>\n<p><code>*.class.getResouce()</code>先会<code>resolveName(name)</code>然后在委托给<code>classLoader</code>来处理。所以区别主要在于<code>resolveName(name)</code>。 <code>resolveName(name)</code>主要是功能是：若<code>name</code>以<code>/</code>开头，那么则直接调用<code>classLoader</code>来处理。若没有以<code>/</code>开头，则会将类全名中的点替换成<code>/</code>作为路径再加上name委托给<code>classLoader</code>来处理。</p>\n<p>所以要获取<code>resources</code>文件夹下的内容，<code>*.class.getResouce(name)</code>中的<code>name</code>要以<code>/</code>开头。而<code>this.class.getClassLoader.getResource(...)</code>不需要。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> java.net.<span class=\"function\">URL <span class=\"title\">getResource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    name = resolveName(name);</span><br><span class=\"line\">    ClassLoader cl = getClassLoader0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A system class.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ClassLoader.getSystemResource(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cl.getResource(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">resolveName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!name.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; c = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (c.isArray()) &#123;</span><br><span class=\"line\">                c = c.getComponentType();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String baseName = c.getName();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = baseName.lastIndexOf(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                name = baseName.substring(<span class=\"number\">0</span>, index).replace(<span class=\"string\">'.'</span>, <span class=\"string\">'/'</span>)</span><br><span class=\"line\">                    +<span class=\"string\">\"/\"</span>+name;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            name = name.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"author":"ivyxjc","date":"2016-11-17T16:00:00.000Z","title":"Builder","keywords":null,"description":null,"toc":true,"_content":"\n\n回调是一种特殊的调用, 调用有三种方式：同步调用, 回调\n\n回调就是在类A中持有一个接口的对象, 但是并不在A类中实现该接口的方法, 而是交给B类去实现, 但是B本身不会调用该方法, 而是供A类去使用.\n<!--nomore-->\n## 以Button为例\n\n```java\nclass Activity implements IListener{\n\n    private Button mButton;\n\n    public void onCreate(){\n        mButton=new Button();\n        mButton.setOnClickListener(this);\n        mButton.doClick();\n    }\n\n    @Override\n    public void onClick() {\n        StdOut.println(\"onClick\");\n    }\n}\n\ninterface IListener{\n    public void onClick();\n}\n\nclass Button{\n\n    IListener mListener;\n\n    public void setOnClickListener(IListener listener){\n        mListener=listener;\n    }\n\n    public void doClick(){\n        mListener.onClick();\n    }\n\n}\n\n```\n\n场景类：\n\n```java\npublic class Client_Button {\n    public static void main(String[] args){\n//        Button button=new Button();\n//        button.setOnClickListener(new IListener() {\n//            @Override\n//            public void onClick() {\n//                StdOut.println(\"onClick\");\n//            }\n//        });\n//\n//        button.doClick();\n\n        Activity activity=new Activity();\n        activity.onCreate();\n    }\n}\n\n---\nonClick\n```\n\n## Java\n\n\n```java\ninterface Callback{\n    public void solve(String str);\n}\n\nclass B implements Callback{\n    private A a;\n    public B(A a){\n        this.b=b;\n    }\n\n    public void askQuestion(final String question){\n\n//        //加一个线程就是异步回调, 把线程去掉直接doSomething就是同步调用\n//        new Thread(new Runnable() {\n//            @Override\n//            public void run() {\n                a.doSomething(A.this,question);\n//            }\n//        }).start();\n    }\n\n    @Override\n    public void solve(String str) {\n        StdOut.println(\"the answer is \"+str);\n    }\n}\n\n\n\nclass A{\n\n    void doSomething(Callback callback,String question){\n        StdOut.println(\"A gets question: \"+question);\n        StdOut.println(\"A do something\");\n        callback.solve(\"solved\");\n    }\n}\n```\n\n```java\n\npublic class Client_Java {\n    public static void main(String[] args){\n        A a=new A();\n        B b =new B(a);\n        b.askQuestion(\"a's question\");\n    }\n}\n```\n","source":"_posts/design_pattern/2016-11-18-callback.md","raw":"---\nauthor: ivyxjc\ndate: 2016-11-18\ntitle: Builder\ncategory: OO\ntags: [callback]\nkeywords:\ndescription:\ntoc: true\n---\n\n\n回调是一种特殊的调用, 调用有三种方式：同步调用, 回调\n\n回调就是在类A中持有一个接口的对象, 但是并不在A类中实现该接口的方法, 而是交给B类去实现, 但是B本身不会调用该方法, 而是供A类去使用.\n<!--nomore-->\n## 以Button为例\n\n```java\nclass Activity implements IListener{\n\n    private Button mButton;\n\n    public void onCreate(){\n        mButton=new Button();\n        mButton.setOnClickListener(this);\n        mButton.doClick();\n    }\n\n    @Override\n    public void onClick() {\n        StdOut.println(\"onClick\");\n    }\n}\n\ninterface IListener{\n    public void onClick();\n}\n\nclass Button{\n\n    IListener mListener;\n\n    public void setOnClickListener(IListener listener){\n        mListener=listener;\n    }\n\n    public void doClick(){\n        mListener.onClick();\n    }\n\n}\n\n```\n\n场景类：\n\n```java\npublic class Client_Button {\n    public static void main(String[] args){\n//        Button button=new Button();\n//        button.setOnClickListener(new IListener() {\n//            @Override\n//            public void onClick() {\n//                StdOut.println(\"onClick\");\n//            }\n//        });\n//\n//        button.doClick();\n\n        Activity activity=new Activity();\n        activity.onCreate();\n    }\n}\n\n---\nonClick\n```\n\n## Java\n\n\n```java\ninterface Callback{\n    public void solve(String str);\n}\n\nclass B implements Callback{\n    private A a;\n    public B(A a){\n        this.b=b;\n    }\n\n    public void askQuestion(final String question){\n\n//        //加一个线程就是异步回调, 把线程去掉直接doSomething就是同步调用\n//        new Thread(new Runnable() {\n//            @Override\n//            public void run() {\n                a.doSomething(A.this,question);\n//            }\n//        }).start();\n    }\n\n    @Override\n    public void solve(String str) {\n        StdOut.println(\"the answer is \"+str);\n    }\n}\n\n\n\nclass A{\n\n    void doSomething(Callback callback,String question){\n        StdOut.println(\"A gets question: \"+question);\n        StdOut.println(\"A do something\");\n        callback.solve(\"solved\");\n    }\n}\n```\n\n```java\n\npublic class Client_Java {\n    public static void main(String[] args){\n        A a=new A();\n        B b =new B(a);\n        b.askQuestion(\"a's question\");\n    }\n}\n```\n","slug":"design_pattern/2016-11-18-callback","published":1,"updated":"2018-08-09T10:10:11.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7c000j28t1243vkwdc","content":"<p>回调是一种特殊的调用, 调用有三种方式：同步调用, 回调</p>\n<p>回调就是在类A中持有一个接口的对象, 但是并不在A类中实现该接口的方法, 而是交给B类去实现, 但是B本身不会调用该方法, 而是供A类去使用.</p>\n<!--nomore-->\n<h2 id=\"以Button为例\"><a href=\"#以Button为例\" class=\"headerlink\" title=\"以Button为例\"></a>以Button为例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">IListener</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button mButton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        mButton=<span class=\"keyword\">new</span> Button();</span><br><span class=\"line\">        mButton.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        mButton.doClick();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"onClick\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IListener</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    IListener mListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnClickListener</span><span class=\"params\">(IListener listener)</span></span>&#123;</span><br><span class=\"line\">        mListener=listener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doClick</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        mListener.onClick();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>场景类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client_Button</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        Button button=new Button();</span></span><br><span class=\"line\"><span class=\"comment\">//        button.setOnClickListener(new IListener() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            @Override</span></span><br><span class=\"line\"><span class=\"comment\">//            public void onClick() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                StdOut.println(\"onClick\");</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        button.doClick();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Activity activity=<span class=\"keyword\">new</span> Activity();</span><br><span class=\"line\">        activity.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">onClick</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callback</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(String str)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callback</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> A a;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">B</span><span class=\"params\">(A a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.b=b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">askQuestion</span><span class=\"params\">(<span class=\"keyword\">final</span> String question)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        //加一个线程就是异步回调, 把线程去掉直接doSomething就是同步调用</span></span><br><span class=\"line\"><span class=\"comment\">//        new Thread(new Runnable() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            @Override</span></span><br><span class=\"line\"><span class=\"comment\">//            public void run() &#123;</span></span><br><span class=\"line\">                a.doSomething(A.<span class=\"keyword\">this</span>,question);</span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;).start();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"the answer is \"</span>+str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(Callback callback,String question)</span></span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"A gets question: \"</span>+question);</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"A do something\"</span>);</span><br><span class=\"line\">        callback.solve(<span class=\"string\">\"solved\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client_Java</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        A a=<span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        B b =<span class=\"keyword\">new</span> B(a);</span><br><span class=\"line\">        b.askQuestion(<span class=\"string\">\"a's question\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>回调是一种特殊的调用, 调用有三种方式：同步调用, 回调</p>\n<p>回调就是在类A中持有一个接口的对象, 但是并不在A类中实现该接口的方法, 而是交给B类去实现, 但是B本身不会调用该方法, 而是供A类去使用.</p>\n<!--nomore-->\n<h2 id=\"以Button为例\"><a href=\"#以Button为例\" class=\"headerlink\" title=\"以Button为例\"></a>以Button为例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">IListener</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button mButton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        mButton=<span class=\"keyword\">new</span> Button();</span><br><span class=\"line\">        mButton.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        mButton.doClick();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"onClick\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IListener</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    IListener mListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnClickListener</span><span class=\"params\">(IListener listener)</span></span>&#123;</span><br><span class=\"line\">        mListener=listener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doClick</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        mListener.onClick();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>场景类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client_Button</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        Button button=new Button();</span></span><br><span class=\"line\"><span class=\"comment\">//        button.setOnClickListener(new IListener() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            @Override</span></span><br><span class=\"line\"><span class=\"comment\">//            public void onClick() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                StdOut.println(\"onClick\");</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        button.doClick();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Activity activity=<span class=\"keyword\">new</span> Activity();</span><br><span class=\"line\">        activity.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">onClick</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callback</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(String str)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callback</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> A a;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">B</span><span class=\"params\">(A a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.b=b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">askQuestion</span><span class=\"params\">(<span class=\"keyword\">final</span> String question)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        //加一个线程就是异步回调, 把线程去掉直接doSomething就是同步调用</span></span><br><span class=\"line\"><span class=\"comment\">//        new Thread(new Runnable() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            @Override</span></span><br><span class=\"line\"><span class=\"comment\">//            public void run() &#123;</span></span><br><span class=\"line\">                a.doSomething(A.<span class=\"keyword\">this</span>,question);</span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;).start();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"the answer is \"</span>+str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(Callback callback,String question)</span></span>&#123;</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"A gets question: \"</span>+question);</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">\"A do something\"</span>);</span><br><span class=\"line\">        callback.solve(<span class=\"string\">\"solved\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client_Java</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        A a=<span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        B b =<span class=\"keyword\">new</span> B(a);</span><br><span class=\"line\">        b.askQuestion(<span class=\"string\">\"a's question\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-03-05T16:00:00.000Z","title":"python3注意点","keywords":null,"description":"python中的一些需要注意的地方. (1). tuple是不可变对象. (1)如何使用可变参数.","_content":"\n## dict set list tuple\ntuple是不可变对象。\n\ndict的key值最好使用不可变对象，例如**字符串**。最好不要用tuple。如果tuple中含有可变对象的话，还是会有错误：`TypeError: unhashable type: 'list'`。\n\n## 函数\n\n函数的默认参数最好是**不可变对象**。\n\n如下：\n\n```python\ndef add_some(L=[]):\n    if L is None:\n        L=[]\n    L.append(\"some\")\n    return L\n```\n```\n调用\n>>>add_some[]\n['some']\n>>>add_some[]\n['some','some']\n```\n\n### 可变参数\n\n在参数前加*即可使用可变参数，如下。\n\n```python\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n```\n\n```\n>>>calc(1,2,3,4)\n30\n>>>calc()\n0\n```\n\n在list，tuple前加*可以使之变为可变参数传入函数之中。\n\n```\n>>>list1=[1,2,3,4]\n>>>calc(*list1)\n30\n```\n","source":"_posts/python/2016-03-06-python3-注意点.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-06\ntitle: python3注意点\ncategory: Python\ntags: [python3,python]\nkeywords:\ndescription: python中的一些需要注意的地方. (1). tuple是不可变对象. (1)如何使用可变参数.\n---\n\n## dict set list tuple\ntuple是不可变对象。\n\ndict的key值最好使用不可变对象，例如**字符串**。最好不要用tuple。如果tuple中含有可变对象的话，还是会有错误：`TypeError: unhashable type: 'list'`。\n\n## 函数\n\n函数的默认参数最好是**不可变对象**。\n\n如下：\n\n```python\ndef add_some(L=[]):\n    if L is None:\n        L=[]\n    L.append(\"some\")\n    return L\n```\n```\n调用\n>>>add_some[]\n['some']\n>>>add_some[]\n['some','some']\n```\n\n### 可变参数\n\n在参数前加*即可使用可变参数，如下。\n\n```python\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n```\n\n```\n>>>calc(1,2,3,4)\n30\n>>>calc()\n0\n```\n\n在list，tuple前加*可以使之变为可变参数传入函数之中。\n\n```\n>>>list1=[1,2,3,4]\n>>>calc(*list1)\n30\n```\n","slug":"python/2016-03-06-python3-注意点","published":1,"updated":"2018-08-09T10:10:11.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7d000k28t1jzqrux8z","content":"<h2 id=\"dict-set-list-tuple\"><a href=\"#dict-set-list-tuple\" class=\"headerlink\" title=\"dict set list tuple\"></a>dict set list tuple</h2><p>tuple是不可变对象。</p>\n<p>dict的key值最好使用不可变对象，例如<strong>字符串</strong>。最好不要用tuple。如果tuple中含有可变对象的话，还是会有错误：<code>TypeError: unhashable type: &#39;list&#39;</code>。</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>函数的默认参数最好是<strong>不可变对象</strong>。</p>\n<p>如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_some</span><span class=\"params\">(L=[])</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> L <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        L=[]</span><br><span class=\"line\">    L.append(<span class=\"string\">\"some\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用</span><br><span class=\"line\">&gt;&gt;&gt;add_some[]</span><br><span class=\"line\">[&apos;some&apos;]</span><br><span class=\"line\">&gt;&gt;&gt;add_some[]</span><br><span class=\"line\">[&apos;some&apos;,&apos;some&apos;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><p>在参数前加*即可使用可变参数，如下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc</span><span class=\"params\">(*numbers)</span>:</span></span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        sum = sum + n * n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;calc(1,2,3,4)</span><br><span class=\"line\">30</span><br><span class=\"line\">&gt;&gt;&gt;calc()</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>在list，tuple前加*可以使之变为可变参数传入函数之中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;list1=[1,2,3,4]</span><br><span class=\"line\">&gt;&gt;&gt;calc(*list1)</span><br><span class=\"line\">30</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"dict-set-list-tuple\"><a href=\"#dict-set-list-tuple\" class=\"headerlink\" title=\"dict set list tuple\"></a>dict set list tuple</h2><p>tuple是不可变对象。</p>\n<p>dict的key值最好使用不可变对象，例如<strong>字符串</strong>。最好不要用tuple。如果tuple中含有可变对象的话，还是会有错误：<code>TypeError: unhashable type: &#39;list&#39;</code>。</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>函数的默认参数最好是<strong>不可变对象</strong>。</p>\n<p>如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_some</span><span class=\"params\">(L=[])</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> L <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        L=[]</span><br><span class=\"line\">    L.append(<span class=\"string\">\"some\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用</span><br><span class=\"line\">&gt;&gt;&gt;add_some[]</span><br><span class=\"line\">[&apos;some&apos;]</span><br><span class=\"line\">&gt;&gt;&gt;add_some[]</span><br><span class=\"line\">[&apos;some&apos;,&apos;some&apos;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><p>在参数前加*即可使用可变参数，如下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc</span><span class=\"params\">(*numbers)</span>:</span></span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        sum = sum + n * n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;calc(1,2,3,4)</span><br><span class=\"line\">30</span><br><span class=\"line\">&gt;&gt;&gt;calc()</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>在list，tuple前加*可以使之变为可变参数传入函数之中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;list1=[1,2,3,4]</span><br><span class=\"line\">&gt;&gt;&gt;calc(*list1)</span><br><span class=\"line\">30</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2018-12-29T16:00:00.000Z","title":"为什么行星轨道是椭圆","keywords":null,"description":null,"_content":"\n只根据基本的数学只是，微积分关于极限的思想，万有引力定律和角动量守恒定律来说明为什么行星轨道是椭圆。\n\n本文主要根据**3Blue1Brown**的一个视频[(B站)【官方双语】费曼失传的演讲](https://www.bilibili.com/video/av28012188)来写出的。\n\n\n##  一种构造椭圆的特殊方法\n\n### 构造方法\n1. 首先构建一个圆A, 并在圆内取另外一点C\n2. 从点C引线段到圆A上（即CD）\n3. 取CD的垂线，其中中垂线和线段AD的焦点为E，\n4. 重复2，3 的操作，点E的轨迹即是一个椭圆\n\n如下图： \n\n<!-- ![一种构造椭圆的方法](https://5gbg9g.ch.files.1drv.com/y4mcF8m_X7tik4PW--_G0A8YX_-cKOFgxzlkYZLVVSXtqZfoNJTf2mYJ8xS_2o0ViPlg6T-s1Zp2o_fWpYfcrrS6dpqRTgD4g7a9f4H2ZoKumtBGg8GPVQhv4YCCOsGT9V3HHzW1wsDRM5CxwJyqM5pb5FWKq6ARBFZt5lxZmlQPjsy5rHOxSOJcL1YuYkFB1LoSseHVugXhZBUZ-XLFfGr2w/elipse_1.gif) -->\n\n### 证明\n\n**椭圆**是平面上到两个固定点的距离之和为常数的点之轨迹。\n\n![](https://ch3301files.storage.live.com/y4mfqesmWk9tcvBJm1cjOBUc9J1vSi1OF7mllcwoMBPO2KCVy9TifP--R9GNtwcvrSR0IL9uFVgkx4p1JLRhN5VYOqogS9p7VyBqLyFHgDmDHu55GhPG33pyLce63JoInaYWU1W5bN_SdY9x63b5zju_i2l4we5vRhHhK9Cvj2Ri8Sie4IrPfjWOaokpjlb7isFBwv__KLJwJ-PzVULUIM3eA/elipse_prove.png?psid=1&width=891&height=778)\n\n\n因为FG是CD的中垂线，所以ED=EC，因此AE+ED=AE+EC。所以点E到点A和点C的长度和是固定的，因此点E的轨迹是一个椭圆。\n\n\n如果我们在线FG上另取一点X, 那么XD+XA>AD，意味着点X在椭圆外，这意味着FG与椭圆AC有且只有一个交点（E）。即FG是椭圆AC的切线。\n\n\n## 开普勒第二定律\n\n\n**开普勒第二定律**也被称为等面积定律，意即在相等时间内，太阳和运动着行星连线所扫过的面积是相同的。","source":"_posts/math/2018-12-30-why-planet-orbits-the-sun-in-elipse.md","raw":"---\nauthor: ivyxjc\ndate: 2018-12-30\ntitle: 为什么行星轨道是椭圆 \ncategory: Math\ntags: [math,elipse]\nkeywords:\ndescription: \n---\n\n只根据基本的数学只是，微积分关于极限的思想，万有引力定律和角动量守恒定律来说明为什么行星轨道是椭圆。\n\n本文主要根据**3Blue1Brown**的一个视频[(B站)【官方双语】费曼失传的演讲](https://www.bilibili.com/video/av28012188)来写出的。\n\n\n##  一种构造椭圆的特殊方法\n\n### 构造方法\n1. 首先构建一个圆A, 并在圆内取另外一点C\n2. 从点C引线段到圆A上（即CD）\n3. 取CD的垂线，其中中垂线和线段AD的焦点为E，\n4. 重复2，3 的操作，点E的轨迹即是一个椭圆\n\n如下图： \n\n<!-- ![一种构造椭圆的方法](https://5gbg9g.ch.files.1drv.com/y4mcF8m_X7tik4PW--_G0A8YX_-cKOFgxzlkYZLVVSXtqZfoNJTf2mYJ8xS_2o0ViPlg6T-s1Zp2o_fWpYfcrrS6dpqRTgD4g7a9f4H2ZoKumtBGg8GPVQhv4YCCOsGT9V3HHzW1wsDRM5CxwJyqM5pb5FWKq6ARBFZt5lxZmlQPjsy5rHOxSOJcL1YuYkFB1LoSseHVugXhZBUZ-XLFfGr2w/elipse_1.gif) -->\n\n### 证明\n\n**椭圆**是平面上到两个固定点的距离之和为常数的点之轨迹。\n\n![](https://ch3301files.storage.live.com/y4mfqesmWk9tcvBJm1cjOBUc9J1vSi1OF7mllcwoMBPO2KCVy9TifP--R9GNtwcvrSR0IL9uFVgkx4p1JLRhN5VYOqogS9p7VyBqLyFHgDmDHu55GhPG33pyLce63JoInaYWU1W5bN_SdY9x63b5zju_i2l4we5vRhHhK9Cvj2Ri8Sie4IrPfjWOaokpjlb7isFBwv__KLJwJ-PzVULUIM3eA/elipse_prove.png?psid=1&width=891&height=778)\n\n\n因为FG是CD的中垂线，所以ED=EC，因此AE+ED=AE+EC。所以点E到点A和点C的长度和是固定的，因此点E的轨迹是一个椭圆。\n\n\n如果我们在线FG上另取一点X, 那么XD+XA>AD，意味着点X在椭圆外，这意味着FG与椭圆AC有且只有一个交点（E）。即FG是椭圆AC的切线。\n\n\n## 开普勒第二定律\n\n\n**开普勒第二定律**也被称为等面积定律，意即在相等时间内，太阳和运动着行星连线所扫过的面积是相同的。","slug":"math/2018-12-30-why-planet-orbits-the-sun-in-elipse","published":1,"updated":"2019-01-13T12:47:07.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7d000l28t10rvs8wsl","content":"<p>只根据基本的数学只是，微积分关于极限的思想，万有引力定律和角动量守恒定律来说明为什么行星轨道是椭圆。</p>\n<p>本文主要根据<strong>3Blue1Brown</strong>的一个视频<a href=\"https://www.bilibili.com/video/av28012188\" target=\"_blank\" rel=\"noopener\">(B站)【官方双语】费曼失传的演讲</a>来写出的。</p>\n<h2 id=\"一种构造椭圆的特殊方法\"><a href=\"#一种构造椭圆的特殊方法\" class=\"headerlink\" title=\"一种构造椭圆的特殊方法\"></a>一种构造椭圆的特殊方法</h2><h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ol>\n<li>首先构建一个圆A, 并在圆内取另外一点C</li>\n<li>从点C引线段到圆A上（即CD）</li>\n<li>取CD的垂线，其中中垂线和线段AD的焦点为E，</li>\n<li>重复2，3 的操作，点E的轨迹即是一个椭圆</li>\n</ol>\n<p>如下图： </p>\n<!-- ![一种构造椭圆的方法](https://5gbg9g.ch.files.1drv.com/y4mcF8m_X7tik4PW--_G0A8YX_-cKOFgxzlkYZLVVSXtqZfoNJTf2mYJ8xS_2o0ViPlg6T-s1Zp2o_fWpYfcrrS6dpqRTgD4g7a9f4H2ZoKumtBGg8GPVQhv4YCCOsGT9V3HHzW1wsDRM5CxwJyqM5pb5FWKq6ARBFZt5lxZmlQPjsy5rHOxSOJcL1YuYkFB1LoSseHVugXhZBUZ-XLFfGr2w/elipse_1.gif) -->\n\n<h3 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h3><p><strong>椭圆</strong>是平面上到两个固定点的距离之和为常数的点之轨迹。</p>\n<p><img src=\"https://ch3301files.storage.live.com/y4mfqesmWk9tcvBJm1cjOBUc9J1vSi1OF7mllcwoMBPO2KCVy9TifP--R9GNtwcvrSR0IL9uFVgkx4p1JLRhN5VYOqogS9p7VyBqLyFHgDmDHu55GhPG33pyLce63JoInaYWU1W5bN_SdY9x63b5zju_i2l4we5vRhHhK9Cvj2Ri8Sie4IrPfjWOaokpjlb7isFBwv__KLJwJ-PzVULUIM3eA/elipse_prove.png?psid=1&width=891&height=778\" alt></p>\n<p>因为FG是CD的中垂线，所以ED=EC，因此AE+ED=AE+EC。所以点E到点A和点C的长度和是固定的，因此点E的轨迹是一个椭圆。</p>\n<p>如果我们在线FG上另取一点X, 那么XD+XA&gt;AD，意味着点X在椭圆外，这意味着FG与椭圆AC有且只有一个交点（E）。即FG是椭圆AC的切线。</p>\n<h2 id=\"开普勒第二定律\"><a href=\"#开普勒第二定律\" class=\"headerlink\" title=\"开普勒第二定律\"></a>开普勒第二定律</h2><p><strong>开普勒第二定律</strong>也被称为等面积定律，意即在相等时间内，太阳和运动着行星连线所扫过的面积是相同的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>只根据基本的数学只是，微积分关于极限的思想，万有引力定律和角动量守恒定律来说明为什么行星轨道是椭圆。</p>\n<p>本文主要根据<strong>3Blue1Brown</strong>的一个视频<a href=\"https://www.bilibili.com/video/av28012188\" target=\"_blank\" rel=\"noopener\">(B站)【官方双语】费曼失传的演讲</a>来写出的。</p>\n<h2 id=\"一种构造椭圆的特殊方法\"><a href=\"#一种构造椭圆的特殊方法\" class=\"headerlink\" title=\"一种构造椭圆的特殊方法\"></a>一种构造椭圆的特殊方法</h2><h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ol>\n<li>首先构建一个圆A, 并在圆内取另外一点C</li>\n<li>从点C引线段到圆A上（即CD）</li>\n<li>取CD的垂线，其中中垂线和线段AD的焦点为E，</li>\n<li>重复2，3 的操作，点E的轨迹即是一个椭圆</li>\n</ol>\n<p>如下图： </p>\n<!-- ![一种构造椭圆的方法](https://5gbg9g.ch.files.1drv.com/y4mcF8m_X7tik4PW--_G0A8YX_-cKOFgxzlkYZLVVSXtqZfoNJTf2mYJ8xS_2o0ViPlg6T-s1Zp2o_fWpYfcrrS6dpqRTgD4g7a9f4H2ZoKumtBGg8GPVQhv4YCCOsGT9V3HHzW1wsDRM5CxwJyqM5pb5FWKq6ARBFZt5lxZmlQPjsy5rHOxSOJcL1YuYkFB1LoSseHVugXhZBUZ-XLFfGr2w/elipse_1.gif) -->\n\n<h3 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h3><p><strong>椭圆</strong>是平面上到两个固定点的距离之和为常数的点之轨迹。</p>\n<p><img src=\"https://ch3301files.storage.live.com/y4mfqesmWk9tcvBJm1cjOBUc9J1vSi1OF7mllcwoMBPO2KCVy9TifP--R9GNtwcvrSR0IL9uFVgkx4p1JLRhN5VYOqogS9p7VyBqLyFHgDmDHu55GhPG33pyLce63JoInaYWU1W5bN_SdY9x63b5zju_i2l4we5vRhHhK9Cvj2Ri8Sie4IrPfjWOaokpjlb7isFBwv__KLJwJ-PzVULUIM3eA/elipse_prove.png?psid=1&width=891&height=778\" alt></p>\n<p>因为FG是CD的中垂线，所以ED=EC，因此AE+ED=AE+EC。所以点E到点A和点C的长度和是固定的，因此点E的轨迹是一个椭圆。</p>\n<p>如果我们在线FG上另取一点X, 那么XD+XA&gt;AD，意味着点X在椭圆外，这意味着FG与椭圆AC有且只有一个交点（E）。即FG是椭圆AC的切线。</p>\n<h2 id=\"开普勒第二定律\"><a href=\"#开普勒第二定律\" class=\"headerlink\" title=\"开普勒第二定律\"></a>开普勒第二定律</h2><p><strong>开普勒第二定律</strong>也被称为等面积定律，意即在相等时间内，太阳和运动着行星连线所扫过的面积是相同的。</p>\n"},{"author":"ivyxjc","date":"2016-03-31T16:00:00.000Z","title":"虚拟机环境搭建python以及相关问题解决","keywords":null,"description":"如何在linux虚拟机环境下搭建python","_content":"\n## 安装pip\n\n```\nsudo apt-get remove pip\nwget .../get-pip.py\npython get-pip.py\n```\n\n\n## 安装scrapy\n安装scrapy出现`Python.h No such file...`\n\n```\nsudo apt-get install python3-dev\n```\n\n\n若出现`failed to build wheel for Cryptography`\n\n```\nsudo apt-get install build-essential libssl-dev libffi-dev python-dev\n```\n\n## 安装pycharm\n\n进入pycharm文件内\n\n```\n./pycharm.sh\n```\n\n\n```\nsudo gedit /usr/share/applications/Pycharm.desktop\n然后输入\n[Desktop Entry]\nType=Application\nName=Pycharm\nGenericName=Pycharm3\nComment=Pycharm3:The Python IDE\nExec=\"/XXX/pycharm-community-3.4.1/bin/pycharm.sh\" %f\nIcon=/XXX/pycharm-community-3.4.1/bin/pycharm.png\nTerminal=pycharm\nCategories=Pycharm;\n```\n\n然后进入`/usr/share/applications/`双击打开即可。\n\n\n\n\n## VMware和主机共享文件夹\n\n\n\n\n```bash\nsudo apt-get install open-vm-tools-dkms\n```\n\n\n```\nsudo gksu gedit/etc/fstab\n```\n","source":"_posts/效率/2016-04-01-Linux-python-env-tips.md","raw":"---\nauthor: ivyxjc\ndate: 2016-04-01\ntitle: 虚拟机环境搭建python以及相关问题解决\ncategory: 效率\ntags: [faq,python,spider,bs4]\nkeywords:\ndescription: 如何在linux虚拟机环境下搭建python\n---\n\n## 安装pip\n\n```\nsudo apt-get remove pip\nwget .../get-pip.py\npython get-pip.py\n```\n\n\n## 安装scrapy\n安装scrapy出现`Python.h No such file...`\n\n```\nsudo apt-get install python3-dev\n```\n\n\n若出现`failed to build wheel for Cryptography`\n\n```\nsudo apt-get install build-essential libssl-dev libffi-dev python-dev\n```\n\n## 安装pycharm\n\n进入pycharm文件内\n\n```\n./pycharm.sh\n```\n\n\n```\nsudo gedit /usr/share/applications/Pycharm.desktop\n然后输入\n[Desktop Entry]\nType=Application\nName=Pycharm\nGenericName=Pycharm3\nComment=Pycharm3:The Python IDE\nExec=\"/XXX/pycharm-community-3.4.1/bin/pycharm.sh\" %f\nIcon=/XXX/pycharm-community-3.4.1/bin/pycharm.png\nTerminal=pycharm\nCategories=Pycharm;\n```\n\n然后进入`/usr/share/applications/`双击打开即可。\n\n\n\n\n## VMware和主机共享文件夹\n\n\n\n\n```bash\nsudo apt-get install open-vm-tools-dkms\n```\n\n\n```\nsudo gksu gedit/etc/fstab\n```\n","slug":"效率/2016-04-01-Linux-python-env-tips","published":1,"updated":"2018-08-09T10:10:11.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7e000m28t1tyi5qz57","content":"<h2 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove pip</span><br><span class=\"line\">wget .../get-pip.py</span><br><span class=\"line\">python get-pip.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装scrapy\"><a href=\"#安装scrapy\" class=\"headerlink\" title=\"安装scrapy\"></a>安装scrapy</h2><p>安装scrapy出现<code>Python.h No such file...</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python3-dev</span><br></pre></td></tr></table></figure>\n\n<p>若出现<code>failed to build wheel for Cryptography</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential libssl-dev libffi-dev python-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装pycharm\"><a href=\"#安装pycharm\" class=\"headerlink\" title=\"安装pycharm\"></a>安装pycharm</h2><p>进入pycharm文件内</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./pycharm.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /usr/share/applications/Pycharm.desktop</span><br><span class=\"line\">然后输入</span><br><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Name=Pycharm</span><br><span class=\"line\">GenericName=Pycharm3</span><br><span class=\"line\">Comment=Pycharm3:The Python IDE</span><br><span class=\"line\">Exec=&quot;/XXX/pycharm-community-3.4.1/bin/pycharm.sh&quot; %f</span><br><span class=\"line\">Icon=/XXX/pycharm-community-3.4.1/bin/pycharm.png</span><br><span class=\"line\">Terminal=pycharm</span><br><span class=\"line\">Categories=Pycharm;</span><br></pre></td></tr></table></figure>\n\n<p>然后进入<code>/usr/share/applications/</code>双击打开即可。</p>\n<h2 id=\"VMware和主机共享文件夹\"><a href=\"#VMware和主机共享文件夹\" class=\"headerlink\" title=\"VMware和主机共享文件夹\"></a>VMware和主机共享文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install open-vm-tools-dkms</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gksu gedit/etc/fstab</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove pip</span><br><span class=\"line\">wget .../get-pip.py</span><br><span class=\"line\">python get-pip.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装scrapy\"><a href=\"#安装scrapy\" class=\"headerlink\" title=\"安装scrapy\"></a>安装scrapy</h2><p>安装scrapy出现<code>Python.h No such file...</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python3-dev</span><br></pre></td></tr></table></figure>\n\n<p>若出现<code>failed to build wheel for Cryptography</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential libssl-dev libffi-dev python-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装pycharm\"><a href=\"#安装pycharm\" class=\"headerlink\" title=\"安装pycharm\"></a>安装pycharm</h2><p>进入pycharm文件内</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./pycharm.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /usr/share/applications/Pycharm.desktop</span><br><span class=\"line\">然后输入</span><br><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Name=Pycharm</span><br><span class=\"line\">GenericName=Pycharm3</span><br><span class=\"line\">Comment=Pycharm3:The Python IDE</span><br><span class=\"line\">Exec=&quot;/XXX/pycharm-community-3.4.1/bin/pycharm.sh&quot; %f</span><br><span class=\"line\">Icon=/XXX/pycharm-community-3.4.1/bin/pycharm.png</span><br><span class=\"line\">Terminal=pycharm</span><br><span class=\"line\">Categories=Pycharm;</span><br></pre></td></tr></table></figure>\n\n<p>然后进入<code>/usr/share/applications/</code>双击打开即可。</p>\n<h2 id=\"VMware和主机共享文件夹\"><a href=\"#VMware和主机共享文件夹\" class=\"headerlink\" title=\"VMware和主机共享文件夹\"></a>VMware和主机共享文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install open-vm-tools-dkms</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gksu gedit/etc/fstab</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-10-29T16:00:00.000Z","title":"python 生成器函数","keywords":null,"description":"python中生成器函数","_content":"\n\n\n\n## 生成器函数\n\n生成器函数是一个迭代器, 不过只能遍历其一次, 这是因为生成器并不将数据存储在内存之中, 生成完数据后并不保存下来.\n\n```python\n\nlist=(i for i in range(5))\n\nfor i in list:\n    print(i)\n\nprint(\"---\")\nfor i in list:\n    print(i)\n\nout:\n0\n1\n2\n3\n4\n---\n\n```\n\n```python\n\ndef createGenerator():\n    for i in range(5):\n        yield i*i\n\ngen=createGenerator()\nfor i in gen:\n    print(i)\n\nprint(\"---\")\nfor i in gen:\n    print(i)\nout:\n\n0\n1\n4\n9\n16\n---\n```\n\n另外, 生成器函数并不是再调用的时候就运行的, 而是在遍历的时候才运行, 在上述代码中, 意味着生成器函数是在执行`for i in gen:`时才运行的.\n\n解释器是如何知道其是生成器函数的呢? 当解释器发现`yield`时, 就知道该函数是个生成器函数, 它会设置一个标识来标记这一情况, 调用type也可以发现这一情况.\n\n```python\n#生成器标志位在第5位\ngenerator_bit=1<<5\nb=bool(createGenerator.__code__.co_flags & generator_bit)\nprint(b)\nprint(type(createGenerator))\n\nout:\nTrue\n<class 'generator'>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考文章:\n\n[A Web Crawler With asyncio Coroutines](http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html)\n\n[What does the yield keyword do](http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do)\n","source":"_posts/python/2016-10-30-generator.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-30\ntitle: python 生成器函数\ncategory: Python\ntags: [python,generators]\nkeywords:\ndescription: python中生成器函数\n---\n\n\n\n\n## 生成器函数\n\n生成器函数是一个迭代器, 不过只能遍历其一次, 这是因为生成器并不将数据存储在内存之中, 生成完数据后并不保存下来.\n\n```python\n\nlist=(i for i in range(5))\n\nfor i in list:\n    print(i)\n\nprint(\"---\")\nfor i in list:\n    print(i)\n\nout:\n0\n1\n2\n3\n4\n---\n\n```\n\n```python\n\ndef createGenerator():\n    for i in range(5):\n        yield i*i\n\ngen=createGenerator()\nfor i in gen:\n    print(i)\n\nprint(\"---\")\nfor i in gen:\n    print(i)\nout:\n\n0\n1\n4\n9\n16\n---\n```\n\n另外, 生成器函数并不是再调用的时候就运行的, 而是在遍历的时候才运行, 在上述代码中, 意味着生成器函数是在执行`for i in gen:`时才运行的.\n\n解释器是如何知道其是生成器函数的呢? 当解释器发现`yield`时, 就知道该函数是个生成器函数, 它会设置一个标识来标记这一情况, 调用type也可以发现这一情况.\n\n```python\n#生成器标志位在第5位\ngenerator_bit=1<<5\nb=bool(createGenerator.__code__.co_flags & generator_bit)\nprint(b)\nprint(type(createGenerator))\n\nout:\nTrue\n<class 'generator'>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考文章:\n\n[A Web Crawler With asyncio Coroutines](http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html)\n\n[What does the yield keyword do](http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do)\n","slug":"python/2016-10-30-generator","published":1,"updated":"2018-08-09T10:10:11.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7f000n28t19azz9yhg","content":"<h2 id=\"生成器函数\"><a href=\"#生成器函数\" class=\"headerlink\" title=\"生成器函数\"></a>生成器函数</h2><p>生成器函数是一个迭代器, 不过只能遍历其一次, 这是因为生成器并不将数据存储在内存之中, 生成完数据后并不保存下来.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">list=(i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"---\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">out:</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createGenerator</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i*i</span><br><span class=\"line\"></span><br><span class=\"line\">gen=createGenerator()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> gen:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"---\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> gen:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\">out:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>另外, 生成器函数并不是再调用的时候就运行的, 而是在遍历的时候才运行, 在上述代码中, 意味着生成器函数是在执行<code>for i in gen:</code>时才运行的.</p>\n<p>解释器是如何知道其是生成器函数的呢? 当解释器发现<code>yield</code>时, 就知道该函数是个生成器函数, 它会设置一个标识来标记这一情况, 调用type也可以发现这一情况.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#生成器标志位在第5位</span></span><br><span class=\"line\">generator_bit=<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span></span><br><span class=\"line\">b=bool(createGenerator.__code__.co_flags &amp; generator_bit)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(type(createGenerator))</span><br><span class=\"line\"></span><br><span class=\"line\">out:</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">generator</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>参考文章:</p>\n<p><a href=\"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html\" target=\"_blank\" rel=\"noopener\">A Web Crawler With asyncio Coroutines</a></p>\n<p><a href=\"http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do\" target=\"_blank\" rel=\"noopener\">What does the yield keyword do</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"生成器函数\"><a href=\"#生成器函数\" class=\"headerlink\" title=\"生成器函数\"></a>生成器函数</h2><p>生成器函数是一个迭代器, 不过只能遍历其一次, 这是因为生成器并不将数据存储在内存之中, 生成完数据后并不保存下来.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">list=(i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"---\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">out:</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createGenerator</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i*i</span><br><span class=\"line\"></span><br><span class=\"line\">gen=createGenerator()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> gen:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"---\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> gen:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\">out:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>另外, 生成器函数并不是再调用的时候就运行的, 而是在遍历的时候才运行, 在上述代码中, 意味着生成器函数是在执行<code>for i in gen:</code>时才运行的.</p>\n<p>解释器是如何知道其是生成器函数的呢? 当解释器发现<code>yield</code>时, 就知道该函数是个生成器函数, 它会设置一个标识来标记这一情况, 调用type也可以发现这一情况.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#生成器标志位在第5位</span></span><br><span class=\"line\">generator_bit=<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span></span><br><span class=\"line\">b=bool(createGenerator.__code__.co_flags &amp; generator_bit)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(type(createGenerator))</span><br><span class=\"line\"></span><br><span class=\"line\">out:</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">generator</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>参考文章:</p>\n<p><a href=\"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html\" target=\"_blank\" rel=\"noopener\">A Web Crawler With asyncio Coroutines</a></p>\n<p><a href=\"http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do\" target=\"_blank\" rel=\"noopener\">What does the yield keyword do</a></p>\n"},{"author":"ivyxjc","date":"2016-06-08T16:00:00.000Z","title":"在Centos 6中升级python","keywords":null,"description":null,"_content":"\nCentos默认的python使用的是`python2.6`,我常用的是`python3.5`,所以需要升级python.\n<!--more-->\n\n安装过程:\n\n1. 下载python3.5.1\n`wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz`\n2. 解压并安装\n 1. `tar zxvf Python-3.5.1.tgz`\n 2. `cd Python-3.5.1`\n 3. `./configure --prefix=/usr/local/python3.5`\n 4. `make`\n 5. `make install`\n3. 备份原有python命令执行文件\n`mv /usr/bin/python /usr/bin/pythonbak`\n4. 创建新的python软连接\n   `ln -s /usr/local/python3.5/bin/python3.5 /usr/bin/python`\n\n问题:\n1. 2.3步可能出现`no acceptable C compiler found in $PATH`问题,这是因为完整的安装`development tools`.\n    解决方法:`yum groupinstall \"Development Tools\"`\n\n2. pip无法使用,出现`versionconflic`的问题,好像是因为pip版本的问题.进入pip的目录,删除pip.再直接下载上述错误信息中显示的`requirement.parse()`中的pip版本,解压缩,安装即可.\n","source":"_posts/效率/2016-06-09-update-python.md","raw":"---\nauthor: ivyxjc\ndate: 2016-06-09\ntitle: 在Centos 6中升级python\ncategory: 效率\ntags: [faq]\nkeywords:\ndescription:\n---\n\nCentos默认的python使用的是`python2.6`,我常用的是`python3.5`,所以需要升级python.\n<!--more-->\n\n安装过程:\n\n1. 下载python3.5.1\n`wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz`\n2. 解压并安装\n 1. `tar zxvf Python-3.5.1.tgz`\n 2. `cd Python-3.5.1`\n 3. `./configure --prefix=/usr/local/python3.5`\n 4. `make`\n 5. `make install`\n3. 备份原有python命令执行文件\n`mv /usr/bin/python /usr/bin/pythonbak`\n4. 创建新的python软连接\n   `ln -s /usr/local/python3.5/bin/python3.5 /usr/bin/python`\n\n问题:\n1. 2.3步可能出现`no acceptable C compiler found in $PATH`问题,这是因为完整的安装`development tools`.\n    解决方法:`yum groupinstall \"Development Tools\"`\n\n2. pip无法使用,出现`versionconflic`的问题,好像是因为pip版本的问题.进入pip的目录,删除pip.再直接下载上述错误信息中显示的`requirement.parse()`中的pip版本,解压缩,安装即可.\n","slug":"效率/2016-06-09-update-python","published":1,"updated":"2018-08-09T10:10:11.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7f000o28t1idjgygjc","content":"<p>Centos默认的python使用的是<code>python2.6</code>,我常用的是<code>python3.5</code>,所以需要升级python.</p>\n<a id=\"more\"></a>\n\n<p>安装过程:</p>\n<ol>\n<li>下载python3.5.1<br><code>wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz</code></li>\n<li>解压并安装<ol>\n<li><code>tar zxvf Python-3.5.1.tgz</code></li>\n<li><code>cd Python-3.5.1</code></li>\n<li><code>./configure --prefix=/usr/local/python3.5</code></li>\n<li><code>make</code></li>\n<li><code>make install</code></li>\n</ol>\n</li>\n<li>备份原有python命令执行文件<br><code>mv /usr/bin/python /usr/bin/pythonbak</code></li>\n<li>创建新的python软连接<br><code>ln -s /usr/local/python3.5/bin/python3.5 /usr/bin/python</code></li>\n</ol>\n<p>问题:</p>\n<ol>\n<li><p>2.3步可能出现<code>no acceptable C compiler found in $PATH</code>问题,这是因为完整的安装<code>development tools</code>.<br> 解决方法:<code>yum groupinstall &quot;Development Tools&quot;</code></p>\n</li>\n<li><p>pip无法使用,出现<code>versionconflic</code>的问题,好像是因为pip版本的问题.进入pip的目录,删除pip.再直接下载上述错误信息中显示的<code>requirement.parse()</code>中的pip版本,解压缩,安装即可.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Centos默认的python使用的是<code>python2.6</code>,我常用的是<code>python3.5</code>,所以需要升级python.</p>","more":"<p>安装过程:</p>\n<ol>\n<li>下载python3.5.1<br><code>wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz</code></li>\n<li>解压并安装<ol>\n<li><code>tar zxvf Python-3.5.1.tgz</code></li>\n<li><code>cd Python-3.5.1</code></li>\n<li><code>./configure --prefix=/usr/local/python3.5</code></li>\n<li><code>make</code></li>\n<li><code>make install</code></li>\n</ol>\n</li>\n<li>备份原有python命令执行文件<br><code>mv /usr/bin/python /usr/bin/pythonbak</code></li>\n<li>创建新的python软连接<br><code>ln -s /usr/local/python3.5/bin/python3.5 /usr/bin/python</code></li>\n</ol>\n<p>问题:</p>\n<ol>\n<li><p>2.3步可能出现<code>no acceptable C compiler found in $PATH</code>问题,这是因为完整的安装<code>development tools</code>.<br> 解决方法:<code>yum groupinstall &quot;Development Tools&quot;</code></p>\n</li>\n<li><p>pip无法使用,出现<code>versionconflic</code>的问题,好像是因为pip版本的问题.进入pip的目录,删除pip.再直接下载上述错误信息中显示的<code>requirement.parse()</code>中的pip版本,解压缩,安装即可.</p>\n</li>\n</ol>"},{"author":"ivyxjc","date":"2016-10-13T16:00:00.000Z","title":"Git相关命令及用法","keywords":null,"description":"本文主要如何使用git, (1). 最基础的add,commit, push <br> (2). 如何在git文件中添加子模块","toc":true,"_content":"\n## add commit push\n\n```\ngit add *\ngit commit -m \"\"\ngit push -u origin branch\n```\n\n在删除某一些文件时, 应使用`git add .`. 否则, 会出现`Changes not staged for commit: ...`\n\n## 清除提交记录\n\n```\ngit filter-branch --force --index-filter 'git rm --cached --ignore-unmatch path-to-your-remove-file' --prune-empty --tag-name-filter cat -- --all\n```\n\n上面会在历史记录里面删除相应的文件\n\n\n```\n# 执行垃圾回收\nrm -rf .git/refs/original/\ngit gc --prune=now\ngit gc --aggressive --prune=now\n```\n\n## 添加子模块\n\n子模块的操作必须非常小心, 因为其中有很多坑.\n\n### 第一次添加子模块\n\n```git\ngit submodule add git://github.com/chneukirchen/rack.git rack\n```\n\n### 删除某个子模块\n\n`git rm --cached pathOfSubmodule`\n\n然后删除_config.yml以及.git/config文件中相关记录\n\n### 更改子模块后提交对子模块的修改\n\n进入子模块所在目录\n\n```\ngit add *\ngit commit -m \"\"\ngit push\n```\n\n### 主项目提交\n\n我们可以直接像正常git文件一样的流程进行提交, 但是如果我们忘记提交子模块的变动, 而新的项目和子模块的变动又相关. 那么其他人从远程仓库中clone的文件可能并不能正确运行(缺少必要的子模块变动).\n\n所有推荐使用以下两种方法：\n1. `git push --recurse-submodules=check`. 若有子模块的变动没有推送, 那么该`push`会失败.\n2. `git push --recurse-submodules=on-demand`. 若有子模块的变动没有推送, 那么它会先推送子模块的变动, 然后再推送主项目.\n\n### 子模块的更新\n\n其他人如果对子模块进行了修改, 在`git pull`之后, 再调用以下`git submodule update`更新子模块.\n\n调用`git submodule update`也更新子模块的相关内容, 但是会将子模块留在一个称作 `detached HEAD`的状态. 这意味着没有本地工作分支（例如 “master”）跟踪改动。 所以你做的任何改动都不会被跟踪。即使你使用了commit提交了一些变动, 在你下一次使用`git submodule update`时, 这些变动会全部丢失.\n\n所以需要进入每一个你希望对其进行修改的子模块,`git checkout branchName`检出一个分支. 从远程仓库中更新本地文件时, 使用`git submodule update --remote --merge`, 也可以使用`--rebase`.\n\n如果忘记了`--rebase`或者`--merge`, git会将子模块更新为远程仓库上的状态, 而且该项目将再一次进入 `detached HEAD` 的状态. 解决方法：\n\n1. 检出包含之前本地更改的分支\n2. 然后手动的merge或者rebase任何一个远程分支即可.\n\n即使没有提交子模块的更改也某有问题, 此时git只会抓取更改, 而不会覆盖本地内容.\n\n### 克隆一个带子模块的项目\n\n克隆一个包含子模块的项目.`git clone`下来之后, 该子模块并不会被clone下来.需要调用以下两个命令：\n1. `git submodule init`来下载本地所需的子模块配置文件文件\n2. `git submodule update `来下载主项目中列出的合适的子模块提交\n\n也可以使用`git clone --recursivegit clone --recursive https://github.com/...`自动地初始化并更新仓库中的每一个子模块.\n","source":"_posts/效率/2016-10-14-git.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-14\ntitle: Git相关命令及用法\ncategory: 效率\ntags: [faq,git]\nkeywords:\ndescription: 本文主要如何使用git, (1). 最基础的add,commit, push <br> (2). 如何在git文件中添加子模块\ntoc: true\n---\n\n## add commit push\n\n```\ngit add *\ngit commit -m \"\"\ngit push -u origin branch\n```\n\n在删除某一些文件时, 应使用`git add .`. 否则, 会出现`Changes not staged for commit: ...`\n\n## 清除提交记录\n\n```\ngit filter-branch --force --index-filter 'git rm --cached --ignore-unmatch path-to-your-remove-file' --prune-empty --tag-name-filter cat -- --all\n```\n\n上面会在历史记录里面删除相应的文件\n\n\n```\n# 执行垃圾回收\nrm -rf .git/refs/original/\ngit gc --prune=now\ngit gc --aggressive --prune=now\n```\n\n## 添加子模块\n\n子模块的操作必须非常小心, 因为其中有很多坑.\n\n### 第一次添加子模块\n\n```git\ngit submodule add git://github.com/chneukirchen/rack.git rack\n```\n\n### 删除某个子模块\n\n`git rm --cached pathOfSubmodule`\n\n然后删除_config.yml以及.git/config文件中相关记录\n\n### 更改子模块后提交对子模块的修改\n\n进入子模块所在目录\n\n```\ngit add *\ngit commit -m \"\"\ngit push\n```\n\n### 主项目提交\n\n我们可以直接像正常git文件一样的流程进行提交, 但是如果我们忘记提交子模块的变动, 而新的项目和子模块的变动又相关. 那么其他人从远程仓库中clone的文件可能并不能正确运行(缺少必要的子模块变动).\n\n所有推荐使用以下两种方法：\n1. `git push --recurse-submodules=check`. 若有子模块的变动没有推送, 那么该`push`会失败.\n2. `git push --recurse-submodules=on-demand`. 若有子模块的变动没有推送, 那么它会先推送子模块的变动, 然后再推送主项目.\n\n### 子模块的更新\n\n其他人如果对子模块进行了修改, 在`git pull`之后, 再调用以下`git submodule update`更新子模块.\n\n调用`git submodule update`也更新子模块的相关内容, 但是会将子模块留在一个称作 `detached HEAD`的状态. 这意味着没有本地工作分支（例如 “master”）跟踪改动。 所以你做的任何改动都不会被跟踪。即使你使用了commit提交了一些变动, 在你下一次使用`git submodule update`时, 这些变动会全部丢失.\n\n所以需要进入每一个你希望对其进行修改的子模块,`git checkout branchName`检出一个分支. 从远程仓库中更新本地文件时, 使用`git submodule update --remote --merge`, 也可以使用`--rebase`.\n\n如果忘记了`--rebase`或者`--merge`, git会将子模块更新为远程仓库上的状态, 而且该项目将再一次进入 `detached HEAD` 的状态. 解决方法：\n\n1. 检出包含之前本地更改的分支\n2. 然后手动的merge或者rebase任何一个远程分支即可.\n\n即使没有提交子模块的更改也某有问题, 此时git只会抓取更改, 而不会覆盖本地内容.\n\n### 克隆一个带子模块的项目\n\n克隆一个包含子模块的项目.`git clone`下来之后, 该子模块并不会被clone下来.需要调用以下两个命令：\n1. `git submodule init`来下载本地所需的子模块配置文件文件\n2. `git submodule update `来下载主项目中列出的合适的子模块提交\n\n也可以使用`git clone --recursivegit clone --recursive https://github.com/...`自动地初始化并更新仓库中的每一个子模块.\n","slug":"效率/2016-10-14-git","published":1,"updated":"2018-08-09T10:10:11.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7g000p28t1utp78yf5","content":"<h2 id=\"add-commit-push\"><a href=\"#add-commit-push\" class=\"headerlink\" title=\"add commit push\"></a>add commit push</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push -u origin branch</span><br></pre></td></tr></table></figure>\n\n<p>在删除某一些文件时, 应使用<code>git add .</code>. 否则, 会出现<code>Changes not staged for commit: ...</code></p>\n<h2 id=\"清除提交记录\"><a href=\"#清除提交记录\" class=\"headerlink\" title=\"清除提交记录\"></a>清除提交记录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git filter-branch --force --index-filter &apos;git rm --cached --ignore-unmatch path-to-your-remove-file&apos; --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure>\n\n<p>上面会在历史记录里面删除相应的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行垃圾回收</span><br><span class=\"line\">rm -rf .git/refs/original/</span><br><span class=\"line\">git gc --prune=now</span><br><span class=\"line\">git gc --aggressive --prune=now</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加子模块\"><a href=\"#添加子模块\" class=\"headerlink\" title=\"添加子模块\"></a>添加子模块</h2><p>子模块的操作必须非常小心, 因为其中有很多坑.</p>\n<h3 id=\"第一次添加子模块\"><a href=\"#第一次添加子模块\" class=\"headerlink\" title=\"第一次添加子模块\"></a>第一次添加子模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add git://github.com/chneukirchen/rack.git rack</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除某个子模块\"><a href=\"#删除某个子模块\" class=\"headerlink\" title=\"删除某个子模块\"></a>删除某个子模块</h3><p><code>git rm --cached pathOfSubmodule</code></p>\n<p>然后删除_config.yml以及.git/config文件中相关记录</p>\n<h3 id=\"更改子模块后提交对子模块的修改\"><a href=\"#更改子模块后提交对子模块的修改\" class=\"headerlink\" title=\"更改子模块后提交对子模块的修改\"></a>更改子模块后提交对子模块的修改</h3><p>进入子模块所在目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主项目提交\"><a href=\"#主项目提交\" class=\"headerlink\" title=\"主项目提交\"></a>主项目提交</h3><p>我们可以直接像正常git文件一样的流程进行提交, 但是如果我们忘记提交子模块的变动, 而新的项目和子模块的变动又相关. 那么其他人从远程仓库中clone的文件可能并不能正确运行(缺少必要的子模块变动).</p>\n<p>所有推荐使用以下两种方法：</p>\n<ol>\n<li><code>git push --recurse-submodules=check</code>. 若有子模块的变动没有推送, 那么该<code>push</code>会失败.</li>\n<li><code>git push --recurse-submodules=on-demand</code>. 若有子模块的变动没有推送, 那么它会先推送子模块的变动, 然后再推送主项目.</li>\n</ol>\n<h3 id=\"子模块的更新\"><a href=\"#子模块的更新\" class=\"headerlink\" title=\"子模块的更新\"></a>子模块的更新</h3><p>其他人如果对子模块进行了修改, 在<code>git pull</code>之后, 再调用以下<code>git submodule update</code>更新子模块.</p>\n<p>调用<code>git submodule update</code>也更新子模块的相关内容, 但是会将子模块留在一个称作 <code>detached HEAD</code>的状态. 这意味着没有本地工作分支（例如 “master”）跟踪改动。 所以你做的任何改动都不会被跟踪。即使你使用了commit提交了一些变动, 在你下一次使用<code>git submodule update</code>时, 这些变动会全部丢失.</p>\n<p>所以需要进入每一个你希望对其进行修改的子模块,<code>git checkout branchName</code>检出一个分支. 从远程仓库中更新本地文件时, 使用<code>git submodule update --remote --merge</code>, 也可以使用<code>--rebase</code>.</p>\n<p>如果忘记了<code>--rebase</code>或者<code>--merge</code>, git会将子模块更新为远程仓库上的状态, 而且该项目将再一次进入 <code>detached HEAD</code> 的状态. 解决方法：</p>\n<ol>\n<li>检出包含之前本地更改的分支</li>\n<li>然后手动的merge或者rebase任何一个远程分支即可.</li>\n</ol>\n<p>即使没有提交子模块的更改也某有问题, 此时git只会抓取更改, 而不会覆盖本地内容.</p>\n<h3 id=\"克隆一个带子模块的项目\"><a href=\"#克隆一个带子模块的项目\" class=\"headerlink\" title=\"克隆一个带子模块的项目\"></a>克隆一个带子模块的项目</h3><p>克隆一个包含子模块的项目.<code>git clone</code>下来之后, 该子模块并不会被clone下来.需要调用以下两个命令：</p>\n<ol>\n<li><code>git submodule init</code>来下载本地所需的子模块配置文件文件</li>\n<li><code>git submodule update</code>来下载主项目中列出的合适的子模块提交</li>\n</ol>\n<p>也可以使用<code>git clone --recursivegit clone --recursive https://github.com/...</code>自动地初始化并更新仓库中的每一个子模块.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"add-commit-push\"><a href=\"#add-commit-push\" class=\"headerlink\" title=\"add commit push\"></a>add commit push</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push -u origin branch</span><br></pre></td></tr></table></figure>\n\n<p>在删除某一些文件时, 应使用<code>git add .</code>. 否则, 会出现<code>Changes not staged for commit: ...</code></p>\n<h2 id=\"清除提交记录\"><a href=\"#清除提交记录\" class=\"headerlink\" title=\"清除提交记录\"></a>清除提交记录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git filter-branch --force --index-filter &apos;git rm --cached --ignore-unmatch path-to-your-remove-file&apos; --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure>\n\n<p>上面会在历史记录里面删除相应的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行垃圾回收</span><br><span class=\"line\">rm -rf .git/refs/original/</span><br><span class=\"line\">git gc --prune=now</span><br><span class=\"line\">git gc --aggressive --prune=now</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加子模块\"><a href=\"#添加子模块\" class=\"headerlink\" title=\"添加子模块\"></a>添加子模块</h2><p>子模块的操作必须非常小心, 因为其中有很多坑.</p>\n<h3 id=\"第一次添加子模块\"><a href=\"#第一次添加子模块\" class=\"headerlink\" title=\"第一次添加子模块\"></a>第一次添加子模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add git://github.com/chneukirchen/rack.git rack</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除某个子模块\"><a href=\"#删除某个子模块\" class=\"headerlink\" title=\"删除某个子模块\"></a>删除某个子模块</h3><p><code>git rm --cached pathOfSubmodule</code></p>\n<p>然后删除_config.yml以及.git/config文件中相关记录</p>\n<h3 id=\"更改子模块后提交对子模块的修改\"><a href=\"#更改子模块后提交对子模块的修改\" class=\"headerlink\" title=\"更改子模块后提交对子模块的修改\"></a>更改子模块后提交对子模块的修改</h3><p>进入子模块所在目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主项目提交\"><a href=\"#主项目提交\" class=\"headerlink\" title=\"主项目提交\"></a>主项目提交</h3><p>我们可以直接像正常git文件一样的流程进行提交, 但是如果我们忘记提交子模块的变动, 而新的项目和子模块的变动又相关. 那么其他人从远程仓库中clone的文件可能并不能正确运行(缺少必要的子模块变动).</p>\n<p>所有推荐使用以下两种方法：</p>\n<ol>\n<li><code>git push --recurse-submodules=check</code>. 若有子模块的变动没有推送, 那么该<code>push</code>会失败.</li>\n<li><code>git push --recurse-submodules=on-demand</code>. 若有子模块的变动没有推送, 那么它会先推送子模块的变动, 然后再推送主项目.</li>\n</ol>\n<h3 id=\"子模块的更新\"><a href=\"#子模块的更新\" class=\"headerlink\" title=\"子模块的更新\"></a>子模块的更新</h3><p>其他人如果对子模块进行了修改, 在<code>git pull</code>之后, 再调用以下<code>git submodule update</code>更新子模块.</p>\n<p>调用<code>git submodule update</code>也更新子模块的相关内容, 但是会将子模块留在一个称作 <code>detached HEAD</code>的状态. 这意味着没有本地工作分支（例如 “master”）跟踪改动。 所以你做的任何改动都不会被跟踪。即使你使用了commit提交了一些变动, 在你下一次使用<code>git submodule update</code>时, 这些变动会全部丢失.</p>\n<p>所以需要进入每一个你希望对其进行修改的子模块,<code>git checkout branchName</code>检出一个分支. 从远程仓库中更新本地文件时, 使用<code>git submodule update --remote --merge</code>, 也可以使用<code>--rebase</code>.</p>\n<p>如果忘记了<code>--rebase</code>或者<code>--merge</code>, git会将子模块更新为远程仓库上的状态, 而且该项目将再一次进入 <code>detached HEAD</code> 的状态. 解决方法：</p>\n<ol>\n<li>检出包含之前本地更改的分支</li>\n<li>然后手动的merge或者rebase任何一个远程分支即可.</li>\n</ol>\n<p>即使没有提交子模块的更改也某有问题, 此时git只会抓取更改, 而不会覆盖本地内容.</p>\n<h3 id=\"克隆一个带子模块的项目\"><a href=\"#克隆一个带子模块的项目\" class=\"headerlink\" title=\"克隆一个带子模块的项目\"></a>克隆一个带子模块的项目</h3><p>克隆一个包含子模块的项目.<code>git clone</code>下来之后, 该子模块并不会被clone下来.需要调用以下两个命令：</p>\n<ol>\n<li><code>git submodule init</code>来下载本地所需的子模块配置文件文件</li>\n<li><code>git submodule update</code>来下载主项目中列出的合适的子模块提交</li>\n</ol>\n<p>也可以使用<code>git clone --recursivegit clone --recursive https://github.com/...</code>自动地初始化并更新仓库中的每一个子模块.</p>\n"},{"author":"ivyxjc","date":"2016-07-05T16:00:00.000Z","title":"代理相关","keywords":null,"description":"各个服务使用代理的具体命令.","_content":"\n## github使用代理\n\ngit添加代理：\n\n```git\ngit config --global http.proxy 'http://127.0.0.1:1080'\ngit config --global https.proxy 'http://127.0.0.1:1080'\n```\n","source":"_posts/效率/2016-07-06-proxy.md","raw":"---\nauthor: ivyxjc\ndate: 2016-07-06\ntitle: 代理相关\ncategory: 效率\ntags: [faq]\nkeywords:\ndescription: 各个服务使用代理的具体命令.\n---\n\n## github使用代理\n\ngit添加代理：\n\n```git\ngit config --global http.proxy 'http://127.0.0.1:1080'\ngit config --global https.proxy 'http://127.0.0.1:1080'\n```\n","slug":"效率/2016-07-06-proxy","published":1,"updated":"2018-08-09T10:10:11.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7g000q28t1famwc1vj","content":"<h2 id=\"github使用代理\"><a href=\"#github使用代理\" class=\"headerlink\" title=\"github使用代理\"></a>github使用代理</h2><p>git添加代理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy &apos;http://127.0.0.1:1080&apos;</span><br><span class=\"line\">git config --global https.proxy &apos;http://127.0.0.1:1080&apos;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"github使用代理\"><a href=\"#github使用代理\" class=\"headerlink\" title=\"github使用代理\"></a>github使用代理</h2><p>git添加代理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy &apos;http://127.0.0.1:1080&apos;</span><br><span class=\"line\">git config --global https.proxy &apos;http://127.0.0.1:1080&apos;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-07-02T16:00:00.000Z","title":"重装电脑时的设置问题","keywords":null,"description":"重装电脑时的设置.","_content":"\n\n## 调换`Ctrl`和`Caps Lock`键\n`HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout`中添加`Scancode Map`二进制项，内容为\n\n```\n0000 00 00 00 00 00 00 00 00\n0008 03 00 00 00 3A 00 1D 00\n0010 1D 00 3A 00 00 00 00 00\n```\n\n## java环境设置\n\n环境变量中添加`JAVA_HOME`:`C:\\Program Files\\Java\\jdk1.8.0_91`\n\n`Path`中添加`$JAVA_HOME$\\jre\\bin`和`$JAVA_HOME$\\bin`\n\n## python环境变量设置\n`path`中添加`c:\\python35`\n\n## jetbrains系列idea设置\n\n更改程序主目录下`bin/idea.properties`中的内容\n","source":"_posts/效率/2016-07-03-Reset-PC.md","raw":"---\nauthor: ivyxjc\ndate: 2016-07-03\ntitle: 重装电脑时的设置问题\ncategory: 效率\ntags: [faq]\nkeywords:\ndescription: 重装电脑时的设置.\n---\n\n\n## 调换`Ctrl`和`Caps Lock`键\n`HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout`中添加`Scancode Map`二进制项，内容为\n\n```\n0000 00 00 00 00 00 00 00 00\n0008 03 00 00 00 3A 00 1D 00\n0010 1D 00 3A 00 00 00 00 00\n```\n\n## java环境设置\n\n环境变量中添加`JAVA_HOME`:`C:\\Program Files\\Java\\jdk1.8.0_91`\n\n`Path`中添加`$JAVA_HOME$\\jre\\bin`和`$JAVA_HOME$\\bin`\n\n## python环境变量设置\n`path`中添加`c:\\python35`\n\n## jetbrains系列idea设置\n\n更改程序主目录下`bin/idea.properties`中的内容\n","slug":"效率/2016-07-03-Reset-PC","published":1,"updated":"2018-08-09T10:10:11.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7h000r28t1fr23nccw","content":"<h2 id=\"调换Ctrl和Caps-Lock键\"><a href=\"#调换Ctrl和Caps-Lock键\" class=\"headerlink\" title=\"调换Ctrl和Caps Lock键\"></a>调换<code>Ctrl</code>和<code>Caps Lock</code>键</h2><p><code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout</code>中添加<code>Scancode Map</code>二进制项，内容为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000 00 00 00 00 00 00 00 00</span><br><span class=\"line\">0008 03 00 00 00 3A 00 1D 00</span><br><span class=\"line\">0010 1D 00 3A 00 00 00 00 00</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"java环境设置\"><a href=\"#java环境设置\" class=\"headerlink\" title=\"java环境设置\"></a>java环境设置</h2><p>环境变量中添加<code>JAVA_HOME</code>:<code>C:\\Program Files\\Java\\jdk1.8.0_91</code></p>\n<p><code>Path</code>中添加<code>$JAVA_HOME$\\jre\\bin</code>和<code>$JAVA_HOME$\\bin</code></p>\n<h2 id=\"python环境变量设置\"><a href=\"#python环境变量设置\" class=\"headerlink\" title=\"python环境变量设置\"></a>python环境变量设置</h2><p><code>path</code>中添加<code>c:\\python35</code></p>\n<h2 id=\"jetbrains系列idea设置\"><a href=\"#jetbrains系列idea设置\" class=\"headerlink\" title=\"jetbrains系列idea设置\"></a>jetbrains系列idea设置</h2><p>更改程序主目录下<code>bin/idea.properties</code>中的内容</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"调换Ctrl和Caps-Lock键\"><a href=\"#调换Ctrl和Caps-Lock键\" class=\"headerlink\" title=\"调换Ctrl和Caps Lock键\"></a>调换<code>Ctrl</code>和<code>Caps Lock</code>键</h2><p><code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout</code>中添加<code>Scancode Map</code>二进制项，内容为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000 00 00 00 00 00 00 00 00</span><br><span class=\"line\">0008 03 00 00 00 3A 00 1D 00</span><br><span class=\"line\">0010 1D 00 3A 00 00 00 00 00</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"java环境设置\"><a href=\"#java环境设置\" class=\"headerlink\" title=\"java环境设置\"></a>java环境设置</h2><p>环境变量中添加<code>JAVA_HOME</code>:<code>C:\\Program Files\\Java\\jdk1.8.0_91</code></p>\n<p><code>Path</code>中添加<code>$JAVA_HOME$\\jre\\bin</code>和<code>$JAVA_HOME$\\bin</code></p>\n<h2 id=\"python环境变量设置\"><a href=\"#python环境变量设置\" class=\"headerlink\" title=\"python环境变量设置\"></a>python环境变量设置</h2><p><code>path</code>中添加<code>c:\\python35</code></p>\n<h2 id=\"jetbrains系列idea设置\"><a href=\"#jetbrains系列idea设置\" class=\"headerlink\" title=\"jetbrains系列idea设置\"></a>jetbrains系列idea设置</h2><p>更改程序主目录下<code>bin/idea.properties</code>中的内容</p>\n"},{"author":"ivyxjc","date":"2017-01-02T16:00:00.000Z","title":"Vim相关命令及用法","keywords":null,"description":"本文主要介绍如何使用vim","toc":true,"_content":"\n\n## 移动\n\n1. 向左侧移动num个单词并将光标置于单词首: [num]b\n2. 向右侧移动num个单词并将光标置于单词首: [num]w\n3. 向右侧移动num个单词并将光标置于单词尾: [num]e\n4. 向左侧移动num个单词并将光标置于单词尾: [num]ge\n\n\n移至行末且进入插入模式: A\n\n\n\n##　删除,　复制,　粘贴\n\n删除当前行至缓冲区: dd\n复制当前行: yy\n\n\n粘贴: p\n","source":"_posts/效率/2017-01-03-vim.md","raw":"---\nauthor: ivyxjc\ndate: 2017-01-03\ntitle: Vim相关命令及用法\ncategory: 效率\ntags: [faq,vim]\nkeywords:\ndescription: 本文主要介绍如何使用vim\ntoc: true\n---\n\n\n## 移动\n\n1. 向左侧移动num个单词并将光标置于单词首: [num]b\n2. 向右侧移动num个单词并将光标置于单词首: [num]w\n3. 向右侧移动num个单词并将光标置于单词尾: [num]e\n4. 向左侧移动num个单词并将光标置于单词尾: [num]ge\n\n\n移至行末且进入插入模式: A\n\n\n\n##　删除,　复制,　粘贴\n\n删除当前行至缓冲区: dd\n复制当前行: yy\n\n\n粘贴: p\n","slug":"效率/2017-01-03-vim","published":1,"updated":"2018-08-09T10:10:11.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7i000s28t1gq55veax","content":"<h2 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h2><ol>\n<li>向左侧移动num个单词并将光标置于单词首: [num]b</li>\n<li>向右侧移动num个单词并将光标置于单词首: [num]w</li>\n<li>向右侧移动num个单词并将光标置于单词尾: [num]e</li>\n<li>向左侧移动num个单词并将光标置于单词尾: [num]ge</li>\n</ol>\n<p>移至行末且进入插入模式: A</p>\n<p>##　删除,　复制,　粘贴</p>\n<p>删除当前行至缓冲区: dd<br>复制当前行: yy</p>\n<p>粘贴: p</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h2><ol>\n<li>向左侧移动num个单词并将光标置于单词首: [num]b</li>\n<li>向右侧移动num个单词并将光标置于单词首: [num]w</li>\n<li>向右侧移动num个单词并将光标置于单词尾: [num]e</li>\n<li>向左侧移动num个单词并将光标置于单词尾: [num]ge</li>\n</ol>\n<p>移至行末且进入插入模式: A</p>\n<p>##　删除,　复制,　粘贴</p>\n<p>删除当前行至缓冲区: dd<br>复制当前行: yy</p>\n<p>粘贴: p</p>\n"},{"author":"ivyxjc","date":"2018-05-04T16:00:00.000Z","title":"Kafka 认证配置","keywords":null,"description":"本文主要介绍如何配置Kafka认证","toc":true,"_content":"\n\nKafka支持多种安全验证方式，本文主要介绍使用用户名/密码的方式的方式认证Kafka。\n<!--more-->\n### Zookeeper 相关更改\n\n`zookeeper-server-start.bat`（win）\n添加\n\n```bat\nIF [\"%KAFKA_SASL_OPTS%\"] EQU [\"\"] (\n    set KAFKA_SASL_OPTS=-Djava.security.auth.login.config=filepath\\kafka_2.11-1.1.0\\kafka_zoo_jaas.conf\n)\n```\n\n`kafka_zoo_jaas.conf`\n```\nServer {  \n  org.apache.kafka.common.security.plain.PlainLoginModule required  \n    username=\"zoo-admin\"\n    password=\"zoo-admin-pass\"\n    user_zooUser=\"zooUser-pass\";\n}; \n```\n\n## Kafka配置 相关更改\n\n`kafka-server-start.bat`(win)\n添加\n```bat\nIF [\"%KAFKA_SASL_OPTS%\"] EQU [\"\"] (\n    set KAFKA_SASL_OPTS=-Djava.security.auth.login.config=filepath\\kafka_2.11-1.1.0\\kafka_server_jaas.conf\n)\n```\n\n`kafka_server_jaas.conf`\n\n```\nKafkaServer {\n    org.apache.kafka.common.security.plain.PlainLoginModule required\n    username=\"user\"\n    password=\"user-pass\"\n    user_kafkaUser=\"kafkaUser-pass\"\n};\n    \nClient {\n    org.apache.kafka.common.security.plain.PlainLoginModule required\n        username=\"zooUser\"\n        password=\"password\";\n};  \n```\n\n`KafkaServer`中的内容是Producer，Consumer连接Kafka时要输入的验证信息。\n\n`Client`中的内容即连接zookeeper是需要输入的验证信息，和`kafka_zoo_jaas.conf`中的内容一致。\n\n### 使得JVM参数生效\n\n`zookeeper-server-start.bat`和`kafka-server-start.bat`最终都是使用`kafka-run-class.bat`来真正运行的，所以需要将这两个文件添加的JVM参数添加到此文件。\n\n打开`kafka-run-class.bat`(win)\n\n将`KAFKA_SASL_OPTS`添加到`set COMMAND`后面（不要放在`%Java%`之前）。\n\n\n### 注意点\n1. zookeeper的登陆名最好不要和kafka的登陆名有重复，在我尝试的时候发现，名称相同的时候，会直接使用KafkaServer下的用户去登陆zookeeper导致无法登陆成功。\n2. 理论上讲`kafka_server_jaas.conf`中Client中为连接zookeeper的认证信息。但是在我尝试的时候发现，只在Client中记录登陆信息并不能成功，还需要将该信息填入KafkaServer中才能成功（即使如此，也未必能成功）。<br />目前发现的一个成功的组合，是使用`kafka_zoo_jaas.conf`中的username后面的用户名称，并在该文件下，添加`user_...=password`，使用此作为密码，并将这一认证信息添加到`kafka_serve_jass.conf`中的`KafkaServer`和`Client`中。","source":"_posts/效率/2018-05-05-build-Kafka.md","raw":"---\nauthor: ivyxjc\ndate: 2018-05-05\ntitle: Kafka 认证配置\ncategory: 效率\ntags: [kafka]\nkeywords:\ndescription: 本文主要介绍如何配置Kafka认证\ntoc: true\n---\n\n\nKafka支持多种安全验证方式，本文主要介绍使用用户名/密码的方式的方式认证Kafka。\n<!--more-->\n### Zookeeper 相关更改\n\n`zookeeper-server-start.bat`（win）\n添加\n\n```bat\nIF [\"%KAFKA_SASL_OPTS%\"] EQU [\"\"] (\n    set KAFKA_SASL_OPTS=-Djava.security.auth.login.config=filepath\\kafka_2.11-1.1.0\\kafka_zoo_jaas.conf\n)\n```\n\n`kafka_zoo_jaas.conf`\n```\nServer {  \n  org.apache.kafka.common.security.plain.PlainLoginModule required  \n    username=\"zoo-admin\"\n    password=\"zoo-admin-pass\"\n    user_zooUser=\"zooUser-pass\";\n}; \n```\n\n## Kafka配置 相关更改\n\n`kafka-server-start.bat`(win)\n添加\n```bat\nIF [\"%KAFKA_SASL_OPTS%\"] EQU [\"\"] (\n    set KAFKA_SASL_OPTS=-Djava.security.auth.login.config=filepath\\kafka_2.11-1.1.0\\kafka_server_jaas.conf\n)\n```\n\n`kafka_server_jaas.conf`\n\n```\nKafkaServer {\n    org.apache.kafka.common.security.plain.PlainLoginModule required\n    username=\"user\"\n    password=\"user-pass\"\n    user_kafkaUser=\"kafkaUser-pass\"\n};\n    \nClient {\n    org.apache.kafka.common.security.plain.PlainLoginModule required\n        username=\"zooUser\"\n        password=\"password\";\n};  \n```\n\n`KafkaServer`中的内容是Producer，Consumer连接Kafka时要输入的验证信息。\n\n`Client`中的内容即连接zookeeper是需要输入的验证信息，和`kafka_zoo_jaas.conf`中的内容一致。\n\n### 使得JVM参数生效\n\n`zookeeper-server-start.bat`和`kafka-server-start.bat`最终都是使用`kafka-run-class.bat`来真正运行的，所以需要将这两个文件添加的JVM参数添加到此文件。\n\n打开`kafka-run-class.bat`(win)\n\n将`KAFKA_SASL_OPTS`添加到`set COMMAND`后面（不要放在`%Java%`之前）。\n\n\n### 注意点\n1. zookeeper的登陆名最好不要和kafka的登陆名有重复，在我尝试的时候发现，名称相同的时候，会直接使用KafkaServer下的用户去登陆zookeeper导致无法登陆成功。\n2. 理论上讲`kafka_server_jaas.conf`中Client中为连接zookeeper的认证信息。但是在我尝试的时候发现，只在Client中记录登陆信息并不能成功，还需要将该信息填入KafkaServer中才能成功（即使如此，也未必能成功）。<br />目前发现的一个成功的组合，是使用`kafka_zoo_jaas.conf`中的username后面的用户名称，并在该文件下，添加`user_...=password`，使用此作为密码，并将这一认证信息添加到`kafka_serve_jass.conf`中的`KafkaServer`和`Client`中。","slug":"效率/2018-05-05-build-Kafka","published":1,"updated":"2018-10-14T10:13:53.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7i000t28t14u6552ck","content":"<p>Kafka支持多种安全验证方式，本文主要介绍使用用户名/密码的方式的方式认证Kafka。</p>\n<a id=\"more\"></a>\n<h3 id=\"Zookeeper-相关更改\"><a href=\"#Zookeeper-相关更改\" class=\"headerlink\" title=\"Zookeeper 相关更改\"></a>Zookeeper 相关更改</h3><p><code>zookeeper-server-start.bat</code>（win）<br>添加</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span> [\"<span class=\"variable\">%KAFKA_SASL_OPTS%</span>\"] <span class=\"keyword\">EQU</span> [\"\"] (</span><br><span class=\"line\">    <span class=\"built_in\">set</span> KAFKA_SASL_OPTS=-Djava.security.auth.login.config=filepath\\kafka_2.<span class=\"number\">11</span>-<span class=\"number\">1</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>\\kafka_zoo_jaas.conf</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><code>kafka_zoo_jaas.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server &#123;  </span><br><span class=\"line\">  org.apache.kafka.common.security.plain.PlainLoginModule required  </span><br><span class=\"line\">    username=&quot;zoo-admin&quot;</span><br><span class=\"line\">    password=&quot;zoo-admin-pass&quot;</span><br><span class=\"line\">    user_zooUser=&quot;zooUser-pass&quot;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Kafka配置-相关更改\"><a href=\"#Kafka配置-相关更改\" class=\"headerlink\" title=\"Kafka配置 相关更改\"></a>Kafka配置 相关更改</h2><p><code>kafka-server-start.bat</code>(win)<br>添加</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span> [\"<span class=\"variable\">%KAFKA_SASL_OPTS%</span>\"] <span class=\"keyword\">EQU</span> [\"\"] (</span><br><span class=\"line\">    <span class=\"built_in\">set</span> KAFKA_SASL_OPTS=-Djava.security.auth.login.config=filepath\\kafka_2.<span class=\"number\">11</span>-<span class=\"number\">1</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>\\kafka_server_jaas.conf</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><code>kafka_server_jaas.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KafkaServer &#123;</span><br><span class=\"line\">    org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class=\"line\">    username=&quot;user&quot;</span><br><span class=\"line\">    password=&quot;user-pass&quot;</span><br><span class=\"line\">    user_kafkaUser=&quot;kafkaUser-pass&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">Client &#123;</span><br><span class=\"line\">    org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class=\"line\">        username=&quot;zooUser&quot;</span><br><span class=\"line\">        password=&quot;password&quot;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>KafkaServer</code>中的内容是Producer，Consumer连接Kafka时要输入的验证信息。</p>\n<p><code>Client</code>中的内容即连接zookeeper是需要输入的验证信息，和<code>kafka_zoo_jaas.conf</code>中的内容一致。</p>\n<h3 id=\"使得JVM参数生效\"><a href=\"#使得JVM参数生效\" class=\"headerlink\" title=\"使得JVM参数生效\"></a>使得JVM参数生效</h3><p><code>zookeeper-server-start.bat</code>和<code>kafka-server-start.bat</code>最终都是使用<code>kafka-run-class.bat</code>来真正运行的，所以需要将这两个文件添加的JVM参数添加到此文件。</p>\n<p>打开<code>kafka-run-class.bat</code>(win)</p>\n<p>将<code>KAFKA_SASL_OPTS</code>添加到<code>set COMMAND</code>后面（不要放在<code>%Java%</code>之前）。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ol>\n<li>zookeeper的登陆名最好不要和kafka的登陆名有重复，在我尝试的时候发现，名称相同的时候，会直接使用KafkaServer下的用户去登陆zookeeper导致无法登陆成功。</li>\n<li>理论上讲<code>kafka_server_jaas.conf</code>中Client中为连接zookeeper的认证信息。但是在我尝试的时候发现，只在Client中记录登陆信息并不能成功，还需要将该信息填入KafkaServer中才能成功（即使如此，也未必能成功）。<br>目前发现的一个成功的组合，是使用<code>kafka_zoo_jaas.conf</code>中的username后面的用户名称，并在该文件下，添加<code>user_...=password</code>，使用此作为密码，并将这一认证信息添加到<code>kafka_serve_jass.conf</code>中的<code>KafkaServer</code>和<code>Client</code>中。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Kafka支持多种安全验证方式，本文主要介绍使用用户名/密码的方式的方式认证Kafka。</p>","more":"<h3 id=\"Zookeeper-相关更改\"><a href=\"#Zookeeper-相关更改\" class=\"headerlink\" title=\"Zookeeper 相关更改\"></a>Zookeeper 相关更改</h3><p><code>zookeeper-server-start.bat</code>（win）<br>添加</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span> [\"<span class=\"variable\">%KAFKA_SASL_OPTS%</span>\"] <span class=\"keyword\">EQU</span> [\"\"] (</span><br><span class=\"line\">    <span class=\"built_in\">set</span> KAFKA_SASL_OPTS=-Djava.security.auth.login.config=filepath\\kafka_2.<span class=\"number\">11</span>-<span class=\"number\">1</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>\\kafka_zoo_jaas.conf</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><code>kafka_zoo_jaas.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server &#123;  </span><br><span class=\"line\">  org.apache.kafka.common.security.plain.PlainLoginModule required  </span><br><span class=\"line\">    username=&quot;zoo-admin&quot;</span><br><span class=\"line\">    password=&quot;zoo-admin-pass&quot;</span><br><span class=\"line\">    user_zooUser=&quot;zooUser-pass&quot;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Kafka配置-相关更改\"><a href=\"#Kafka配置-相关更改\" class=\"headerlink\" title=\"Kafka配置 相关更改\"></a>Kafka配置 相关更改</h2><p><code>kafka-server-start.bat</code>(win)<br>添加</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span> [\"<span class=\"variable\">%KAFKA_SASL_OPTS%</span>\"] <span class=\"keyword\">EQU</span> [\"\"] (</span><br><span class=\"line\">    <span class=\"built_in\">set</span> KAFKA_SASL_OPTS=-Djava.security.auth.login.config=filepath\\kafka_2.<span class=\"number\">11</span>-<span class=\"number\">1</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>\\kafka_server_jaas.conf</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><code>kafka_server_jaas.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KafkaServer &#123;</span><br><span class=\"line\">    org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class=\"line\">    username=&quot;user&quot;</span><br><span class=\"line\">    password=&quot;user-pass&quot;</span><br><span class=\"line\">    user_kafkaUser=&quot;kafkaUser-pass&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">Client &#123;</span><br><span class=\"line\">    org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class=\"line\">        username=&quot;zooUser&quot;</span><br><span class=\"line\">        password=&quot;password&quot;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>KafkaServer</code>中的内容是Producer，Consumer连接Kafka时要输入的验证信息。</p>\n<p><code>Client</code>中的内容即连接zookeeper是需要输入的验证信息，和<code>kafka_zoo_jaas.conf</code>中的内容一致。</p>\n<h3 id=\"使得JVM参数生效\"><a href=\"#使得JVM参数生效\" class=\"headerlink\" title=\"使得JVM参数生效\"></a>使得JVM参数生效</h3><p><code>zookeeper-server-start.bat</code>和<code>kafka-server-start.bat</code>最终都是使用<code>kafka-run-class.bat</code>来真正运行的，所以需要将这两个文件添加的JVM参数添加到此文件。</p>\n<p>打开<code>kafka-run-class.bat</code>(win)</p>\n<p>将<code>KAFKA_SASL_OPTS</code>添加到<code>set COMMAND</code>后面（不要放在<code>%Java%</code>之前）。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ol>\n<li>zookeeper的登陆名最好不要和kafka的登陆名有重复，在我尝试的时候发现，名称相同的时候，会直接使用KafkaServer下的用户去登陆zookeeper导致无法登陆成功。</li>\n<li>理论上讲<code>kafka_server_jaas.conf</code>中Client中为连接zookeeper的认证信息。但是在我尝试的时候发现，只在Client中记录登陆信息并不能成功，还需要将该信息填入KafkaServer中才能成功（即使如此，也未必能成功）。<br>目前发现的一个成功的组合，是使用<code>kafka_zoo_jaas.conf</code>中的username后面的用户名称，并在该文件下，添加<code>user_...=password</code>，使用此作为密码，并将这一认证信息添加到<code>kafka_serve_jass.conf</code>中的<code>KafkaServer</code>和<code>Client</code>中。</li>\n</ol>"},{"author":"ivyxjc","date":"2016-10-18T16:00:00.000Z","title":"centos 64位更新glibc","keywords":null,"description":"如何在centos中升级glibc","toc":true,"_content":"\n## 下载新版本glibc\n\n```git\ngit clone git://sourceware.org/git/glibc.git\ncd glibc\ngit checkout --track -b local_glibc-2.24 origin/release/2.24/master\n```\n\n## 更新glibc\n\n```shell\n../configure --prefix=/opt/glibc-2.24\n```\n\n## 常见问题\n\n###  These critical programs are missing or too old: as ld\n\n调用`ld -v`是2.20..\n\n```shell\nvi ../configure\n```\n\n在文件中寻找到\n```\ncase $ac_prog_version in\n'') ac_prog_version=\"v. ?.??, bad\"; ac_verc_fail=yes;;\n2.1[3-9]*|2.2[0-9]*)\n```\n**|2.2[0-9]\\***是之后添加的, 因为该机的版本为2.20..., 意即该正则表达式要将本机的版本包括进去.\n\n### checking installed Linux kernel header files... missing or too old!\n","source":"_posts/效率/2016-10-29-centos-update-glibc.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-19\ntitle: centos 64位更新glibc\ncategory: 效率\ntags: [linux]\nkeywords:\ndescription: 如何在centos中升级glibc\ntoc: true\n---\n\n## 下载新版本glibc\n\n```git\ngit clone git://sourceware.org/git/glibc.git\ncd glibc\ngit checkout --track -b local_glibc-2.24 origin/release/2.24/master\n```\n\n## 更新glibc\n\n```shell\n../configure --prefix=/opt/glibc-2.24\n```\n\n## 常见问题\n\n###  These critical programs are missing or too old: as ld\n\n调用`ld -v`是2.20..\n\n```shell\nvi ../configure\n```\n\n在文件中寻找到\n```\ncase $ac_prog_version in\n'') ac_prog_version=\"v. ?.??, bad\"; ac_verc_fail=yes;;\n2.1[3-9]*|2.2[0-9]*)\n```\n**|2.2[0-9]\\***是之后添加的, 因为该机的版本为2.20..., 意即该正则表达式要将本机的版本包括进去.\n\n### checking installed Linux kernel header files... missing or too old!\n","slug":"效率/2016-10-29-centos-update-glibc","published":1,"updated":"2018-08-09T10:10:11.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7j000u28t1lll2ud10","content":"<h2 id=\"下载新版本glibc\"><a href=\"#下载新版本glibc\" class=\"headerlink\" title=\"下载新版本glibc\"></a>下载新版本glibc</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://sourceware.org/git/glibc.git</span><br><span class=\"line\">cd glibc</span><br><span class=\"line\">git checkout --track -b local_glibc-2.24 origin/release/2.24/master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新glibc\"><a href=\"#更新glibc\" class=\"headerlink\" title=\"更新glibc\"></a>更新glibc</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">../configure --prefix=/opt/glibc-2.24</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"These-critical-programs-are-missing-or-too-old-as-ld\"><a href=\"#These-critical-programs-are-missing-or-too-old-as-ld\" class=\"headerlink\" title=\"These critical programs are missing or too old: as ld\"></a>These critical programs are missing or too old: as ld</h3><p>调用<code>ld -v</code>是2.20..</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ../configure</span><br></pre></td></tr></table></figure>\n\n<p>在文件中寻找到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case $ac_prog_version in</span><br><span class=\"line\">&apos;&apos;) ac_prog_version=&quot;v. ?.??, bad&quot;; ac_verc_fail=yes;;</span><br><span class=\"line\">2.1[3-9]*|2.2[0-9]*)</span><br></pre></td></tr></table></figure>\n\n<p><strong>|2.2[0-9]*</strong>是之后添加的, 因为该机的版本为2.20…, 意即该正则表达式要将本机的版本包括进去.</p>\n<h3 id=\"checking-installed-Linux-kernel-header-files…-missing-or-too-old\"><a href=\"#checking-installed-Linux-kernel-header-files…-missing-or-too-old\" class=\"headerlink\" title=\"checking installed Linux kernel header files… missing or too old!\"></a>checking installed Linux kernel header files… missing or too old!</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载新版本glibc\"><a href=\"#下载新版本glibc\" class=\"headerlink\" title=\"下载新版本glibc\"></a>下载新版本glibc</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://sourceware.org/git/glibc.git</span><br><span class=\"line\">cd glibc</span><br><span class=\"line\">git checkout --track -b local_glibc-2.24 origin/release/2.24/master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新glibc\"><a href=\"#更新glibc\" class=\"headerlink\" title=\"更新glibc\"></a>更新glibc</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">../configure --prefix=/opt/glibc-2.24</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"These-critical-programs-are-missing-or-too-old-as-ld\"><a href=\"#These-critical-programs-are-missing-or-too-old-as-ld\" class=\"headerlink\" title=\"These critical programs are missing or too old: as ld\"></a>These critical programs are missing or too old: as ld</h3><p>调用<code>ld -v</code>是2.20..</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ../configure</span><br></pre></td></tr></table></figure>\n\n<p>在文件中寻找到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case $ac_prog_version in</span><br><span class=\"line\">&apos;&apos;) ac_prog_version=&quot;v. ?.??, bad&quot;; ac_verc_fail=yes;;</span><br><span class=\"line\">2.1[3-9]*|2.2[0-9]*)</span><br></pre></td></tr></table></figure>\n\n<p><strong>|2.2[0-9]*</strong>是之后添加的, 因为该机的版本为2.20…, 意即该正则表达式要将本机的版本包括进去.</p>\n<h3 id=\"checking-installed-Linux-kernel-header-files…-missing-or-too-old\"><a href=\"#checking-installed-Linux-kernel-header-files…-missing-or-too-old\" class=\"headerlink\" title=\"checking installed Linux kernel header files… missing or too old!\"></a>checking installed Linux kernel header files… missing or too old!</h3>"},{"author":"ivyxjc","date":"2019-09-09T16:00:00.000Z","title":"如何使用VS Code Remote-SSH","keywords":null,"description":"本文主要介绍如何配置VS Code的Remote SSH","toc":true,"_content":"\n本文主要介绍如何在Windows环境下配置Remote SSH。主要是按照官方文档[Remote Development using SSH](https://code.visualstudio.com/docs/remote/ssh)来配置并加上一些小trick.\n\n\n<!-- nomore -->\n## 安装\n\n官方教程指明安装需要3步，其中后两步比较简单，就不介绍了。着重介绍如何安装`OpenSSH compatible SSH client`.\n\n1. Install an OpenSSH compatible SSH client if one is not already present.\n2. Install Visual Studio Code or Visual Studio Code Insiders.\n3. Install the Remote Development extension pack.\n\n\n## 安装 OpenSSH compatible SSH client\n\n[官方教程](https://code.visualstudio.com/docs/remote/troubleshooting#_installing-a-supported-ssh-client)\n\n```powershell\n# Make sure you're running as an Administrator\nSet-Service ssh-agent -StartupType Automatic\nStart-Service ssh-agent\nGet-Service ssh-agent\n```\n\n## SSH config file\n\nssh config file 格式如下\n\n```\n# Read more about SSH config files: https://linux.die.net/man/5/ssh_config\nHost host的昵称 \n    HostName #host的IP或者域名\n    User #用户名 \n    Port #ssh 端口，如果是22可以不写 \n    IdentityFile  OpenSSH key 的地址\n```\n\n## 如何根据putty private key 生成 OpenSSH key\n\n1. 打开PuTTYgen，点击load，选择putty private key\n2. 点击Conversions, 选择Export OpenSSH Key。这里的地址就是上面所说的OpenSSH key的地址。\n\n注意点： \n\n这里的地址最好选择 `C:\\Users\\username`下面，否则可能因为文件权限过松导致出现如下错误:\n\n`Permissions for 'file name' are too open. > It is required that your private key files are NOT accessible by others`\n\n## VS Code 配置\n\n1. 打开VS Code 的settings.\n2. 搜索Remote.SSH.configFile\n3. 将上述SSH config file的文件绝对路径填入框中","source":"_posts/效率/2019-09-10-remote-ssh.md","raw":"---\nauthor: ivyxjc\ndate: 2019-09-10\ntitle: 如何使用VS Code Remote-SSH\ncategory: 效率\ntags: [vs-code,remote-ssh]\nkeywords:\ndescription: 本文主要介绍如何配置VS Code的Remote SSH \ntoc: true\n---\n\n本文主要介绍如何在Windows环境下配置Remote SSH。主要是按照官方文档[Remote Development using SSH](https://code.visualstudio.com/docs/remote/ssh)来配置并加上一些小trick.\n\n\n<!-- nomore -->\n## 安装\n\n官方教程指明安装需要3步，其中后两步比较简单，就不介绍了。着重介绍如何安装`OpenSSH compatible SSH client`.\n\n1. Install an OpenSSH compatible SSH client if one is not already present.\n2. Install Visual Studio Code or Visual Studio Code Insiders.\n3. Install the Remote Development extension pack.\n\n\n## 安装 OpenSSH compatible SSH client\n\n[官方教程](https://code.visualstudio.com/docs/remote/troubleshooting#_installing-a-supported-ssh-client)\n\n```powershell\n# Make sure you're running as an Administrator\nSet-Service ssh-agent -StartupType Automatic\nStart-Service ssh-agent\nGet-Service ssh-agent\n```\n\n## SSH config file\n\nssh config file 格式如下\n\n```\n# Read more about SSH config files: https://linux.die.net/man/5/ssh_config\nHost host的昵称 \n    HostName #host的IP或者域名\n    User #用户名 \n    Port #ssh 端口，如果是22可以不写 \n    IdentityFile  OpenSSH key 的地址\n```\n\n## 如何根据putty private key 生成 OpenSSH key\n\n1. 打开PuTTYgen，点击load，选择putty private key\n2. 点击Conversions, 选择Export OpenSSH Key。这里的地址就是上面所说的OpenSSH key的地址。\n\n注意点： \n\n这里的地址最好选择 `C:\\Users\\username`下面，否则可能因为文件权限过松导致出现如下错误:\n\n`Permissions for 'file name' are too open. > It is required that your private key files are NOT accessible by others`\n\n## VS Code 配置\n\n1. 打开VS Code 的settings.\n2. 搜索Remote.SSH.configFile\n3. 将上述SSH config file的文件绝对路径填入框中","slug":"效率/2019-09-10-remote-ssh","published":1,"updated":"2019-09-10T06:27:15.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7s000v28t1dn7dtanb","content":"<p>本文主要介绍如何在Windows环境下配置Remote SSH。主要是按照官方文档<a href=\"https://code.visualstudio.com/docs/remote/ssh\" target=\"_blank\" rel=\"noopener\">Remote Development using SSH</a>来配置并加上一些小trick.</p>\n<!-- nomore -->\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>官方教程指明安装需要3步，其中后两步比较简单，就不介绍了。着重介绍如何安装<code>OpenSSH compatible SSH client</code>.</p>\n<ol>\n<li>Install an OpenSSH compatible SSH client if one is not already present.</li>\n<li>Install Visual Studio Code or Visual Studio Code Insiders.</li>\n<li>Install the Remote Development extension pack.</li>\n</ol>\n<h2 id=\"安装-OpenSSH-compatible-SSH-client\"><a href=\"#安装-OpenSSH-compatible-SSH-client\" class=\"headerlink\" title=\"安装 OpenSSH compatible SSH client\"></a>安装 OpenSSH compatible SSH client</h2><p><a href=\"https://code.visualstudio.com/docs/remote/troubleshooting#_installing-a-supported-ssh-client\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Make sure you're running as an Administrator</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Service</span> ssh-agent -StartupType Automatic</span><br><span class=\"line\"><span class=\"built_in\">Start-Service</span> ssh-agent</span><br><span class=\"line\"><span class=\"built_in\">Get-Service</span> ssh-agent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SSH-config-file\"><a href=\"#SSH-config-file\" class=\"headerlink\" title=\"SSH config file\"></a>SSH config file</h2><p>ssh config file 格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span><br><span class=\"line\">Host host的昵称 </span><br><span class=\"line\">    HostName #host的IP或者域名</span><br><span class=\"line\">    User #用户名 </span><br><span class=\"line\">    Port #ssh 端口，如果是22可以不写 </span><br><span class=\"line\">    IdentityFile  OpenSSH key 的地址</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何根据putty-private-key-生成-OpenSSH-key\"><a href=\"#如何根据putty-private-key-生成-OpenSSH-key\" class=\"headerlink\" title=\"如何根据putty private key 生成 OpenSSH key\"></a>如何根据putty private key 生成 OpenSSH key</h2><ol>\n<li>打开PuTTYgen，点击load，选择putty private key</li>\n<li>点击Conversions, 选择Export OpenSSH Key。这里的地址就是上面所说的OpenSSH key的地址。</li>\n</ol>\n<p>注意点： </p>\n<p>这里的地址最好选择 <code>C:\\Users\\username</code>下面，否则可能因为文件权限过松导致出现如下错误:</p>\n<p><code>Permissions for &#39;file name&#39; are too open. &gt; It is required that your private key files are NOT accessible by others</code></p>\n<h2 id=\"VS-Code-配置\"><a href=\"#VS-Code-配置\" class=\"headerlink\" title=\"VS Code 配置\"></a>VS Code 配置</h2><ol>\n<li>打开VS Code 的settings.</li>\n<li>搜索Remote.SSH.configFile</li>\n<li>将上述SSH config file的文件绝对路径填入框中</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要介绍如何在Windows环境下配置Remote SSH。主要是按照官方文档<a href=\"https://code.visualstudio.com/docs/remote/ssh\" target=\"_blank\" rel=\"noopener\">Remote Development using SSH</a>来配置并加上一些小trick.</p>\n<!-- nomore -->\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>官方教程指明安装需要3步，其中后两步比较简单，就不介绍了。着重介绍如何安装<code>OpenSSH compatible SSH client</code>.</p>\n<ol>\n<li>Install an OpenSSH compatible SSH client if one is not already present.</li>\n<li>Install Visual Studio Code or Visual Studio Code Insiders.</li>\n<li>Install the Remote Development extension pack.</li>\n</ol>\n<h2 id=\"安装-OpenSSH-compatible-SSH-client\"><a href=\"#安装-OpenSSH-compatible-SSH-client\" class=\"headerlink\" title=\"安装 OpenSSH compatible SSH client\"></a>安装 OpenSSH compatible SSH client</h2><p><a href=\"https://code.visualstudio.com/docs/remote/troubleshooting#_installing-a-supported-ssh-client\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Make sure you're running as an Administrator</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Service</span> ssh-agent -StartupType Automatic</span><br><span class=\"line\"><span class=\"built_in\">Start-Service</span> ssh-agent</span><br><span class=\"line\"><span class=\"built_in\">Get-Service</span> ssh-agent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SSH-config-file\"><a href=\"#SSH-config-file\" class=\"headerlink\" title=\"SSH config file\"></a>SSH config file</h2><p>ssh config file 格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span><br><span class=\"line\">Host host的昵称 </span><br><span class=\"line\">    HostName #host的IP或者域名</span><br><span class=\"line\">    User #用户名 </span><br><span class=\"line\">    Port #ssh 端口，如果是22可以不写 </span><br><span class=\"line\">    IdentityFile  OpenSSH key 的地址</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何根据putty-private-key-生成-OpenSSH-key\"><a href=\"#如何根据putty-private-key-生成-OpenSSH-key\" class=\"headerlink\" title=\"如何根据putty private key 生成 OpenSSH key\"></a>如何根据putty private key 生成 OpenSSH key</h2><ol>\n<li>打开PuTTYgen，点击load，选择putty private key</li>\n<li>点击Conversions, 选择Export OpenSSH Key。这里的地址就是上面所说的OpenSSH key的地址。</li>\n</ol>\n<p>注意点： </p>\n<p>这里的地址最好选择 <code>C:\\Users\\username</code>下面，否则可能因为文件权限过松导致出现如下错误:</p>\n<p><code>Permissions for &#39;file name&#39; are too open. &gt; It is required that your private key files are NOT accessible by others</code></p>\n<h2 id=\"VS-Code-配置\"><a href=\"#VS-Code-配置\" class=\"headerlink\" title=\"VS Code 配置\"></a>VS Code 配置</h2><ol>\n<li>打开VS Code 的settings.</li>\n<li>搜索Remote.SSH.configFile</li>\n<li>将上述SSH config file的文件绝对路径填入框中</li>\n</ol>\n"},{"author":"ivyxjc","date":"2018-12-07T16:00:00.000Z","title":"将gradle项目部署到Maven Central中","keywords":null,"description":"本文主要介绍如何配置Kafka认证","toc":true,"_content":"\n本文主要介绍如何一个由gradle构建的项目部署到Maven Central.\n<!--nomore-->\n\n网上大部分都是介绍如何将由maven构建的项目部署到Maven Central。与Gradle相关的比较少。\n\n## 申请账号\n前往 [sonatype](https://issues.sonatype.org/)申请账号。\n\n申请完，Create Issue。\n\n按照[这个模板](https://issues.sonatype.org/browse/OSSRH-44681)填。\n\n这一块比较简单，网上教程也比较多。\n\nCreate Issue结束后，官方会需要你证明你拥有相对应的domain。\n\n证明有以下3个途径： \n\n1. Add a TXT record to your DNS referencing this JIRA ticket: OSSRH-44681 (Fastest)\n2. Setup a redirect to your Github page (if it does not already exist)\n3. Send an email to central@sonatype.com referencing this issue from a ... email address\n\n证明完毕之后，你就可以发布包了。\n\n你就可以做下面几件事了：\n\n1. Deploy snapshot artifacts into repository https://oss.sonatype.org/content/repositories/snapshots\n2. Deploy release artifacts into the staging repository https://oss.sonatype.org/service/local/staging/deploy/maven2\n3. Promote staged artifacts into repository 'Releases'\n4. Download snapshot and release artifacts from group https://oss.sonatype.org/content/groups/public\n5. Download snapshot, release and staged artifacts from staging group https://oss.sonatype.org/content/groups/staging\n\n\n## 构建Gradle\n\n下面主要内容基于 \n[官方英文教程](https://central.sonatype.org/pages/gradle.html)，加上一些个人构建时候的一些收获。\n\n### build.gralde 文件修改\n\n#### 引入plugin\n\n```groovy\napply plugin: 'maven'\napply plugin: 'signing'\n```\n\n```groovy\ntask javadocJar(type: Jar) {\n    classifier = 'javadoc'\n    from javadoc\n}\n\ntask sourcesJar(type: Jar) {\n    classifier = 'sources'\n    from sourceSets.main.allSource\n}\n\nartifacts {\n    archives javadocJar, sourcesJar\n}\n\n```\n\n#### 引入UploadArchives task\n\n引入`UploadArchives`这个task，记住更改里面的个人相关信息。\n\n其中有`ossrhUsername`和`ossrhPassword`这两个变量是定义在`gradle.properties`中的。\n\n```groovy\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n            repository(url: \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\") {\n                authentication(userName: ossrhUsername, password: ossrhPassword)\n            }\n\n            snapshotRepository(url: \"https://oss.sonatype.org/content/repositories/snapshots/\") {\n                authentication(userName: ossrhUsername, password: ossrhPassword)\n            }\n\n            pom.project {\n                name 'Example Application'\n                packaging 'jar'\n                // optionally artifactId can be defined here \n                description 'A application used as an example on how to set up \n                pushing its components to the Central Repository . '\n                url 'http://www.example.com/example-application'\n\n                scm {\n                    connection 'scm:git:git@github.com:username/project.git'\n                    developerConnection 'scm:git:git@github.com:username/project.git'\n                    url 'https://github.com/username/project'\n                }\n\n                licenses {\n                    license {\n                        name 'The Apache License, Version 2.0'\n                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                    }\n                }\n\n                developers {\n                    developer {\n                        id 'manfred'\n                        name 'Manfred Moser'\n                        email 'manfred@sonatype.com'\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### 编写gradle.properties\n主要是将一些认证信息填在这里。（这些信息不要加入到版本管理中)。\n```properties\n以下3个信息怎么来下一章节来讲\nsigning.keyId=YourKeyId\nsigning.password=YourPublicKeyPassword\nsigning.secretKeyRingFile=PathToYourKeyRingFile\n\nossrhUsername=your-jira-id  你在sonatype申请的账号的用户名\nossrhPassword=your-jira-password  你在sonatype申请的账号的密码\n```\n\n\n## 生成GPG加密信息\n\nwindows中可以安装gpg4win来生成相关信息。但是我个人在windows10中并没有能够打开。\n所以我使用了WSL来生成相关信息。如果你的系统是Linux也可以。\n\n1. 执行`gpg --gen-key`, 按照提示的信息填入密码，用户名等信息，这些信息记录下来。这里填入的密码就是上面`gradle.properties`中的`signing.password`。\n2. 执行`gpg --list-keys`, 可以看到\n```\n/root/.gnupg/pubring.gpg\npub   2048R/B98765 2018-12-08\nuid                  \nsub 2048R/A123456 \n```\n3. 第一行便是对应的公钥文件位置，`pug`后面的`B98765`便是public key Id，这个id也就是上面`gradle.properties`中的`signing.keyId`\n4. 执行` gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys B98765`将公钥发送到`hkp://pool.sks-keyservers.net`。\n5. 记录下`/root/.gnupg/`中`secring.png`的位置，这个位置便是上面`gradle.properties`中的`signing.secretKeyRingFile`的值。\n   \n## 发布过程\n\n当上述步骤全部完成时，可以直接执行`gradle uploadArchives`。\n\n\n### 发布Snapshot版本\n如果你的版本是`snapshot`的，你可以直接在`https://oss.sonatype.org/content/repositories/snapshots`中看到你的包。\n\n### 发布Release版本\n如果你的版本是`release`版本。\n登录`https://oss.sonatype.org/#welcome`,选择`Staging Repositories`，然后在右边用`groupId`去搜索。\n这样会找到你的项目。选中你的项目close然后confirm。过一会再来寻找一次该构建，点击`Release`在Confirm。过一会就应该能在`https://oss.sonatype.org/content/groups/public`中看到你的项目了。","source":"_posts/效率/2018-12-08-deploy-to-maven-central.md","raw":"---\nauthor: ivyxjc\ndate: 2018-12-08\ntitle: 将gradle项目部署到Maven Central中\ncategory: 效率\ntags: [maven]\nkeywords:\ndescription: 本文主要介绍如何配置Kafka认证\ntoc: true\n---\n\n本文主要介绍如何一个由gradle构建的项目部署到Maven Central.\n<!--nomore-->\n\n网上大部分都是介绍如何将由maven构建的项目部署到Maven Central。与Gradle相关的比较少。\n\n## 申请账号\n前往 [sonatype](https://issues.sonatype.org/)申请账号。\n\n申请完，Create Issue。\n\n按照[这个模板](https://issues.sonatype.org/browse/OSSRH-44681)填。\n\n这一块比较简单，网上教程也比较多。\n\nCreate Issue结束后，官方会需要你证明你拥有相对应的domain。\n\n证明有以下3个途径： \n\n1. Add a TXT record to your DNS referencing this JIRA ticket: OSSRH-44681 (Fastest)\n2. Setup a redirect to your Github page (if it does not already exist)\n3. Send an email to central@sonatype.com referencing this issue from a ... email address\n\n证明完毕之后，你就可以发布包了。\n\n你就可以做下面几件事了：\n\n1. Deploy snapshot artifacts into repository https://oss.sonatype.org/content/repositories/snapshots\n2. Deploy release artifacts into the staging repository https://oss.sonatype.org/service/local/staging/deploy/maven2\n3. Promote staged artifacts into repository 'Releases'\n4. Download snapshot and release artifacts from group https://oss.sonatype.org/content/groups/public\n5. Download snapshot, release and staged artifacts from staging group https://oss.sonatype.org/content/groups/staging\n\n\n## 构建Gradle\n\n下面主要内容基于 \n[官方英文教程](https://central.sonatype.org/pages/gradle.html)，加上一些个人构建时候的一些收获。\n\n### build.gralde 文件修改\n\n#### 引入plugin\n\n```groovy\napply plugin: 'maven'\napply plugin: 'signing'\n```\n\n```groovy\ntask javadocJar(type: Jar) {\n    classifier = 'javadoc'\n    from javadoc\n}\n\ntask sourcesJar(type: Jar) {\n    classifier = 'sources'\n    from sourceSets.main.allSource\n}\n\nartifacts {\n    archives javadocJar, sourcesJar\n}\n\n```\n\n#### 引入UploadArchives task\n\n引入`UploadArchives`这个task，记住更改里面的个人相关信息。\n\n其中有`ossrhUsername`和`ossrhPassword`这两个变量是定义在`gradle.properties`中的。\n\n```groovy\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n            repository(url: \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\") {\n                authentication(userName: ossrhUsername, password: ossrhPassword)\n            }\n\n            snapshotRepository(url: \"https://oss.sonatype.org/content/repositories/snapshots/\") {\n                authentication(userName: ossrhUsername, password: ossrhPassword)\n            }\n\n            pom.project {\n                name 'Example Application'\n                packaging 'jar'\n                // optionally artifactId can be defined here \n                description 'A application used as an example on how to set up \n                pushing its components to the Central Repository . '\n                url 'http://www.example.com/example-application'\n\n                scm {\n                    connection 'scm:git:git@github.com:username/project.git'\n                    developerConnection 'scm:git:git@github.com:username/project.git'\n                    url 'https://github.com/username/project'\n                }\n\n                licenses {\n                    license {\n                        name 'The Apache License, Version 2.0'\n                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                    }\n                }\n\n                developers {\n                    developer {\n                        id 'manfred'\n                        name 'Manfred Moser'\n                        email 'manfred@sonatype.com'\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### 编写gradle.properties\n主要是将一些认证信息填在这里。（这些信息不要加入到版本管理中)。\n```properties\n以下3个信息怎么来下一章节来讲\nsigning.keyId=YourKeyId\nsigning.password=YourPublicKeyPassword\nsigning.secretKeyRingFile=PathToYourKeyRingFile\n\nossrhUsername=your-jira-id  你在sonatype申请的账号的用户名\nossrhPassword=your-jira-password  你在sonatype申请的账号的密码\n```\n\n\n## 生成GPG加密信息\n\nwindows中可以安装gpg4win来生成相关信息。但是我个人在windows10中并没有能够打开。\n所以我使用了WSL来生成相关信息。如果你的系统是Linux也可以。\n\n1. 执行`gpg --gen-key`, 按照提示的信息填入密码，用户名等信息，这些信息记录下来。这里填入的密码就是上面`gradle.properties`中的`signing.password`。\n2. 执行`gpg --list-keys`, 可以看到\n```\n/root/.gnupg/pubring.gpg\npub   2048R/B98765 2018-12-08\nuid                  \nsub 2048R/A123456 \n```\n3. 第一行便是对应的公钥文件位置，`pug`后面的`B98765`便是public key Id，这个id也就是上面`gradle.properties`中的`signing.keyId`\n4. 执行` gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys B98765`将公钥发送到`hkp://pool.sks-keyservers.net`。\n5. 记录下`/root/.gnupg/`中`secring.png`的位置，这个位置便是上面`gradle.properties`中的`signing.secretKeyRingFile`的值。\n   \n## 发布过程\n\n当上述步骤全部完成时，可以直接执行`gradle uploadArchives`。\n\n\n### 发布Snapshot版本\n如果你的版本是`snapshot`的，你可以直接在`https://oss.sonatype.org/content/repositories/snapshots`中看到你的包。\n\n### 发布Release版本\n如果你的版本是`release`版本。\n登录`https://oss.sonatype.org/#welcome`,选择`Staging Repositories`，然后在右边用`groupId`去搜索。\n这样会找到你的项目。选中你的项目close然后confirm。过一会再来寻找一次该构建，点击`Release`在Confirm。过一会就应该能在`https://oss.sonatype.org/content/groups/public`中看到你的项目了。","slug":"效率/2018-12-08-deploy-to-maven-central","published":1,"updated":"2018-12-08T15:09:28.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf7t000y28t1dhqkjfat","content":"<p>本文主要介绍如何一个由gradle构建的项目部署到Maven Central.</p>\n<!--nomore-->\n\n<p>网上大部分都是介绍如何将由maven构建的项目部署到Maven Central。与Gradle相关的比较少。</p>\n<h2 id=\"申请账号\"><a href=\"#申请账号\" class=\"headerlink\" title=\"申请账号\"></a>申请账号</h2><p>前往 <a href=\"https://issues.sonatype.org/\" target=\"_blank\" rel=\"noopener\">sonatype</a>申请账号。</p>\n<p>申请完，Create Issue。</p>\n<p>按照<a href=\"https://issues.sonatype.org/browse/OSSRH-44681\" target=\"_blank\" rel=\"noopener\">这个模板</a>填。</p>\n<p>这一块比较简单，网上教程也比较多。</p>\n<p>Create Issue结束后，官方会需要你证明你拥有相对应的domain。</p>\n<p>证明有以下3个途径： </p>\n<ol>\n<li>Add a TXT record to your DNS referencing this JIRA ticket: OSSRH-44681 (Fastest)</li>\n<li>Setup a redirect to your Github page (if it does not already exist)</li>\n<li>Send an email to <a href=\"mailto:central@sonatype.com\" target=\"_blank\" rel=\"noopener\">central@sonatype.com</a> referencing this issue from a … email address</li>\n</ol>\n<p>证明完毕之后，你就可以发布包了。</p>\n<p>你就可以做下面几件事了：</p>\n<ol>\n<li>Deploy snapshot artifacts into repository <a href=\"https://oss.sonatype.org/content/repositories/snapshots\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org/content/repositories/snapshots</a></li>\n<li>Deploy release artifacts into the staging repository <a href=\"https://oss.sonatype.org/service/local/staging/deploy/maven2\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org/service/local/staging/deploy/maven2</a></li>\n<li>Promote staged artifacts into repository ‘Releases’</li>\n<li>Download snapshot and release artifacts from group <a href=\"https://oss.sonatype.org/content/groups/public\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org/content/groups/public</a></li>\n<li>Download snapshot, release and staged artifacts from staging group <a href=\"https://oss.sonatype.org/content/groups/staging\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org/content/groups/staging</a></li>\n</ol>\n<h2 id=\"构建Gradle\"><a href=\"#构建Gradle\" class=\"headerlink\" title=\"构建Gradle\"></a>构建Gradle</h2><p>下面主要内容基于<br><a href=\"https://central.sonatype.org/pages/gradle.html\" target=\"_blank\" rel=\"noopener\">官方英文教程</a>，加上一些个人构建时候的一些收获。</p>\n<h3 id=\"build-gralde-文件修改\"><a href=\"#build-gralde-文件修改\" class=\"headerlink\" title=\"build.gralde 文件修改\"></a>build.gralde 文件修改</h3><h4 id=\"引入plugin\"><a href=\"#引入plugin\" class=\"headerlink\" title=\"引入plugin\"></a>引入plugin</h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'maven'</span></span><br><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'signing'</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task javadocJar(<span class=\"string\">type:</span> Jar) &#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">'javadoc'</span></span><br><span class=\"line\">    from javadoc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task sourcesJar(<span class=\"string\">type:</span> Jar) &#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">'sources'</span></span><br><span class=\"line\">    from sourceSets.main.allSource</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">artifacts &#123;</span><br><span class=\"line\">    archives javadocJar, sourcesJar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引入UploadArchives-task\"><a href=\"#引入UploadArchives-task\" class=\"headerlink\" title=\"引入UploadArchives task\"></a>引入UploadArchives task</h4><p>引入<code>UploadArchives</code>这个task，记住更改里面的个人相关信息。</p>\n<p>其中有<code>ossrhUsername</code>和<code>ossrhPassword</code>这两个变量是定义在<code>gradle.properties</code>中的。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            beforeDeployment &#123; MavenDeployment deployment -&gt; signing.signPom(deployment) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            repository(<span class=\"string\">url:</span> <span class=\"string\">\"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"</span>) &#123;</span><br><span class=\"line\">                authentication(<span class=\"string\">userName:</span> ossrhUsername, <span class=\"string\">password:</span> ossrhPassword)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            snapshotRepository(<span class=\"string\">url:</span> <span class=\"string\">\"https://oss.sonatype.org/content/repositories/snapshots/\"</span>) &#123;</span><br><span class=\"line\">                authentication(<span class=\"string\">userName:</span> ossrhUsername, <span class=\"string\">password:</span> ossrhPassword)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            pom.project &#123;</span><br><span class=\"line\">                name <span class=\"string\">'Example Application'</span></span><br><span class=\"line\">                packaging <span class=\"string\">'jar'</span></span><br><span class=\"line\">                <span class=\"comment\">// optionally artifactId can be defined here </span></span><br><span class=\"line\">                description <span class=\"string\">'A application used as an example on how to set up </span></span><br><span class=\"line\"><span class=\"string\">                pushing its components to the Central Repository . '</span></span><br><span class=\"line\">                url <span class=\"string\">'http://www.example.com/example-application'</span></span><br><span class=\"line\"></span><br><span class=\"line\">                scm &#123;</span><br><span class=\"line\">                    connection <span class=\"string\">'scm:git:git@github.com:username/project.git'</span></span><br><span class=\"line\">                    developerConnection <span class=\"string\">'scm:git:git@github.com:username/project.git'</span></span><br><span class=\"line\">                    url <span class=\"string\">'https://github.com/username/project'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                licenses &#123;</span><br><span class=\"line\">                    license &#123;</span><br><span class=\"line\">                        name <span class=\"string\">'The Apache License, Version 2.0'</span></span><br><span class=\"line\">                        url <span class=\"string\">'http://www.apache.org/licenses/LICENSE-2.0.txt'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                developers &#123;</span><br><span class=\"line\">                    developer &#123;</span><br><span class=\"line\">                        id <span class=\"string\">'manfred'</span></span><br><span class=\"line\">                        name <span class=\"string\">'Manfred Moser'</span></span><br><span class=\"line\">                        email <span class=\"string\">'manfred@sonatype.com'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写gradle-properties\"><a href=\"#编写gradle-properties\" class=\"headerlink\" title=\"编写gradle.properties\"></a>编写gradle.properties</h4><p>主要是将一些认证信息填在这里。（这些信息不要加入到版本管理中)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下3个信息怎么来下一章节来讲</span><br><span class=\"line\">signing.keyId=YourKeyId</span><br><span class=\"line\">signing.password=YourPublicKeyPassword</span><br><span class=\"line\">signing.secretKeyRingFile=PathToYourKeyRingFile</span><br><span class=\"line\"></span><br><span class=\"line\">ossrhUsername=your-jira-id  你在sonatype申请的账号的用户名</span><br><span class=\"line\">ossrhPassword=your-jira-password  你在sonatype申请的账号的密码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成GPG加密信息\"><a href=\"#生成GPG加密信息\" class=\"headerlink\" title=\"生成GPG加密信息\"></a>生成GPG加密信息</h2><p>windows中可以安装gpg4win来生成相关信息。但是我个人在windows10中并没有能够打开。<br>所以我使用了WSL来生成相关信息。如果你的系统是Linux也可以。</p>\n<ol>\n<li><p>执行<code>gpg --gen-key</code>, 按照提示的信息填入密码，用户名等信息，这些信息记录下来。这里填入的密码就是上面<code>gradle.properties</code>中的<code>signing.password</code>。</p>\n</li>\n<li><p>执行<code>gpg --list-keys</code>, 可以看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/.gnupg/pubring.gpg</span><br><span class=\"line\">pub   2048R/B98765 2018-12-08</span><br><span class=\"line\">uid                  </span><br><span class=\"line\">sub 2048R/A123456</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第一行便是对应的公钥文件位置，<code>pug</code>后面的<code>B98765</code>便是public key Id，这个id也就是上面<code>gradle.properties</code>中的<code>signing.keyId</code></p>\n</li>\n<li><p>执行<code>gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys B98765</code>将公钥发送到<code>hkp://pool.sks-keyservers.net</code>。</p>\n</li>\n<li><p>记录下<code>/root/.gnupg/</code>中<code>secring.png</code>的位置，这个位置便是上面<code>gradle.properties</code>中的<code>signing.secretKeyRingFile</code>的值。</p>\n</li>\n</ol>\n<h2 id=\"发布过程\"><a href=\"#发布过程\" class=\"headerlink\" title=\"发布过程\"></a>发布过程</h2><p>当上述步骤全部完成时，可以直接执行<code>gradle uploadArchives</code>。</p>\n<h3 id=\"发布Snapshot版本\"><a href=\"#发布Snapshot版本\" class=\"headerlink\" title=\"发布Snapshot版本\"></a>发布Snapshot版本</h3><p>如果你的版本是<code>snapshot</code>的，你可以直接在<code>https://oss.sonatype.org/content/repositories/snapshots</code>中看到你的包。</p>\n<h3 id=\"发布Release版本\"><a href=\"#发布Release版本\" class=\"headerlink\" title=\"发布Release版本\"></a>发布Release版本</h3><p>如果你的版本是<code>release</code>版本。<br>登录<code>https://oss.sonatype.org/#welcome</code>,选择<code>Staging Repositories</code>，然后在右边用<code>groupId</code>去搜索。<br>这样会找到你的项目。选中你的项目close然后confirm。过一会再来寻找一次该构建，点击<code>Release</code>在Confirm。过一会就应该能在<code>https://oss.sonatype.org/content/groups/public</code>中看到你的项目了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要介绍如何一个由gradle构建的项目部署到Maven Central.</p>\n<!--nomore-->\n\n<p>网上大部分都是介绍如何将由maven构建的项目部署到Maven Central。与Gradle相关的比较少。</p>\n<h2 id=\"申请账号\"><a href=\"#申请账号\" class=\"headerlink\" title=\"申请账号\"></a>申请账号</h2><p>前往 <a href=\"https://issues.sonatype.org/\" target=\"_blank\" rel=\"noopener\">sonatype</a>申请账号。</p>\n<p>申请完，Create Issue。</p>\n<p>按照<a href=\"https://issues.sonatype.org/browse/OSSRH-44681\" target=\"_blank\" rel=\"noopener\">这个模板</a>填。</p>\n<p>这一块比较简单，网上教程也比较多。</p>\n<p>Create Issue结束后，官方会需要你证明你拥有相对应的domain。</p>\n<p>证明有以下3个途径： </p>\n<ol>\n<li>Add a TXT record to your DNS referencing this JIRA ticket: OSSRH-44681 (Fastest)</li>\n<li>Setup a redirect to your Github page (if it does not already exist)</li>\n<li>Send an email to <a href=\"mailto:central@sonatype.com\" target=\"_blank\" rel=\"noopener\">central@sonatype.com</a> referencing this issue from a … email address</li>\n</ol>\n<p>证明完毕之后，你就可以发布包了。</p>\n<p>你就可以做下面几件事了：</p>\n<ol>\n<li>Deploy snapshot artifacts into repository <a href=\"https://oss.sonatype.org/content/repositories/snapshots\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org/content/repositories/snapshots</a></li>\n<li>Deploy release artifacts into the staging repository <a href=\"https://oss.sonatype.org/service/local/staging/deploy/maven2\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org/service/local/staging/deploy/maven2</a></li>\n<li>Promote staged artifacts into repository ‘Releases’</li>\n<li>Download snapshot and release artifacts from group <a href=\"https://oss.sonatype.org/content/groups/public\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org/content/groups/public</a></li>\n<li>Download snapshot, release and staged artifacts from staging group <a href=\"https://oss.sonatype.org/content/groups/staging\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org/content/groups/staging</a></li>\n</ol>\n<h2 id=\"构建Gradle\"><a href=\"#构建Gradle\" class=\"headerlink\" title=\"构建Gradle\"></a>构建Gradle</h2><p>下面主要内容基于<br><a href=\"https://central.sonatype.org/pages/gradle.html\" target=\"_blank\" rel=\"noopener\">官方英文教程</a>，加上一些个人构建时候的一些收获。</p>\n<h3 id=\"build-gralde-文件修改\"><a href=\"#build-gralde-文件修改\" class=\"headerlink\" title=\"build.gralde 文件修改\"></a>build.gralde 文件修改</h3><h4 id=\"引入plugin\"><a href=\"#引入plugin\" class=\"headerlink\" title=\"引入plugin\"></a>引入plugin</h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'maven'</span></span><br><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'signing'</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task javadocJar(<span class=\"string\">type:</span> Jar) &#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">'javadoc'</span></span><br><span class=\"line\">    from javadoc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task sourcesJar(<span class=\"string\">type:</span> Jar) &#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">'sources'</span></span><br><span class=\"line\">    from sourceSets.main.allSource</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">artifacts &#123;</span><br><span class=\"line\">    archives javadocJar, sourcesJar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引入UploadArchives-task\"><a href=\"#引入UploadArchives-task\" class=\"headerlink\" title=\"引入UploadArchives task\"></a>引入UploadArchives task</h4><p>引入<code>UploadArchives</code>这个task，记住更改里面的个人相关信息。</p>\n<p>其中有<code>ossrhUsername</code>和<code>ossrhPassword</code>这两个变量是定义在<code>gradle.properties</code>中的。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            beforeDeployment &#123; MavenDeployment deployment -&gt; signing.signPom(deployment) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            repository(<span class=\"string\">url:</span> <span class=\"string\">\"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"</span>) &#123;</span><br><span class=\"line\">                authentication(<span class=\"string\">userName:</span> ossrhUsername, <span class=\"string\">password:</span> ossrhPassword)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            snapshotRepository(<span class=\"string\">url:</span> <span class=\"string\">\"https://oss.sonatype.org/content/repositories/snapshots/\"</span>) &#123;</span><br><span class=\"line\">                authentication(<span class=\"string\">userName:</span> ossrhUsername, <span class=\"string\">password:</span> ossrhPassword)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            pom.project &#123;</span><br><span class=\"line\">                name <span class=\"string\">'Example Application'</span></span><br><span class=\"line\">                packaging <span class=\"string\">'jar'</span></span><br><span class=\"line\">                <span class=\"comment\">// optionally artifactId can be defined here </span></span><br><span class=\"line\">                description <span class=\"string\">'A application used as an example on how to set up </span></span><br><span class=\"line\"><span class=\"string\">                pushing its components to the Central Repository . '</span></span><br><span class=\"line\">                url <span class=\"string\">'http://www.example.com/example-application'</span></span><br><span class=\"line\"></span><br><span class=\"line\">                scm &#123;</span><br><span class=\"line\">                    connection <span class=\"string\">'scm:git:git@github.com:username/project.git'</span></span><br><span class=\"line\">                    developerConnection <span class=\"string\">'scm:git:git@github.com:username/project.git'</span></span><br><span class=\"line\">                    url <span class=\"string\">'https://github.com/username/project'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                licenses &#123;</span><br><span class=\"line\">                    license &#123;</span><br><span class=\"line\">                        name <span class=\"string\">'The Apache License, Version 2.0'</span></span><br><span class=\"line\">                        url <span class=\"string\">'http://www.apache.org/licenses/LICENSE-2.0.txt'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                developers &#123;</span><br><span class=\"line\">                    developer &#123;</span><br><span class=\"line\">                        id <span class=\"string\">'manfred'</span></span><br><span class=\"line\">                        name <span class=\"string\">'Manfred Moser'</span></span><br><span class=\"line\">                        email <span class=\"string\">'manfred@sonatype.com'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写gradle-properties\"><a href=\"#编写gradle-properties\" class=\"headerlink\" title=\"编写gradle.properties\"></a>编写gradle.properties</h4><p>主要是将一些认证信息填在这里。（这些信息不要加入到版本管理中)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下3个信息怎么来下一章节来讲</span><br><span class=\"line\">signing.keyId=YourKeyId</span><br><span class=\"line\">signing.password=YourPublicKeyPassword</span><br><span class=\"line\">signing.secretKeyRingFile=PathToYourKeyRingFile</span><br><span class=\"line\"></span><br><span class=\"line\">ossrhUsername=your-jira-id  你在sonatype申请的账号的用户名</span><br><span class=\"line\">ossrhPassword=your-jira-password  你在sonatype申请的账号的密码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成GPG加密信息\"><a href=\"#生成GPG加密信息\" class=\"headerlink\" title=\"生成GPG加密信息\"></a>生成GPG加密信息</h2><p>windows中可以安装gpg4win来生成相关信息。但是我个人在windows10中并没有能够打开。<br>所以我使用了WSL来生成相关信息。如果你的系统是Linux也可以。</p>\n<ol>\n<li><p>执行<code>gpg --gen-key</code>, 按照提示的信息填入密码，用户名等信息，这些信息记录下来。这里填入的密码就是上面<code>gradle.properties</code>中的<code>signing.password</code>。</p>\n</li>\n<li><p>执行<code>gpg --list-keys</code>, 可以看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/.gnupg/pubring.gpg</span><br><span class=\"line\">pub   2048R/B98765 2018-12-08</span><br><span class=\"line\">uid                  </span><br><span class=\"line\">sub 2048R/A123456</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第一行便是对应的公钥文件位置，<code>pug</code>后面的<code>B98765</code>便是public key Id，这个id也就是上面<code>gradle.properties</code>中的<code>signing.keyId</code></p>\n</li>\n<li><p>执行<code>gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys B98765</code>将公钥发送到<code>hkp://pool.sks-keyservers.net</code>。</p>\n</li>\n<li><p>记录下<code>/root/.gnupg/</code>中<code>secring.png</code>的位置，这个位置便是上面<code>gradle.properties</code>中的<code>signing.secretKeyRingFile</code>的值。</p>\n</li>\n</ol>\n<h2 id=\"发布过程\"><a href=\"#发布过程\" class=\"headerlink\" title=\"发布过程\"></a>发布过程</h2><p>当上述步骤全部完成时，可以直接执行<code>gradle uploadArchives</code>。</p>\n<h3 id=\"发布Snapshot版本\"><a href=\"#发布Snapshot版本\" class=\"headerlink\" title=\"发布Snapshot版本\"></a>发布Snapshot版本</h3><p>如果你的版本是<code>snapshot</code>的，你可以直接在<code>https://oss.sonatype.org/content/repositories/snapshots</code>中看到你的包。</p>\n<h3 id=\"发布Release版本\"><a href=\"#发布Release版本\" class=\"headerlink\" title=\"发布Release版本\"></a>发布Release版本</h3><p>如果你的版本是<code>release</code>版本。<br>登录<code>https://oss.sonatype.org/#welcome</code>,选择<code>Staging Repositories</code>，然后在右边用<code>groupId</code>去搜索。<br>这样会找到你的项目。选中你的项目close然后confirm。过一会再来寻找一次该构建，点击<code>Release</code>在Confirm。过一会就应该能在<code>https://oss.sonatype.org/content/groups/public</code>中看到你的项目了。</p>\n"},{"author":"ivyxjc","date":"2016-12-06T16:00:00.000Z","title":"如何下拉, 上拉刷新数据","keywords":null,"description":"如何下拉,上拉刷新数据.本文介绍SwipeRefreshLayout,","toc":true,"_content":"\n## SwipeRefreshLayout\n\n`SwipeRefreshLayout`是由google官方提出的下拉刷新空间, 在`android.support.v4`兼容库中.\n\n### 使用\n\n#### 布局文件\n`SwipeRefreshLayout`基本上可以包裹任何可以滚动的内容(ListView, RecyclerView...,WebView)\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.SwipeRefreshLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/swipe_refresh\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/news_rv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n    </android.support.v7.widget.RecyclerView>\n</android.support.v4.widget.SwipeRefreshLayout>\n```\n\n#### 刷新操作\n\n```java\nmSwipeRefreshLayout=(SwipeRefreshLayout)findViewById(R.id.swipe_refresh);\nmSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n            @Override\n            public void onRefresh() {\n                pageNum+=1;\n                updateDatas(service,apiKey,pageNum);\n            }\n        });\n\n....\npublic void updateDatas(Api.NewsService service,String apiKey,int pageNum){\n        service.getList(apiKey,pageNum)\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(new Subscriber<News>() {\n                    @Override\n                    public void onCompleted() {\n                      ...\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                      ...\n                    }\n\n                    @Override\n                    public void onNext(News news) {\n                        datas=news.getDatas();\n                        notifyDatasetChanged(datas);\n                        mSwipeRefreshLayout.setRefreshing(false);\n                    }\n                });\n    }\n```\n\n在获取完数据之后, 需要调用`mSwipeRefreshLayout.setRefreshing(false);`, 否则加载的小圆圈将一直在旋转.\n\n#### 自定义\n\n```java\n//设置下拉出现的小圆圈是否缩放出现，出现的位置，最大的下拉位置\n mSwipeRefreshLayout.setProgressViewOffset(true,R.attr.actionBarSize+20,200);\n\n//设置下拉圆圈的大小，两个值 LARGE， DEFAULT\nmySwipeRefreshLayout.setSize(SwipeRefreshLayout.LARGE);\n\n// 禁用下拉刷新\nmySwipeRefreshLayout.setEnabled(false);\n\n// 设定下拉圆圈的背景颜色\nmySwipeRefreshLayout.setProgressBackgroundColor(R.color.red);\n\n// 设置下拉圆圈的颜色, 将按照该颜色顺序展示\nmySwipeRefreshLayout.setColorSchemeResources(color1,color2);\n```\n\n## Ultra Pull to Refresh\n\n### 使用\n\n#### 配置\n```\nbuild.gradle(project)\n\nbuildscript {\n    repositories {\n        jcenter()\n        maven {\n            url 'https://oss.sonatype.org/content/repositories/snapshots'\n        }\n    }\n    ...\n}\n```\n\n```\nbuild.gradle(app)\ncompile 'in.srain.cube:ultra-ptr:1.0.11'\n```\n\n\n#### 布局文件\n\n```xml\n<in.srain.cube.views.ptr.PtrClassicFrameLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/refresh_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_marginTop=\"?attr/actionBarSize\"\n    android:layout_height=\"match_parent\">\n\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/news_rv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n    </android.support.v7.widget.RecyclerView>\n\n</in.srain.cube.views.ptr.PtrClassicFrameLayout>\n\n\n```\n\n#### 刷新操作\n\n```java\nmRefreshLayout=(PtrFrameLayout)findViewById(R.id.refresh_layout);\nmRefreshLayout.setLoadingMinTime(1000);\nmRefreshLayout.setPullToRefresh(true);\n...\nmRefreshLayout.setPtrHandler(new PtrHandler() {\n    @Override\n    public boolean checkCanDoRefresh(PtrFrameLayout frame, View content, View header) {\n\n        // here check list view, not content.\n        return PtrDefaultHandler.checkContentCanBePulledDown(frame,content, header);\n    }\n\n    @Override\n    public void onRefreshBegin(PtrFrameLayout frame) {\n        pageNum+=1;\n        updateDatas(service,apiKey,pageNum);\n    }\n});\n\npublic void updateDatas(Api.NewsService service,String apiKey,int pageNum){\n        service.getList(apiKey,pageNum)\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(new Subscriber<News>() {\n                    @Override\n                    public void onCompleted() {\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(News news) {\n                        datas=news.getShowapi_res_body().getPagebean().getContentlist();\n                        notifyDatasetChanged(datas);\n                        mRefreshLayout.refreshComplete();\n                    }\n                });\n    }\n\n```","source":"_posts/android/UI相关/2016-12-7-Pull-Refresh.md","raw":"---\nauthor: ivyxjc\ndate: 2016-12-7\ntitle: 如何下拉, 上拉刷新数据\ncategory: Android\ntags: [android,android_UI,android_refresh]\nkeywords: \ndescription: 如何下拉,上拉刷新数据.本文介绍SwipeRefreshLayout,\ntoc: true\n---\n\n## SwipeRefreshLayout\n\n`SwipeRefreshLayout`是由google官方提出的下拉刷新空间, 在`android.support.v4`兼容库中.\n\n### 使用\n\n#### 布局文件\n`SwipeRefreshLayout`基本上可以包裹任何可以滚动的内容(ListView, RecyclerView...,WebView)\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.SwipeRefreshLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/swipe_refresh\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/news_rv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n    </android.support.v7.widget.RecyclerView>\n</android.support.v4.widget.SwipeRefreshLayout>\n```\n\n#### 刷新操作\n\n```java\nmSwipeRefreshLayout=(SwipeRefreshLayout)findViewById(R.id.swipe_refresh);\nmSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n            @Override\n            public void onRefresh() {\n                pageNum+=1;\n                updateDatas(service,apiKey,pageNum);\n            }\n        });\n\n....\npublic void updateDatas(Api.NewsService service,String apiKey,int pageNum){\n        service.getList(apiKey,pageNum)\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(new Subscriber<News>() {\n                    @Override\n                    public void onCompleted() {\n                      ...\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                      ...\n                    }\n\n                    @Override\n                    public void onNext(News news) {\n                        datas=news.getDatas();\n                        notifyDatasetChanged(datas);\n                        mSwipeRefreshLayout.setRefreshing(false);\n                    }\n                });\n    }\n```\n\n在获取完数据之后, 需要调用`mSwipeRefreshLayout.setRefreshing(false);`, 否则加载的小圆圈将一直在旋转.\n\n#### 自定义\n\n```java\n//设置下拉出现的小圆圈是否缩放出现，出现的位置，最大的下拉位置\n mSwipeRefreshLayout.setProgressViewOffset(true,R.attr.actionBarSize+20,200);\n\n//设置下拉圆圈的大小，两个值 LARGE， DEFAULT\nmySwipeRefreshLayout.setSize(SwipeRefreshLayout.LARGE);\n\n// 禁用下拉刷新\nmySwipeRefreshLayout.setEnabled(false);\n\n// 设定下拉圆圈的背景颜色\nmySwipeRefreshLayout.setProgressBackgroundColor(R.color.red);\n\n// 设置下拉圆圈的颜色, 将按照该颜色顺序展示\nmySwipeRefreshLayout.setColorSchemeResources(color1,color2);\n```\n\n## Ultra Pull to Refresh\n\n### 使用\n\n#### 配置\n```\nbuild.gradle(project)\n\nbuildscript {\n    repositories {\n        jcenter()\n        maven {\n            url 'https://oss.sonatype.org/content/repositories/snapshots'\n        }\n    }\n    ...\n}\n```\n\n```\nbuild.gradle(app)\ncompile 'in.srain.cube:ultra-ptr:1.0.11'\n```\n\n\n#### 布局文件\n\n```xml\n<in.srain.cube.views.ptr.PtrClassicFrameLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/refresh_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_marginTop=\"?attr/actionBarSize\"\n    android:layout_height=\"match_parent\">\n\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/news_rv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n    </android.support.v7.widget.RecyclerView>\n\n</in.srain.cube.views.ptr.PtrClassicFrameLayout>\n\n\n```\n\n#### 刷新操作\n\n```java\nmRefreshLayout=(PtrFrameLayout)findViewById(R.id.refresh_layout);\nmRefreshLayout.setLoadingMinTime(1000);\nmRefreshLayout.setPullToRefresh(true);\n...\nmRefreshLayout.setPtrHandler(new PtrHandler() {\n    @Override\n    public boolean checkCanDoRefresh(PtrFrameLayout frame, View content, View header) {\n\n        // here check list view, not content.\n        return PtrDefaultHandler.checkContentCanBePulledDown(frame,content, header);\n    }\n\n    @Override\n    public void onRefreshBegin(PtrFrameLayout frame) {\n        pageNum+=1;\n        updateDatas(service,apiKey,pageNum);\n    }\n});\n\npublic void updateDatas(Api.NewsService service,String apiKey,int pageNum){\n        service.getList(apiKey,pageNum)\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(new Subscriber<News>() {\n                    @Override\n                    public void onCompleted() {\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(News news) {\n                        datas=news.getShowapi_res_body().getPagebean().getContentlist();\n                        notifyDatasetChanged(datas);\n                        mRefreshLayout.refreshComplete();\n                    }\n                });\n    }\n\n```","slug":"android/UI相关/2016-12-7-Pull-Refresh","published":1,"updated":"2018-08-09T10:10:11.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8n002k28t16e91pcag","content":"<h2 id=\"SwipeRefreshLayout\"><a href=\"#SwipeRefreshLayout\" class=\"headerlink\" title=\"SwipeRefreshLayout\"></a>SwipeRefreshLayout</h2><p><code>SwipeRefreshLayout</code>是由google官方提出的下拉刷新空间, 在<code>android.support.v4</code>兼容库中.</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"布局文件\"><a href=\"#布局文件\" class=\"headerlink\" title=\"布局文件\"></a>布局文件</h4><p><code>SwipeRefreshLayout</code>基本上可以包裹任何可以滚动的内容(ListView, RecyclerView…,WebView)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.SwipeRefreshLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/swipe_refresh\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/news_rv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.RecyclerView</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"刷新操作\"><a href=\"#刷新操作\" class=\"headerlink\" title=\"刷新操作\"></a>刷新操作</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mSwipeRefreshLayout=(SwipeRefreshLayout)findViewById(R.id.swipe_refresh);</span><br><span class=\"line\">mSwipeRefreshLayout.setOnRefreshListener(<span class=\"keyword\">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRefresh</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                pageNum+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                updateDatas(service,apiKey,pageNum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateDatas</span><span class=\"params\">(Api.NewsService service,String apiKey,<span class=\"keyword\">int</span> pageNum)</span></span>&#123;</span><br><span class=\"line\">        service.getList(apiKey,pageNum)</span><br><span class=\"line\">                .subscribeOn(Schedulers.io())</span><br><span class=\"line\">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Subscriber&lt;News&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                      ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                      ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(News news)</span> </span>&#123;</span><br><span class=\"line\">                        datas=news.getDatas();</span><br><span class=\"line\">                        notifyDatasetChanged(datas);</span><br><span class=\"line\">                        mSwipeRefreshLayout.setRefreshing(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在获取完数据之后, 需要调用<code>mSwipeRefreshLayout.setRefreshing(false);</code>, 否则加载的小圆圈将一直在旋转.</p>\n<h4 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置下拉出现的小圆圈是否缩放出现，出现的位置，最大的下拉位置</span></span><br><span class=\"line\"> mSwipeRefreshLayout.setProgressViewOffset(<span class=\"keyword\">true</span>,R.attr.actionBarSize+<span class=\"number\">20</span>,<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置下拉圆圈的大小，两个值 LARGE， DEFAULT</span></span><br><span class=\"line\">mySwipeRefreshLayout.setSize(SwipeRefreshLayout.LARGE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 禁用下拉刷新</span></span><br><span class=\"line\">mySwipeRefreshLayout.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定下拉圆圈的背景颜色</span></span><br><span class=\"line\">mySwipeRefreshLayout.setProgressBackgroundColor(R.color.red);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置下拉圆圈的颜色, 将按照该颜色顺序展示</span></span><br><span class=\"line\">mySwipeRefreshLayout.setColorSchemeResources(color1,color2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ultra-Pull-to-Refresh\"><a href=\"#Ultra-Pull-to-Refresh\" class=\"headerlink\" title=\"Ultra Pull to Refresh\"></a>Ultra Pull to Refresh</h2><h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build.gradle(project)</span><br><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &apos;https://oss.sonatype.org/content/repositories/snapshots&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build.gradle(app)</span><br><span class=\"line\">compile &apos;in.srain.cube:ultra-ptr:1.0.11&apos;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"布局文件-1\"><a href=\"#布局文件-1\" class=\"headerlink\" title=\"布局文件\"></a>布局文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">in.srain.cube.views.ptr.PtrClassicFrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/refresh_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/news_rv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.RecyclerView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">in.srain.cube.views.ptr.PtrClassicFrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"刷新操作-1\"><a href=\"#刷新操作-1\" class=\"headerlink\" title=\"刷新操作\"></a>刷新操作</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mRefreshLayout=(PtrFrameLayout)findViewById(R.id.refresh_layout);</span><br><span class=\"line\">mRefreshLayout.setLoadingMinTime(<span class=\"number\">1000</span>);</span><br><span class=\"line\">mRefreshLayout.setPullToRefresh(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">mRefreshLayout.setPtrHandler(<span class=\"keyword\">new</span> PtrHandler() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkCanDoRefresh</span><span class=\"params\">(PtrFrameLayout frame, View content, View header)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// here check list view, not content.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> PtrDefaultHandler.checkContentCanBePulledDown(frame,content, header);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRefreshBegin</span><span class=\"params\">(PtrFrameLayout frame)</span> </span>&#123;</span><br><span class=\"line\">        pageNum+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        updateDatas(service,apiKey,pageNum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateDatas</span><span class=\"params\">(Api.NewsService service,String apiKey,<span class=\"keyword\">int</span> pageNum)</span></span>&#123;</span><br><span class=\"line\">        service.getList(apiKey,pageNum)</span><br><span class=\"line\">                .subscribeOn(Schedulers.io())</span><br><span class=\"line\">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Subscriber&lt;News&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(News news)</span> </span>&#123;</span><br><span class=\"line\">                        datas=news.getShowapi_res_body().getPagebean().getContentlist();</span><br><span class=\"line\">                        notifyDatasetChanged(datas);</span><br><span class=\"line\">                        mRefreshLayout.refreshComplete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SwipeRefreshLayout\"><a href=\"#SwipeRefreshLayout\" class=\"headerlink\" title=\"SwipeRefreshLayout\"></a>SwipeRefreshLayout</h2><p><code>SwipeRefreshLayout</code>是由google官方提出的下拉刷新空间, 在<code>android.support.v4</code>兼容库中.</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"布局文件\"><a href=\"#布局文件\" class=\"headerlink\" title=\"布局文件\"></a>布局文件</h4><p><code>SwipeRefreshLayout</code>基本上可以包裹任何可以滚动的内容(ListView, RecyclerView…,WebView)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.SwipeRefreshLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/swipe_refresh\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/news_rv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.RecyclerView</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"刷新操作\"><a href=\"#刷新操作\" class=\"headerlink\" title=\"刷新操作\"></a>刷新操作</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mSwipeRefreshLayout=(SwipeRefreshLayout)findViewById(R.id.swipe_refresh);</span><br><span class=\"line\">mSwipeRefreshLayout.setOnRefreshListener(<span class=\"keyword\">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRefresh</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                pageNum+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                updateDatas(service,apiKey,pageNum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateDatas</span><span class=\"params\">(Api.NewsService service,String apiKey,<span class=\"keyword\">int</span> pageNum)</span></span>&#123;</span><br><span class=\"line\">        service.getList(apiKey,pageNum)</span><br><span class=\"line\">                .subscribeOn(Schedulers.io())</span><br><span class=\"line\">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Subscriber&lt;News&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                      ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                      ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(News news)</span> </span>&#123;</span><br><span class=\"line\">                        datas=news.getDatas();</span><br><span class=\"line\">                        notifyDatasetChanged(datas);</span><br><span class=\"line\">                        mSwipeRefreshLayout.setRefreshing(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在获取完数据之后, 需要调用<code>mSwipeRefreshLayout.setRefreshing(false);</code>, 否则加载的小圆圈将一直在旋转.</p>\n<h4 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置下拉出现的小圆圈是否缩放出现，出现的位置，最大的下拉位置</span></span><br><span class=\"line\"> mSwipeRefreshLayout.setProgressViewOffset(<span class=\"keyword\">true</span>,R.attr.actionBarSize+<span class=\"number\">20</span>,<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置下拉圆圈的大小，两个值 LARGE， DEFAULT</span></span><br><span class=\"line\">mySwipeRefreshLayout.setSize(SwipeRefreshLayout.LARGE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 禁用下拉刷新</span></span><br><span class=\"line\">mySwipeRefreshLayout.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定下拉圆圈的背景颜色</span></span><br><span class=\"line\">mySwipeRefreshLayout.setProgressBackgroundColor(R.color.red);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置下拉圆圈的颜色, 将按照该颜色顺序展示</span></span><br><span class=\"line\">mySwipeRefreshLayout.setColorSchemeResources(color1,color2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ultra-Pull-to-Refresh\"><a href=\"#Ultra-Pull-to-Refresh\" class=\"headerlink\" title=\"Ultra Pull to Refresh\"></a>Ultra Pull to Refresh</h2><h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build.gradle(project)</span><br><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &apos;https://oss.sonatype.org/content/repositories/snapshots&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build.gradle(app)</span><br><span class=\"line\">compile &apos;in.srain.cube:ultra-ptr:1.0.11&apos;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"布局文件-1\"><a href=\"#布局文件-1\" class=\"headerlink\" title=\"布局文件\"></a>布局文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">in.srain.cube.views.ptr.PtrClassicFrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/refresh_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/news_rv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.RecyclerView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">in.srain.cube.views.ptr.PtrClassicFrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"刷新操作-1\"><a href=\"#刷新操作-1\" class=\"headerlink\" title=\"刷新操作\"></a>刷新操作</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mRefreshLayout=(PtrFrameLayout)findViewById(R.id.refresh_layout);</span><br><span class=\"line\">mRefreshLayout.setLoadingMinTime(<span class=\"number\">1000</span>);</span><br><span class=\"line\">mRefreshLayout.setPullToRefresh(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">mRefreshLayout.setPtrHandler(<span class=\"keyword\">new</span> PtrHandler() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkCanDoRefresh</span><span class=\"params\">(PtrFrameLayout frame, View content, View header)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// here check list view, not content.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> PtrDefaultHandler.checkContentCanBePulledDown(frame,content, header);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRefreshBegin</span><span class=\"params\">(PtrFrameLayout frame)</span> </span>&#123;</span><br><span class=\"line\">        pageNum+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        updateDatas(service,apiKey,pageNum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateDatas</span><span class=\"params\">(Api.NewsService service,String apiKey,<span class=\"keyword\">int</span> pageNum)</span></span>&#123;</span><br><span class=\"line\">        service.getList(apiKey,pageNum)</span><br><span class=\"line\">                .subscribeOn(Schedulers.io())</span><br><span class=\"line\">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Subscriber&lt;News&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(News news)</span> </span>&#123;</span><br><span class=\"line\">                        datas=news.getShowapi_res_body().getPagebean().getContentlist();</span><br><span class=\"line\">                        notifyDatasetChanged(datas);</span><br><span class=\"line\">                        mRefreshLayout.refreshComplete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"author":"ivyxjc","date":"2016-12-05T16:00:00.000Z","title":"动态规划","keywords":null,"description":"Codeforces Education Round7几道题目的解答","_content":"\n动态规划适用于原问题的子问题之间还存在公共子子问题, 分治法适用于子问题之间没有过多的相互关系.\n\n<!--more-->\n\n## 钢条切割问题\n\n\n不同长度的钢条可以售出不同的价格, 现有一根长度为n的钢条, 现切割该钢条成不同长度的子钢条, 那么最佳的\n\n\n## 矩阵链问题\n\n\n## 最长公共子序列问题","source":"_posts/algorithm/algorithm/2016-12-6-dynamic-programming.md","raw":"---\nauthor: ivyxjc\ndate: 2016-12-06\ntitle: 动态规划\ncategory: Algorithm\ntags: [algorithm,dynamic_programming]\nkeywords:\ndescription: Codeforces Education Round7几道题目的解答\n---\n\n动态规划适用于原问题的子问题之间还存在公共子子问题, 分治法适用于子问题之间没有过多的相互关系.\n\n<!--more-->\n\n## 钢条切割问题\n\n\n不同长度的钢条可以售出不同的价格, 现有一根长度为n的钢条, 现切割该钢条成不同长度的子钢条, 那么最佳的\n\n\n## 矩阵链问题\n\n\n## 最长公共子序列问题","slug":"algorithm/algorithm/2016-12-6-dynamic-programming","published":1,"updated":"2018-08-09T10:10:11.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8p002o28t1hk1q95bq","content":"<p>动态规划适用于原问题的子问题之间还存在公共子子问题, 分治法适用于子问题之间没有过多的相互关系.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"钢条切割问题\"><a href=\"#钢条切割问题\" class=\"headerlink\" title=\"钢条切割问题\"></a>钢条切割问题</h2><p>不同长度的钢条可以售出不同的价格, 现有一根长度为n的钢条, 现切割该钢条成不同长度的子钢条, 那么最佳的</p>\n<h2 id=\"矩阵链问题\"><a href=\"#矩阵链问题\" class=\"headerlink\" title=\"矩阵链问题\"></a>矩阵链问题</h2><h2 id=\"最长公共子序列问题\"><a href=\"#最长公共子序列问题\" class=\"headerlink\" title=\"最长公共子序列问题\"></a>最长公共子序列问题</h2>","site":{"data":{}},"excerpt":"<p>动态规划适用于原问题的子问题之间还存在公共子子问题, 分治法适用于子问题之间没有过多的相互关系.</p>","more":"<h2 id=\"钢条切割问题\"><a href=\"#钢条切割问题\" class=\"headerlink\" title=\"钢条切割问题\"></a>钢条切割问题</h2><p>不同长度的钢条可以售出不同的价格, 现有一根长度为n的钢条, 现切割该钢条成不同长度的子钢条, 那么最佳的</p>\n<h2 id=\"矩阵链问题\"><a href=\"#矩阵链问题\" class=\"headerlink\" title=\"矩阵链问题\"></a>矩阵链问题</h2><h2 id=\"最长公共子序列问题\"><a href=\"#最长公共子序列问题\" class=\"headerlink\" title=\"最长公共子序列问题\"></a>最长公共子序列问题</h2>"},{"date":"2016-06-01T16:00:00.000Z","title":"Activity的生命周期","keywords":null,"description":null,"_content":"\nAndroid中Activity的生命周期. <br>\n`onCreate()`-->`onStart()`-->`onResume()`-->`onPause()`-->`onPause()`-->`onDestory()`\n<!--more-->\n\n## 生命周期\n1. `onCreate()``\n2. `onStart()`\n3. `onResume()`\n4. `onPause()`\n5. `onPause()`\n6. `onDestory()`\n\n\n### `onCreate()`的作用\n\n1. 实例化组件并将组件放在屏幕上\n2. 引用已经实例化的组件\n3. 为组件设置监听器以处理用户交互\n4. 访问外部模型数据\n\n## 翻转屏幕对生命周期的影响\n翻转屏幕会导致`Activity`先会被销毁再重新创建，若不加以处理会导致很多意外的问题。顺序为`onPause()`,`onStop()`,`onDestory()`,`onCreate()`,`onStart()`,`onResume()`\n","source":"_posts/android/lifecycle/2016-06-02-lifecycle-basic.md","raw":"---\ndate: 2016-06-02\ntitle: Activity的生命周期\ncategory: Android\ntags: [android,android_lifecycle]\nkeywords:\ndescription:\n---\n\nAndroid中Activity的生命周期. <br>\n`onCreate()`-->`onStart()`-->`onResume()`-->`onPause()`-->`onPause()`-->`onDestory()`\n<!--more-->\n\n## 生命周期\n1. `onCreate()``\n2. `onStart()`\n3. `onResume()`\n4. `onPause()`\n5. `onPause()`\n6. `onDestory()`\n\n\n### `onCreate()`的作用\n\n1. 实例化组件并将组件放在屏幕上\n2. 引用已经实例化的组件\n3. 为组件设置监听器以处理用户交互\n4. 访问外部模型数据\n\n## 翻转屏幕对生命周期的影响\n翻转屏幕会导致`Activity`先会被销毁再重新创建，若不加以处理会导致很多意外的问题。顺序为`onPause()`,`onStop()`,`onDestory()`,`onCreate()`,`onStart()`,`onResume()`\n","slug":"android/lifecycle/2016-06-02-lifecycle-basic","published":1,"updated":"2018-08-09T10:10:11.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8q002r28t1nepw9n2y","content":"<p>Android中Activity的生命周期. <br><br><code>onCreate()</code>–&gt;<code>onStart()</code>–&gt;<code>onResume()</code>–&gt;<code>onPause()</code>–&gt;<code>onPause()</code>–&gt;<code>onDestory()</code></p>\n<a id=\"more\"></a>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><ol>\n<li>`onCreate()``</li>\n<li><code>onStart()</code></li>\n<li><code>onResume()</code></li>\n<li><code>onPause()</code></li>\n<li><code>onPause()</code></li>\n<li><code>onDestory()</code></li>\n</ol>\n<h3 id=\"onCreate-的作用\"><a href=\"#onCreate-的作用\" class=\"headerlink\" title=\"onCreate()的作用\"></a><code>onCreate()</code>的作用</h3><ol>\n<li>实例化组件并将组件放在屏幕上</li>\n<li>引用已经实例化的组件</li>\n<li>为组件设置监听器以处理用户交互</li>\n<li>访问外部模型数据</li>\n</ol>\n<h2 id=\"翻转屏幕对生命周期的影响\"><a href=\"#翻转屏幕对生命周期的影响\" class=\"headerlink\" title=\"翻转屏幕对生命周期的影响\"></a>翻转屏幕对生命周期的影响</h2><p>翻转屏幕会导致<code>Activity</code>先会被销毁再重新创建，若不加以处理会导致很多意外的问题。顺序为<code>onPause()</code>,<code>onStop()</code>,<code>onDestory()</code>,<code>onCreate()</code>,<code>onStart()</code>,<code>onResume()</code></p>\n","site":{"data":{}},"excerpt":"<p>Android中Activity的生命周期. <br><br><code>onCreate()</code>–&gt;<code>onStart()</code>–&gt;<code>onResume()</code>–&gt;<code>onPause()</code>–&gt;<code>onPause()</code>–&gt;<code>onDestory()</code></p>","more":"<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><ol>\n<li>`onCreate()``</li>\n<li><code>onStart()</code></li>\n<li><code>onResume()</code></li>\n<li><code>onPause()</code></li>\n<li><code>onPause()</code></li>\n<li><code>onDestory()</code></li>\n</ol>\n<h3 id=\"onCreate-的作用\"><a href=\"#onCreate-的作用\" class=\"headerlink\" title=\"onCreate()的作用\"></a><code>onCreate()</code>的作用</h3><ol>\n<li>实例化组件并将组件放在屏幕上</li>\n<li>引用已经实例化的组件</li>\n<li>为组件设置监听器以处理用户交互</li>\n<li>访问外部模型数据</li>\n</ol>\n<h2 id=\"翻转屏幕对生命周期的影响\"><a href=\"#翻转屏幕对生命周期的影响\" class=\"headerlink\" title=\"翻转屏幕对生命周期的影响\"></a>翻转屏幕对生命周期的影响</h2><p>翻转屏幕会导致<code>Activity</code>先会被销毁再重新创建，若不加以处理会导致很多意外的问题。顺序为<code>onPause()</code>,<code>onStop()</code>,<code>onDestory()</code>,<code>onCreate()</code>,<code>onStart()</code>,<code>onResume()</code></p>"},{"author":"ivyxjc","date":"2016-09-17T16:00:00.000Z","title":"RecyclerView","keywords":null,"description":"如何使用RecyclerView","toc":true,"_content":"\n## RecyclerView 设置布局格式\n```java\nmRecyclerView = (RecyclerView) v.findViewById(R.id.main_rv);\n//类似ListView显示用\nmRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\n//类似GridView显示\nmRecyclerView.setLayoutManager(new GridLayoutManager(getActivity(), 3));\n\n```\n## RecyclerView 添加适配器 以及设置item点击监听\n\n```java\nMainFragment.java\n\nmRecyclerViewAdapter = new RecyclerViewAdapter(getActivity(), mItems, false);\nmRecyclerView.setAdapter(mRecyclerViewAdapter)\n\nmRecyclerViewAdapter.setOnItemClickListener(new RecyclerViewAdapter.OnItemClickListenerCustom() {\n            @Override\n            public void onItemClick(String id, String title) {\n                Log.i(LogKeys.MAIN_FRAGMENT, \"item is clicked \");\n                Intent intent = new Intent(getActivity(), MovieDetailActivity.class);\n                intent.putExtra(TransferKeys.MAIN_MOVIE_DETAIL_ID, id);\n                intent.putExtra(TransferKeys.MAIN_MOVIE_DETAIL_MOVIE_NAME, title);\n                startActivity(intent);\n                Log.i(LogKeys.MAIN_FRAGMENT, \"startactivity\");\n            }\n        });\n```\n\n```java\npublic class RecyclerViewAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {\n    private final Context mContext;\n    private List<MainItem> mData;\n    private OnItemClickListenerCustom mCallback;\n    private boolean mIsComingMovie;\n    private int mTotalCount;\n\n\n    public interface OnItemClickListenerCustom {\n        void onItemClick(String id,String title);\n    }\n\n    public RecyclerViewAdapter_Main(Context context, List<MainItem> data,\n                          boolean isComingMovie) {\n\n        this.mContext = context;\n        this.mData = data;\n        this.mIsComingMovie=isComingMovie;\n    }\n\n    public void refresh(ArrayList<MainItem> data){\n        mData.addAll(data);\n        notifyDataSetChanged();\n    }\n\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view=LayoutInflater.from(mContext)\n                                .inflate(R.layout.item_movie_main,parent,false);\n        return new ItemViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {\n        ((ItemViewHolder)holder).update();\n    }\n\n    @Override\n    public int getItemCount() {\n        return mData.size();\n    }\n\n    public void setOnItemClickListener(OnItemClickListenerCustom listener){\n        this.mCallback=listener;\n    }\n\n\n    class ItemViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        TextView textTitle;\n        MainItem mMainItem;\n\n        public ItemViewHolder(View itemView) {\n            super(itemView);\n            //初始化控件\n            itemView.setOnClickListener(this);\n        }\n\n        public void update() {\n            //填充控件\n        }\n\n\n        @Override\n        public void onClick(View v) {\n            if(mCallback!=null){\n                mCallback.onItemClick(mMainItem.getMovieId(),mMainItem.getTitle());\n            }\n        }\n    }\n}\n\n```\n\n## RecyclerView上滑加载\n\n要使FetchItemTask顺序执行, 否则当下滑触发loadMoreData时,会出现多个线程, 若这几个线程同时\n进行,会导致数据重复加载, 这些Task顺序执行, 只需要在doInBackground执行时\n检查star<mRecyclerViewAdapter.getStart()\n若true, 则说明该线程为重复线程 return null\n否则, 执行之后的步骤\n\n```java\nMainFragmentBase.java\nmRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener()\n{\n    int lastVisibleItem;\n    @Override\n    public void onScrollStateChanged(RecyclerView recyclerView,\n                                     int newState) {\n        super.onScrollStateChanged(recyclerView, newState);\n        if (newState == SCROLL_STATE_IDLE\n                && lastVisibleItem + 1 >= mRecyclerViewAdapter.getItemCount()\n                && mRecyclerViewAdapter.getItemCount() < mRecyclerViewAdapter.getTotalDataCount()) {\n            loadMoreData(mRecyclerViewAdapter.getStart());\n        }\n    }\n\n    @Override\n    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n        super.onScrolled(recyclerView, dx, dy);\n        LinearLayoutManager layoutManager = (LinearLayoutManager) mRecyclerView.getLayoutManager();\n        lastVisibleItem = layoutManager.findLastVisibleItemPosition();\n\n    }\n});\n\nprotected abstract void loadMoreData(int start);\n\n\nMainFragment.java extentds MainFragmentBase.java\n\n\n\n@Override\npublic void onCreate(@Nullable Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    new FetchItemTask(0).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);\n}\n\n@Override\nprotected void loadMoreData(int start) {\n    new FetchItemTask(start).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);\n}\n\nprivate class FetchItemTask extends AsyncTask<Void, Void, ArrayList<MainItem>> {\n    private int start=0;\n\n    public FetchItemTask(int s){\n        start=s;\n    }\n\n\n    @Override\n    protected ArrayList<MainItem> doInBackground(Void... params) {\n        if(start<mRecyclerViewAdapter.getStart()){\n            return null\n        }\n        DoubanFetchrMain df=new DoubanFetchrMain(0,start);\n        mRecyclerViewAdapter.setTotalCount(df.getTotalCount());\n        return df.fetchItems_SubjectInTheaters();\n    }\n\n    @Override\n    protected void onPostExecute(ArrayList<MainItem> galleryItems){\n        mItems = galleryItems;\n        if(mItems==null){\n            return;\n        }\n        mRecyclerViewAdapter.addMoreData(mItems,start);\n\n    }\n\n}\n```\n\n## 注意点\n\n点击图片进入电影详细页面时, 如果在详细页面图片未加载时返回, 应用会crash.<br>\n应该是此时ImageView已经被销毁了, 所以就造成NullPointerException.\n\n官方说已经解决这个问题, 但是下面这写法还是会crash.\n\n```java\nGlide.with(getActivity())\n     .load(url)\n     .diskCacheStrategy(DiskCacheStrategy.ALL)\n     .centerCrop()\n     .into(imageMovie);\n```\n\n更改为\n\n```java\nonCreate(...){\nmRequestManager=Glide.with(getActivity());\n}\n\n...\nmRequestManager\n           .load(url)\n           .diskCacheStrategy(DiskCacheStrategy.ALL)\n           .centerCrop()\n           .into(imageMovie);\n```\n\n这样就不会出问题.\n","source":"_posts/android/UI相关/2016-09-18-RecyclerView.md","raw":"---\nauthor: ivyxjc\ndate: 2016-09-18\ntitle: RecyclerView\ncategory: Android\ntags: [android,android_UI,android_RecyclerView]\nkeywords:\ndescription: 如何使用RecyclerView\ntoc: true\n---\n\n## RecyclerView 设置布局格式\n```java\nmRecyclerView = (RecyclerView) v.findViewById(R.id.main_rv);\n//类似ListView显示用\nmRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\n//类似GridView显示\nmRecyclerView.setLayoutManager(new GridLayoutManager(getActivity(), 3));\n\n```\n## RecyclerView 添加适配器 以及设置item点击监听\n\n```java\nMainFragment.java\n\nmRecyclerViewAdapter = new RecyclerViewAdapter(getActivity(), mItems, false);\nmRecyclerView.setAdapter(mRecyclerViewAdapter)\n\nmRecyclerViewAdapter.setOnItemClickListener(new RecyclerViewAdapter.OnItemClickListenerCustom() {\n            @Override\n            public void onItemClick(String id, String title) {\n                Log.i(LogKeys.MAIN_FRAGMENT, \"item is clicked \");\n                Intent intent = new Intent(getActivity(), MovieDetailActivity.class);\n                intent.putExtra(TransferKeys.MAIN_MOVIE_DETAIL_ID, id);\n                intent.putExtra(TransferKeys.MAIN_MOVIE_DETAIL_MOVIE_NAME, title);\n                startActivity(intent);\n                Log.i(LogKeys.MAIN_FRAGMENT, \"startactivity\");\n            }\n        });\n```\n\n```java\npublic class RecyclerViewAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {\n    private final Context mContext;\n    private List<MainItem> mData;\n    private OnItemClickListenerCustom mCallback;\n    private boolean mIsComingMovie;\n    private int mTotalCount;\n\n\n    public interface OnItemClickListenerCustom {\n        void onItemClick(String id,String title);\n    }\n\n    public RecyclerViewAdapter_Main(Context context, List<MainItem> data,\n                          boolean isComingMovie) {\n\n        this.mContext = context;\n        this.mData = data;\n        this.mIsComingMovie=isComingMovie;\n    }\n\n    public void refresh(ArrayList<MainItem> data){\n        mData.addAll(data);\n        notifyDataSetChanged();\n    }\n\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view=LayoutInflater.from(mContext)\n                                .inflate(R.layout.item_movie_main,parent,false);\n        return new ItemViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {\n        ((ItemViewHolder)holder).update();\n    }\n\n    @Override\n    public int getItemCount() {\n        return mData.size();\n    }\n\n    public void setOnItemClickListener(OnItemClickListenerCustom listener){\n        this.mCallback=listener;\n    }\n\n\n    class ItemViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        TextView textTitle;\n        MainItem mMainItem;\n\n        public ItemViewHolder(View itemView) {\n            super(itemView);\n            //初始化控件\n            itemView.setOnClickListener(this);\n        }\n\n        public void update() {\n            //填充控件\n        }\n\n\n        @Override\n        public void onClick(View v) {\n            if(mCallback!=null){\n                mCallback.onItemClick(mMainItem.getMovieId(),mMainItem.getTitle());\n            }\n        }\n    }\n}\n\n```\n\n## RecyclerView上滑加载\n\n要使FetchItemTask顺序执行, 否则当下滑触发loadMoreData时,会出现多个线程, 若这几个线程同时\n进行,会导致数据重复加载, 这些Task顺序执行, 只需要在doInBackground执行时\n检查star<mRecyclerViewAdapter.getStart()\n若true, 则说明该线程为重复线程 return null\n否则, 执行之后的步骤\n\n```java\nMainFragmentBase.java\nmRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener()\n{\n    int lastVisibleItem;\n    @Override\n    public void onScrollStateChanged(RecyclerView recyclerView,\n                                     int newState) {\n        super.onScrollStateChanged(recyclerView, newState);\n        if (newState == SCROLL_STATE_IDLE\n                && lastVisibleItem + 1 >= mRecyclerViewAdapter.getItemCount()\n                && mRecyclerViewAdapter.getItemCount() < mRecyclerViewAdapter.getTotalDataCount()) {\n            loadMoreData(mRecyclerViewAdapter.getStart());\n        }\n    }\n\n    @Override\n    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n        super.onScrolled(recyclerView, dx, dy);\n        LinearLayoutManager layoutManager = (LinearLayoutManager) mRecyclerView.getLayoutManager();\n        lastVisibleItem = layoutManager.findLastVisibleItemPosition();\n\n    }\n});\n\nprotected abstract void loadMoreData(int start);\n\n\nMainFragment.java extentds MainFragmentBase.java\n\n\n\n@Override\npublic void onCreate(@Nullable Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    new FetchItemTask(0).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);\n}\n\n@Override\nprotected void loadMoreData(int start) {\n    new FetchItemTask(start).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);\n}\n\nprivate class FetchItemTask extends AsyncTask<Void, Void, ArrayList<MainItem>> {\n    private int start=0;\n\n    public FetchItemTask(int s){\n        start=s;\n    }\n\n\n    @Override\n    protected ArrayList<MainItem> doInBackground(Void... params) {\n        if(start<mRecyclerViewAdapter.getStart()){\n            return null\n        }\n        DoubanFetchrMain df=new DoubanFetchrMain(0,start);\n        mRecyclerViewAdapter.setTotalCount(df.getTotalCount());\n        return df.fetchItems_SubjectInTheaters();\n    }\n\n    @Override\n    protected void onPostExecute(ArrayList<MainItem> galleryItems){\n        mItems = galleryItems;\n        if(mItems==null){\n            return;\n        }\n        mRecyclerViewAdapter.addMoreData(mItems,start);\n\n    }\n\n}\n```\n\n## 注意点\n\n点击图片进入电影详细页面时, 如果在详细页面图片未加载时返回, 应用会crash.<br>\n应该是此时ImageView已经被销毁了, 所以就造成NullPointerException.\n\n官方说已经解决这个问题, 但是下面这写法还是会crash.\n\n```java\nGlide.with(getActivity())\n     .load(url)\n     .diskCacheStrategy(DiskCacheStrategy.ALL)\n     .centerCrop()\n     .into(imageMovie);\n```\n\n更改为\n\n```java\nonCreate(...){\nmRequestManager=Glide.with(getActivity());\n}\n\n...\nmRequestManager\n           .load(url)\n           .diskCacheStrategy(DiskCacheStrategy.ALL)\n           .centerCrop()\n           .into(imageMovie);\n```\n\n这样就不会出问题.\n","slug":"android/UI相关/2016-09-18-RecyclerView","published":1,"updated":"2018-08-09T10:10:11.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8r002v28t1sv7unsmh","content":"<h2 id=\"RecyclerView-设置布局格式\"><a href=\"#RecyclerView-设置布局格式\" class=\"headerlink\" title=\"RecyclerView 设置布局格式\"></a>RecyclerView 设置布局格式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mRecyclerView = (RecyclerView) v.findViewById(R.id.main_rv);</span><br><span class=\"line\"><span class=\"comment\">//类似ListView显示用</span></span><br><span class=\"line\">mRecyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(getActivity()));</span><br><span class=\"line\"><span class=\"comment\">//类似GridView显示</span></span><br><span class=\"line\">mRecyclerView.setLayoutManager(<span class=\"keyword\">new</span> GridLayoutManager(getActivity(), <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RecyclerView-添加适配器-以及设置item点击监听\"><a href=\"#RecyclerView-添加适配器-以及设置item点击监听\" class=\"headerlink\" title=\"RecyclerView 添加适配器 以及设置item点击监听\"></a>RecyclerView 添加适配器 以及设置item点击监听</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainFragment.java</span><br><span class=\"line\"></span><br><span class=\"line\">mRecyclerViewAdapter = <span class=\"keyword\">new</span> RecyclerViewAdapter(getActivity(), mItems, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">mRecyclerView.setAdapter(mRecyclerViewAdapter)</span><br><span class=\"line\"></span><br><span class=\"line\">mRecyclerViewAdapter.setOnItemClickListener(<span class=\"keyword\">new</span> RecyclerViewAdapter.OnItemClickListenerCustom() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(String id, String title)</span> </span>&#123;</span><br><span class=\"line\">                Log.i(LogKeys.MAIN_FRAGMENT, <span class=\"string\">\"item is clicked \"</span>);</span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(getActivity(), MovieDetailActivity.class);</span><br><span class=\"line\">                intent.putExtra(TransferKeys.MAIN_MOVIE_DETAIL_ID, id);</span><br><span class=\"line\">                intent.putExtra(TransferKeys.MAIN_MOVIE_DETAIL_MOVIE_NAME, title);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">                Log.i(LogKeys.MAIN_FRAGMENT, <span class=\"string\">\"startactivity\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerViewAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context mContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;MainItem&gt; mData;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> OnItemClickListenerCustom mCallback;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsComingMovie;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mTotalCount;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnItemClickListenerCustom</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(String id,String title)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RecyclerViewAdapter_Main</span><span class=\"params\">(Context context, List&lt;MainItem&gt; data,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">boolean</span> isComingMovie)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mData = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mIsComingMovie=isComingMovie;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">(ArrayList&lt;MainItem&gt; data)</span></span>&#123;</span><br><span class=\"line\">        mData.addAll(data);</span><br><span class=\"line\">        notifyDataSetChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RecyclerView.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">        View view=LayoutInflater.from(mContext)</span><br><span class=\"line\">                                .inflate(R.layout.item_movie_main,parent,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ItemViewHolder(view);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(RecyclerView.ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        ((ItemViewHolder)holder).update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mData.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnItemClickListener</span><span class=\"params\">(OnItemClickListenerCustom listener)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mCallback=listener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\">        TextView textTitle;</span><br><span class=\"line\">        MainItem mMainItem;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ItemViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(itemView);</span><br><span class=\"line\">            <span class=\"comment\">//初始化控件</span></span><br><span class=\"line\">            itemView.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//填充控件</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mCallback!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                mCallback.onItemClick(mMainItem.getMovieId(),mMainItem.getTitle());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RecyclerView上滑加载\"><a href=\"#RecyclerView上滑加载\" class=\"headerlink\" title=\"RecyclerView上滑加载\"></a>RecyclerView上滑加载</h2><p>要使FetchItemTask顺序执行, 否则当下滑触发loadMoreData时,会出现多个线程, 若这几个线程同时<br>进行,会导致数据重复加载, 这些Task顺序执行, 只需要在doInBackground执行时<br>检查star&lt;mRecyclerViewAdapter.getStart()<br>若true, 则说明该线程为重复线程 return null<br>否则, 执行之后的步骤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainFragmentBase.java</span><br><span class=\"line\">mRecyclerView.addOnScrollListener(<span class=\"keyword\">new</span> RecyclerView.OnScrollListener()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lastVisibleItem;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(RecyclerView recyclerView,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">int</span> newState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onScrollStateChanged(recyclerView, newState);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newState == SCROLL_STATE_IDLE</span><br><span class=\"line\">                &amp;&amp; lastVisibleItem + <span class=\"number\">1</span> &gt;= mRecyclerViewAdapter.getItemCount()</span><br><span class=\"line\">                &amp;&amp; mRecyclerViewAdapter.getItemCount() &lt; mRecyclerViewAdapter.getTotalDataCount()) &#123;</span><br><span class=\"line\">            loadMoreData(mRecyclerViewAdapter.getStart());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrolled</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onScrolled(recyclerView, dx, dy);</span><br><span class=\"line\">        LinearLayoutManager layoutManager = (LinearLayoutManager) mRecyclerView.getLayoutManager();</span><br><span class=\"line\">        lastVisibleItem = layoutManager.findLastVisibleItemPosition();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">loadMoreData</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MainFragment.java extentds MainFragmentBase.java</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> FetchItemTask(<span class=\"number\">0</span>).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadMoreData</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> FetchItemTask(start).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FetchItemTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Void</span>, <span class=\"title\">Void</span>, <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">MainItem</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> start=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FetchItemTask</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">        start=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> ArrayList&lt;MainItem&gt; <span class=\"title\">doInBackground</span><span class=\"params\">(Void... params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start&lt;mRecyclerViewAdapter.getStart())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        DoubanFetchrMain df=<span class=\"keyword\">new</span> DoubanFetchrMain(<span class=\"number\">0</span>,start);</span><br><span class=\"line\">        mRecyclerViewAdapter.setTotalCount(df.getTotalCount());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> df.fetchItems_SubjectInTheaters();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(ArrayList&lt;MainItem&gt; galleryItems)</span></span>&#123;</span><br><span class=\"line\">        mItems = galleryItems;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mItems==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mRecyclerViewAdapter.addMoreData(mItems,start);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><p>点击图片进入电影详细页面时, 如果在详细页面图片未加载时返回, 应用会crash.<br><br>应该是此时ImageView已经被销毁了, 所以就造成NullPointerException.</p>\n<p>官方说已经解决这个问题, 但是下面这写法还是会crash.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(getActivity())</span><br><span class=\"line\">     .load(url)</span><br><span class=\"line\">     .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class=\"line\">     .centerCrop()</span><br><span class=\"line\">     .into(imageMovie);</span><br></pre></td></tr></table></figure>\n\n<p>更改为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onCreate(...)&#123;</span><br><span class=\"line\">mRequestManager=Glide.with(getActivity());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">mRequestManager</span><br><span class=\"line\">           .load(url)</span><br><span class=\"line\">           .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class=\"line\">           .centerCrop()</span><br><span class=\"line\">           .into(imageMovie);</span><br></pre></td></tr></table></figure>\n\n<p>这样就不会出问题.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"RecyclerView-设置布局格式\"><a href=\"#RecyclerView-设置布局格式\" class=\"headerlink\" title=\"RecyclerView 设置布局格式\"></a>RecyclerView 设置布局格式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mRecyclerView = (RecyclerView) v.findViewById(R.id.main_rv);</span><br><span class=\"line\"><span class=\"comment\">//类似ListView显示用</span></span><br><span class=\"line\">mRecyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(getActivity()));</span><br><span class=\"line\"><span class=\"comment\">//类似GridView显示</span></span><br><span class=\"line\">mRecyclerView.setLayoutManager(<span class=\"keyword\">new</span> GridLayoutManager(getActivity(), <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RecyclerView-添加适配器-以及设置item点击监听\"><a href=\"#RecyclerView-添加适配器-以及设置item点击监听\" class=\"headerlink\" title=\"RecyclerView 添加适配器 以及设置item点击监听\"></a>RecyclerView 添加适配器 以及设置item点击监听</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainFragment.java</span><br><span class=\"line\"></span><br><span class=\"line\">mRecyclerViewAdapter = <span class=\"keyword\">new</span> RecyclerViewAdapter(getActivity(), mItems, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">mRecyclerView.setAdapter(mRecyclerViewAdapter)</span><br><span class=\"line\"></span><br><span class=\"line\">mRecyclerViewAdapter.setOnItemClickListener(<span class=\"keyword\">new</span> RecyclerViewAdapter.OnItemClickListenerCustom() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(String id, String title)</span> </span>&#123;</span><br><span class=\"line\">                Log.i(LogKeys.MAIN_FRAGMENT, <span class=\"string\">\"item is clicked \"</span>);</span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(getActivity(), MovieDetailActivity.class);</span><br><span class=\"line\">                intent.putExtra(TransferKeys.MAIN_MOVIE_DETAIL_ID, id);</span><br><span class=\"line\">                intent.putExtra(TransferKeys.MAIN_MOVIE_DETAIL_MOVIE_NAME, title);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">                Log.i(LogKeys.MAIN_FRAGMENT, <span class=\"string\">\"startactivity\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerViewAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context mContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;MainItem&gt; mData;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> OnItemClickListenerCustom mCallback;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsComingMovie;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mTotalCount;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnItemClickListenerCustom</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(String id,String title)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RecyclerViewAdapter_Main</span><span class=\"params\">(Context context, List&lt;MainItem&gt; data,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">boolean</span> isComingMovie)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mData = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mIsComingMovie=isComingMovie;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">(ArrayList&lt;MainItem&gt; data)</span></span>&#123;</span><br><span class=\"line\">        mData.addAll(data);</span><br><span class=\"line\">        notifyDataSetChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RecyclerView.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">        View view=LayoutInflater.from(mContext)</span><br><span class=\"line\">                                .inflate(R.layout.item_movie_main,parent,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ItemViewHolder(view);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(RecyclerView.ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        ((ItemViewHolder)holder).update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mData.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnItemClickListener</span><span class=\"params\">(OnItemClickListenerCustom listener)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mCallback=listener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\">        TextView textTitle;</span><br><span class=\"line\">        MainItem mMainItem;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ItemViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(itemView);</span><br><span class=\"line\">            <span class=\"comment\">//初始化控件</span></span><br><span class=\"line\">            itemView.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//填充控件</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mCallback!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                mCallback.onItemClick(mMainItem.getMovieId(),mMainItem.getTitle());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RecyclerView上滑加载\"><a href=\"#RecyclerView上滑加载\" class=\"headerlink\" title=\"RecyclerView上滑加载\"></a>RecyclerView上滑加载</h2><p>要使FetchItemTask顺序执行, 否则当下滑触发loadMoreData时,会出现多个线程, 若这几个线程同时<br>进行,会导致数据重复加载, 这些Task顺序执行, 只需要在doInBackground执行时<br>检查star&lt;mRecyclerViewAdapter.getStart()<br>若true, 则说明该线程为重复线程 return null<br>否则, 执行之后的步骤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainFragmentBase.java</span><br><span class=\"line\">mRecyclerView.addOnScrollListener(<span class=\"keyword\">new</span> RecyclerView.OnScrollListener()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lastVisibleItem;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(RecyclerView recyclerView,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">int</span> newState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onScrollStateChanged(recyclerView, newState);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newState == SCROLL_STATE_IDLE</span><br><span class=\"line\">                &amp;&amp; lastVisibleItem + <span class=\"number\">1</span> &gt;= mRecyclerViewAdapter.getItemCount()</span><br><span class=\"line\">                &amp;&amp; mRecyclerViewAdapter.getItemCount() &lt; mRecyclerViewAdapter.getTotalDataCount()) &#123;</span><br><span class=\"line\">            loadMoreData(mRecyclerViewAdapter.getStart());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrolled</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onScrolled(recyclerView, dx, dy);</span><br><span class=\"line\">        LinearLayoutManager layoutManager = (LinearLayoutManager) mRecyclerView.getLayoutManager();</span><br><span class=\"line\">        lastVisibleItem = layoutManager.findLastVisibleItemPosition();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">loadMoreData</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MainFragment.java extentds MainFragmentBase.java</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> FetchItemTask(<span class=\"number\">0</span>).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadMoreData</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> FetchItemTask(start).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FetchItemTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Void</span>, <span class=\"title\">Void</span>, <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">MainItem</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> start=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FetchItemTask</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">        start=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> ArrayList&lt;MainItem&gt; <span class=\"title\">doInBackground</span><span class=\"params\">(Void... params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start&lt;mRecyclerViewAdapter.getStart())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        DoubanFetchrMain df=<span class=\"keyword\">new</span> DoubanFetchrMain(<span class=\"number\">0</span>,start);</span><br><span class=\"line\">        mRecyclerViewAdapter.setTotalCount(df.getTotalCount());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> df.fetchItems_SubjectInTheaters();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(ArrayList&lt;MainItem&gt; galleryItems)</span></span>&#123;</span><br><span class=\"line\">        mItems = galleryItems;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mItems==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mRecyclerViewAdapter.addMoreData(mItems,start);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><p>点击图片进入电影详细页面时, 如果在详细页面图片未加载时返回, 应用会crash.<br><br>应该是此时ImageView已经被销毁了, 所以就造成NullPointerException.</p>\n<p>官方说已经解决这个问题, 但是下面这写法还是会crash.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(getActivity())</span><br><span class=\"line\">     .load(url)</span><br><span class=\"line\">     .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class=\"line\">     .centerCrop()</span><br><span class=\"line\">     .into(imageMovie);</span><br></pre></td></tr></table></figure>\n\n<p>更改为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onCreate(...)&#123;</span><br><span class=\"line\">mRequestManager=Glide.with(getActivity());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">mRequestManager</span><br><span class=\"line\">           .load(url)</span><br><span class=\"line\">           .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class=\"line\">           .centerCrop()</span><br><span class=\"line\">           .into(imageMovie);</span><br></pre></td></tr></table></figure>\n\n<p>这样就不会出问题.</p>\n"},{"author":"ivyxjc","date":"2016-03-09T16:00:00.000Z","title":"adb常用命令","keywords":null,"description":"adb中常用的命令","_content":"\n## 设备相关\n**adb devices**:查看连接的设备<br>\n\n**adb -s  serial number shell** :serial number及上命令得到的设备编号\n\n## 录制屏幕相关\n<<<<<<< HEAD\n**adb screerecord /sdcard/test.mp4**：录制手机实况视频到test.mp4，按**ctrl+c**结束，否则录制320s。\n\n**adb screerecord --size 1280*720 /sdcard/test.mp4** :制定视频大小\n\n** adb shell screenrecord --bit-rate 6000000 /sdcard/test.mp4** :制定视频码率\n\n**adb shell screenrecord --rotate /sdcard/test.mp4** :旋转\n\n**adb pull /sdcard/test.mp4 E:/** :导出视频\n=======\n**adb screenrecord /sdcard/test.mp4**：录制手机实况视频到test.mp4，按**ctrl+c**结束，否则录制320s。\n","source":"_posts/android/adb/2016-03-10-adb-console.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-10\ntitle: adb常用命令\ncategory: Android\ntags: [android,android_adb]\nkeywords:\ndescription: adb中常用的命令\n---\n\n## 设备相关\n**adb devices**:查看连接的设备<br>\n\n**adb -s  serial number shell** :serial number及上命令得到的设备编号\n\n## 录制屏幕相关\n<<<<<<< HEAD\n**adb screerecord /sdcard/test.mp4**：录制手机实况视频到test.mp4，按**ctrl+c**结束，否则录制320s。\n\n**adb screerecord --size 1280*720 /sdcard/test.mp4** :制定视频大小\n\n** adb shell screenrecord --bit-rate 6000000 /sdcard/test.mp4** :制定视频码率\n\n**adb shell screenrecord --rotate /sdcard/test.mp4** :旋转\n\n**adb pull /sdcard/test.mp4 E:/** :导出视频\n=======\n**adb screenrecord /sdcard/test.mp4**：录制手机实况视频到test.mp4，按**ctrl+c**结束，否则录制320s。\n","slug":"android/adb/2016-03-10-adb-console","published":1,"updated":"2018-08-09T10:10:11.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8s002y28t1t53ggfpu","content":"<h2 id=\"设备相关\"><a href=\"#设备相关\" class=\"headerlink\" title=\"设备相关\"></a>设备相关</h2><p><strong>adb devices</strong>:查看连接的设备<br></p>\n<p><strong>adb -s  serial number shell</strong> :serial number及上命令得到的设备编号</p>\n<h2 id=\"录制屏幕相关\"><a href=\"#录制屏幕相关\" class=\"headerlink\" title=\"录制屏幕相关\"></a>录制屏幕相关</h2><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br><strong>adb screerecord /sdcard/test.mp4</strong>：录制手机实况视频到test.mp4，按<strong>ctrl+c</strong>结束，否则录制320s。</p>\n<p><strong>adb screerecord –size 1280*720 /sdcard/test.mp4</strong> :制定视频大小</p>\n<p>** adb shell screenrecord –bit-rate 6000000 /sdcard/test.mp4** :制定视频码率</p>\n<p><strong>adb shell screenrecord –rotate /sdcard/test.mp4</strong> :旋转</p>\n<h1 id=\"adb-pull-sdcard-test-mp4-E-导出视频\"><a href=\"#adb-pull-sdcard-test-mp4-E-导出视频\" class=\"headerlink\" title=\"adb pull /sdcard/test.mp4 E:/ :导出视频\"></a><strong>adb pull /sdcard/test.mp4 E:/</strong> :导出视频</h1><p><strong>adb screenrecord /sdcard/test.mp4</strong>：录制手机实况视频到test.mp4，按<strong>ctrl+c</strong>结束，否则录制320s。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设备相关\"><a href=\"#设备相关\" class=\"headerlink\" title=\"设备相关\"></a>设备相关</h2><p><strong>adb devices</strong>:查看连接的设备<br></p>\n<p><strong>adb -s  serial number shell</strong> :serial number及上命令得到的设备编号</p>\n<h2 id=\"录制屏幕相关\"><a href=\"#录制屏幕相关\" class=\"headerlink\" title=\"录制屏幕相关\"></a>录制屏幕相关</h2><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br><strong>adb screerecord /sdcard/test.mp4</strong>：录制手机实况视频到test.mp4，按<strong>ctrl+c</strong>结束，否则录制320s。</p>\n<p><strong>adb screerecord –size 1280*720 /sdcard/test.mp4</strong> :制定视频大小</p>\n<p>** adb shell screenrecord –bit-rate 6000000 /sdcard/test.mp4** :制定视频码率</p>\n<p><strong>adb shell screenrecord –rotate /sdcard/test.mp4</strong> :旋转</p>\n<h1 id=\"adb-pull-sdcard-test-mp4-E-导出视频\"><a href=\"#adb-pull-sdcard-test-mp4-E-导出视频\" class=\"headerlink\" title=\"adb pull /sdcard/test.mp4 E:/ :导出视频\"></a><strong>adb pull /sdcard/test.mp4 E:/</strong> :导出视频</h1><p><strong>adb screenrecord /sdcard/test.mp4</strong>：录制手机实况视频到test.mp4，按<strong>ctrl+c</strong>结束，否则录制320s。</p>\n"},{"author":"ivyxjc","date":"2016-03-19T16:00:00.000Z","title":"广播机制初步","keywords":null,"description":"广播分为有序广播( Ordered broadcasts)和标准广播( Normal broadcasts). 注册方式还分为动态注册和静态注册.","_content":"\n## 分类\n\n标准广播(Normal broadcasts)是一种完全异步执行的广播，在广播发出后，所有的广播接收器都在同一时刻受到这条广播消息，没有先后顺序。效率高，无法被截断。\n\n有序广播(Ordered broadcasts)是一种同步执行的广播，同一时刻，只有一个广播接收器能受到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。\n有先后顺序，优先级高的会先收到广播消息，并且前面的广播接收器可以截断正在传递的广播。\n\n接受广播：广播接收器(Broadcast Receiver)\n\n## 系统广播\n\n\n## 注册广播\n\n动态注册的广播接收器一定要取消注册，一般是在`onDestroy()`方法中通过调用`unregisterReceiver()`方法来实现的。\n\n### 动态注册\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    private IntentFilter mIntentFilter;\n    // Whether there is a Wi-Fi connection.\n    private static boolean wifiConnected = false;\n    // Whether there is a mobile connection.\n    private static boolean mobileConnected = false;\n\n    private TextView mWifiTextView;\n    private TextView mMobileTextView;\n\n    private NetworkChangeReceiver mNetworkChangeReceiver;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        mWifiTextView=(TextView)findViewById(R.id.wifi);\n        mMobileTextView=(TextView)findViewById(R.id.mobile_network);\n        /*\n        注册广播接收器\n        当网络发生变化时，系统发出的是一条值为\"android.net.conn.CONNECTIVITY_CHANGE\"的广播消息\n         */\n        mIntentFilter=new IntentFilter();\n        mIntentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);\n        mNetworkChangeReceiver=new NetworkChangeReceiver();\n        registerReceiver(mNetworkChangeReceiver,mIntentFilter);\n\n    }\n\n\n    //注册的广播接收都需要解除注册\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unregisterReceiver(mNetworkChangeReceiver);\n    }\n\n    class NetworkChangeReceiver extends BroadcastReceiver{\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n//            Toast.makeText(context,\"network change\",Toast.LENGTH_SHORT).show();\n            ConnectivityManager connMgr =\n                    (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n            NetworkInfo activeInfo = connMgr.getActiveNetworkInfo();\n\n            if (activeInfo != null && activeInfo.isConnected()) {\n                wifiConnected = activeInfo.getType() == ConnectivityManager.TYPE_WIFI;\n                mobileConnected = activeInfo.getType() == ConnectivityManager.TYPE_MOBILE;\n                if(wifiConnected) {\n//                    Toast.makeText(context,\"wifi is connected\",Toast.LENGTH_LONG).show();\n                    mWifiTextView.setText(\"Wifi is connected\");\n                    mMobileTextView.setText(\"mobile network is not connected\");\n                } else if (mobileConnected) {\n//                    Toast.makeText(context,\"mobile network is connected\",Toast.LENGTH_LONG).show();\n                    mWifiTextView.setText(\"Wifi is not connected\");\n                    mMobileTextView.setText(\"mobile network is connected\");\n                }\n            } else {\n//                Toast.makeText(context,\"no network\",Toast.LENGTH_LONG).show();\n                mWifiTextView.setText(\"Wifi is not connected\");\n                mMobileTextView.setText(\"mobile network is not connected\");\n            }\n        }\n    }\n}\n```\n\n另外还需在增加以下两个权限，否则会在打开的时候崩溃。\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n```\n\n#### 效果\n\n![](http://oezmbgg4j.bkt.clouddn.com/broadcast_network_connectivity.gif)\n\n\n### 静态注册\n\n```java\npublic class BootCompleteReceiver extends BroadcastReceiver{\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context,\"Boot Complete\",Toast.LENGTH_LONG).show();\n    }\n}\n```\n\n在AndroidManifest.xml中需要添加下列语句：\n\n```xml\n<user-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n......\n<application\n\t...>\n\t.....\n\n    <receiver android:name=\".BootCompleteReceiver\">\n        <intent-filter>\n            <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n        </intent-filter>\n    </receiver>\n\n</application>\n```\n\n\n## 自定义广播\n写一个自定义的广播接收器\n\n```java\npublic class MyBroadcastReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context,\"received in MyBroadcastReceiver\", Toast.LENGTH_LONG).show();\n    }\n}\n```\n发出一个广播\n\n```java\nIntent intent=new Intent(\"com.jc.broadcast_1.MY_BROADCAST\");\nsendBroadcast(intent);\n```\n\n在一个应用程序中发出的广播，也是可以被其它应用程序所接收到的。\n\n## 发送有序广播\n\n```java\nsendOrderedBroadcast(Intent intent,String receiverPermission);\n```\n\n这样可以截断广播，\n在`onReceiver(...)`方法里调用`abortBroadcast()`方法，就表示将这条广播截断。后面的广播就无法再接收到这条广播。\n\n## 本地广播\n\n只能在应用程序的内部进行传递，并且广播接收器也只能接受来自本应用发出的广播。\n\n\n```java\nmLocalBroadcastManager=LocalBroadcastManager.getInstance(this);\n\nbutton.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Intent intent=new Intent(\"com.jc.broadcast_2.LOCAL_BROADCAST\");\n        mLocalBroadcastManager.sendBroadcast(intent);\n    }\n});\n\nmIntentFilter=new IntentFilter();\nmIntentFilter.addAction(\"com.jc.broadcast_2.LOCAL_BROADCAST\");\nmLocalReceiver=new LocalReceiver();\nmLocalBroadcastManager.registerReceiver(mLocalReceiver,mIntentFilter);\n```\n","source":"_posts/android/四大组件/2016-03-20-broadcast-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-20\ntitle: 广播机制初步\ncategory: Android\ntags: [android,android_broadcast]\nkeywords:\ndescription: 广播分为有序广播( Ordered broadcasts)和标准广播( Normal broadcasts). 注册方式还分为动态注册和静态注册.\n---\n\n## 分类\n\n标准广播(Normal broadcasts)是一种完全异步执行的广播，在广播发出后，所有的广播接收器都在同一时刻受到这条广播消息，没有先后顺序。效率高，无法被截断。\n\n有序广播(Ordered broadcasts)是一种同步执行的广播，同一时刻，只有一个广播接收器能受到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。\n有先后顺序，优先级高的会先收到广播消息，并且前面的广播接收器可以截断正在传递的广播。\n\n接受广播：广播接收器(Broadcast Receiver)\n\n## 系统广播\n\n\n## 注册广播\n\n动态注册的广播接收器一定要取消注册，一般是在`onDestroy()`方法中通过调用`unregisterReceiver()`方法来实现的。\n\n### 动态注册\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    private IntentFilter mIntentFilter;\n    // Whether there is a Wi-Fi connection.\n    private static boolean wifiConnected = false;\n    // Whether there is a mobile connection.\n    private static boolean mobileConnected = false;\n\n    private TextView mWifiTextView;\n    private TextView mMobileTextView;\n\n    private NetworkChangeReceiver mNetworkChangeReceiver;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        mWifiTextView=(TextView)findViewById(R.id.wifi);\n        mMobileTextView=(TextView)findViewById(R.id.mobile_network);\n        /*\n        注册广播接收器\n        当网络发生变化时，系统发出的是一条值为\"android.net.conn.CONNECTIVITY_CHANGE\"的广播消息\n         */\n        mIntentFilter=new IntentFilter();\n        mIntentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);\n        mNetworkChangeReceiver=new NetworkChangeReceiver();\n        registerReceiver(mNetworkChangeReceiver,mIntentFilter);\n\n    }\n\n\n    //注册的广播接收都需要解除注册\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unregisterReceiver(mNetworkChangeReceiver);\n    }\n\n    class NetworkChangeReceiver extends BroadcastReceiver{\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n//            Toast.makeText(context,\"network change\",Toast.LENGTH_SHORT).show();\n            ConnectivityManager connMgr =\n                    (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n            NetworkInfo activeInfo = connMgr.getActiveNetworkInfo();\n\n            if (activeInfo != null && activeInfo.isConnected()) {\n                wifiConnected = activeInfo.getType() == ConnectivityManager.TYPE_WIFI;\n                mobileConnected = activeInfo.getType() == ConnectivityManager.TYPE_MOBILE;\n                if(wifiConnected) {\n//                    Toast.makeText(context,\"wifi is connected\",Toast.LENGTH_LONG).show();\n                    mWifiTextView.setText(\"Wifi is connected\");\n                    mMobileTextView.setText(\"mobile network is not connected\");\n                } else if (mobileConnected) {\n//                    Toast.makeText(context,\"mobile network is connected\",Toast.LENGTH_LONG).show();\n                    mWifiTextView.setText(\"Wifi is not connected\");\n                    mMobileTextView.setText(\"mobile network is connected\");\n                }\n            } else {\n//                Toast.makeText(context,\"no network\",Toast.LENGTH_LONG).show();\n                mWifiTextView.setText(\"Wifi is not connected\");\n                mMobileTextView.setText(\"mobile network is not connected\");\n            }\n        }\n    }\n}\n```\n\n另外还需在增加以下两个权限，否则会在打开的时候崩溃。\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n```\n\n#### 效果\n\n![](http://oezmbgg4j.bkt.clouddn.com/broadcast_network_connectivity.gif)\n\n\n### 静态注册\n\n```java\npublic class BootCompleteReceiver extends BroadcastReceiver{\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context,\"Boot Complete\",Toast.LENGTH_LONG).show();\n    }\n}\n```\n\n在AndroidManifest.xml中需要添加下列语句：\n\n```xml\n<user-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n......\n<application\n\t...>\n\t.....\n\n    <receiver android:name=\".BootCompleteReceiver\">\n        <intent-filter>\n            <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n        </intent-filter>\n    </receiver>\n\n</application>\n```\n\n\n## 自定义广播\n写一个自定义的广播接收器\n\n```java\npublic class MyBroadcastReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context,\"received in MyBroadcastReceiver\", Toast.LENGTH_LONG).show();\n    }\n}\n```\n发出一个广播\n\n```java\nIntent intent=new Intent(\"com.jc.broadcast_1.MY_BROADCAST\");\nsendBroadcast(intent);\n```\n\n在一个应用程序中发出的广播，也是可以被其它应用程序所接收到的。\n\n## 发送有序广播\n\n```java\nsendOrderedBroadcast(Intent intent,String receiverPermission);\n```\n\n这样可以截断广播，\n在`onReceiver(...)`方法里调用`abortBroadcast()`方法，就表示将这条广播截断。后面的广播就无法再接收到这条广播。\n\n## 本地广播\n\n只能在应用程序的内部进行传递，并且广播接收器也只能接受来自本应用发出的广播。\n\n\n```java\nmLocalBroadcastManager=LocalBroadcastManager.getInstance(this);\n\nbutton.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Intent intent=new Intent(\"com.jc.broadcast_2.LOCAL_BROADCAST\");\n        mLocalBroadcastManager.sendBroadcast(intent);\n    }\n});\n\nmIntentFilter=new IntentFilter();\nmIntentFilter.addAction(\"com.jc.broadcast_2.LOCAL_BROADCAST\");\nmLocalReceiver=new LocalReceiver();\nmLocalBroadcastManager.registerReceiver(mLocalReceiver,mIntentFilter);\n```\n","slug":"android/四大组件/2016-03-20-broadcast-basic","published":1,"updated":"2018-08-09T10:10:11.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8t003228t1weai8dwp","content":"<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><p>标准广播(Normal broadcasts)是一种完全异步执行的广播，在广播发出后，所有的广播接收器都在同一时刻受到这条广播消息，没有先后顺序。效率高，无法被截断。</p>\n<p>有序广播(Ordered broadcasts)是一种同步执行的广播，同一时刻，只有一个广播接收器能受到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。<br>有先后顺序，优先级高的会先收到广播消息，并且前面的广播接收器可以截断正在传递的广播。</p>\n<p>接受广播：广播接收器(Broadcast Receiver)</p>\n<h2 id=\"系统广播\"><a href=\"#系统广播\" class=\"headerlink\" title=\"系统广播\"></a>系统广播</h2><h2 id=\"注册广播\"><a href=\"#注册广播\" class=\"headerlink\" title=\"注册广播\"></a>注册广播</h2><p>动态注册的广播接收器一定要取消注册，一般是在<code>onDestroy()</code>方法中通过调用<code>unregisterReceiver()</code>方法来实现的。</p>\n<h3 id=\"动态注册\"><a href=\"#动态注册\" class=\"headerlink\" title=\"动态注册\"></a>动态注册</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IntentFilter mIntentFilter;</span><br><span class=\"line\">    <span class=\"comment\">// Whether there is a Wi-Fi connection.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> wifiConnected = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Whether there is a mobile connection.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> mobileConnected = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView mWifiTextView;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView mMobileTextView;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NetworkChangeReceiver mNetworkChangeReceiver;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        mWifiTextView=(TextView)findViewById(R.id.wifi);</span><br><span class=\"line\">        mMobileTextView=(TextView)findViewById(R.id.mobile_network);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        注册广播接收器</span></span><br><span class=\"line\"><span class=\"comment\">        当网络发生变化时，系统发出的是一条值为\"android.net.conn.CONNECTIVITY_CHANGE\"的广播消息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        mIntentFilter=<span class=\"keyword\">new</span> IntentFilter();</span><br><span class=\"line\">        mIntentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class=\"line\">        mNetworkChangeReceiver=<span class=\"keyword\">new</span> NetworkChangeReceiver();</span><br><span class=\"line\">        registerReceiver(mNetworkChangeReceiver,mIntentFilter);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注册的广播接收都需要解除注册</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        unregisterReceiver(mNetworkChangeReceiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkChangeReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//            Toast.makeText(context,\"network change\",Toast.LENGTH_SHORT).show();</span></span><br><span class=\"line\">            ConnectivityManager connMgr =</span><br><span class=\"line\">                    (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class=\"line\">            NetworkInfo activeInfo = connMgr.getActiveNetworkInfo();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activeInfo != <span class=\"keyword\">null</span> &amp;&amp; activeInfo.isConnected()) &#123;</span><br><span class=\"line\">                wifiConnected = activeInfo.getType() == ConnectivityManager.TYPE_WIFI;</span><br><span class=\"line\">                mobileConnected = activeInfo.getType() == ConnectivityManager.TYPE_MOBILE;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(wifiConnected) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    Toast.makeText(context,\"wifi is connected\",Toast.LENGTH_LONG).show();</span></span><br><span class=\"line\">                    mWifiTextView.setText(<span class=\"string\">\"Wifi is connected\"</span>);</span><br><span class=\"line\">                    mMobileTextView.setText(<span class=\"string\">\"mobile network is not connected\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mobileConnected) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    Toast.makeText(context,\"mobile network is connected\",Toast.LENGTH_LONG).show();</span></span><br><span class=\"line\">                    mWifiTextView.setText(<span class=\"string\">\"Wifi is not connected\"</span>);</span><br><span class=\"line\">                    mMobileTextView.setText(<span class=\"string\">\"mobile network is connected\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//                Toast.makeText(context,\"no network\",Toast.LENGTH_LONG).show();</span></span><br><span class=\"line\">                mWifiTextView.setText(<span class=\"string\">\"Wifi is not connected\"</span>);</span><br><span class=\"line\">                mMobileTextView.setText(<span class=\"string\">\"mobile network is not connected\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外还需在增加以下两个权限，否则会在打开的时候崩溃。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_NETWORK_STATE\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"http://oezmbgg4j.bkt.clouddn.com/broadcast_network_connectivity.gif\" alt></p>\n<h3 id=\"静态注册\"><a href=\"#静态注册\" class=\"headerlink\" title=\"静态注册\"></a>静态注册</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BootCompleteReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">\"Boot Complete\"</span>,Toast.LENGTH_LONG).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在AndroidManifest.xml中需要添加下列语句：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.RECEIVE_BOOT_COMPLETED\"</span>/&gt;</span></span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t.....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".BootCompleteReceiver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.BOOT_COMPLETED\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义广播\"><a href=\"#自定义广播\" class=\"headerlink\" title=\"自定义广播\"></a>自定义广播</h2><p>写一个自定义的广播接收器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">\"received in MyBroadcastReceiver\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发出一个广播</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.jc.broadcast_1.MY_BROADCAST\"</span>);</span><br><span class=\"line\">sendBroadcast(intent);</span><br></pre></td></tr></table></figure>\n\n<p>在一个应用程序中发出的广播，也是可以被其它应用程序所接收到的。</p>\n<h2 id=\"发送有序广播\"><a href=\"#发送有序广播\" class=\"headerlink\" title=\"发送有序广播\"></a>发送有序广播</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sendOrderedBroadcast(Intent intent,String receiverPermission);</span><br></pre></td></tr></table></figure>\n\n<p>这样可以截断广播，<br>在<code>onReceiver(...)</code>方法里调用<code>abortBroadcast()</code>方法，就表示将这条广播截断。后面的广播就无法再接收到这条广播。</p>\n<h2 id=\"本地广播\"><a href=\"#本地广播\" class=\"headerlink\" title=\"本地广播\"></a>本地广播</h2><p>只能在应用程序的内部进行传递，并且广播接收器也只能接受来自本应用发出的广播。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mLocalBroadcastManager=LocalBroadcastManager.getInstance(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.jc.broadcast_2.LOCAL_BROADCAST\"</span>);</span><br><span class=\"line\">        mLocalBroadcastManager.sendBroadcast(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mIntentFilter=<span class=\"keyword\">new</span> IntentFilter();</span><br><span class=\"line\">mIntentFilter.addAction(<span class=\"string\">\"com.jc.broadcast_2.LOCAL_BROADCAST\"</span>);</span><br><span class=\"line\">mLocalReceiver=<span class=\"keyword\">new</span> LocalReceiver();</span><br><span class=\"line\">mLocalBroadcastManager.registerReceiver(mLocalReceiver,mIntentFilter);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><p>标准广播(Normal broadcasts)是一种完全异步执行的广播，在广播发出后，所有的广播接收器都在同一时刻受到这条广播消息，没有先后顺序。效率高，无法被截断。</p>\n<p>有序广播(Ordered broadcasts)是一种同步执行的广播，同一时刻，只有一个广播接收器能受到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。<br>有先后顺序，优先级高的会先收到广播消息，并且前面的广播接收器可以截断正在传递的广播。</p>\n<p>接受广播：广播接收器(Broadcast Receiver)</p>\n<h2 id=\"系统广播\"><a href=\"#系统广播\" class=\"headerlink\" title=\"系统广播\"></a>系统广播</h2><h2 id=\"注册广播\"><a href=\"#注册广播\" class=\"headerlink\" title=\"注册广播\"></a>注册广播</h2><p>动态注册的广播接收器一定要取消注册，一般是在<code>onDestroy()</code>方法中通过调用<code>unregisterReceiver()</code>方法来实现的。</p>\n<h3 id=\"动态注册\"><a href=\"#动态注册\" class=\"headerlink\" title=\"动态注册\"></a>动态注册</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IntentFilter mIntentFilter;</span><br><span class=\"line\">    <span class=\"comment\">// Whether there is a Wi-Fi connection.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> wifiConnected = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Whether there is a mobile connection.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> mobileConnected = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView mWifiTextView;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView mMobileTextView;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NetworkChangeReceiver mNetworkChangeReceiver;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        mWifiTextView=(TextView)findViewById(R.id.wifi);</span><br><span class=\"line\">        mMobileTextView=(TextView)findViewById(R.id.mobile_network);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        注册广播接收器</span></span><br><span class=\"line\"><span class=\"comment\">        当网络发生变化时，系统发出的是一条值为\"android.net.conn.CONNECTIVITY_CHANGE\"的广播消息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        mIntentFilter=<span class=\"keyword\">new</span> IntentFilter();</span><br><span class=\"line\">        mIntentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class=\"line\">        mNetworkChangeReceiver=<span class=\"keyword\">new</span> NetworkChangeReceiver();</span><br><span class=\"line\">        registerReceiver(mNetworkChangeReceiver,mIntentFilter);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注册的广播接收都需要解除注册</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        unregisterReceiver(mNetworkChangeReceiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkChangeReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//            Toast.makeText(context,\"network change\",Toast.LENGTH_SHORT).show();</span></span><br><span class=\"line\">            ConnectivityManager connMgr =</span><br><span class=\"line\">                    (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class=\"line\">            NetworkInfo activeInfo = connMgr.getActiveNetworkInfo();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activeInfo != <span class=\"keyword\">null</span> &amp;&amp; activeInfo.isConnected()) &#123;</span><br><span class=\"line\">                wifiConnected = activeInfo.getType() == ConnectivityManager.TYPE_WIFI;</span><br><span class=\"line\">                mobileConnected = activeInfo.getType() == ConnectivityManager.TYPE_MOBILE;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(wifiConnected) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    Toast.makeText(context,\"wifi is connected\",Toast.LENGTH_LONG).show();</span></span><br><span class=\"line\">                    mWifiTextView.setText(<span class=\"string\">\"Wifi is connected\"</span>);</span><br><span class=\"line\">                    mMobileTextView.setText(<span class=\"string\">\"mobile network is not connected\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mobileConnected) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    Toast.makeText(context,\"mobile network is connected\",Toast.LENGTH_LONG).show();</span></span><br><span class=\"line\">                    mWifiTextView.setText(<span class=\"string\">\"Wifi is not connected\"</span>);</span><br><span class=\"line\">                    mMobileTextView.setText(<span class=\"string\">\"mobile network is connected\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//                Toast.makeText(context,\"no network\",Toast.LENGTH_LONG).show();</span></span><br><span class=\"line\">                mWifiTextView.setText(<span class=\"string\">\"Wifi is not connected\"</span>);</span><br><span class=\"line\">                mMobileTextView.setText(<span class=\"string\">\"mobile network is not connected\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外还需在增加以下两个权限，否则会在打开的时候崩溃。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_NETWORK_STATE\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"http://oezmbgg4j.bkt.clouddn.com/broadcast_network_connectivity.gif\" alt></p>\n<h3 id=\"静态注册\"><a href=\"#静态注册\" class=\"headerlink\" title=\"静态注册\"></a>静态注册</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BootCompleteReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">\"Boot Complete\"</span>,Toast.LENGTH_LONG).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在AndroidManifest.xml中需要添加下列语句：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.RECEIVE_BOOT_COMPLETED\"</span>/&gt;</span></span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t.....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".BootCompleteReceiver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.BOOT_COMPLETED\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义广播\"><a href=\"#自定义广播\" class=\"headerlink\" title=\"自定义广播\"></a>自定义广播</h2><p>写一个自定义的广播接收器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">\"received in MyBroadcastReceiver\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发出一个广播</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.jc.broadcast_1.MY_BROADCAST\"</span>);</span><br><span class=\"line\">sendBroadcast(intent);</span><br></pre></td></tr></table></figure>\n\n<p>在一个应用程序中发出的广播，也是可以被其它应用程序所接收到的。</p>\n<h2 id=\"发送有序广播\"><a href=\"#发送有序广播\" class=\"headerlink\" title=\"发送有序广播\"></a>发送有序广播</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sendOrderedBroadcast(Intent intent,String receiverPermission);</span><br></pre></td></tr></table></figure>\n\n<p>这样可以截断广播，<br>在<code>onReceiver(...)</code>方法里调用<code>abortBroadcast()</code>方法，就表示将这条广播截断。后面的广播就无法再接收到这条广播。</p>\n<h2 id=\"本地广播\"><a href=\"#本地广播\" class=\"headerlink\" title=\"本地广播\"></a>本地广播</h2><p>只能在应用程序的内部进行传递，并且广播接收器也只能接受来自本应用发出的广播。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mLocalBroadcastManager=LocalBroadcastManager.getInstance(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.jc.broadcast_2.LOCAL_BROADCAST\"</span>);</span><br><span class=\"line\">        mLocalBroadcastManager.sendBroadcast(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mIntentFilter=<span class=\"keyword\">new</span> IntentFilter();</span><br><span class=\"line\">mIntentFilter.addAction(<span class=\"string\">\"com.jc.broadcast_2.LOCAL_BROADCAST\"</span>);</span><br><span class=\"line\">mLocalReceiver=<span class=\"keyword\">new</span> LocalReceiver();</span><br><span class=\"line\">mLocalBroadcastManager.registerReceiver(mLocalReceiver,mIntentFilter);</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-04-04T16:00:00.000Z","title":"Handler与多线程","status":"publish","description":"Handler是android中一套用来更新UI的机制，也是一套消息处理机制。在非UI线程中更新UI会报错，但是直接在OnCreate()方法中并不会报错，因为此时检查机制还未使用，但是不要这么做。必须在UI线程中更新UI。","_content":"\nHandler是android中一套用来更新UI的机制，也是一套消息处理机制。\n\n在非UI线程中更新UI会报错，但是直接在OnCreate()方法中并不会报错，因为此时检查机制还未使用，但是不要这么做。必须在UI线程中更新UI。\n\n```java\nmHandler.post(new Runnable() {\n    @Override\n    public void run() {\n        mTextView.setText(\"update thread\");\n    }\n});\n```\n\n## sendMessage()和removeCallbacks()\n\n\n```java\nprivate Handler mHandler=new Handler(){\n    @Override\n    public void handleMessage(Message msg) {\n        mTextView.setText(\"\"+msg.arg1+msg.obj);\n    }\n};\n\n```java\nnew Thread(){\n    @Override\n    public void run() {\n        try{\n            Thread.sleep(2000);\n//          Message message=new Message();\n            Message message=mHandler.obtainMessage();\n            Person person=new Person();\n            message.arg1=100;\n            person.age=10;\n            person.name=\"aaa\";\n            message.obj=person;\n            message.sendToTarget();\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n\n    }\n    }.start();\n```\n\n```java\nmHandler.removeCallbacks(mMyRunnable);\n```\n\n### 消息截获\n\n```java\nprivate Handler mHandler=new Handler(new Handler.Callback() {\n    @Override\n    public boolean handleMessage(Message msg) {\n        Toast.makeText(getApplicationContext(),\"\"+1,Toast.LENGTH_SHORT).show();\n        //若返回true，则下面的handleMessage不会执行，表示别截获\n        return false;\n    }\n}){\n    @Override\n    public void handleMessage(Message msg) {\n//            mTextView.setText(\"\"+msg.arg1+msg.obj);\n        Toast.makeText(getApplicationContext(),\"\"+2,Toast.LENGTH_SHORT).show();\n    }\n\n......\n};\n```\n\n## handler总结\n\n`handler`负责发送消息，`Looper`负责接收Handler发送的消息，并将消息发给`handler`自己。\n\n### 使用Handler更新UI的原因\n\n如果在一个`Activity`中有多个线程去更新UI，若都没有加锁会导致**界面更新混乱**。若都加锁，则会导致**性能下降**。\n","source":"_posts/android/并发编程/2016-04-05-handler-threads.md","raw":"---\nauthor: ivyxjc\ndate: 2016-04-05\ntitle: Handler与多线程\ncategory: Android\ntags: [android,concurrency]\nstatus: publish\ndescription: Handler是android中一套用来更新UI的机制，也是一套消息处理机制。在非UI线程中更新UI会报错，但是直接在OnCreate()方法中并不会报错，因为此时检查机制还未使用，但是不要这么做。必须在UI线程中更新UI。\n---\n\nHandler是android中一套用来更新UI的机制，也是一套消息处理机制。\n\n在非UI线程中更新UI会报错，但是直接在OnCreate()方法中并不会报错，因为此时检查机制还未使用，但是不要这么做。必须在UI线程中更新UI。\n\n```java\nmHandler.post(new Runnable() {\n    @Override\n    public void run() {\n        mTextView.setText(\"update thread\");\n    }\n});\n```\n\n## sendMessage()和removeCallbacks()\n\n\n```java\nprivate Handler mHandler=new Handler(){\n    @Override\n    public void handleMessage(Message msg) {\n        mTextView.setText(\"\"+msg.arg1+msg.obj);\n    }\n};\n\n```java\nnew Thread(){\n    @Override\n    public void run() {\n        try{\n            Thread.sleep(2000);\n//          Message message=new Message();\n            Message message=mHandler.obtainMessage();\n            Person person=new Person();\n            message.arg1=100;\n            person.age=10;\n            person.name=\"aaa\";\n            message.obj=person;\n            message.sendToTarget();\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n\n    }\n    }.start();\n```\n\n```java\nmHandler.removeCallbacks(mMyRunnable);\n```\n\n### 消息截获\n\n```java\nprivate Handler mHandler=new Handler(new Handler.Callback() {\n    @Override\n    public boolean handleMessage(Message msg) {\n        Toast.makeText(getApplicationContext(),\"\"+1,Toast.LENGTH_SHORT).show();\n        //若返回true，则下面的handleMessage不会执行，表示别截获\n        return false;\n    }\n}){\n    @Override\n    public void handleMessage(Message msg) {\n//            mTextView.setText(\"\"+msg.arg1+msg.obj);\n        Toast.makeText(getApplicationContext(),\"\"+2,Toast.LENGTH_SHORT).show();\n    }\n\n......\n};\n```\n\n## handler总结\n\n`handler`负责发送消息，`Looper`负责接收Handler发送的消息，并将消息发给`handler`自己。\n\n### 使用Handler更新UI的原因\n\n如果在一个`Activity`中有多个线程去更新UI，若都没有加锁会导致**界面更新混乱**。若都加锁，则会导致**性能下降**。\n","slug":"android/并发编程/2016-04-05-handler-threads","published":1,"updated":"2018-08-09T10:10:11.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8u003528t11qv68jsv","content":"<p>Handler是android中一套用来更新UI的机制，也是一套消息处理机制。</p>\n<p>在非UI线程中更新UI会报错，但是直接在OnCreate()方法中并不会报错，因为此时检查机制还未使用，但是不要这么做。必须在UI线程中更新UI。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mTextView.setText(<span class=\"string\">\"update thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sendMessage-和removeCallbacks\"><a href=\"#sendMessage-和removeCallbacks\" class=\"headerlink\" title=\"sendMessage()和removeCallbacks()\"></a>sendMessage()和removeCallbacks()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Handler mHandler=<span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        mTextView.setText(<span class=\"string\">\"\"</span>+msg.arg1+msg.obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\"><span class=\"comment\">//          Message message=new Message();</span></span><br><span class=\"line\">            Message message=mHandler.obtainMessage();</span><br><span class=\"line\">            Person person=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">            message.arg1=<span class=\"number\">100</span>;</span><br><span class=\"line\">            person.age=<span class=\"number\">10</span>;</span><br><span class=\"line\">            person.name=<span class=\"string\">\"aaa\"</span>;</span><br><span class=\"line\">            message.obj=person;</span><br><span class=\"line\">            message.sendToTarget();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;.start();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mHandler.removeCallbacks(mMyRunnable);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消息截获\"><a href=\"#消息截获\" class=\"headerlink\" title=\"消息截获\"></a>消息截获</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Handler mHandler=<span class=\"keyword\">new</span> Handler(<span class=\"keyword\">new</span> Handler.Callback() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(getApplicationContext(),<span class=\"string\">\"\"</span>+<span class=\"number\">1</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        <span class=\"comment\">//若返回true，则下面的handleMessage不会执行，表示别截获</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//            mTextView.setText(\"\"+msg.arg1+msg.obj);</span></span><br><span class=\"line\">        Toast.makeText(getApplicationContext(),<span class=\"string\">\"\"</span>+<span class=\"number\">2</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"handler总结\"><a href=\"#handler总结\" class=\"headerlink\" title=\"handler总结\"></a>handler总结</h2><p><code>handler</code>负责发送消息，<code>Looper</code>负责接收Handler发送的消息，并将消息发给<code>handler</code>自己。</p>\n<h3 id=\"使用Handler更新UI的原因\"><a href=\"#使用Handler更新UI的原因\" class=\"headerlink\" title=\"使用Handler更新UI的原因\"></a>使用Handler更新UI的原因</h3><p>如果在一个<code>Activity</code>中有多个线程去更新UI，若都没有加锁会导致<strong>界面更新混乱</strong>。若都加锁，则会导致<strong>性能下降</strong>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Handler是android中一套用来更新UI的机制，也是一套消息处理机制。</p>\n<p>在非UI线程中更新UI会报错，但是直接在OnCreate()方法中并不会报错，因为此时检查机制还未使用，但是不要这么做。必须在UI线程中更新UI。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mTextView.setText(<span class=\"string\">\"update thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sendMessage-和removeCallbacks\"><a href=\"#sendMessage-和removeCallbacks\" class=\"headerlink\" title=\"sendMessage()和removeCallbacks()\"></a>sendMessage()和removeCallbacks()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Handler mHandler=<span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        mTextView.setText(<span class=\"string\">\"\"</span>+msg.arg1+msg.obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\"><span class=\"comment\">//          Message message=new Message();</span></span><br><span class=\"line\">            Message message=mHandler.obtainMessage();</span><br><span class=\"line\">            Person person=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">            message.arg1=<span class=\"number\">100</span>;</span><br><span class=\"line\">            person.age=<span class=\"number\">10</span>;</span><br><span class=\"line\">            person.name=<span class=\"string\">\"aaa\"</span>;</span><br><span class=\"line\">            message.obj=person;</span><br><span class=\"line\">            message.sendToTarget();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;.start();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mHandler.removeCallbacks(mMyRunnable);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消息截获\"><a href=\"#消息截获\" class=\"headerlink\" title=\"消息截获\"></a>消息截获</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Handler mHandler=<span class=\"keyword\">new</span> Handler(<span class=\"keyword\">new</span> Handler.Callback() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(getApplicationContext(),<span class=\"string\">\"\"</span>+<span class=\"number\">1</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        <span class=\"comment\">//若返回true，则下面的handleMessage不会执行，表示别截获</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//            mTextView.setText(\"\"+msg.arg1+msg.obj);</span></span><br><span class=\"line\">        Toast.makeText(getApplicationContext(),<span class=\"string\">\"\"</span>+<span class=\"number\">2</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"handler总结\"><a href=\"#handler总结\" class=\"headerlink\" title=\"handler总结\"></a>handler总结</h2><p><code>handler</code>负责发送消息，<code>Looper</code>负责接收Handler发送的消息，并将消息发给<code>handler</code>自己。</p>\n<h3 id=\"使用Handler更新UI的原因\"><a href=\"#使用Handler更新UI的原因\" class=\"headerlink\" title=\"使用Handler更新UI的原因\"></a>使用Handler更新UI的原因</h3><p>如果在一个<code>Activity</code>中有多个线程去更新UI，若都没有加锁会导致<strong>界面更新混乱</strong>。若都加锁，则会导致<strong>性能下降</strong>。</p>\n"},{"author":"ivyxjc","date":"2016-05-05T16:00:00.000Z","title":"Service","keywords":null,"description":"服务的生命周期以及如何调用服务.","_content":"\n## 服务的生命周期\n使用startService()<br>\n![](http://oezmbgg4j.bkt.clouddn.com/servicelifecycle.png)\n\n一旦调用`startService()`相应的服务就会启动, 并回调`onStartCommand()`方法. 如果该服务没有创建过, 那么`onCreate()`会先于`onStartCommand()`方法执行. 服务启动之后会一直保持运行状态,知道`stopService()`或`stopSelf()`方法被调用. 即使度从此调用`startService()`方法, 每个服务只会存在一个实例,所以只需要调用一次`stopService()`或`stopSelf()`方法, 服务就会停止下来.\n\n\n另一种方法，使用bindService()<br>\n![](http://oezmbgg4j.bkt.clouddn.com/servicelifecycle2.png)\n\n这会先回调服务中的`onBind()`方法,若该服务之前没有被创建过,那么`onCreate()`方法会先于`onBind()`方法执行.\n\n\n注意: 若一个服务既`startService()`又`bindService()`, 那么只要`stopService()`和`unbindService()`都被调用后,服务的`onDestroy()`方法才会执行.\n\n\n只能解绑定一次,不可以多次解绑定.\n\n\n## 两种方式的区别\n\nStart方式特点:\n1.服务与启动源没有任何关系\n2.无法得到服务对象\n\nBind方式特点:\n1.通过`IBinder`接口实例,返回一个`ServiceConnnection`对象给启动源.\n2.通过`ServiceConnection`对象的相关方法可以得到`Service`对象.\n","source":"_posts/android/四大组件/2016-05-06-service-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-05-06\ntitle: Service\ncategory: Android\ntags: [android , android_service]\nkeywords:\ndescription: 服务的生命周期以及如何调用服务.\n---\n\n## 服务的生命周期\n使用startService()<br>\n![](http://oezmbgg4j.bkt.clouddn.com/servicelifecycle.png)\n\n一旦调用`startService()`相应的服务就会启动, 并回调`onStartCommand()`方法. 如果该服务没有创建过, 那么`onCreate()`会先于`onStartCommand()`方法执行. 服务启动之后会一直保持运行状态,知道`stopService()`或`stopSelf()`方法被调用. 即使度从此调用`startService()`方法, 每个服务只会存在一个实例,所以只需要调用一次`stopService()`或`stopSelf()`方法, 服务就会停止下来.\n\n\n另一种方法，使用bindService()<br>\n![](http://oezmbgg4j.bkt.clouddn.com/servicelifecycle2.png)\n\n这会先回调服务中的`onBind()`方法,若该服务之前没有被创建过,那么`onCreate()`方法会先于`onBind()`方法执行.\n\n\n注意: 若一个服务既`startService()`又`bindService()`, 那么只要`stopService()`和`unbindService()`都被调用后,服务的`onDestroy()`方法才会执行.\n\n\n只能解绑定一次,不可以多次解绑定.\n\n\n## 两种方式的区别\n\nStart方式特点:\n1.服务与启动源没有任何关系\n2.无法得到服务对象\n\nBind方式特点:\n1.通过`IBinder`接口实例,返回一个`ServiceConnnection`对象给启动源.\n2.通过`ServiceConnection`对象的相关方法可以得到`Service`对象.\n","slug":"android/四大组件/2016-05-06-service-basic","published":1,"updated":"2018-08-09T10:10:11.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8v003828t1oglpu61k","content":"<h2 id=\"服务的生命周期\"><a href=\"#服务的生命周期\" class=\"headerlink\" title=\"服务的生命周期\"></a>服务的生命周期</h2><p>使用startService()<br><br><img src=\"http://oezmbgg4j.bkt.clouddn.com/servicelifecycle.png\" alt></p>\n<p>一旦调用<code>startService()</code>相应的服务就会启动, 并回调<code>onStartCommand()</code>方法. 如果该服务没有创建过, 那么<code>onCreate()</code>会先于<code>onStartCommand()</code>方法执行. 服务启动之后会一直保持运行状态,知道<code>stopService()</code>或<code>stopSelf()</code>方法被调用. 即使度从此调用<code>startService()</code>方法, 每个服务只会存在一个实例,所以只需要调用一次<code>stopService()</code>或<code>stopSelf()</code>方法, 服务就会停止下来.</p>\n<p>另一种方法，使用bindService()<br><br><img src=\"http://oezmbgg4j.bkt.clouddn.com/servicelifecycle2.png\" alt></p>\n<p>这会先回调服务中的<code>onBind()</code>方法,若该服务之前没有被创建过,那么<code>onCreate()</code>方法会先于<code>onBind()</code>方法执行.</p>\n<p>注意: 若一个服务既<code>startService()</code>又<code>bindService()</code>, 那么只要<code>stopService()</code>和<code>unbindService()</code>都被调用后,服务的<code>onDestroy()</code>方法才会执行.</p>\n<p>只能解绑定一次,不可以多次解绑定.</p>\n<h2 id=\"两种方式的区别\"><a href=\"#两种方式的区别\" class=\"headerlink\" title=\"两种方式的区别\"></a>两种方式的区别</h2><p>Start方式特点:<br>1.服务与启动源没有任何关系<br>2.无法得到服务对象</p>\n<p>Bind方式特点:<br>1.通过<code>IBinder</code>接口实例,返回一个<code>ServiceConnnection</code>对象给启动源.<br>2.通过<code>ServiceConnection</code>对象的相关方法可以得到<code>Service</code>对象.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"服务的生命周期\"><a href=\"#服务的生命周期\" class=\"headerlink\" title=\"服务的生命周期\"></a>服务的生命周期</h2><p>使用startService()<br><br><img src=\"http://oezmbgg4j.bkt.clouddn.com/servicelifecycle.png\" alt></p>\n<p>一旦调用<code>startService()</code>相应的服务就会启动, 并回调<code>onStartCommand()</code>方法. 如果该服务没有创建过, 那么<code>onCreate()</code>会先于<code>onStartCommand()</code>方法执行. 服务启动之后会一直保持运行状态,知道<code>stopService()</code>或<code>stopSelf()</code>方法被调用. 即使度从此调用<code>startService()</code>方法, 每个服务只会存在一个实例,所以只需要调用一次<code>stopService()</code>或<code>stopSelf()</code>方法, 服务就会停止下来.</p>\n<p>另一种方法，使用bindService()<br><br><img src=\"http://oezmbgg4j.bkt.clouddn.com/servicelifecycle2.png\" alt></p>\n<p>这会先回调服务中的<code>onBind()</code>方法,若该服务之前没有被创建过,那么<code>onCreate()</code>方法会先于<code>onBind()</code>方法执行.</p>\n<p>注意: 若一个服务既<code>startService()</code>又<code>bindService()</code>, 那么只要<code>stopService()</code>和<code>unbindService()</code>都被调用后,服务的<code>onDestroy()</code>方法才会执行.</p>\n<p>只能解绑定一次,不可以多次解绑定.</p>\n<h2 id=\"两种方式的区别\"><a href=\"#两种方式的区别\" class=\"headerlink\" title=\"两种方式的区别\"></a>两种方式的区别</h2><p>Start方式特点:<br>1.服务与启动源没有任何关系<br>2.无法得到服务对象</p>\n<p>Bind方式特点:<br>1.通过<code>IBinder</code>接口实例,返回一个<code>ServiceConnnection</code>对象给启动源.<br>2.通过<code>ServiceConnection</code>对象的相关方法可以得到<code>Service</code>对象.</p>\n"},{"author":"ivyxjc","date":"2016-05-12T16:00:00.000Z","title":"Volley的介绍和一些相关用法","keywords":null,"description":"Volley库可以非常方便得进行网络操作.","_content":"\n## Use newRequestQueue和发送Request\n\n使用`RequestQueue`并向其中传递`Request`对象可以.`RequestQueue`管理和网络操作相关的一些线程,b\n\n```java\n// Instantiate the RequestQueue.\nRequestQueue queue = Volley.newRequestQueue(this);\nString url =\"http://www.google.com\";\n\n// Request a string response from the provided URL.\nStringRequest stringRequest = new StringRequest(Request.Method.GET, url,\n            new Response.Listener<String>() {\n    @Override\n    public void onResponse(String response) {\n        // Display the first 500 characters of the response string.\n        mTextView.setText(\"Response is: \"+ response.substring(0,500));\n    }\n}, new Response.ErrorListener() {\n    @Override\n    public void onErrorResponse(VolleyError error) {\n        mTextView.setText(\"That didn't work!\");\n    }\n});\n// Add the request to the RequestQueue.\nqueue.add(stringRequest);\n```\n\n## 取消一个Request\n\n可以使用`cacel`方法取消一个Request,防止其总是在连接网络.\n\n所以常在`onStop()`方法中调用`cancel`相关方法.\n\n```\nublic static final String TAG = \"MyTag\";\nStringRequest stringRequest; // Assume this exists.\nRequestQueue mRequestQueue;  // Assume this exists.\n\n// Set the tag on the request.\nstringRequest.setTag(TAG);\n\n// Add the request to the RequestQueue.\nmRequestQueue.add(stringRequest);\n```\n\n```java\n@Override\nprotected void onStop () {\n    super.onStop();\n    if (mRequestQueue != null) {\n        mRequestQueue.cancelAll(TAG);\n    }\n}\n```\n","source":"_posts/android/第三方库/2016-05-13-volley.md","raw":"---\nauthor: ivyxjc\ndate: 2016-05-13\ntitle: Volley的介绍和一些相关用法\ncategory: Android\ntags: [android,android_lib]\nkeywords:\ndescription: Volley库可以非常方便得进行网络操作.\n---\n\n## Use newRequestQueue和发送Request\n\n使用`RequestQueue`并向其中传递`Request`对象可以.`RequestQueue`管理和网络操作相关的一些线程,b\n\n```java\n// Instantiate the RequestQueue.\nRequestQueue queue = Volley.newRequestQueue(this);\nString url =\"http://www.google.com\";\n\n// Request a string response from the provided URL.\nStringRequest stringRequest = new StringRequest(Request.Method.GET, url,\n            new Response.Listener<String>() {\n    @Override\n    public void onResponse(String response) {\n        // Display the first 500 characters of the response string.\n        mTextView.setText(\"Response is: \"+ response.substring(0,500));\n    }\n}, new Response.ErrorListener() {\n    @Override\n    public void onErrorResponse(VolleyError error) {\n        mTextView.setText(\"That didn't work!\");\n    }\n});\n// Add the request to the RequestQueue.\nqueue.add(stringRequest);\n```\n\n## 取消一个Request\n\n可以使用`cacel`方法取消一个Request,防止其总是在连接网络.\n\n所以常在`onStop()`方法中调用`cancel`相关方法.\n\n```\nublic static final String TAG = \"MyTag\";\nStringRequest stringRequest; // Assume this exists.\nRequestQueue mRequestQueue;  // Assume this exists.\n\n// Set the tag on the request.\nstringRequest.setTag(TAG);\n\n// Add the request to the RequestQueue.\nmRequestQueue.add(stringRequest);\n```\n\n```java\n@Override\nprotected void onStop () {\n    super.onStop();\n    if (mRequestQueue != null) {\n        mRequestQueue.cancelAll(TAG);\n    }\n}\n```\n","slug":"android/第三方库/2016-05-13-volley","published":1,"updated":"2018-08-09T10:10:11.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8w003b28t1c35oobvs","content":"<h2 id=\"Use-newRequestQueue和发送Request\"><a href=\"#Use-newRequestQueue和发送Request\" class=\"headerlink\" title=\"Use newRequestQueue和发送Request\"></a>Use newRequestQueue和发送Request</h2><p>使用<code>RequestQueue</code>并向其中传递<code>Request</code>对象可以.<code>RequestQueue</code>管理和网络操作相关的一些线程,b</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Instantiate the RequestQueue.</span></span><br><span class=\"line\">RequestQueue queue = Volley.newRequestQueue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">String url =<span class=\"string\">\"http://www.google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Request a string response from the provided URL.</span></span><br><span class=\"line\">StringRequest stringRequest = <span class=\"keyword\">new</span> StringRequest(Request.Method.GET, url,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Response.Listener&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Display the first 500 characters of the response string.</span></span><br><span class=\"line\">        mTextView.setText(<span class=\"string\">\"Response is: \"</span>+ response.substring(<span class=\"number\">0</span>,<span class=\"number\">500</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError error)</span> </span>&#123;</span><br><span class=\"line\">        mTextView.setText(<span class=\"string\">\"That didn't work!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Add the request to the RequestQueue.</span></span><br><span class=\"line\">queue.add(stringRequest);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取消一个Request\"><a href=\"#取消一个Request\" class=\"headerlink\" title=\"取消一个Request\"></a>取消一个Request</h2><p>可以使用<code>cacel</code>方法取消一个Request,防止其总是在连接网络.</p>\n<p>所以常在<code>onStop()</code>方法中调用<code>cancel</code>相关方法.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ublic static final String TAG = &quot;MyTag&quot;;</span><br><span class=\"line\">StringRequest stringRequest; // Assume this exists.</span><br><span class=\"line\">RequestQueue mRequestQueue;  // Assume this exists.</span><br><span class=\"line\"></span><br><span class=\"line\">// Set the tag on the request.</span><br><span class=\"line\">stringRequest.setTag(TAG);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add the request to the RequestQueue.</span><br><span class=\"line\">mRequestQueue.add(stringRequest);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mRequestQueue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mRequestQueue.cancelAll(TAG);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Use-newRequestQueue和发送Request\"><a href=\"#Use-newRequestQueue和发送Request\" class=\"headerlink\" title=\"Use newRequestQueue和发送Request\"></a>Use newRequestQueue和发送Request</h2><p>使用<code>RequestQueue</code>并向其中传递<code>Request</code>对象可以.<code>RequestQueue</code>管理和网络操作相关的一些线程,b</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Instantiate the RequestQueue.</span></span><br><span class=\"line\">RequestQueue queue = Volley.newRequestQueue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">String url =<span class=\"string\">\"http://www.google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Request a string response from the provided URL.</span></span><br><span class=\"line\">StringRequest stringRequest = <span class=\"keyword\">new</span> StringRequest(Request.Method.GET, url,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Response.Listener&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Display the first 500 characters of the response string.</span></span><br><span class=\"line\">        mTextView.setText(<span class=\"string\">\"Response is: \"</span>+ response.substring(<span class=\"number\">0</span>,<span class=\"number\">500</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError error)</span> </span>&#123;</span><br><span class=\"line\">        mTextView.setText(<span class=\"string\">\"That didn't work!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Add the request to the RequestQueue.</span></span><br><span class=\"line\">queue.add(stringRequest);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取消一个Request\"><a href=\"#取消一个Request\" class=\"headerlink\" title=\"取消一个Request\"></a>取消一个Request</h2><p>可以使用<code>cacel</code>方法取消一个Request,防止其总是在连接网络.</p>\n<p>所以常在<code>onStop()</code>方法中调用<code>cancel</code>相关方法.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ublic static final String TAG = &quot;MyTag&quot;;</span><br><span class=\"line\">StringRequest stringRequest; // Assume this exists.</span><br><span class=\"line\">RequestQueue mRequestQueue;  // Assume this exists.</span><br><span class=\"line\"></span><br><span class=\"line\">// Set the tag on the request.</span><br><span class=\"line\">stringRequest.setTag(TAG);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add the request to the RequestQueue.</span><br><span class=\"line\">mRequestQueue.add(stringRequest);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mRequestQueue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mRequestQueue.cancelAll(TAG);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-03-24T16:00:00.000Z","title":"数据持久化","keywords":null,"description":"存储数据主要有三种方式:<br>1. 存储到文件<br>2. SharedPreferences存储<br>3. SQLite","_content":"\n## 数据存储到文件\n\n`Context`类提供了一个`openFileOutput()`方法，可以将数据存储到指定的文件中。接受两个参数，\n1. 第一个参数是文件名(无需包含路径)，默认存储 到`/data/data/<package name>/files/`目录下。\n2. 第二个参数是文件的操作模式，主要有两种：`MODE_PRIVATE`和`MODE_APPEND`。其中`MODE_PRIVATE`是默认的操作模式，表示当指定同样文件名的时候，所写入的内容将会覆盖原文件中的内容。`MODE_APPEND`则表示如果该文件已存在就往文件里面追加内容。还有另外两种模式：`MODE_WORLD_READABLE`和`MODE_WORLD_WRITEABLE`表示允许其它的应用程序对该程序中的文件进行读写操作，已被废弃。\n\n```java\npublic void save(String inputText){\n    FileOutputStream out=null;\n    BufferedWriter writer=null;\n    try{\n        out=openFileOutput(\"data\", Context.MODE_PRIVATE);\n        writer=new BufferedWriter(new OutputStreamWriter(out));\n        writer.write(inputText);\n    }catch (IOException e){\n        e.printStackTrace();\n    }finally {\n        try{\n            if(writer!=null){\n                writer.close();\n            }\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}\n\npublic String load(){\n    FileInputStream in=null;\n    BufferedReader reader=null;\n    StringBuilder content=new StringBuilder();\n\n    try{\n        in=openFileInput(\"data\");\n        reader=new BufferedReader(new InputStreamReader(in));\n        String line=\"\";\n        while ((line=reader.readLine())!=null){\n            content.append(line);\n        }\n    }catch (IOException e){\n        e.printStackTrace();\n    }finally {\n        if(reader!=null){\n            try{\n                reader.close();\n            }catch (IOException e){\n                e.printStackTrace();\n            }\n        }\n    }\n    return content.toString();\n}\n\n```\n\n## SharedPreferences存储\n\n```java\n//存储数据\nSharedPreferences.Editor editor=getSharedPreferences(\"data\",MODE_PRIVATE).edit();\neditor.putString(\"name\",\"Tom\");\neditor.putInt(\"age\", 28);\neditor.putBoolean(\"married\", false);\neditor.commit();\n\n//读取数据\n\nSharedPreferences preferences=getSharedPreferences(\"data\",MODE_PRIVATE);\nString name=preferences.getString(\"name\", \"\");\nboolean married=preferences.getBoolean(\"married\", false);\nint age=preferences.getInt(\"age\",0);\n```\n\n## SQLite\n\n安卓提供了一个`SQLiteOpenHelper`帮助类，可以借助这个类对数据库进行创建和升级。\n\n### 建表\n\n```sql\n//建表\ncreate table Book{\n\tid integer primary key autoincrement,\n    author text,\n    price real,\n    pages integer,\n    name text,\n}\n```\n\n1. `integer`:整型\n2. `real`：浮点型\n3. `text`：文本类型\n4. `blob`：二进制类型\n\n### 添加数据\n\n```java\nSQLiteDatabase db=dbHelper.getWritableDatabase();\nContentValues values=new ContentValues();\nvalues.put(\"author\",\"Dan Brown\");\nvalues.put(\"name\",\"The Da Vinci Code\");\nvalues.put(\"pages\",454);\nvalues.put(\"price\", 16.96);\ndb.insert(\"Book\",null,values);\nvalues.clear();\n```\n\n向数据库中添加数据\n\n### 更新数据\n\n可以使用\n`db.update(String Table,ContenValues values,String WhereClauses,String[] WhereArgs)`\n\n第三个参数对应SQL语句中的`where`，其中用`?`作占位符，第四个参数则表示`?`的内容。\n\n```java\n//表示将name为The Da Vinci Code 的价格改为10.99\nConteValues values=new ContentValues();\nvalues.put(\"price\",10.99);\ndb.update(\"Book\",values,\"name=?\",new String[]{\"The Da Vinci Code\"})；\n```\n\n### 删除数据\n\n可以使用`db.delete(String Table,String WhereClauses,String[] WhereArgs)`\n第二，三两个参数用来约束删除某一行或几行的数据，不指定的话就默认删除所有行。\n\n### 查询数据\n\nquery()方法参数 | 对应SQL部分|描述\n--------|--------|--------\ntable |   from table_name|  指定查询的表名\ncolumns  |   select column1,column2 |  指定查询的列名\nselection  |    where column=value| 指定where的约束条件\nselectionArgs |   -  |  为where中的占位符提供具体的数值\ngroupBy   |    group by column    |  指定需要group by的列\nhaving |   having column=value |对group by后的结果进一步约束\norderBy | order by column1, column2 |  指定查询结果的排序方式\n\n\n`Cursor cursor = db.query(\"Book\", null, null, null, null, null, null);`\n上式查询表中所有数据\n\n\n### 直接使用SQL语句\n\n除查询之外的所有方法可以条用`db.execSQL(...)`接执行SQL语句\n查询数据的方法时可调用它`db.rawQuery(...)`接执行SQL语句\n\n## 代码\n\n```java\npublic class MyDatabaseHelper extends SQLiteOpenHelper {\n    private Context mContext;\n\n    public static final String CREATE_BOOK=\"create table Book (\" +\n            \"id integer primary key autoincrement,\" +\n            \"author text,\" +\n            \"price real,\" +\n            \"pages integer,\" +\n            \"name text)\";\n\n    public MyDatabaseHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n        mContext=context;\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(CREATE_BOOK);\n        //db.execSQL(CREATE_CATEGORY);\n        Toast.makeText(mContext,\"Create succeeded\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        db.execSQL(\"drop table if exists Book\");\n        db.execSQL(\"drop table if exists Category\");\n        onCreate(db);\n    }\n}\n```\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    private MyDatabaseHelper dbHelper;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n//最后一个数是版本号，若版本号比原先高，则会调用  SQLiteOpenHelper中的onUpgrade()。\n        dbHelper=new MyDatabaseHelper(this,\"BookStore.db\",null,5);\n\n        Button button=(Button)findViewById(R.id.button);\n\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                dbHelper.getWritableDatabase();\n            }\n        });\n\n        Button addData=(Button)findViewById(R.id.add_data);\n        addData.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                SQLiteDatabase db=dbHelper.getWritableDatabase();\n\n                //向数据库中添加数据\n                ContentValues values=new ContentValues();\n                values.put(\"author\",\"Dan Brown\");\n                values.put(\"name\",\"The Da\");\n                values.put(\"pages\",454);\n                values.put(\"price\", 16.96);\n                db.insert(\"Book\",null,values);\n                values.clear();\n            }\n        });\n    }\n}\n```\n","source":"_posts/android/数据持久化/2016-03-25-data-persistence.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-25\ntitle: 数据持久化\ncategory: Android\ntags: [android,android_data]\nkeywords:\ndescription: 存储数据主要有三种方式:<br>1. 存储到文件<br>2. SharedPreferences存储<br>3. SQLite\n---\n\n## 数据存储到文件\n\n`Context`类提供了一个`openFileOutput()`方法，可以将数据存储到指定的文件中。接受两个参数，\n1. 第一个参数是文件名(无需包含路径)，默认存储 到`/data/data/<package name>/files/`目录下。\n2. 第二个参数是文件的操作模式，主要有两种：`MODE_PRIVATE`和`MODE_APPEND`。其中`MODE_PRIVATE`是默认的操作模式，表示当指定同样文件名的时候，所写入的内容将会覆盖原文件中的内容。`MODE_APPEND`则表示如果该文件已存在就往文件里面追加内容。还有另外两种模式：`MODE_WORLD_READABLE`和`MODE_WORLD_WRITEABLE`表示允许其它的应用程序对该程序中的文件进行读写操作，已被废弃。\n\n```java\npublic void save(String inputText){\n    FileOutputStream out=null;\n    BufferedWriter writer=null;\n    try{\n        out=openFileOutput(\"data\", Context.MODE_PRIVATE);\n        writer=new BufferedWriter(new OutputStreamWriter(out));\n        writer.write(inputText);\n    }catch (IOException e){\n        e.printStackTrace();\n    }finally {\n        try{\n            if(writer!=null){\n                writer.close();\n            }\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}\n\npublic String load(){\n    FileInputStream in=null;\n    BufferedReader reader=null;\n    StringBuilder content=new StringBuilder();\n\n    try{\n        in=openFileInput(\"data\");\n        reader=new BufferedReader(new InputStreamReader(in));\n        String line=\"\";\n        while ((line=reader.readLine())!=null){\n            content.append(line);\n        }\n    }catch (IOException e){\n        e.printStackTrace();\n    }finally {\n        if(reader!=null){\n            try{\n                reader.close();\n            }catch (IOException e){\n                e.printStackTrace();\n            }\n        }\n    }\n    return content.toString();\n}\n\n```\n\n## SharedPreferences存储\n\n```java\n//存储数据\nSharedPreferences.Editor editor=getSharedPreferences(\"data\",MODE_PRIVATE).edit();\neditor.putString(\"name\",\"Tom\");\neditor.putInt(\"age\", 28);\neditor.putBoolean(\"married\", false);\neditor.commit();\n\n//读取数据\n\nSharedPreferences preferences=getSharedPreferences(\"data\",MODE_PRIVATE);\nString name=preferences.getString(\"name\", \"\");\nboolean married=preferences.getBoolean(\"married\", false);\nint age=preferences.getInt(\"age\",0);\n```\n\n## SQLite\n\n安卓提供了一个`SQLiteOpenHelper`帮助类，可以借助这个类对数据库进行创建和升级。\n\n### 建表\n\n```sql\n//建表\ncreate table Book{\n\tid integer primary key autoincrement,\n    author text,\n    price real,\n    pages integer,\n    name text,\n}\n```\n\n1. `integer`:整型\n2. `real`：浮点型\n3. `text`：文本类型\n4. `blob`：二进制类型\n\n### 添加数据\n\n```java\nSQLiteDatabase db=dbHelper.getWritableDatabase();\nContentValues values=new ContentValues();\nvalues.put(\"author\",\"Dan Brown\");\nvalues.put(\"name\",\"The Da Vinci Code\");\nvalues.put(\"pages\",454);\nvalues.put(\"price\", 16.96);\ndb.insert(\"Book\",null,values);\nvalues.clear();\n```\n\n向数据库中添加数据\n\n### 更新数据\n\n可以使用\n`db.update(String Table,ContenValues values,String WhereClauses,String[] WhereArgs)`\n\n第三个参数对应SQL语句中的`where`，其中用`?`作占位符，第四个参数则表示`?`的内容。\n\n```java\n//表示将name为The Da Vinci Code 的价格改为10.99\nConteValues values=new ContentValues();\nvalues.put(\"price\",10.99);\ndb.update(\"Book\",values,\"name=?\",new String[]{\"The Da Vinci Code\"})；\n```\n\n### 删除数据\n\n可以使用`db.delete(String Table,String WhereClauses,String[] WhereArgs)`\n第二，三两个参数用来约束删除某一行或几行的数据，不指定的话就默认删除所有行。\n\n### 查询数据\n\nquery()方法参数 | 对应SQL部分|描述\n--------|--------|--------\ntable |   from table_name|  指定查询的表名\ncolumns  |   select column1,column2 |  指定查询的列名\nselection  |    where column=value| 指定where的约束条件\nselectionArgs |   -  |  为where中的占位符提供具体的数值\ngroupBy   |    group by column    |  指定需要group by的列\nhaving |   having column=value |对group by后的结果进一步约束\norderBy | order by column1, column2 |  指定查询结果的排序方式\n\n\n`Cursor cursor = db.query(\"Book\", null, null, null, null, null, null);`\n上式查询表中所有数据\n\n\n### 直接使用SQL语句\n\n除查询之外的所有方法可以条用`db.execSQL(...)`接执行SQL语句\n查询数据的方法时可调用它`db.rawQuery(...)`接执行SQL语句\n\n## 代码\n\n```java\npublic class MyDatabaseHelper extends SQLiteOpenHelper {\n    private Context mContext;\n\n    public static final String CREATE_BOOK=\"create table Book (\" +\n            \"id integer primary key autoincrement,\" +\n            \"author text,\" +\n            \"price real,\" +\n            \"pages integer,\" +\n            \"name text)\";\n\n    public MyDatabaseHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n        mContext=context;\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(CREATE_BOOK);\n        //db.execSQL(CREATE_CATEGORY);\n        Toast.makeText(mContext,\"Create succeeded\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        db.execSQL(\"drop table if exists Book\");\n        db.execSQL(\"drop table if exists Category\");\n        onCreate(db);\n    }\n}\n```\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    private MyDatabaseHelper dbHelper;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n//最后一个数是版本号，若版本号比原先高，则会调用  SQLiteOpenHelper中的onUpgrade()。\n        dbHelper=new MyDatabaseHelper(this,\"BookStore.db\",null,5);\n\n        Button button=(Button)findViewById(R.id.button);\n\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                dbHelper.getWritableDatabase();\n            }\n        });\n\n        Button addData=(Button)findViewById(R.id.add_data);\n        addData.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                SQLiteDatabase db=dbHelper.getWritableDatabase();\n\n                //向数据库中添加数据\n                ContentValues values=new ContentValues();\n                values.put(\"author\",\"Dan Brown\");\n                values.put(\"name\",\"The Da\");\n                values.put(\"pages\",454);\n                values.put(\"price\", 16.96);\n                db.insert(\"Book\",null,values);\n                values.clear();\n            }\n        });\n    }\n}\n```\n","slug":"android/数据持久化/2016-03-25-data-persistence","published":1,"updated":"2018-08-09T10:10:11.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8x003e28t1i9g043d0","content":"<h2 id=\"数据存储到文件\"><a href=\"#数据存储到文件\" class=\"headerlink\" title=\"数据存储到文件\"></a>数据存储到文件</h2><p><code>Context</code>类提供了一个<code>openFileOutput()</code>方法，可以将数据存储到指定的文件中。接受两个参数，</p>\n<ol>\n<li>第一个参数是文件名(无需包含路径)，默认存储 到<code>/data/data/&lt;package name&gt;/files/</code>目录下。</li>\n<li>第二个参数是文件的操作模式，主要有两种：<code>MODE_PRIVATE</code>和<code>MODE_APPEND</code>。其中<code>MODE_PRIVATE</code>是默认的操作模式，表示当指定同样文件名的时候，所写入的内容将会覆盖原文件中的内容。<code>MODE_APPEND</code>则表示如果该文件已存在就往文件里面追加内容。还有另外两种模式：<code>MODE_WORLD_READABLE</code>和<code>MODE_WORLD_WRITEABLE</code>表示允许其它的应用程序对该程序中的文件进行读写操作，已被废弃。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(String inputText)</span></span>&#123;</span><br><span class=\"line\">    FileOutputStream out=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    BufferedWriter writer=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        out=openFileOutput(<span class=\"string\">\"data\"</span>, Context.MODE_PRIVATE);</span><br><span class=\"line\">        writer=<span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(out));</span><br><span class=\"line\">        writer.write(inputText);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(writer!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">load</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FileInputStream in=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    BufferedReader reader=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    StringBuilder content=<span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        in=openFileInput(<span class=\"string\">\"data\"</span>);</span><br><span class=\"line\">        reader=<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in));</span><br><span class=\"line\">        String line=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((line=reader.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            content.append(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reader!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                reader.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> content.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SharedPreferences存储\"><a href=\"#SharedPreferences存储\" class=\"headerlink\" title=\"SharedPreferences存储\"></a>SharedPreferences存储</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存储数据</span></span><br><span class=\"line\">SharedPreferences.Editor editor=getSharedPreferences(<span class=\"string\">\"data\"</span>,MODE_PRIVATE).edit();</span><br><span class=\"line\">editor.putString(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"Tom\"</span>);</span><br><span class=\"line\">editor.putInt(<span class=\"string\">\"age\"</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">editor.putBoolean(<span class=\"string\">\"married\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">editor.commit();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读取数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">SharedPreferences preferences=getSharedPreferences(<span class=\"string\">\"data\"</span>,MODE_PRIVATE);</span><br><span class=\"line\">String name=preferences.getString(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> married=preferences.getBoolean(<span class=\"string\">\"married\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> age=preferences.getInt(<span class=\"string\">\"age\"</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h2><p>安卓提供了一个<code>SQLiteOpenHelper</code>帮助类，可以借助这个类对数据库进行创建和升级。</p>\n<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//建表</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> Book&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">integer</span> primary <span class=\"keyword\">key</span> autoincrement,</span><br><span class=\"line\">    author <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">real</span>,</span><br><span class=\"line\">    pages <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>integer</code>:整型</li>\n<li><code>real</code>：浮点型</li>\n<li><code>text</code>：文本类型</li>\n<li><code>blob</code>：二进制类型</li>\n</ol>\n<h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQLiteDatabase db=dbHelper.getWritableDatabase();</span><br><span class=\"line\">ContentValues values=<span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">values.put(<span class=\"string\">\"author\"</span>,<span class=\"string\">\"Dan Brown\"</span>);</span><br><span class=\"line\">values.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"The Da Vinci Code\"</span>);</span><br><span class=\"line\">values.put(<span class=\"string\">\"pages\"</span>,<span class=\"number\">454</span>);</span><br><span class=\"line\">values.put(<span class=\"string\">\"price\"</span>, <span class=\"number\">16.96</span>);</span><br><span class=\"line\">db.insert(<span class=\"string\">\"Book\"</span>,<span class=\"keyword\">null</span>,values);</span><br><span class=\"line\">values.clear();</span><br></pre></td></tr></table></figure>\n\n<p>向数据库中添加数据</p>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><p>可以使用<br><code>db.update(String Table,ContenValues values,String WhereClauses,String[] WhereArgs)</code></p>\n<p>第三个参数对应SQL语句中的<code>where</code>，其中用<code>?</code>作占位符，第四个参数则表示<code>?</code>的内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//表示将name为The Da Vinci Code 的价格改为10.99</span></span><br><span class=\"line\">ConteValues values=<span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">values.put(<span class=\"string\">\"price\"</span>,<span class=\"number\">10.99</span>);</span><br><span class=\"line\">db.update(<span class=\"string\">\"Book\"</span>,values,<span class=\"string\">\"name=?\"</span>,<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"The Da Vinci Code\"</span>&#125;)；</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p>可以使用<code>db.delete(String Table,String WhereClauses,String[] WhereArgs)</code><br>第二，三两个参数用来约束删除某一行或几行的数据，不指定的话就默认删除所有行。</p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><table>\n<thead>\n<tr>\n<th>query()方法参数</th>\n<th>对应SQL部分</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>table</td>\n<td>from table_name</td>\n<td>指定查询的表名</td>\n</tr>\n<tr>\n<td>columns</td>\n<td>select column1,column2</td>\n<td>指定查询的列名</td>\n</tr>\n<tr>\n<td>selection</td>\n<td>where column=value</td>\n<td>指定where的约束条件</td>\n</tr>\n<tr>\n<td>selectionArgs</td>\n<td>-</td>\n<td>为where中的占位符提供具体的数值</td>\n</tr>\n<tr>\n<td>groupBy</td>\n<td>group by column</td>\n<td>指定需要group by的列</td>\n</tr>\n<tr>\n<td>having</td>\n<td>having column=value</td>\n<td>对group by后的结果进一步约束</td>\n</tr>\n<tr>\n<td>orderBy</td>\n<td>order by column1, column2</td>\n<td>指定查询结果的排序方式</td>\n</tr>\n</tbody></table>\n<p><code>Cursor cursor = db.query(&quot;Book&quot;, null, null, null, null, null, null);</code><br>上式查询表中所有数据</p>\n<h3 id=\"直接使用SQL语句\"><a href=\"#直接使用SQL语句\" class=\"headerlink\" title=\"直接使用SQL语句\"></a>直接使用SQL语句</h3><p>除查询之外的所有方法可以条用<code>db.execSQL(...)</code>接执行SQL语句<br>查询数据的方法时可调用它<code>db.rawQuery(...)</code>接执行SQL语句</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDatabaseHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_BOOK=<span class=\"string\">\"create table Book (\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"id integer primary key autoincrement,\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"author text,\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"price real,\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"pages integer,\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"name text)\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyDatabaseHelper</span><span class=\"params\">(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class=\"keyword\">int</span> version)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, name, factory, version);</span><br><span class=\"line\">        mContext=context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class=\"line\">        db.execSQL(CREATE_BOOK);</span><br><span class=\"line\">        <span class=\"comment\">//db.execSQL(CREATE_CATEGORY);</span></span><br><span class=\"line\">        Toast.makeText(mContext,<span class=\"string\">\"Create succeeded\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">\"drop table if exists Book\"</span>);</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">\"drop table if exists Category\"</span>);</span><br><span class=\"line\">        onCreate(db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyDatabaseHelper dbHelper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后一个数是版本号，若版本号比原先高，则会调用  SQLiteOpenHelper中的onUpgrade()。</span></span><br><span class=\"line\">        dbHelper=<span class=\"keyword\">new</span> MyDatabaseHelper(<span class=\"keyword\">this</span>,<span class=\"string\">\"BookStore.db\"</span>,<span class=\"keyword\">null</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Button button=(Button)findViewById(R.id.button);</span><br><span class=\"line\"></span><br><span class=\"line\">        button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                dbHelper.getWritableDatabase();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        Button addData=(Button)findViewById(R.id.add_data);</span><br><span class=\"line\">        addData.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                SQLiteDatabase db=dbHelper.getWritableDatabase();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//向数据库中添加数据</span></span><br><span class=\"line\">                ContentValues values=<span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">                values.put(<span class=\"string\">\"author\"</span>,<span class=\"string\">\"Dan Brown\"</span>);</span><br><span class=\"line\">                values.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"The Da\"</span>);</span><br><span class=\"line\">                values.put(<span class=\"string\">\"pages\"</span>,<span class=\"number\">454</span>);</span><br><span class=\"line\">                values.put(<span class=\"string\">\"price\"</span>, <span class=\"number\">16.96</span>);</span><br><span class=\"line\">                db.insert(<span class=\"string\">\"Book\"</span>,<span class=\"keyword\">null</span>,values);</span><br><span class=\"line\">                values.clear();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据存储到文件\"><a href=\"#数据存储到文件\" class=\"headerlink\" title=\"数据存储到文件\"></a>数据存储到文件</h2><p><code>Context</code>类提供了一个<code>openFileOutput()</code>方法，可以将数据存储到指定的文件中。接受两个参数，</p>\n<ol>\n<li>第一个参数是文件名(无需包含路径)，默认存储 到<code>/data/data/&lt;package name&gt;/files/</code>目录下。</li>\n<li>第二个参数是文件的操作模式，主要有两种：<code>MODE_PRIVATE</code>和<code>MODE_APPEND</code>。其中<code>MODE_PRIVATE</code>是默认的操作模式，表示当指定同样文件名的时候，所写入的内容将会覆盖原文件中的内容。<code>MODE_APPEND</code>则表示如果该文件已存在就往文件里面追加内容。还有另外两种模式：<code>MODE_WORLD_READABLE</code>和<code>MODE_WORLD_WRITEABLE</code>表示允许其它的应用程序对该程序中的文件进行读写操作，已被废弃。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(String inputText)</span></span>&#123;</span><br><span class=\"line\">    FileOutputStream out=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    BufferedWriter writer=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        out=openFileOutput(<span class=\"string\">\"data\"</span>, Context.MODE_PRIVATE);</span><br><span class=\"line\">        writer=<span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(out));</span><br><span class=\"line\">        writer.write(inputText);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(writer!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">load</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FileInputStream in=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    BufferedReader reader=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    StringBuilder content=<span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        in=openFileInput(<span class=\"string\">\"data\"</span>);</span><br><span class=\"line\">        reader=<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in));</span><br><span class=\"line\">        String line=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((line=reader.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            content.append(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reader!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                reader.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> content.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SharedPreferences存储\"><a href=\"#SharedPreferences存储\" class=\"headerlink\" title=\"SharedPreferences存储\"></a>SharedPreferences存储</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存储数据</span></span><br><span class=\"line\">SharedPreferences.Editor editor=getSharedPreferences(<span class=\"string\">\"data\"</span>,MODE_PRIVATE).edit();</span><br><span class=\"line\">editor.putString(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"Tom\"</span>);</span><br><span class=\"line\">editor.putInt(<span class=\"string\">\"age\"</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">editor.putBoolean(<span class=\"string\">\"married\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">editor.commit();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读取数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">SharedPreferences preferences=getSharedPreferences(<span class=\"string\">\"data\"</span>,MODE_PRIVATE);</span><br><span class=\"line\">String name=preferences.getString(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> married=preferences.getBoolean(<span class=\"string\">\"married\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> age=preferences.getInt(<span class=\"string\">\"age\"</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h2><p>安卓提供了一个<code>SQLiteOpenHelper</code>帮助类，可以借助这个类对数据库进行创建和升级。</p>\n<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//建表</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> Book&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">integer</span> primary <span class=\"keyword\">key</span> autoincrement,</span><br><span class=\"line\">    author <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">real</span>,</span><br><span class=\"line\">    pages <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>integer</code>:整型</li>\n<li><code>real</code>：浮点型</li>\n<li><code>text</code>：文本类型</li>\n<li><code>blob</code>：二进制类型</li>\n</ol>\n<h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQLiteDatabase db=dbHelper.getWritableDatabase();</span><br><span class=\"line\">ContentValues values=<span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">values.put(<span class=\"string\">\"author\"</span>,<span class=\"string\">\"Dan Brown\"</span>);</span><br><span class=\"line\">values.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"The Da Vinci Code\"</span>);</span><br><span class=\"line\">values.put(<span class=\"string\">\"pages\"</span>,<span class=\"number\">454</span>);</span><br><span class=\"line\">values.put(<span class=\"string\">\"price\"</span>, <span class=\"number\">16.96</span>);</span><br><span class=\"line\">db.insert(<span class=\"string\">\"Book\"</span>,<span class=\"keyword\">null</span>,values);</span><br><span class=\"line\">values.clear();</span><br></pre></td></tr></table></figure>\n\n<p>向数据库中添加数据</p>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><p>可以使用<br><code>db.update(String Table,ContenValues values,String WhereClauses,String[] WhereArgs)</code></p>\n<p>第三个参数对应SQL语句中的<code>where</code>，其中用<code>?</code>作占位符，第四个参数则表示<code>?</code>的内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//表示将name为The Da Vinci Code 的价格改为10.99</span></span><br><span class=\"line\">ConteValues values=<span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">values.put(<span class=\"string\">\"price\"</span>,<span class=\"number\">10.99</span>);</span><br><span class=\"line\">db.update(<span class=\"string\">\"Book\"</span>,values,<span class=\"string\">\"name=?\"</span>,<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"The Da Vinci Code\"</span>&#125;)；</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p>可以使用<code>db.delete(String Table,String WhereClauses,String[] WhereArgs)</code><br>第二，三两个参数用来约束删除某一行或几行的数据，不指定的话就默认删除所有行。</p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><table>\n<thead>\n<tr>\n<th>query()方法参数</th>\n<th>对应SQL部分</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>table</td>\n<td>from table_name</td>\n<td>指定查询的表名</td>\n</tr>\n<tr>\n<td>columns</td>\n<td>select column1,column2</td>\n<td>指定查询的列名</td>\n</tr>\n<tr>\n<td>selection</td>\n<td>where column=value</td>\n<td>指定where的约束条件</td>\n</tr>\n<tr>\n<td>selectionArgs</td>\n<td>-</td>\n<td>为where中的占位符提供具体的数值</td>\n</tr>\n<tr>\n<td>groupBy</td>\n<td>group by column</td>\n<td>指定需要group by的列</td>\n</tr>\n<tr>\n<td>having</td>\n<td>having column=value</td>\n<td>对group by后的结果进一步约束</td>\n</tr>\n<tr>\n<td>orderBy</td>\n<td>order by column1, column2</td>\n<td>指定查询结果的排序方式</td>\n</tr>\n</tbody></table>\n<p><code>Cursor cursor = db.query(&quot;Book&quot;, null, null, null, null, null, null);</code><br>上式查询表中所有数据</p>\n<h3 id=\"直接使用SQL语句\"><a href=\"#直接使用SQL语句\" class=\"headerlink\" title=\"直接使用SQL语句\"></a>直接使用SQL语句</h3><p>除查询之外的所有方法可以条用<code>db.execSQL(...)</code>接执行SQL语句<br>查询数据的方法时可调用它<code>db.rawQuery(...)</code>接执行SQL语句</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDatabaseHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_BOOK=<span class=\"string\">\"create table Book (\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"id integer primary key autoincrement,\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"author text,\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"price real,\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"pages integer,\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"name text)\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyDatabaseHelper</span><span class=\"params\">(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class=\"keyword\">int</span> version)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, name, factory, version);</span><br><span class=\"line\">        mContext=context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class=\"line\">        db.execSQL(CREATE_BOOK);</span><br><span class=\"line\">        <span class=\"comment\">//db.execSQL(CREATE_CATEGORY);</span></span><br><span class=\"line\">        Toast.makeText(mContext,<span class=\"string\">\"Create succeeded\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">\"drop table if exists Book\"</span>);</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">\"drop table if exists Category\"</span>);</span><br><span class=\"line\">        onCreate(db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyDatabaseHelper dbHelper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后一个数是版本号，若版本号比原先高，则会调用  SQLiteOpenHelper中的onUpgrade()。</span></span><br><span class=\"line\">        dbHelper=<span class=\"keyword\">new</span> MyDatabaseHelper(<span class=\"keyword\">this</span>,<span class=\"string\">\"BookStore.db\"</span>,<span class=\"keyword\">null</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Button button=(Button)findViewById(R.id.button);</span><br><span class=\"line\"></span><br><span class=\"line\">        button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                dbHelper.getWritableDatabase();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        Button addData=(Button)findViewById(R.id.add_data);</span><br><span class=\"line\">        addData.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                SQLiteDatabase db=dbHelper.getWritableDatabase();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//向数据库中添加数据</span></span><br><span class=\"line\">                ContentValues values=<span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">                values.put(<span class=\"string\">\"author\"</span>,<span class=\"string\">\"Dan Brown\"</span>);</span><br><span class=\"line\">                values.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"The Da\"</span>);</span><br><span class=\"line\">                values.put(<span class=\"string\">\"pages\"</span>,<span class=\"number\">454</span>);</span><br><span class=\"line\">                values.put(<span class=\"string\">\"price\"</span>, <span class=\"number\">16.96</span>);</span><br><span class=\"line\">                db.insert(<span class=\"string\">\"Book\"</span>,<span class=\"keyword\">null</span>,values);</span><br><span class=\"line\">                values.clear();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-05-14T16:00:00.000Z","title":"如何处理耗时操作(使用AsyncTask, AsyncAdapter)","keywords":null,"description":null,"_content":"\n使用`AsyncTask`虽然可以非常简单将耗时操作与`UI线程`分开, 但是仍是耗时操作和`Activity`的生命周期绑定在了一起, 那么可能翻转屏幕就会使得该操作中断. 所以使用`Service`是更好的方法, `google`也给出了专用的解决方案, 使用`AsyncAdapter`.\n<!--more-->\n\n![](http://oezmbgg4j.bkt.clouddn.com/async_1.png)\n","source":"_posts/android/并发编程/2016-05-15-async.md","raw":"---\nauthor: ivyxjc\ndate: 2016-05-15\ntitle: 如何处理耗时操作(使用AsyncTask, AsyncAdapter)\ncategory: Android\ntags: [android,concurrency]\nkeywords:\ndescription:\n---\n\n使用`AsyncTask`虽然可以非常简单将耗时操作与`UI线程`分开, 但是仍是耗时操作和`Activity`的生命周期绑定在了一起, 那么可能翻转屏幕就会使得该操作中断. 所以使用`Service`是更好的方法, `google`也给出了专用的解决方案, 使用`AsyncAdapter`.\n<!--more-->\n\n![](http://oezmbgg4j.bkt.clouddn.com/async_1.png)\n","slug":"android/并发编程/2016-05-15-async","published":1,"updated":"2018-08-09T10:10:11.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8y003h28t1oixjv50u","content":"<p>使用<code>AsyncTask</code>虽然可以非常简单将耗时操作与<code>UI线程</code>分开, 但是仍是耗时操作和<code>Activity</code>的生命周期绑定在了一起, 那么可能翻转屏幕就会使得该操作中断. 所以使用<code>Service</code>是更好的方法, <code>google</code>也给出了专用的解决方案, 使用<code>AsyncAdapter</code>.</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/async_1.png\" alt></p>\n","site":{"data":{}},"excerpt":"<p>使用<code>AsyncTask</code>虽然可以非常简单将耗时操作与<code>UI线程</code>分开, 但是仍是耗时操作和<code>Activity</code>的生命周期绑定在了一起, 那么可能翻转屏幕就会使得该操作中断. 所以使用<code>Service</code>是更好的方法, <code>google</code>也给出了专用的解决方案, 使用<code>AsyncAdapter</code>.</p>","more":"<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/async_1.png\" alt></p>"},{"author":"ivyxjc","date":"2016-03-25T16:00:00.000Z","title":"跨程序共享数据","keywords":null,"description":null,"_content":"\n可以利用`getContentResolver()`获取`ContentResolver`. `ContentResolver`中提供了一系列方法用于对数据进行CRUD操作.\n<!--more-->\n## ContentProvider\n\n通过`getContentResolver()`获取`ContentResolver`的实例，`ContentResolver`中提供了一系列方法用于对数据进行CRUD操作.\n其中\n 1.insert() 用于添加\n 2.update() 用于更新\n 3.delete() 用于删除\n 4.query()  用于查询\n\n### 内容URI及用法\n\n`ContentResolver`中的CRUD操作是不接受表名参数的，而是使用一个`Uri`参数代替。该参数被称为内容`URI`，由两部分组成：authority和path。\n内容`URI`标准写法：\n\n```\ncontent://com.example.app.provider/table1\n```\n\n需要将内容`URI`解析成`Uri`对象才可以作为参数传入\n\n```java\nUri uri=Uri.parse(\"content://com.example.app.provider/table1\");\n```\n\n### 查询操作\n\n```java\nCursor cursor=getContentResolver().query(uri,projection,selection,selectionArgs,orderBy);\n```\n\n其它操作与之类似，也和SQLite中的操作相像。\n![](/assets/img/posts/content_provider_query.png)\n\n## 自定义ContentProvider\n\n可以`extends ContentProvider`，需要覆盖父类的6个方法.\n\n 1.`public boolean onCreate()`:初始化ContentProvider时调用，完成对数据库的创建和升级，返回true则表示ContentProvider初始化成功，返回false表示失败。**注意：只有存在`ContentResolver`尝试访问该程序中的而数据时，ContentProvider才会初始化**。\n 2.`public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)`：从ContentProvider中查询数据。使用`uri`参数来确定查询哪一张表，`projection`用于确定查询哪些列，`selection`和`selectionArgs`用来约束查询内容，`sordOreder`参数用于对结果进行排序，查询结果放在`Cursor`中返回。\n 3.`public Uri insert(Uri uri, ContentValues values)`：向`ContentProvider`中添加一条数据。\n 4.`public int delete(Uri uri, String selection, String[] selectionArgs)`：从`ContentProvider`中删除数据。\n 5.`public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)`：更新数据\n 6.`public String getType(Uri uri)`:根据传入的内容URI来返回相对应的MIME类型。\n\n一个内容URI对应的MIME字符串由三部分组成：\n 1.必须以vnd开头。\n 2.如果内容URI以路径结尾，则后街`androi.cursor.dir/`,如果内容URI以id结尾，则后接`android.cursor.item/`。\n 3.最后街上`vnd.<authority>.<path>`\n\n\n## 安全性保证\n\n因为所有的CRUD操作都一定要匹配到相应的内容URI格式才能进行，所以我们可以控制外部程序能够获得的存储内容。\n","source":"_posts/android/数据持久化/2016-03-26-content-provider.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-26\ntitle: 跨程序共享数据\ncategory: Android\ntags: [android,android_data]\nkeywords:\ndescription:\n---\n\n可以利用`getContentResolver()`获取`ContentResolver`. `ContentResolver`中提供了一系列方法用于对数据进行CRUD操作.\n<!--more-->\n## ContentProvider\n\n通过`getContentResolver()`获取`ContentResolver`的实例，`ContentResolver`中提供了一系列方法用于对数据进行CRUD操作.\n其中\n 1.insert() 用于添加\n 2.update() 用于更新\n 3.delete() 用于删除\n 4.query()  用于查询\n\n### 内容URI及用法\n\n`ContentResolver`中的CRUD操作是不接受表名参数的，而是使用一个`Uri`参数代替。该参数被称为内容`URI`，由两部分组成：authority和path。\n内容`URI`标准写法：\n\n```\ncontent://com.example.app.provider/table1\n```\n\n需要将内容`URI`解析成`Uri`对象才可以作为参数传入\n\n```java\nUri uri=Uri.parse(\"content://com.example.app.provider/table1\");\n```\n\n### 查询操作\n\n```java\nCursor cursor=getContentResolver().query(uri,projection,selection,selectionArgs,orderBy);\n```\n\n其它操作与之类似，也和SQLite中的操作相像。\n![](/assets/img/posts/content_provider_query.png)\n\n## 自定义ContentProvider\n\n可以`extends ContentProvider`，需要覆盖父类的6个方法.\n\n 1.`public boolean onCreate()`:初始化ContentProvider时调用，完成对数据库的创建和升级，返回true则表示ContentProvider初始化成功，返回false表示失败。**注意：只有存在`ContentResolver`尝试访问该程序中的而数据时，ContentProvider才会初始化**。\n 2.`public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)`：从ContentProvider中查询数据。使用`uri`参数来确定查询哪一张表，`projection`用于确定查询哪些列，`selection`和`selectionArgs`用来约束查询内容，`sordOreder`参数用于对结果进行排序，查询结果放在`Cursor`中返回。\n 3.`public Uri insert(Uri uri, ContentValues values)`：向`ContentProvider`中添加一条数据。\n 4.`public int delete(Uri uri, String selection, String[] selectionArgs)`：从`ContentProvider`中删除数据。\n 5.`public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)`：更新数据\n 6.`public String getType(Uri uri)`:根据传入的内容URI来返回相对应的MIME类型。\n\n一个内容URI对应的MIME字符串由三部分组成：\n 1.必须以vnd开头。\n 2.如果内容URI以路径结尾，则后街`androi.cursor.dir/`,如果内容URI以id结尾，则后接`android.cursor.item/`。\n 3.最后街上`vnd.<authority>.<path>`\n\n\n## 安全性保证\n\n因为所有的CRUD操作都一定要匹配到相应的内容URI格式才能进行，所以我们可以控制外部程序能够获得的存储内容。\n","slug":"android/数据持久化/2016-03-26-content-provider","published":1,"updated":"2018-08-09T10:10:11.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf8z003k28t1ccx0ypu0","content":"<p>可以利用<code>getContentResolver()</code>获取<code>ContentResolver</code>. <code>ContentResolver</code>中提供了一系列方法用于对数据进行CRUD操作.</p>\n<a id=\"more\"></a>\n<h2 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h2><p>通过<code>getContentResolver()</code>获取<code>ContentResolver</code>的实例，<code>ContentResolver</code>中提供了一系列方法用于对数据进行CRUD操作.<br>其中<br> 1.insert() 用于添加<br> 2.update() 用于更新<br> 3.delete() 用于删除<br> 4.query()  用于查询</p>\n<h3 id=\"内容URI及用法\"><a href=\"#内容URI及用法\" class=\"headerlink\" title=\"内容URI及用法\"></a>内容URI及用法</h3><p><code>ContentResolver</code>中的CRUD操作是不接受表名参数的，而是使用一个<code>Uri</code>参数代替。该参数被称为内容<code>URI</code>，由两部分组成：authority和path。<br>内容<code>URI</code>标准写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content://com.example.app.provider/table1</span><br></pre></td></tr></table></figure>\n\n<p>需要将内容<code>URI</code>解析成<code>Uri</code>对象才可以作为参数传入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri uri=Uri.parse(<span class=\"string\">\"content://com.example.app.provider/table1\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cursor cursor=getContentResolver().query(uri,projection,selection,selectionArgs,orderBy);</span><br></pre></td></tr></table></figure>\n\n<p>其它操作与之类似，也和SQLite中的操作相像。<br><img src=\"/assets/img/posts/content_provider_query.png\" alt></p>\n<h2 id=\"自定义ContentProvider\"><a href=\"#自定义ContentProvider\" class=\"headerlink\" title=\"自定义ContentProvider\"></a>自定义ContentProvider</h2><p>可以<code>extends ContentProvider</code>，需要覆盖父类的6个方法.</p>\n<p> 1.<code>public boolean onCreate()</code>:初始化ContentProvider时调用，完成对数据库的创建和升级，返回true则表示ContentProvider初始化成功，返回false表示失败。<strong>注意：只有存在<code>ContentResolver</code>尝试访问该程序中的而数据时，ContentProvider才会初始化</strong>。<br> 2.<code>public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)</code>：从ContentProvider中查询数据。使用<code>uri</code>参数来确定查询哪一张表，<code>projection</code>用于确定查询哪些列，<code>selection</code>和<code>selectionArgs</code>用来约束查询内容，<code>sordOreder</code>参数用于对结果进行排序，查询结果放在<code>Cursor</code>中返回。<br> 3.<code>public Uri insert(Uri uri, ContentValues values)</code>：向<code>ContentProvider</code>中添加一条数据。<br> 4.<code>public int delete(Uri uri, String selection, String[] selectionArgs)</code>：从<code>ContentProvider</code>中删除数据。<br> 5.<code>public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)</code>：更新数据<br> 6.<code>public String getType(Uri uri)</code>:根据传入的内容URI来返回相对应的MIME类型。</p>\n<p>一个内容URI对应的MIME字符串由三部分组成：<br> 1.必须以vnd开头。<br> 2.如果内容URI以路径结尾，则后街<code>androi.cursor.dir/</code>,如果内容URI以id结尾，则后接<code>android.cursor.item/</code>。<br> 3.最后街上<code>vnd.&lt;authority&gt;.&lt;path&gt;</code></p>\n<h2 id=\"安全性保证\"><a href=\"#安全性保证\" class=\"headerlink\" title=\"安全性保证\"></a>安全性保证</h2><p>因为所有的CRUD操作都一定要匹配到相应的内容URI格式才能进行，所以我们可以控制外部程序能够获得的存储内容。</p>\n","site":{"data":{}},"excerpt":"<p>可以利用<code>getContentResolver()</code>获取<code>ContentResolver</code>. <code>ContentResolver</code>中提供了一系列方法用于对数据进行CRUD操作.</p>","more":"<h2 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h2><p>通过<code>getContentResolver()</code>获取<code>ContentResolver</code>的实例，<code>ContentResolver</code>中提供了一系列方法用于对数据进行CRUD操作.<br>其中<br> 1.insert() 用于添加<br> 2.update() 用于更新<br> 3.delete() 用于删除<br> 4.query()  用于查询</p>\n<h3 id=\"内容URI及用法\"><a href=\"#内容URI及用法\" class=\"headerlink\" title=\"内容URI及用法\"></a>内容URI及用法</h3><p><code>ContentResolver</code>中的CRUD操作是不接受表名参数的，而是使用一个<code>Uri</code>参数代替。该参数被称为内容<code>URI</code>，由两部分组成：authority和path。<br>内容<code>URI</code>标准写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content://com.example.app.provider/table1</span><br></pre></td></tr></table></figure>\n\n<p>需要将内容<code>URI</code>解析成<code>Uri</code>对象才可以作为参数传入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri uri=Uri.parse(<span class=\"string\">\"content://com.example.app.provider/table1\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cursor cursor=getContentResolver().query(uri,projection,selection,selectionArgs,orderBy);</span><br></pre></td></tr></table></figure>\n\n<p>其它操作与之类似，也和SQLite中的操作相像。<br><img src=\"/assets/img/posts/content_provider_query.png\" alt></p>\n<h2 id=\"自定义ContentProvider\"><a href=\"#自定义ContentProvider\" class=\"headerlink\" title=\"自定义ContentProvider\"></a>自定义ContentProvider</h2><p>可以<code>extends ContentProvider</code>，需要覆盖父类的6个方法.</p>\n<p> 1.<code>public boolean onCreate()</code>:初始化ContentProvider时调用，完成对数据库的创建和升级，返回true则表示ContentProvider初始化成功，返回false表示失败。<strong>注意：只有存在<code>ContentResolver</code>尝试访问该程序中的而数据时，ContentProvider才会初始化</strong>。<br> 2.<code>public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)</code>：从ContentProvider中查询数据。使用<code>uri</code>参数来确定查询哪一张表，<code>projection</code>用于确定查询哪些列，<code>selection</code>和<code>selectionArgs</code>用来约束查询内容，<code>sordOreder</code>参数用于对结果进行排序，查询结果放在<code>Cursor</code>中返回。<br> 3.<code>public Uri insert(Uri uri, ContentValues values)</code>：向<code>ContentProvider</code>中添加一条数据。<br> 4.<code>public int delete(Uri uri, String selection, String[] selectionArgs)</code>：从<code>ContentProvider</code>中删除数据。<br> 5.<code>public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)</code>：更新数据<br> 6.<code>public String getType(Uri uri)</code>:根据传入的内容URI来返回相对应的MIME类型。</p>\n<p>一个内容URI对应的MIME字符串由三部分组成：<br> 1.必须以vnd开头。<br> 2.如果内容URI以路径结尾，则后街<code>androi.cursor.dir/</code>,如果内容URI以id结尾，则后接<code>android.cursor.item/</code>。<br> 3.最后街上<code>vnd.&lt;authority&gt;.&lt;path&gt;</code></p>\n<h2 id=\"安全性保证\"><a href=\"#安全性保证\" class=\"headerlink\" title=\"安全性保证\"></a>安全性保证</h2><p>因为所有的CRUD操作都一定要匹配到相应的内容URI格式才能进行，所以我们可以控制外部程序能够获得的存储内容。</p>"},{"author":"ivyxjc","date":"2016-11-24T16:00:00.000Z","title":"利用Retrofit, RxJava获取网络内容","keywords":null,"description":"Retrofit","_content":"\n\n## Retrofit & RxJava\n关于如何使用Retrofit和RxJava请阅读参考中的两篇文章.\n\n## Retrofit处理数据\n\nRetrofit是在什么时候处理从网络中获取到的json数据的呢? 我从几个使用了Retrofit的项目源代码寻找了半天, 也没有找到处理json的相关代码. 后来才发现, Retrofit中使用`.addConverterFactory(GsonConverterFactory.create())`其实就是自动添加了json解析, 它会将json数据直接转换为java类(即Pojo).\n\n[convertToPojo](http://pojo.sodhanalibrary.com/)可以根据json的内容自动生成Pojo类.\n\n\n### 以豆瓣api为例\n\n#### json数据格式\n豆瓣正在热映的json数据格式大致如下:\n\n![](http://oezmbgg4j.bkt.clouddn.com/douban_json.png)\n\n```java\nDoubanService.java\n\ninterface DoubanService {\n    @GET(\"/v2/movie/in_theaters\")\n    Call<Douban> getList();\n}\n```\n\n#### pojo类\n\n```java\npublic class Douban {\n    @SerializedName(value = \"subjects\")\n    private List<Subjects> subjects;\n\n    ...Getter and Setter..\n}\n```\n\n```java\n\npublic class Subjects {\n    private String id;\n    private String title;\n    private Rating rating;\n}\n```\n\n```java\npublic class Rating {\n    private String min;\n    private String max;\n    private String stars;\n\n    ...Getter and Setter..\n}\n```\n\n#### 处理并显示数据\n\n```java\npublic class DoubanRun extends Thread {\n    @Override\n    public void run() {\n        super.run();\n        Retrofit retrofit=new Retrofit.Builder()\n                .baseUrl(\"https://api.douban.com\")\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\n        DoubanService douban=retrofit.create(DoubanService.class);\n        Call<Douban> call=douban.getList();\n\n        try {\n            Douban d=call.execute().body();\n            for (Subjects l:d.getSubjects()){\n                 Log.i(\"TAGGGG\",l.getId()+\" \"+l.getTitle());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            Log.i(\"TAGGGG\",\"ff\");\n        }\n    }\n}\n```\n\n结果\n\n```\n26630781 我不是潘金莲\n25726614 神奇动物在哪里\n25793398 海洋奇缘\n26365631 冲天火\n26596486 名侦探柯南：纯黑的恶梦\n3025375 奇异博士\n26370431 夏威夷之恋\n26673217 我是处女座\n26696875 最萌身高差\n25983044 比利·林恩的中场战事\n22266320 深海浩劫\n26876505 怨灵地下室\n25921812 驴得水\n26598021 航海王之黄\n...\n```\n\n#### 配合RxJava\n\n`DoubanService.java`改为:\n\n```java\ninterface DoubanService {\n    @GET(\"/v2/movie/in_theaters\")\n    Observable<Douban> getList();\n}\n```\n\n`DoubanRun`改为:\n\n```java\npublic class DoubanRun extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n\n        Retrofit retrofit=new Retrofit.Builder()\n                .baseUrl(\"https://api.douban.com\")\n                .addConverterFactory(GsonConverterFactory.create())\n                //\n                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n\n                .build();\n\n        DoubanService doubanService=retrofit.create(DoubanService.class);\n\n        doubanService.getList()\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(new Subscriber<Douban>() {\n                    @Override\n                    public void onCompleted() {\n\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n\n                    }\n\n                    @Override\n                    public void onNext(Douban douban) {\n                        for (Subjects l:douban.getSubjects()){\n                            Log.i(\"TAGGGG\",l.getId()+\" \"+l.getTitle());\n\n                        }\n                    }\n                });\n    }\n}\n\n```\n\n#### 注意点\n\n1. 出现`Expected BEGIN_ARRAY but was BEGIN_OBJECT at`或者pojo类中对应的变量的类型不对. 比如 如果在`Subjects`类中将rating设为String. 就会有`Expected String but was BEGIN_OBJECT at...`错误.\n\n\n\n## 参考文章\n1. [给 Android 开发者的 RxJava 详解](https://gank.io/post/560e15be2dca930e00da1083)<br>[archive.org备份页面](https://web.archive.org/web/20161023043938/http://gank.io/post/560e15be2dca930e00da1083)\n2. [RxJava 与 Retrofit 结合的最佳实践](https://gank.io/post/56e80c2c677659311bed9841)<br>[archive.org备份页面](https://web.archive.org/web/20161022232218/http://gank.io/post/56e80c2c677659311bed9841)\n","source":"_posts/android/第三方库/2016-11-25-retrofit-rxjava.md","raw":"---\nauthor: ivyxjc\ndate: 2016-11-25\ntitle: 利用Retrofit, RxJava获取网络内容\ncategory: Android\ntags: [android,android_lib]\nkeywords:\ndescription: Retrofit\n---\n\n\n## Retrofit & RxJava\n关于如何使用Retrofit和RxJava请阅读参考中的两篇文章.\n\n## Retrofit处理数据\n\nRetrofit是在什么时候处理从网络中获取到的json数据的呢? 我从几个使用了Retrofit的项目源代码寻找了半天, 也没有找到处理json的相关代码. 后来才发现, Retrofit中使用`.addConverterFactory(GsonConverterFactory.create())`其实就是自动添加了json解析, 它会将json数据直接转换为java类(即Pojo).\n\n[convertToPojo](http://pojo.sodhanalibrary.com/)可以根据json的内容自动生成Pojo类.\n\n\n### 以豆瓣api为例\n\n#### json数据格式\n豆瓣正在热映的json数据格式大致如下:\n\n![](http://oezmbgg4j.bkt.clouddn.com/douban_json.png)\n\n```java\nDoubanService.java\n\ninterface DoubanService {\n    @GET(\"/v2/movie/in_theaters\")\n    Call<Douban> getList();\n}\n```\n\n#### pojo类\n\n```java\npublic class Douban {\n    @SerializedName(value = \"subjects\")\n    private List<Subjects> subjects;\n\n    ...Getter and Setter..\n}\n```\n\n```java\n\npublic class Subjects {\n    private String id;\n    private String title;\n    private Rating rating;\n}\n```\n\n```java\npublic class Rating {\n    private String min;\n    private String max;\n    private String stars;\n\n    ...Getter and Setter..\n}\n```\n\n#### 处理并显示数据\n\n```java\npublic class DoubanRun extends Thread {\n    @Override\n    public void run() {\n        super.run();\n        Retrofit retrofit=new Retrofit.Builder()\n                .baseUrl(\"https://api.douban.com\")\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\n        DoubanService douban=retrofit.create(DoubanService.class);\n        Call<Douban> call=douban.getList();\n\n        try {\n            Douban d=call.execute().body();\n            for (Subjects l:d.getSubjects()){\n                 Log.i(\"TAGGGG\",l.getId()+\" \"+l.getTitle());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            Log.i(\"TAGGGG\",\"ff\");\n        }\n    }\n}\n```\n\n结果\n\n```\n26630781 我不是潘金莲\n25726614 神奇动物在哪里\n25793398 海洋奇缘\n26365631 冲天火\n26596486 名侦探柯南：纯黑的恶梦\n3025375 奇异博士\n26370431 夏威夷之恋\n26673217 我是处女座\n26696875 最萌身高差\n25983044 比利·林恩的中场战事\n22266320 深海浩劫\n26876505 怨灵地下室\n25921812 驴得水\n26598021 航海王之黄\n...\n```\n\n#### 配合RxJava\n\n`DoubanService.java`改为:\n\n```java\ninterface DoubanService {\n    @GET(\"/v2/movie/in_theaters\")\n    Observable<Douban> getList();\n}\n```\n\n`DoubanRun`改为:\n\n```java\npublic class DoubanRun extends Thread {\n\n    @Override\n    public void run() {\n        super.run();\n\n        Retrofit retrofit=new Retrofit.Builder()\n                .baseUrl(\"https://api.douban.com\")\n                .addConverterFactory(GsonConverterFactory.create())\n                //\n                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n\n                .build();\n\n        DoubanService doubanService=retrofit.create(DoubanService.class);\n\n        doubanService.getList()\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(new Subscriber<Douban>() {\n                    @Override\n                    public void onCompleted() {\n\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n\n                    }\n\n                    @Override\n                    public void onNext(Douban douban) {\n                        for (Subjects l:douban.getSubjects()){\n                            Log.i(\"TAGGGG\",l.getId()+\" \"+l.getTitle());\n\n                        }\n                    }\n                });\n    }\n}\n\n```\n\n#### 注意点\n\n1. 出现`Expected BEGIN_ARRAY but was BEGIN_OBJECT at`或者pojo类中对应的变量的类型不对. 比如 如果在`Subjects`类中将rating设为String. 就会有`Expected String but was BEGIN_OBJECT at...`错误.\n\n\n\n## 参考文章\n1. [给 Android 开发者的 RxJava 详解](https://gank.io/post/560e15be2dca930e00da1083)<br>[archive.org备份页面](https://web.archive.org/web/20161023043938/http://gank.io/post/560e15be2dca930e00da1083)\n2. [RxJava 与 Retrofit 结合的最佳实践](https://gank.io/post/56e80c2c677659311bed9841)<br>[archive.org备份页面](https://web.archive.org/web/20161022232218/http://gank.io/post/56e80c2c677659311bed9841)\n","slug":"android/第三方库/2016-11-25-retrofit-rxjava","published":1,"updated":"2018-08-09T10:10:11.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf90003n28t1segmvtkk","content":"<h2 id=\"Retrofit-amp-RxJava\"><a href=\"#Retrofit-amp-RxJava\" class=\"headerlink\" title=\"Retrofit &amp; RxJava\"></a>Retrofit &amp; RxJava</h2><p>关于如何使用Retrofit和RxJava请阅读参考中的两篇文章.</p>\n<h2 id=\"Retrofit处理数据\"><a href=\"#Retrofit处理数据\" class=\"headerlink\" title=\"Retrofit处理数据\"></a>Retrofit处理数据</h2><p>Retrofit是在什么时候处理从网络中获取到的json数据的呢? 我从几个使用了Retrofit的项目源代码寻找了半天, 也没有找到处理json的相关代码. 后来才发现, Retrofit中使用<code>.addConverterFactory(GsonConverterFactory.create())</code>其实就是自动添加了json解析, 它会将json数据直接转换为java类(即Pojo).</p>\n<p><a href=\"http://pojo.sodhanalibrary.com/\" target=\"_blank\" rel=\"noopener\">convertToPojo</a>可以根据json的内容自动生成Pojo类.</p>\n<h3 id=\"以豆瓣api为例\"><a href=\"#以豆瓣api为例\" class=\"headerlink\" title=\"以豆瓣api为例\"></a>以豆瓣api为例</h3><h4 id=\"json数据格式\"><a href=\"#json数据格式\" class=\"headerlink\" title=\"json数据格式\"></a>json数据格式</h4><p>豆瓣正在热映的json数据格式大致如下:</p>\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/douban_json.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DoubanService.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoubanService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"/v2/movie/in_theaters\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Call&lt;Douban&gt; <span class=\"title\">getList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pojo类\"><a href=\"#pojo类\" class=\"headerlink\" title=\"pojo类\"></a>pojo类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Douban</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@SerializedName</span>(value = <span class=\"string\">\"subjects\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Subjects&gt; subjects;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...Getter and Setter..</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Rating rating;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rating</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String min;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String max;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String stars;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...Getter and Setter..</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"处理并显示数据\"><a href=\"#处理并显示数据\" class=\"headerlink\" title=\"处理并显示数据\"></a>处理并显示数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubanRun</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        Retrofit retrofit=<span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">                .baseUrl(<span class=\"string\">\"https://api.douban.com\"</span>)</span><br><span class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        DoubanService douban=retrofit.create(DoubanService.class);</span><br><span class=\"line\">        Call&lt;Douban&gt; call=douban.getList();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Douban d=call.execute().body();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Subjects l:d.getSubjects())&#123;</span><br><span class=\"line\">                 Log.i(<span class=\"string\">\"TAGGGG\"</span>,l.getId()+<span class=\"string\">\" \"</span>+l.getTitle());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            Log.i(<span class=\"string\">\"TAGGGG\"</span>,<span class=\"string\">\"ff\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">26630781 我不是潘金莲</span><br><span class=\"line\">25726614 神奇动物在哪里</span><br><span class=\"line\">25793398 海洋奇缘</span><br><span class=\"line\">26365631 冲天火</span><br><span class=\"line\">26596486 名侦探柯南：纯黑的恶梦</span><br><span class=\"line\">3025375 奇异博士</span><br><span class=\"line\">26370431 夏威夷之恋</span><br><span class=\"line\">26673217 我是处女座</span><br><span class=\"line\">26696875 最萌身高差</span><br><span class=\"line\">25983044 比利·林恩的中场战事</span><br><span class=\"line\">22266320 深海浩劫</span><br><span class=\"line\">26876505 怨灵地下室</span><br><span class=\"line\">25921812 驴得水</span><br><span class=\"line\">26598021 航海王之黄</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配合RxJava\"><a href=\"#配合RxJava\" class=\"headerlink\" title=\"配合RxJava\"></a>配合RxJava</h4><p><code>DoubanService.java</code>改为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoubanService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"/v2/movie/in_theaters\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Observable&lt;Douban&gt; <span class=\"title\">getList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>DoubanRun</code>改为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubanRun</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\"></span><br><span class=\"line\">        Retrofit retrofit=<span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">                .baseUrl(<span class=\"string\">\"https://api.douban.com\"</span>)</span><br><span class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">                <span class=\"comment\">//</span></span><br><span class=\"line\">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class=\"line\"></span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        DoubanService doubanService=retrofit.create(DoubanService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        doubanService.getList()</span><br><span class=\"line\">                .subscribeOn(Schedulers.io())</span><br><span class=\"line\">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Subscriber&lt;Douban&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Douban douban)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Subjects l:douban.getSubjects())&#123;</span><br><span class=\"line\">                            Log.i(<span class=\"string\">\"TAGGGG\"</span>,l.getId()+<span class=\"string\">\" \"</span>+l.getTitle());</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h4><ol>\n<li>出现<code>Expected BEGIN_ARRAY but was BEGIN_OBJECT at</code>或者pojo类中对应的变量的类型不对. 比如 如果在<code>Subjects</code>类中将rating设为String. 就会有<code>Expected String but was BEGIN_OBJECT at...</code>错误.</li>\n</ol>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ol>\n<li><a href=\"https://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener\">给 Android 开发者的 RxJava 详解</a><br><a href=\"https://web.archive.org/web/20161023043938/http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://gank.io/post/56e80c2c677659311bed9841\" target=\"_blank\" rel=\"noopener\">RxJava 与 Retrofit 结合的最佳实践</a><br><a href=\"https://web.archive.org/web/20161022232218/http://gank.io/post/56e80c2c677659311bed9841\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Retrofit-amp-RxJava\"><a href=\"#Retrofit-amp-RxJava\" class=\"headerlink\" title=\"Retrofit &amp; RxJava\"></a>Retrofit &amp; RxJava</h2><p>关于如何使用Retrofit和RxJava请阅读参考中的两篇文章.</p>\n<h2 id=\"Retrofit处理数据\"><a href=\"#Retrofit处理数据\" class=\"headerlink\" title=\"Retrofit处理数据\"></a>Retrofit处理数据</h2><p>Retrofit是在什么时候处理从网络中获取到的json数据的呢? 我从几个使用了Retrofit的项目源代码寻找了半天, 也没有找到处理json的相关代码. 后来才发现, Retrofit中使用<code>.addConverterFactory(GsonConverterFactory.create())</code>其实就是自动添加了json解析, 它会将json数据直接转换为java类(即Pojo).</p>\n<p><a href=\"http://pojo.sodhanalibrary.com/\" target=\"_blank\" rel=\"noopener\">convertToPojo</a>可以根据json的内容自动生成Pojo类.</p>\n<h3 id=\"以豆瓣api为例\"><a href=\"#以豆瓣api为例\" class=\"headerlink\" title=\"以豆瓣api为例\"></a>以豆瓣api为例</h3><h4 id=\"json数据格式\"><a href=\"#json数据格式\" class=\"headerlink\" title=\"json数据格式\"></a>json数据格式</h4><p>豆瓣正在热映的json数据格式大致如下:</p>\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/douban_json.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DoubanService.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoubanService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"/v2/movie/in_theaters\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Call&lt;Douban&gt; <span class=\"title\">getList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pojo类\"><a href=\"#pojo类\" class=\"headerlink\" title=\"pojo类\"></a>pojo类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Douban</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@SerializedName</span>(value = <span class=\"string\">\"subjects\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Subjects&gt; subjects;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...Getter and Setter..</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Rating rating;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rating</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String min;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String max;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String stars;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...Getter and Setter..</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"处理并显示数据\"><a href=\"#处理并显示数据\" class=\"headerlink\" title=\"处理并显示数据\"></a>处理并显示数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubanRun</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        Retrofit retrofit=<span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">                .baseUrl(<span class=\"string\">\"https://api.douban.com\"</span>)</span><br><span class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        DoubanService douban=retrofit.create(DoubanService.class);</span><br><span class=\"line\">        Call&lt;Douban&gt; call=douban.getList();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Douban d=call.execute().body();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Subjects l:d.getSubjects())&#123;</span><br><span class=\"line\">                 Log.i(<span class=\"string\">\"TAGGGG\"</span>,l.getId()+<span class=\"string\">\" \"</span>+l.getTitle());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            Log.i(<span class=\"string\">\"TAGGGG\"</span>,<span class=\"string\">\"ff\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">26630781 我不是潘金莲</span><br><span class=\"line\">25726614 神奇动物在哪里</span><br><span class=\"line\">25793398 海洋奇缘</span><br><span class=\"line\">26365631 冲天火</span><br><span class=\"line\">26596486 名侦探柯南：纯黑的恶梦</span><br><span class=\"line\">3025375 奇异博士</span><br><span class=\"line\">26370431 夏威夷之恋</span><br><span class=\"line\">26673217 我是处女座</span><br><span class=\"line\">26696875 最萌身高差</span><br><span class=\"line\">25983044 比利·林恩的中场战事</span><br><span class=\"line\">22266320 深海浩劫</span><br><span class=\"line\">26876505 怨灵地下室</span><br><span class=\"line\">25921812 驴得水</span><br><span class=\"line\">26598021 航海王之黄</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配合RxJava\"><a href=\"#配合RxJava\" class=\"headerlink\" title=\"配合RxJava\"></a>配合RxJava</h4><p><code>DoubanService.java</code>改为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoubanService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"/v2/movie/in_theaters\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Observable&lt;Douban&gt; <span class=\"title\">getList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>DoubanRun</code>改为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubanRun</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\"></span><br><span class=\"line\">        Retrofit retrofit=<span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">                .baseUrl(<span class=\"string\">\"https://api.douban.com\"</span>)</span><br><span class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">                <span class=\"comment\">//</span></span><br><span class=\"line\">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class=\"line\"></span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        DoubanService doubanService=retrofit.create(DoubanService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        doubanService.getList()</span><br><span class=\"line\">                .subscribeOn(Schedulers.io())</span><br><span class=\"line\">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">                .subscribe(<span class=\"keyword\">new</span> Subscriber&lt;Douban&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Douban douban)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Subjects l:douban.getSubjects())&#123;</span><br><span class=\"line\">                            Log.i(<span class=\"string\">\"TAGGGG\"</span>,l.getId()+<span class=\"string\">\" \"</span>+l.getTitle());</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h4><ol>\n<li>出现<code>Expected BEGIN_ARRAY but was BEGIN_OBJECT at</code>或者pojo类中对应的变量的类型不对. 比如 如果在<code>Subjects</code>类中将rating设为String. 就会有<code>Expected String but was BEGIN_OBJECT at...</code>错误.</li>\n</ol>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ol>\n<li><a href=\"https://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener\">给 Android 开发者的 RxJava 详解</a><br><a href=\"https://web.archive.org/web/20161023043938/http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n<li><a href=\"https://gank.io/post/56e80c2c677659311bed9841\" target=\"_blank\" rel=\"noopener\">RxJava 与 Retrofit 结合的最佳实践</a><br><a href=\"https://web.archive.org/web/20161022232218/http://gank.io/post/56e80c2c677659311bed9841\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n"},{"author":"ivyxjc","date":"2016-11-29T16:00:00.000Z","title":"Glide源码分析 二","keywords":null,"description":"Glide源码分析","_content":"\n","source":"_posts/android/第三方库/2016-12-5-Glide-source_2.md","raw":"---\nauthor: ivyxjc\ndate: 2016-11-30\ntitle: Glide源码分析 二\ntags: [android,project]\nkeywords:\ndescription: Glide源码分析\n---\n\n","slug":"android/第三方库/2016-12-5-Glide-source_2","published":1,"updated":"2018-08-09T10:10:11.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf91003q28t1kdy8l7zb","content":"","site":{"data":{}},"excerpt":"","more":""},{"author":"ivyxjc","date":"2016-10-25T16:00:00.000Z","title":"不同容器类是否线程安全","keywords":null,"description":null,"toc":true,"_content":"\n|非线程安全|线程安全|\n|---|---|\n|`ArrayList`<br> `LinkedList`|`Vector`|\n|`HashMap`|`HashTable`|\n|`StringBuilder`|`StringBuffer`|\n\n<!--more-->\n\n\n## 区别\n\n容器类线程安全, 非线程安全的区别可以用下面这个例子来表述:\n\n以`ArrayList`和`Vector`为例, 同时建立100个线程, 每个线程都向容器中添加100个元素,\n最后统计容器内元素的数量, 对于`ArrayList`来说, 最后的量并不一定是10000个, 甚至会出现`IndexOutofBoundsException`, 但是对于`Vector`来说, 最后的量一定是10000个, 且不会出现任何异常. 这便是线程安全与非线程安全的一个直观表现.\n\n### 非线程安全 != 多线程下不可使用\n\n非线程安全并不意味这不可以在多线程环境下不可使用, 上述问题出现在多个线程操作同一个`ArrayList`对象, 如果一个`ArrayList`只在一个线程下进行操作, 还是可以使用`ArrayList`的.\n\n### 如何使非线程安全容器类变得线程安全\n\n使用`List<Object> list = Collections.synchronizedList(new ArrayList<Object>());`可以使`list`变得线程安全.\n\n## 造成非线程安全的原因\n\n一般来说, 造成非线程安全主要有两个原因:\n1. 一个操作不是原子性操作\n2. 执行过程中可能被中断\n\n查看`ArrayList`关于`add(E e)`的相关源码:\n\n```java\npublic boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\nprivate void ensureCapacityInternal(int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n\n    ensureExplicitCapacity(minCapacity);\n}\n\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n### list中含有null的原因\n\n即使不发生`IndexOutofBoundsException`异常, 最后的元素总数也不全都是100000个.\n问题出现在`add(E e)`中的`elementData[size++] = e;`, 这句代码大致会分成以下两步:\n\n1. `elementData[size] = e;`\n2. `size++``\n\n如果线程A执行完第1步中断, 线程B开执行add, 执行到第1步时候因为`size`还未+1, 所以线程B仍会将e赋值给`elementData[size]`, 之后线程B执行+1操作, 线程A也执行+1操作, 也就意味着,并没有对 `elementData[size+1]`进行赋值, 其值也就为null.\n\n### 元素总量不符合预期的原因\n\n根本原因在于自加操作不是原子性的\n\n线程B可能在线程A执行`size++`中间就开始同时执行`size++`, 这可能会使得线程A,B执行之初时size值相同, 导致元素总量小于预期.\n\n### IndexOutofBoundsException产生原因\nArrayList实际上也是一个数组, 只不过可以自动扩容, 出现`IndexOutofBoundsException`说明在某些情况下, 还未扩容, 就添加元素进去了.\n\n例如,线程A开始执行`add()`, 执行到`ensureExplicitCapacity(int minCapacity)`中的条件语句时, 如果此时添加的元素总数==数组的长度-1, 那么并不会执行扩容操作. 但是如果此时, 线程A中断, 线程B开始执行, 此时由于线程A还未添加元素, 元素总数仍==数组的长度-1, 添加元素, 此时若线程A恢复, 开始执行添加元素, 由于此时元素总数==数组的长度, 再向其中添加元素就会抛出`IndexOutofBoundsException`异常.\n\n### Vector\n\n`Vector`中关于`add(E e)`的相关源码\n\n```java\npublic synchronized boolean add(E e) {\n    modCount++;\n    ensureCapacityHelper(elementCount + 1);\n    elementData[elementCount++] = e;\n    return true;\n}\n```\n","source":"_posts/java/concurrency/2016-10-26-collections-thread-safety.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-26\ntitle: 不同容器类是否线程安全\ncategory: OO\ntags: [Java, concurrency]\nkeywords:\ndescription:\ntoc: true\n---\n\n|非线程安全|线程安全|\n|---|---|\n|`ArrayList`<br> `LinkedList`|`Vector`|\n|`HashMap`|`HashTable`|\n|`StringBuilder`|`StringBuffer`|\n\n<!--more-->\n\n\n## 区别\n\n容器类线程安全, 非线程安全的区别可以用下面这个例子来表述:\n\n以`ArrayList`和`Vector`为例, 同时建立100个线程, 每个线程都向容器中添加100个元素,\n最后统计容器内元素的数量, 对于`ArrayList`来说, 最后的量并不一定是10000个, 甚至会出现`IndexOutofBoundsException`, 但是对于`Vector`来说, 最后的量一定是10000个, 且不会出现任何异常. 这便是线程安全与非线程安全的一个直观表现.\n\n### 非线程安全 != 多线程下不可使用\n\n非线程安全并不意味这不可以在多线程环境下不可使用, 上述问题出现在多个线程操作同一个`ArrayList`对象, 如果一个`ArrayList`只在一个线程下进行操作, 还是可以使用`ArrayList`的.\n\n### 如何使非线程安全容器类变得线程安全\n\n使用`List<Object> list = Collections.synchronizedList(new ArrayList<Object>());`可以使`list`变得线程安全.\n\n## 造成非线程安全的原因\n\n一般来说, 造成非线程安全主要有两个原因:\n1. 一个操作不是原子性操作\n2. 执行过程中可能被中断\n\n查看`ArrayList`关于`add(E e)`的相关源码:\n\n```java\npublic boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\nprivate void ensureCapacityInternal(int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n\n    ensureExplicitCapacity(minCapacity);\n}\n\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n### list中含有null的原因\n\n即使不发生`IndexOutofBoundsException`异常, 最后的元素总数也不全都是100000个.\n问题出现在`add(E e)`中的`elementData[size++] = e;`, 这句代码大致会分成以下两步:\n\n1. `elementData[size] = e;`\n2. `size++``\n\n如果线程A执行完第1步中断, 线程B开执行add, 执行到第1步时候因为`size`还未+1, 所以线程B仍会将e赋值给`elementData[size]`, 之后线程B执行+1操作, 线程A也执行+1操作, 也就意味着,并没有对 `elementData[size+1]`进行赋值, 其值也就为null.\n\n### 元素总量不符合预期的原因\n\n根本原因在于自加操作不是原子性的\n\n线程B可能在线程A执行`size++`中间就开始同时执行`size++`, 这可能会使得线程A,B执行之初时size值相同, 导致元素总量小于预期.\n\n### IndexOutofBoundsException产生原因\nArrayList实际上也是一个数组, 只不过可以自动扩容, 出现`IndexOutofBoundsException`说明在某些情况下, 还未扩容, 就添加元素进去了.\n\n例如,线程A开始执行`add()`, 执行到`ensureExplicitCapacity(int minCapacity)`中的条件语句时, 如果此时添加的元素总数==数组的长度-1, 那么并不会执行扩容操作. 但是如果此时, 线程A中断, 线程B开始执行, 此时由于线程A还未添加元素, 元素总数仍==数组的长度-1, 添加元素, 此时若线程A恢复, 开始执行添加元素, 由于此时元素总数==数组的长度, 再向其中添加元素就会抛出`IndexOutofBoundsException`异常.\n\n### Vector\n\n`Vector`中关于`add(E e)`的相关源码\n\n```java\npublic synchronized boolean add(E e) {\n    modCount++;\n    ensureCapacityHelper(elementCount + 1);\n    elementData[elementCount++] = e;\n    return true;\n}\n```\n","slug":"java/concurrency/2016-10-26-collections-thread-safety","published":1,"updated":"2018-08-09T10:10:11.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf93003t28t122hwn2k3","content":"<table>\n<thead>\n<tr>\n<th>非线程安全</th>\n<th>线程安全</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ArrayList</code><br> <code>LinkedList</code></td>\n<td><code>Vector</code></td>\n</tr>\n<tr>\n<td><code>HashMap</code></td>\n<td><code>HashTable</code></td>\n</tr>\n<tr>\n<td><code>StringBuilder</code></td>\n<td><code>StringBuffer</code></td>\n</tr>\n</tbody></table>\n<a id=\"more\"></a>\n\n\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>容器类线程安全, 非线程安全的区别可以用下面这个例子来表述:</p>\n<p>以<code>ArrayList</code>和<code>Vector</code>为例, 同时建立100个线程, 每个线程都向容器中添加100个元素,<br>最后统计容器内元素的数量, 对于<code>ArrayList</code>来说, 最后的量并不一定是10000个, 甚至会出现<code>IndexOutofBoundsException</code>, 但是对于<code>Vector</code>来说, 最后的量一定是10000个, 且不会出现任何异常. 这便是线程安全与非线程安全的一个直观表现.</p>\n<h3 id=\"非线程安全-多线程下不可使用\"><a href=\"#非线程安全-多线程下不可使用\" class=\"headerlink\" title=\"非线程安全 != 多线程下不可使用\"></a>非线程安全 != 多线程下不可使用</h3><p>非线程安全并不意味这不可以在多线程环境下不可使用, 上述问题出现在多个线程操作同一个<code>ArrayList</code>对象, 如果一个<code>ArrayList</code>只在一个线程下进行操作, 还是可以使用<code>ArrayList</code>的.</p>\n<h3 id=\"如何使非线程安全容器类变得线程安全\"><a href=\"#如何使非线程安全容器类变得线程安全\" class=\"headerlink\" title=\"如何使非线程安全容器类变得线程安全\"></a>如何使非线程安全容器类变得线程安全</h3><p>使用<code>List&lt;Object&gt; list = Collections.synchronizedList(new ArrayList&lt;Object&gt;());</code>可以使<code>list</code>变得线程安全.</p>\n<h2 id=\"造成非线程安全的原因\"><a href=\"#造成非线程安全的原因\" class=\"headerlink\" title=\"造成非线程安全的原因\"></a>造成非线程安全的原因</h2><p>一般来说, 造成非线程安全主要有两个原因:</p>\n<ol>\n<li>一个操作不是原子性操作</li>\n<li>执行过程中可能被中断</li>\n</ol>\n<p>查看<code>ArrayList</code>关于<code>add(E e)</code>的相关源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"list中含有null的原因\"><a href=\"#list中含有null的原因\" class=\"headerlink\" title=\"list中含有null的原因\"></a>list中含有null的原因</h3><p>即使不发生<code>IndexOutofBoundsException</code>异常, 最后的元素总数也不全都是100000个.<br>问题出现在<code>add(E e)</code>中的<code>elementData[size++] = e;</code>, 这句代码大致会分成以下两步:</p>\n<ol>\n<li><code>elementData[size] = e;</code></li>\n<li>`size++``</li>\n</ol>\n<p>如果线程A执行完第1步中断, 线程B开执行add, 执行到第1步时候因为<code>size</code>还未+1, 所以线程B仍会将e赋值给<code>elementData[size]</code>, 之后线程B执行+1操作, 线程A也执行+1操作, 也就意味着,并没有对 <code>elementData[size+1]</code>进行赋值, 其值也就为null.</p>\n<h3 id=\"元素总量不符合预期的原因\"><a href=\"#元素总量不符合预期的原因\" class=\"headerlink\" title=\"元素总量不符合预期的原因\"></a>元素总量不符合预期的原因</h3><p>根本原因在于自加操作不是原子性的</p>\n<p>线程B可能在线程A执行<code>size++</code>中间就开始同时执行<code>size++</code>, 这可能会使得线程A,B执行之初时size值相同, 导致元素总量小于预期.</p>\n<h3 id=\"IndexOutofBoundsException产生原因\"><a href=\"#IndexOutofBoundsException产生原因\" class=\"headerlink\" title=\"IndexOutofBoundsException产生原因\"></a>IndexOutofBoundsException产生原因</h3><p>ArrayList实际上也是一个数组, 只不过可以自动扩容, 出现<code>IndexOutofBoundsException</code>说明在某些情况下, 还未扩容, 就添加元素进去了.</p>\n<p>例如,线程A开始执行<code>add()</code>, 执行到<code>ensureExplicitCapacity(int minCapacity)</code>中的条件语句时, 如果此时添加的元素总数==数组的长度-1, 那么并不会执行扩容操作. 但是如果此时, 线程A中断, 线程B开始执行, 此时由于线程A还未添加元素, 元素总数仍==数组的长度-1, 添加元素, 此时若线程A恢复, 开始执行添加元素, 由于此时元素总数==数组的长度, 再向其中添加元素就会抛出<code>IndexOutofBoundsException</code>异常.</p>\n<h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p><code>Vector</code>中关于<code>add(E e)</code>的相关源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    ensureCapacityHelper(elementCount + <span class=\"number\">1</span>);</span><br><span class=\"line\">    elementData[elementCount++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<table>\n<thead>\n<tr>\n<th>非线程安全</th>\n<th>线程安全</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ArrayList</code><br> <code>LinkedList</code></td>\n<td><code>Vector</code></td>\n</tr>\n<tr>\n<td><code>HashMap</code></td>\n<td><code>HashTable</code></td>\n</tr>\n<tr>\n<td><code>StringBuilder</code></td>\n<td><code>StringBuffer</code></td>\n</tr>\n</tbody></table>","more":"<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>容器类线程安全, 非线程安全的区别可以用下面这个例子来表述:</p>\n<p>以<code>ArrayList</code>和<code>Vector</code>为例, 同时建立100个线程, 每个线程都向容器中添加100个元素,<br>最后统计容器内元素的数量, 对于<code>ArrayList</code>来说, 最后的量并不一定是10000个, 甚至会出现<code>IndexOutofBoundsException</code>, 但是对于<code>Vector</code>来说, 最后的量一定是10000个, 且不会出现任何异常. 这便是线程安全与非线程安全的一个直观表现.</p>\n<h3 id=\"非线程安全-多线程下不可使用\"><a href=\"#非线程安全-多线程下不可使用\" class=\"headerlink\" title=\"非线程安全 != 多线程下不可使用\"></a>非线程安全 != 多线程下不可使用</h3><p>非线程安全并不意味这不可以在多线程环境下不可使用, 上述问题出现在多个线程操作同一个<code>ArrayList</code>对象, 如果一个<code>ArrayList</code>只在一个线程下进行操作, 还是可以使用<code>ArrayList</code>的.</p>\n<h3 id=\"如何使非线程安全容器类变得线程安全\"><a href=\"#如何使非线程安全容器类变得线程安全\" class=\"headerlink\" title=\"如何使非线程安全容器类变得线程安全\"></a>如何使非线程安全容器类变得线程安全</h3><p>使用<code>List&lt;Object&gt; list = Collections.synchronizedList(new ArrayList&lt;Object&gt;());</code>可以使<code>list</code>变得线程安全.</p>\n<h2 id=\"造成非线程安全的原因\"><a href=\"#造成非线程安全的原因\" class=\"headerlink\" title=\"造成非线程安全的原因\"></a>造成非线程安全的原因</h2><p>一般来说, 造成非线程安全主要有两个原因:</p>\n<ol>\n<li>一个操作不是原子性操作</li>\n<li>执行过程中可能被中断</li>\n</ol>\n<p>查看<code>ArrayList</code>关于<code>add(E e)</code>的相关源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"list中含有null的原因\"><a href=\"#list中含有null的原因\" class=\"headerlink\" title=\"list中含有null的原因\"></a>list中含有null的原因</h3><p>即使不发生<code>IndexOutofBoundsException</code>异常, 最后的元素总数也不全都是100000个.<br>问题出现在<code>add(E e)</code>中的<code>elementData[size++] = e;</code>, 这句代码大致会分成以下两步:</p>\n<ol>\n<li><code>elementData[size] = e;</code></li>\n<li>`size++``</li>\n</ol>\n<p>如果线程A执行完第1步中断, 线程B开执行add, 执行到第1步时候因为<code>size</code>还未+1, 所以线程B仍会将e赋值给<code>elementData[size]</code>, 之后线程B执行+1操作, 线程A也执行+1操作, 也就意味着,并没有对 <code>elementData[size+1]</code>进行赋值, 其值也就为null.</p>\n<h3 id=\"元素总量不符合预期的原因\"><a href=\"#元素总量不符合预期的原因\" class=\"headerlink\" title=\"元素总量不符合预期的原因\"></a>元素总量不符合预期的原因</h3><p>根本原因在于自加操作不是原子性的</p>\n<p>线程B可能在线程A执行<code>size++</code>中间就开始同时执行<code>size++</code>, 这可能会使得线程A,B执行之初时size值相同, 导致元素总量小于预期.</p>\n<h3 id=\"IndexOutofBoundsException产生原因\"><a href=\"#IndexOutofBoundsException产生原因\" class=\"headerlink\" title=\"IndexOutofBoundsException产生原因\"></a>IndexOutofBoundsException产生原因</h3><p>ArrayList实际上也是一个数组, 只不过可以自动扩容, 出现<code>IndexOutofBoundsException</code>说明在某些情况下, 还未扩容, 就添加元素进去了.</p>\n<p>例如,线程A开始执行<code>add()</code>, 执行到<code>ensureExplicitCapacity(int minCapacity)</code>中的条件语句时, 如果此时添加的元素总数==数组的长度-1, 那么并不会执行扩容操作. 但是如果此时, 线程A中断, 线程B开始执行, 此时由于线程A还未添加元素, 元素总数仍==数组的长度-1, 添加元素, 此时若线程A恢复, 开始执行添加元素, 由于此时元素总数==数组的长度, 再向其中添加元素就会抛出<code>IndexOutofBoundsException</code>异常.</p>\n<h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p><code>Vector</code>中关于<code>add(E e)</code>的相关源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    ensureCapacityHelper(elementCount + <span class=\"number\">1</span>);</span><br><span class=\"line\">    elementData[elementCount++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Disruptor源码分析（一） 简介","keywords":"concurrent","description":null,"_content":"\nDisruptor 是由LMAX Exchange推出的高性能定长无锁队列。它不仅提供了一个队列的实现，且为整个生产者，消费者模式提供了周边的支持。\n\n<!-- more -->\n- [简介](#%E7%AE%80%E4%BB%8B)\n- [几个概念](#%E5%87%A0%E4%B8%AA%E6%A6%82%E5%BF%B5)\n  - [RingBuffer](#RingBuffer)\n  - [Sequence](#Sequence)\n  - [Sequencer](#Sequencer)\n  - [SequenceBarrier](#SequenceBarrier)\n- [图片解释](#%E5%9B%BE%E7%89%87%E8%A7%A3%E9%87%8A)\n- [相关的文章](#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0)\n  - [伪共享](#%E4%BC%AA%E5%85%B1%E4%BA%AB)\n  - [锁的缺点](#%E9%94%81%E7%9A%84%E7%BC%BA%E7%82%B9)\n  - [内存屏障](#%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C)\n\n## 简介\nDisruptor使用环形数组来作为数据容器。利用SequenceBarrier来作为消费者的读屏障，利用消费的sequence作为生产者的写屏障。\n\n大量的文章都是直接开始分析代码，这样的方式有一个问题：由于生产者和消费者以及数据容器之间有一定交互，单独从一部分分析代码都会使初学者有所困扰。所以本文先介绍Disruptor的几个概念以及Disruptor的总体设计，之后的几篇文章再分析具体的代码。\n\n## 几个概念\n由于Disruptor为了性能对数组及其它一些类都有填充，这些填充只是基于性能考虑，对代码逻辑没有什么影响。下面所说的数组长度等都不包括填充部分。\n\n### RingBuffer\n`RingBuffer`是Disruptor的核心，是其存储数据的地方，本质是一个环形数组，其数组长度是`bufferSize`。环形数组只是一种形象的说明，它仍然是一个普通的Java数组。之所以称其为环形数组是因为Disruptor利用下面介绍的`Sequence`来作为下标，`Sequence`的值是不断地增加的，只要与数组的size取模即可计算出真实的数组下标（Disruptor并不会取模），看起来就像是一个下标可以无限增长的定长数组。\n\n上面说到Disruptor并不会取模，这是因为Disruptor对数组的长度有一个规定，必须是2的幂，这样可以用`index&(bufferSize-1)`来进行下标计算而不是用取模来计算下边。这是因为位操作的速度要远快于取模速度。\n\nRingBuffer在初始化的时候会将数组内的每个位置用开发人员自定义的`EventFactory`将其填满。同时会生成另外一个与存储数据大小相同的标志位数组。用来标记该位是否可以消费，但是并不是我们常见的`boolean`型标记位。原因很简单，因为如果使用`boolean`来标记该位是否可以消费，当生产者生产了个数为`bufferSize`的数据之后，标志位就全都是`true`，之后就起不到标志位的作用。Disruptor是将当前的`sequence`的值写入其中，之后通过巧妙的计算来得出该位是否可以写入。\n\n### Sequence\n\n`Sequence`和`java.util.concurrent`中的`AtomicLong`功能是类似的。只不过做了一些填充。左右各填充8个Long（仅为性能考量，与代码逻辑无关）。\n\n### Sequencer\n\n由于Disruptor使用`Sequence`来作为数组的下标的来源，所以对数组的操作（例如将数据插入数组，覆盖数据）实质上都是对`Sequence`的操作。\n\nDisruptor对于`Sequence`的使用也提供了一个专门的接口即`Sequencer`。`Sequencer`又继承了两个接口：`Sequenced`和`Cursored`。`Sequenced`接口主要是提供给生产者使用的。`Sequencer`接口本身填充了一些方法主要是为了生成一个`SequenceBarrier`.\n。它有两个实现：`SingleProducerSequencer`和`MultiProducerSequencer`。\n\n生产者生产实质上是调用其中的两个方法 1. `next(int n)` 2. `publish(long index)`\n\n第1步是申请当前位置的之后的n个位置，成功的条件是不能覆盖最慢的消费者，即currentSequence+n所在的位置必须已经被最慢的消费者消费才可以成功。否则就使用`LockSupport.parkNanos(1);`等待再重试。\n\n第二步是在将利用`EventTranslator`将生产的数据填充到数组之后，将标志位数组对应的位置`setAvailable`\n\n\n### SequenceBarrier\n\n`SequencerBarrier`可以视作消费者的读屏障，它确保了消费者不会消费还未生产的数据，即消费者的下标不会越过生产者的下标。\n\n## 图片解释\n\n直接用文字解释起来相对比较抽象，我画了一张图来解释。\n\n![Disruptor](https://1drv.ms/u/s!Ag0m8cr29utVgZ0FuGIe9ej6N2292Q)\n\n## 相关的文章\n\nDisruptor是要追求比较高的性能的，所以它在很多细节处都有不一样的设计。下面是几篇关于Disruptor的文章。\n\n### 伪共享\n\n很多时候在代码层面并不存在共享的问题，但是因为硬件系统的一些设计会出现一些意想不到的共享问题，即伪共享。伪共享对性能也有一定的影响。\n\n可以阅读下面的文章了解\n\n[伪共享（false sharing），并发编程无声的性能杀手](https://www.cnblogs.com/cyfonly/p/5800758.html)\n\n### 锁的缺点\n\nDisruptor是一个无锁队列。不使用锁当然是因为使用锁有一定的缺点。\n\n可以阅读下面的文章了解\n\n[Dissecting the Disruptor: Why it's so fast (part one) - Locks Are Bad](http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html)\n\n对应的中文译文\n[剖析Disruptor:为什么会这么快？(一)锁的缺点](http://ifeve.com/locks-are-bad/)\n\n\n### 内存屏障\n\nJava中的`volatile`关键词提供了关于内存屏障的支持。它会在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令。使用`volatile`的消耗是小于锁的，但是仍然有一定的性能损耗。\n\n可以阅读下面的文章了解\n\n[Dissecting the Disruptor: Demystifying Memory Barriers](http://mechanitis.blogspot.com/2011/08/dissecting-disruptor-why-its-so-fast.html)\n对应的中文译文\n[剖析Disruptor:为什么会这么快？(三)揭秘内存屏障](http://ifeve.com/disruptor-memory-barrier/)","source":"_posts/java/disruptor/2019-06-30-disruptor-introduction.md","raw":"---\nlayout: post\ntitle: Disruptor源码分析（一） 简介\ncategory: Java\ntags: [Java]\nkeywords: concurrent\ndescription:\n---\n\nDisruptor 是由LMAX Exchange推出的高性能定长无锁队列。它不仅提供了一个队列的实现，且为整个生产者，消费者模式提供了周边的支持。\n\n<!-- more -->\n- [简介](#%E7%AE%80%E4%BB%8B)\n- [几个概念](#%E5%87%A0%E4%B8%AA%E6%A6%82%E5%BF%B5)\n  - [RingBuffer](#RingBuffer)\n  - [Sequence](#Sequence)\n  - [Sequencer](#Sequencer)\n  - [SequenceBarrier](#SequenceBarrier)\n- [图片解释](#%E5%9B%BE%E7%89%87%E8%A7%A3%E9%87%8A)\n- [相关的文章](#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0)\n  - [伪共享](#%E4%BC%AA%E5%85%B1%E4%BA%AB)\n  - [锁的缺点](#%E9%94%81%E7%9A%84%E7%BC%BA%E7%82%B9)\n  - [内存屏障](#%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C)\n\n## 简介\nDisruptor使用环形数组来作为数据容器。利用SequenceBarrier来作为消费者的读屏障，利用消费的sequence作为生产者的写屏障。\n\n大量的文章都是直接开始分析代码，这样的方式有一个问题：由于生产者和消费者以及数据容器之间有一定交互，单独从一部分分析代码都会使初学者有所困扰。所以本文先介绍Disruptor的几个概念以及Disruptor的总体设计，之后的几篇文章再分析具体的代码。\n\n## 几个概念\n由于Disruptor为了性能对数组及其它一些类都有填充，这些填充只是基于性能考虑，对代码逻辑没有什么影响。下面所说的数组长度等都不包括填充部分。\n\n### RingBuffer\n`RingBuffer`是Disruptor的核心，是其存储数据的地方，本质是一个环形数组，其数组长度是`bufferSize`。环形数组只是一种形象的说明，它仍然是一个普通的Java数组。之所以称其为环形数组是因为Disruptor利用下面介绍的`Sequence`来作为下标，`Sequence`的值是不断地增加的，只要与数组的size取模即可计算出真实的数组下标（Disruptor并不会取模），看起来就像是一个下标可以无限增长的定长数组。\n\n上面说到Disruptor并不会取模，这是因为Disruptor对数组的长度有一个规定，必须是2的幂，这样可以用`index&(bufferSize-1)`来进行下标计算而不是用取模来计算下边。这是因为位操作的速度要远快于取模速度。\n\nRingBuffer在初始化的时候会将数组内的每个位置用开发人员自定义的`EventFactory`将其填满。同时会生成另外一个与存储数据大小相同的标志位数组。用来标记该位是否可以消费，但是并不是我们常见的`boolean`型标记位。原因很简单，因为如果使用`boolean`来标记该位是否可以消费，当生产者生产了个数为`bufferSize`的数据之后，标志位就全都是`true`，之后就起不到标志位的作用。Disruptor是将当前的`sequence`的值写入其中，之后通过巧妙的计算来得出该位是否可以写入。\n\n### Sequence\n\n`Sequence`和`java.util.concurrent`中的`AtomicLong`功能是类似的。只不过做了一些填充。左右各填充8个Long（仅为性能考量，与代码逻辑无关）。\n\n### Sequencer\n\n由于Disruptor使用`Sequence`来作为数组的下标的来源，所以对数组的操作（例如将数据插入数组，覆盖数据）实质上都是对`Sequence`的操作。\n\nDisruptor对于`Sequence`的使用也提供了一个专门的接口即`Sequencer`。`Sequencer`又继承了两个接口：`Sequenced`和`Cursored`。`Sequenced`接口主要是提供给生产者使用的。`Sequencer`接口本身填充了一些方法主要是为了生成一个`SequenceBarrier`.\n。它有两个实现：`SingleProducerSequencer`和`MultiProducerSequencer`。\n\n生产者生产实质上是调用其中的两个方法 1. `next(int n)` 2. `publish(long index)`\n\n第1步是申请当前位置的之后的n个位置，成功的条件是不能覆盖最慢的消费者，即currentSequence+n所在的位置必须已经被最慢的消费者消费才可以成功。否则就使用`LockSupport.parkNanos(1);`等待再重试。\n\n第二步是在将利用`EventTranslator`将生产的数据填充到数组之后，将标志位数组对应的位置`setAvailable`\n\n\n### SequenceBarrier\n\n`SequencerBarrier`可以视作消费者的读屏障，它确保了消费者不会消费还未生产的数据，即消费者的下标不会越过生产者的下标。\n\n## 图片解释\n\n直接用文字解释起来相对比较抽象，我画了一张图来解释。\n\n![Disruptor](https://1drv.ms/u/s!Ag0m8cr29utVgZ0FuGIe9ej6N2292Q)\n\n## 相关的文章\n\nDisruptor是要追求比较高的性能的，所以它在很多细节处都有不一样的设计。下面是几篇关于Disruptor的文章。\n\n### 伪共享\n\n很多时候在代码层面并不存在共享的问题，但是因为硬件系统的一些设计会出现一些意想不到的共享问题，即伪共享。伪共享对性能也有一定的影响。\n\n可以阅读下面的文章了解\n\n[伪共享（false sharing），并发编程无声的性能杀手](https://www.cnblogs.com/cyfonly/p/5800758.html)\n\n### 锁的缺点\n\nDisruptor是一个无锁队列。不使用锁当然是因为使用锁有一定的缺点。\n\n可以阅读下面的文章了解\n\n[Dissecting the Disruptor: Why it's so fast (part one) - Locks Are Bad](http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html)\n\n对应的中文译文\n[剖析Disruptor:为什么会这么快？(一)锁的缺点](http://ifeve.com/locks-are-bad/)\n\n\n### 内存屏障\n\nJava中的`volatile`关键词提供了关于内存屏障的支持。它会在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令。使用`volatile`的消耗是小于锁的，但是仍然有一定的性能损耗。\n\n可以阅读下面的文章了解\n\n[Dissecting the Disruptor: Demystifying Memory Barriers](http://mechanitis.blogspot.com/2011/08/dissecting-disruptor-why-its-so-fast.html)\n对应的中文译文\n[剖析Disruptor:为什么会这么快？(三)揭秘内存屏障](http://ifeve.com/disruptor-memory-barrier/)","slug":"java/disruptor/2019-06-30-disruptor-introduction","published":1,"date":"2019-08-09T15:43:23.996Z","updated":"2019-07-14T11:45:54.849Z","comments":1,"photos":[],"link":"","_id":"ck0mglf94003w28t154fw8y67","content":"<p>Disruptor 是由LMAX Exchange推出的高性能定长无锁队列。它不仅提供了一个队列的实现，且为整个生产者，消费者模式提供了周边的支持。</p>\n<a id=\"more\"></a>\n<ul>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a></li>\n<li><a href=\"#%E5%87%A0%E4%B8%AA%E6%A6%82%E5%BF%B5\">几个概念</a><ul>\n<li><a href=\"#RingBuffer\">RingBuffer</a></li>\n<li><a href=\"#Sequence\">Sequence</a></li>\n<li><a href=\"#Sequencer\">Sequencer</a></li>\n<li><a href=\"#SequenceBarrier\">SequenceBarrier</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%9B%BE%E7%89%87%E8%A7%A3%E9%87%8A\">图片解释</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0\">相关的文章</a><ul>\n<li><a href=\"#%E4%BC%AA%E5%85%B1%E4%BA%AB\">伪共享</a></li>\n<li><a href=\"#%E9%94%81%E7%9A%84%E7%BC%BA%E7%82%B9\">锁的缺点</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C\">内存屏障</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Disruptor使用环形数组来作为数据容器。利用SequenceBarrier来作为消费者的读屏障，利用消费的sequence作为生产者的写屏障。</p>\n<p>大量的文章都是直接开始分析代码，这样的方式有一个问题：由于生产者和消费者以及数据容器之间有一定交互，单独从一部分分析代码都会使初学者有所困扰。所以本文先介绍Disruptor的几个概念以及Disruptor的总体设计，之后的几篇文章再分析具体的代码。</p>\n<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><p>由于Disruptor为了性能对数组及其它一些类都有填充，这些填充只是基于性能考虑，对代码逻辑没有什么影响。下面所说的数组长度等都不包括填充部分。</p>\n<h3 id=\"RingBuffer\"><a href=\"#RingBuffer\" class=\"headerlink\" title=\"RingBuffer\"></a>RingBuffer</h3><p><code>RingBuffer</code>是Disruptor的核心，是其存储数据的地方，本质是一个环形数组，其数组长度是<code>bufferSize</code>。环形数组只是一种形象的说明，它仍然是一个普通的Java数组。之所以称其为环形数组是因为Disruptor利用下面介绍的<code>Sequence</code>来作为下标，<code>Sequence</code>的值是不断地增加的，只要与数组的size取模即可计算出真实的数组下标（Disruptor并不会取模），看起来就像是一个下标可以无限增长的定长数组。</p>\n<p>上面说到Disruptor并不会取模，这是因为Disruptor对数组的长度有一个规定，必须是2的幂，这样可以用<code>index&amp;(bufferSize-1)</code>来进行下标计算而不是用取模来计算下边。这是因为位操作的速度要远快于取模速度。</p>\n<p>RingBuffer在初始化的时候会将数组内的每个位置用开发人员自定义的<code>EventFactory</code>将其填满。同时会生成另外一个与存储数据大小相同的标志位数组。用来标记该位是否可以消费，但是并不是我们常见的<code>boolean</code>型标记位。原因很简单，因为如果使用<code>boolean</code>来标记该位是否可以消费，当生产者生产了个数为<code>bufferSize</code>的数据之后，标志位就全都是<code>true</code>，之后就起不到标志位的作用。Disruptor是将当前的<code>sequence</code>的值写入其中，之后通过巧妙的计算来得出该位是否可以写入。</p>\n<h3 id=\"Sequence\"><a href=\"#Sequence\" class=\"headerlink\" title=\"Sequence\"></a>Sequence</h3><p><code>Sequence</code>和<code>java.util.concurrent</code>中的<code>AtomicLong</code>功能是类似的。只不过做了一些填充。左右各填充8个Long（仅为性能考量，与代码逻辑无关）。</p>\n<h3 id=\"Sequencer\"><a href=\"#Sequencer\" class=\"headerlink\" title=\"Sequencer\"></a>Sequencer</h3><p>由于Disruptor使用<code>Sequence</code>来作为数组的下标的来源，所以对数组的操作（例如将数据插入数组，覆盖数据）实质上都是对<code>Sequence</code>的操作。</p>\n<p>Disruptor对于<code>Sequence</code>的使用也提供了一个专门的接口即<code>Sequencer</code>。<code>Sequencer</code>又继承了两个接口：<code>Sequenced</code>和<code>Cursored</code>。<code>Sequenced</code>接口主要是提供给生产者使用的。<code>Sequencer</code>接口本身填充了一些方法主要是为了生成一个<code>SequenceBarrier</code>.<br>。它有两个实现：<code>SingleProducerSequencer</code>和<code>MultiProducerSequencer</code>。</p>\n<p>生产者生产实质上是调用其中的两个方法 1. <code>next(int n)</code> 2. <code>publish(long index)</code></p>\n<p>第1步是申请当前位置的之后的n个位置，成功的条件是不能覆盖最慢的消费者，即currentSequence+n所在的位置必须已经被最慢的消费者消费才可以成功。否则就使用<code>LockSupport.parkNanos(1);</code>等待再重试。</p>\n<p>第二步是在将利用<code>EventTranslator</code>将生产的数据填充到数组之后，将标志位数组对应的位置<code>setAvailable</code></p>\n<h3 id=\"SequenceBarrier\"><a href=\"#SequenceBarrier\" class=\"headerlink\" title=\"SequenceBarrier\"></a>SequenceBarrier</h3><p><code>SequencerBarrier</code>可以视作消费者的读屏障，它确保了消费者不会消费还未生产的数据，即消费者的下标不会越过生产者的下标。</p>\n<h2 id=\"图片解释\"><a href=\"#图片解释\" class=\"headerlink\" title=\"图片解释\"></a>图片解释</h2><p>直接用文字解释起来相对比较抽象，我画了一张图来解释。</p>\n<p><img src=\"https://1drv.ms/u/s!Ag0m8cr29utVgZ0FuGIe9ej6N2292Q\" alt=\"Disruptor\"></p>\n<h2 id=\"相关的文章\"><a href=\"#相关的文章\" class=\"headerlink\" title=\"相关的文章\"></a>相关的文章</h2><p>Disruptor是要追求比较高的性能的，所以它在很多细节处都有不一样的设计。下面是几篇关于Disruptor的文章。</p>\n<h3 id=\"伪共享\"><a href=\"#伪共享\" class=\"headerlink\" title=\"伪共享\"></a>伪共享</h3><p>很多时候在代码层面并不存在共享的问题，但是因为硬件系统的一些设计会出现一些意想不到的共享问题，即伪共享。伪共享对性能也有一定的影响。</p>\n<p>可以阅读下面的文章了解</p>\n<p><a href=\"https://www.cnblogs.com/cyfonly/p/5800758.html\" target=\"_blank\" rel=\"noopener\">伪共享（false sharing），并发编程无声的性能杀手</a></p>\n<h3 id=\"锁的缺点\"><a href=\"#锁的缺点\" class=\"headerlink\" title=\"锁的缺点\"></a>锁的缺点</h3><p>Disruptor是一个无锁队列。不使用锁当然是因为使用锁有一定的缺点。</p>\n<p>可以阅读下面的文章了解</p>\n<p><a href=\"http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html\" target=\"_blank\" rel=\"noopener\">Dissecting the Disruptor: Why it’s so fast (part one) - Locks Are Bad</a></p>\n<p>对应的中文译文<br><a href=\"http://ifeve.com/locks-are-bad/\" target=\"_blank\" rel=\"noopener\">剖析Disruptor:为什么会这么快？(一)锁的缺点</a></p>\n<h3 id=\"内存屏障\"><a href=\"#内存屏障\" class=\"headerlink\" title=\"内存屏障\"></a>内存屏障</h3><p>Java中的<code>volatile</code>关键词提供了关于内存屏障的支持。它会在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令。使用<code>volatile</code>的消耗是小于锁的，但是仍然有一定的性能损耗。</p>\n<p>可以阅读下面的文章了解</p>\n<p><a href=\"http://mechanitis.blogspot.com/2011/08/dissecting-disruptor-why-its-so-fast.html\" target=\"_blank\" rel=\"noopener\">Dissecting the Disruptor: Demystifying Memory Barriers</a><br>对应的中文译文<br><a href=\"http://ifeve.com/disruptor-memory-barrier/\" target=\"_blank\" rel=\"noopener\">剖析Disruptor:为什么会这么快？(三)揭秘内存屏障</a></p>\n","site":{"data":{}},"excerpt":"<p>Disruptor 是由LMAX Exchange推出的高性能定长无锁队列。它不仅提供了一个队列的实现，且为整个生产者，消费者模式提供了周边的支持。</p>","more":"<ul>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a></li>\n<li><a href=\"#%E5%87%A0%E4%B8%AA%E6%A6%82%E5%BF%B5\">几个概念</a><ul>\n<li><a href=\"#RingBuffer\">RingBuffer</a></li>\n<li><a href=\"#Sequence\">Sequence</a></li>\n<li><a href=\"#Sequencer\">Sequencer</a></li>\n<li><a href=\"#SequenceBarrier\">SequenceBarrier</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%9B%BE%E7%89%87%E8%A7%A3%E9%87%8A\">图片解释</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0\">相关的文章</a><ul>\n<li><a href=\"#%E4%BC%AA%E5%85%B1%E4%BA%AB\">伪共享</a></li>\n<li><a href=\"#%E9%94%81%E7%9A%84%E7%BC%BA%E7%82%B9\">锁的缺点</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C\">内存屏障</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Disruptor使用环形数组来作为数据容器。利用SequenceBarrier来作为消费者的读屏障，利用消费的sequence作为生产者的写屏障。</p>\n<p>大量的文章都是直接开始分析代码，这样的方式有一个问题：由于生产者和消费者以及数据容器之间有一定交互，单独从一部分分析代码都会使初学者有所困扰。所以本文先介绍Disruptor的几个概念以及Disruptor的总体设计，之后的几篇文章再分析具体的代码。</p>\n<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><p>由于Disruptor为了性能对数组及其它一些类都有填充，这些填充只是基于性能考虑，对代码逻辑没有什么影响。下面所说的数组长度等都不包括填充部分。</p>\n<h3 id=\"RingBuffer\"><a href=\"#RingBuffer\" class=\"headerlink\" title=\"RingBuffer\"></a>RingBuffer</h3><p><code>RingBuffer</code>是Disruptor的核心，是其存储数据的地方，本质是一个环形数组，其数组长度是<code>bufferSize</code>。环形数组只是一种形象的说明，它仍然是一个普通的Java数组。之所以称其为环形数组是因为Disruptor利用下面介绍的<code>Sequence</code>来作为下标，<code>Sequence</code>的值是不断地增加的，只要与数组的size取模即可计算出真实的数组下标（Disruptor并不会取模），看起来就像是一个下标可以无限增长的定长数组。</p>\n<p>上面说到Disruptor并不会取模，这是因为Disruptor对数组的长度有一个规定，必须是2的幂，这样可以用<code>index&amp;(bufferSize-1)</code>来进行下标计算而不是用取模来计算下边。这是因为位操作的速度要远快于取模速度。</p>\n<p>RingBuffer在初始化的时候会将数组内的每个位置用开发人员自定义的<code>EventFactory</code>将其填满。同时会生成另外一个与存储数据大小相同的标志位数组。用来标记该位是否可以消费，但是并不是我们常见的<code>boolean</code>型标记位。原因很简单，因为如果使用<code>boolean</code>来标记该位是否可以消费，当生产者生产了个数为<code>bufferSize</code>的数据之后，标志位就全都是<code>true</code>，之后就起不到标志位的作用。Disruptor是将当前的<code>sequence</code>的值写入其中，之后通过巧妙的计算来得出该位是否可以写入。</p>\n<h3 id=\"Sequence\"><a href=\"#Sequence\" class=\"headerlink\" title=\"Sequence\"></a>Sequence</h3><p><code>Sequence</code>和<code>java.util.concurrent</code>中的<code>AtomicLong</code>功能是类似的。只不过做了一些填充。左右各填充8个Long（仅为性能考量，与代码逻辑无关）。</p>\n<h3 id=\"Sequencer\"><a href=\"#Sequencer\" class=\"headerlink\" title=\"Sequencer\"></a>Sequencer</h3><p>由于Disruptor使用<code>Sequence</code>来作为数组的下标的来源，所以对数组的操作（例如将数据插入数组，覆盖数据）实质上都是对<code>Sequence</code>的操作。</p>\n<p>Disruptor对于<code>Sequence</code>的使用也提供了一个专门的接口即<code>Sequencer</code>。<code>Sequencer</code>又继承了两个接口：<code>Sequenced</code>和<code>Cursored</code>。<code>Sequenced</code>接口主要是提供给生产者使用的。<code>Sequencer</code>接口本身填充了一些方法主要是为了生成一个<code>SequenceBarrier</code>.<br>。它有两个实现：<code>SingleProducerSequencer</code>和<code>MultiProducerSequencer</code>。</p>\n<p>生产者生产实质上是调用其中的两个方法 1. <code>next(int n)</code> 2. <code>publish(long index)</code></p>\n<p>第1步是申请当前位置的之后的n个位置，成功的条件是不能覆盖最慢的消费者，即currentSequence+n所在的位置必须已经被最慢的消费者消费才可以成功。否则就使用<code>LockSupport.parkNanos(1);</code>等待再重试。</p>\n<p>第二步是在将利用<code>EventTranslator</code>将生产的数据填充到数组之后，将标志位数组对应的位置<code>setAvailable</code></p>\n<h3 id=\"SequenceBarrier\"><a href=\"#SequenceBarrier\" class=\"headerlink\" title=\"SequenceBarrier\"></a>SequenceBarrier</h3><p><code>SequencerBarrier</code>可以视作消费者的读屏障，它确保了消费者不会消费还未生产的数据，即消费者的下标不会越过生产者的下标。</p>\n<h2 id=\"图片解释\"><a href=\"#图片解释\" class=\"headerlink\" title=\"图片解释\"></a>图片解释</h2><p>直接用文字解释起来相对比较抽象，我画了一张图来解释。</p>\n<p><img src=\"https://1drv.ms/u/s!Ag0m8cr29utVgZ0FuGIe9ej6N2292Q\" alt=\"Disruptor\"></p>\n<h2 id=\"相关的文章\"><a href=\"#相关的文章\" class=\"headerlink\" title=\"相关的文章\"></a>相关的文章</h2><p>Disruptor是要追求比较高的性能的，所以它在很多细节处都有不一样的设计。下面是几篇关于Disruptor的文章。</p>\n<h3 id=\"伪共享\"><a href=\"#伪共享\" class=\"headerlink\" title=\"伪共享\"></a>伪共享</h3><p>很多时候在代码层面并不存在共享的问题，但是因为硬件系统的一些设计会出现一些意想不到的共享问题，即伪共享。伪共享对性能也有一定的影响。</p>\n<p>可以阅读下面的文章了解</p>\n<p><a href=\"https://www.cnblogs.com/cyfonly/p/5800758.html\" target=\"_blank\" rel=\"noopener\">伪共享（false sharing），并发编程无声的性能杀手</a></p>\n<h3 id=\"锁的缺点\"><a href=\"#锁的缺点\" class=\"headerlink\" title=\"锁的缺点\"></a>锁的缺点</h3><p>Disruptor是一个无锁队列。不使用锁当然是因为使用锁有一定的缺点。</p>\n<p>可以阅读下面的文章了解</p>\n<p><a href=\"http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html\" target=\"_blank\" rel=\"noopener\">Dissecting the Disruptor: Why it’s so fast (part one) - Locks Are Bad</a></p>\n<p>对应的中文译文<br><a href=\"http://ifeve.com/locks-are-bad/\" target=\"_blank\" rel=\"noopener\">剖析Disruptor:为什么会这么快？(一)锁的缺点</a></p>\n<h3 id=\"内存屏障\"><a href=\"#内存屏障\" class=\"headerlink\" title=\"内存屏障\"></a>内存屏障</h3><p>Java中的<code>volatile</code>关键词提供了关于内存屏障的支持。它会在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令。使用<code>volatile</code>的消耗是小于锁的，但是仍然有一定的性能损耗。</p>\n<p>可以阅读下面的文章了解</p>\n<p><a href=\"http://mechanitis.blogspot.com/2011/08/dissecting-disruptor-why-its-so-fast.html\" target=\"_blank\" rel=\"noopener\">Dissecting the Disruptor: Demystifying Memory Barriers</a><br>对应的中文译文<br><a href=\"http://ifeve.com/disruptor-memory-barrier/\" target=\"_blank\" rel=\"noopener\">剖析Disruptor:为什么会这么快？(三)揭秘内存屏障</a></p>"},{"author":"ivyxjc","date":"2018-10-08T16:00:00.000Z","title":"i++ 的线程安全性","keywords":null,"description":null,"toc":true,"_content":"\n\n众所周知，++操作并不是线程安全的。这篇文章主要讲述其非线程安全的原因以及相关问题。\n\n<!--more-->\n\n## 使用volatile修饰仍不是线程安全的原因\n\n`i++`分为以下3步：\n1. 从内存中读取到count\n2. count+1\n3. 将结果写回内存\n\n这3步每一步之间都是可以被中断的，**加volatile只是保证从内存中读取到的count值是最新的值，但是存在在别的线程中的count还未写回主存的可能**。\n\n例如：\n1. 线程A读取到count为10，此时线程中断\n2. 线程B读取到count也为10，线程B进行++操作，结果为11写回主存，\n3. 此时线程A恢复，由于它已经从内存中读到count了，所以它仍会从10开始加，得到11写回主存。\n4. 我们可以发现，10++在线程A,B各自进行了一次\n\n## 线程安全的写法\n\n### 加锁\n\n```java\npublic class ThreadTest implements Runnable {\n    int count = 0;\n\n    @Override\n    public void run() {\n        synchronized (this) {\n            for (int i = 0; i < 100000; i++) {\n                count++;\n            }\n        }\n    }\n\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        Runnable runnable = new ThreadTest();\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n        Future f1, f2;\n        f1 = executorService.submit(runnable);\n        f2 = executorService.submit(runnable);\n        f1.get();\n        f2.get();\n        System.out.println(((ThreadTest) runnable).count);\n        executorService.shutdown();\n    }\n}\n```\n\n### 使用原子类\n\n原子类可以的单一操作都是原子性的。它的实现并不是依赖于加锁而是使用CAS。\n\nCAS的基本原理如下：\n\n从内存位置V中读取值A，并根据A计算值B，然后再将值B写回V。\n但是写回V之前，会检查内存位置V的值是否等于A，如果不等于，就不会将值写回V。而是重新进行一次上述操作。\n\n```java\npublic class ThreadTest2 implements Runnable {\n    AtomicInteger count = new AtomicInteger();\n\n    @Override\n    public void run() {\n        synchronized (this) {\n            for (int i = 0; i < 100000; i++) {\n                count.getAndIncrement();\n            }\n        }\n    }\n\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        Runnable runnable = new ThreadTest2();\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n        Future f1, f2;\n        f1 = executorService.submit(runnable);\n        f2 = executorService.submit(runnable);\n        f1.get();\n        f2.get();\n        System.out.println(((ThreadTest2) runnable).count.get());\n        executorService.shutdown();\n    }\n}\n```\n\n## 性能问题\n\n加锁当然会一定程度上影响性能，但是正确性优于性能。\n\n使用`java.util.concurrent.atomic`中的原子类在很多情况下都有着优于锁的性能，但是在本例中并不是如此。我认为是因为compare比较错误次数太多，重复次数太多导致的。","source":"_posts/java/concurrency/2018-10-09-count++-thread-safe.md","raw":"---\nauthor: ivyxjc\ndate: 2018-10-09\ntitle: i++ 的线程安全性 \ncategory: Java\ntags: [Java]\nkeywords:\ndescription:\ntoc: true\n---\n\n\n众所周知，++操作并不是线程安全的。这篇文章主要讲述其非线程安全的原因以及相关问题。\n\n<!--more-->\n\n## 使用volatile修饰仍不是线程安全的原因\n\n`i++`分为以下3步：\n1. 从内存中读取到count\n2. count+1\n3. 将结果写回内存\n\n这3步每一步之间都是可以被中断的，**加volatile只是保证从内存中读取到的count值是最新的值，但是存在在别的线程中的count还未写回主存的可能**。\n\n例如：\n1. 线程A读取到count为10，此时线程中断\n2. 线程B读取到count也为10，线程B进行++操作，结果为11写回主存，\n3. 此时线程A恢复，由于它已经从内存中读到count了，所以它仍会从10开始加，得到11写回主存。\n4. 我们可以发现，10++在线程A,B各自进行了一次\n\n## 线程安全的写法\n\n### 加锁\n\n```java\npublic class ThreadTest implements Runnable {\n    int count = 0;\n\n    @Override\n    public void run() {\n        synchronized (this) {\n            for (int i = 0; i < 100000; i++) {\n                count++;\n            }\n        }\n    }\n\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        Runnable runnable = new ThreadTest();\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n        Future f1, f2;\n        f1 = executorService.submit(runnable);\n        f2 = executorService.submit(runnable);\n        f1.get();\n        f2.get();\n        System.out.println(((ThreadTest) runnable).count);\n        executorService.shutdown();\n    }\n}\n```\n\n### 使用原子类\n\n原子类可以的单一操作都是原子性的。它的实现并不是依赖于加锁而是使用CAS。\n\nCAS的基本原理如下：\n\n从内存位置V中读取值A，并根据A计算值B，然后再将值B写回V。\n但是写回V之前，会检查内存位置V的值是否等于A，如果不等于，就不会将值写回V。而是重新进行一次上述操作。\n\n```java\npublic class ThreadTest2 implements Runnable {\n    AtomicInteger count = new AtomicInteger();\n\n    @Override\n    public void run() {\n        synchronized (this) {\n            for (int i = 0; i < 100000; i++) {\n                count.getAndIncrement();\n            }\n        }\n    }\n\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        Runnable runnable = new ThreadTest2();\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n        Future f1, f2;\n        f1 = executorService.submit(runnable);\n        f2 = executorService.submit(runnable);\n        f1.get();\n        f2.get();\n        System.out.println(((ThreadTest2) runnable).count.get());\n        executorService.shutdown();\n    }\n}\n```\n\n## 性能问题\n\n加锁当然会一定程度上影响性能，但是正确性优于性能。\n\n使用`java.util.concurrent.atomic`中的原子类在很多情况下都有着优于锁的性能，但是在本例中并不是如此。我认为是因为compare比较错误次数太多，重复次数太多导致的。","slug":"java/concurrency/2018-10-09-count++-thread-safe","published":1,"updated":"2018-10-14T10:09:03.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf95003z28t1eas350xv","content":"<p>众所周知，++操作并不是线程安全的。这篇文章主要讲述其非线程安全的原因以及相关问题。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"使用volatile修饰仍不是线程安全的原因\"><a href=\"#使用volatile修饰仍不是线程安全的原因\" class=\"headerlink\" title=\"使用volatile修饰仍不是线程安全的原因\"></a>使用volatile修饰仍不是线程安全的原因</h2><p><code>i++</code>分为以下3步：</p>\n<ol>\n<li>从内存中读取到count</li>\n<li>count+1</li>\n<li>将结果写回内存</li>\n</ol>\n<p>这3步每一步之间都是可以被中断的，<strong>加volatile只是保证从内存中读取到的count值是最新的值，但是存在在别的线程中的count还未写回主存的可能</strong>。</p>\n<p>例如：</p>\n<ol>\n<li>线程A读取到count为10，此时线程中断</li>\n<li>线程B读取到count也为10，线程B进行++操作，结果为11写回主存，</li>\n<li>此时线程A恢复，由于它已经从内存中读到count了，所以它仍会从10开始加，得到11写回主存。</li>\n<li>我们可以发现，10++在线程A,B各自进行了一次</li>\n</ol>\n<h2 id=\"线程安全的写法\"><a href=\"#线程安全的写法\" class=\"headerlink\" title=\"线程安全的写法\"></a>线程安全的写法</h2><h3 id=\"加锁\"><a href=\"#加锁\" class=\"headerlink\" title=\"加锁\"></a>加锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> ThreadTest();</span><br><span class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\">        Future f1, f2;</span><br><span class=\"line\">        f1 = executorService.submit(runnable);</span><br><span class=\"line\">        f2 = executorService.submit(runnable);</span><br><span class=\"line\">        f1.get();</span><br><span class=\"line\">        f2.get();</span><br><span class=\"line\">        System.out.println(((ThreadTest) runnable).count);</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用原子类\"><a href=\"#使用原子类\" class=\"headerlink\" title=\"使用原子类\"></a>使用原子类</h3><p>原子类可以的单一操作都是原子性的。它的实现并不是依赖于加锁而是使用CAS。</p>\n<p>CAS的基本原理如下：</p>\n<p>从内存位置V中读取值A，并根据A计算值B，然后再将值B写回V。<br>但是写回V之前，会检查内存位置V的值是否等于A，如果不等于，就不会将值写回V。而是重新进行一次上述操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    AtomicInteger count = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">                count.getAndIncrement();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> ThreadTest2();</span><br><span class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\">        Future f1, f2;</span><br><span class=\"line\">        f1 = executorService.submit(runnable);</span><br><span class=\"line\">        f2 = executorService.submit(runnable);</span><br><span class=\"line\">        f1.get();</span><br><span class=\"line\">        f2.get();</span><br><span class=\"line\">        System.out.println(((ThreadTest2) runnable).count.get());</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h2><p>加锁当然会一定程度上影响性能，但是正确性优于性能。</p>\n<p>使用<code>java.util.concurrent.atomic</code>中的原子类在很多情况下都有着优于锁的性能，但是在本例中并不是如此。我认为是因为compare比较错误次数太多，重复次数太多导致的。</p>\n","site":{"data":{}},"excerpt":"<p>众所周知，++操作并不是线程安全的。这篇文章主要讲述其非线程安全的原因以及相关问题。</p>","more":"<h2 id=\"使用volatile修饰仍不是线程安全的原因\"><a href=\"#使用volatile修饰仍不是线程安全的原因\" class=\"headerlink\" title=\"使用volatile修饰仍不是线程安全的原因\"></a>使用volatile修饰仍不是线程安全的原因</h2><p><code>i++</code>分为以下3步：</p>\n<ol>\n<li>从内存中读取到count</li>\n<li>count+1</li>\n<li>将结果写回内存</li>\n</ol>\n<p>这3步每一步之间都是可以被中断的，<strong>加volatile只是保证从内存中读取到的count值是最新的值，但是存在在别的线程中的count还未写回主存的可能</strong>。</p>\n<p>例如：</p>\n<ol>\n<li>线程A读取到count为10，此时线程中断</li>\n<li>线程B读取到count也为10，线程B进行++操作，结果为11写回主存，</li>\n<li>此时线程A恢复，由于它已经从内存中读到count了，所以它仍会从10开始加，得到11写回主存。</li>\n<li>我们可以发现，10++在线程A,B各自进行了一次</li>\n</ol>\n<h2 id=\"线程安全的写法\"><a href=\"#线程安全的写法\" class=\"headerlink\" title=\"线程安全的写法\"></a>线程安全的写法</h2><h3 id=\"加锁\"><a href=\"#加锁\" class=\"headerlink\" title=\"加锁\"></a>加锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> ThreadTest();</span><br><span class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\">        Future f1, f2;</span><br><span class=\"line\">        f1 = executorService.submit(runnable);</span><br><span class=\"line\">        f2 = executorService.submit(runnable);</span><br><span class=\"line\">        f1.get();</span><br><span class=\"line\">        f2.get();</span><br><span class=\"line\">        System.out.println(((ThreadTest) runnable).count);</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用原子类\"><a href=\"#使用原子类\" class=\"headerlink\" title=\"使用原子类\"></a>使用原子类</h3><p>原子类可以的单一操作都是原子性的。它的实现并不是依赖于加锁而是使用CAS。</p>\n<p>CAS的基本原理如下：</p>\n<p>从内存位置V中读取值A，并根据A计算值B，然后再将值B写回V。<br>但是写回V之前，会检查内存位置V的值是否等于A，如果不等于，就不会将值写回V。而是重新进行一次上述操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    AtomicInteger count = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">                count.getAndIncrement();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> ThreadTest2();</span><br><span class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\">        Future f1, f2;</span><br><span class=\"line\">        f1 = executorService.submit(runnable);</span><br><span class=\"line\">        f2 = executorService.submit(runnable);</span><br><span class=\"line\">        f1.get();</span><br><span class=\"line\">        f2.get();</span><br><span class=\"line\">        System.out.println(((ThreadTest2) runnable).count.get());</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h2><p>加锁当然会一定程度上影响性能，但是正确性优于性能。</p>\n<p>使用<code>java.util.concurrent.atomic</code>中的原子类在很多情况下都有着优于锁的性能，但是在本例中并不是如此。我认为是因为compare比较错误次数太多，重复次数太多导致的。</p>"},{"author":"ivyxjc","date":"2018-10-03T16:00:00.000Z","title":"Java 11 的新特性(下)","keywords":null,"description":null,"toc":true,"_content":"\n\nJava 11中的新特性（下）\n\n<!--more-->\n\n## JEP 309 Dynamic Class-File Constants \nJVM规范中在常量池中添加一个新的类型 CONSTANT_Dynamic\n\n## JEP 315 Improve Aarch64 Intrinsics \n\n\n## JEP 318 Epsilon: A No-Op Garbage Collector\n一个新的垃圾收集器，在GC时并不执行任何操作。\n主要有一下几的目的：\n1. 性能测试。便于在性能测试的时候排除GC的影响\n2. 内存压力测试\n3. VM接口测试。\n4. 短生命周期任务。 短生命周期的任务希望能够非常快速地得到响应，对于no-op GC，可以排除GC对此造成的影响。\n5. Last-drop latency improvements \n6. Last-drop throughput improvements. \n\n## JEP 327 Uincode 10\n支持最新的Unicode\n\n## JEP 328 Flight Recorder\n\n## JEP 330 Launch Single-File Source-Code Programs\n合并之前的javac以及javap。\n\n```\njavac A.java\njava A 1 2\n\nJava 11:\njava A.java 1 2\n```\n\n## JEP 332 Transport Layer Security (TLS) 1.3\n实现了RFC 8446中的TLS1.3\n\n## JEP 333 ZGC: A Scalable Low-Latency Garbage Collector (Experimental)\n\n引入ZGC垃圾收集器，主要实现了以下几个目标：\n1. 停顿时间不超过10ms\n2. 能够处理小(几百兆)的到非常大(几TB)的heap大小\n3. 相比于G1垃圾收集器，不超过15%的吞吐量下降\n4. 为将来的GC收集器奠定基础\n\n\n## remove and deprecate\n### JEP 320 Remove the Java EE and CORBA Modules\n删除Java9已经标记为Deprecate的Java EE以及CORBA模块。主要包括\n\n1. JAX-WS: Java API for XML-Based Web Service\n2. JAXB: Java Architecture for XML Binding\n3. JAF: JavaBeans Activation Frameword\n\n\n### JEP 335 Deprecate the Nashorn JavaScript Engine \n\n### JEP 336 Deprecate the Pack200 Tools and API","source":"_posts/java/java11/2018-10-04-java11-examples-2.md","raw":"---\nauthor: ivyxjc\ndate: 2018-10-04\ntitle: Java 11 的新特性(下)\ncategory: Java\ntags: [Java]\nkeywords:\ndescription:\ntoc: true\n---\n\n\nJava 11中的新特性（下）\n\n<!--more-->\n\n## JEP 309 Dynamic Class-File Constants \nJVM规范中在常量池中添加一个新的类型 CONSTANT_Dynamic\n\n## JEP 315 Improve Aarch64 Intrinsics \n\n\n## JEP 318 Epsilon: A No-Op Garbage Collector\n一个新的垃圾收集器，在GC时并不执行任何操作。\n主要有一下几的目的：\n1. 性能测试。便于在性能测试的时候排除GC的影响\n2. 内存压力测试\n3. VM接口测试。\n4. 短生命周期任务。 短生命周期的任务希望能够非常快速地得到响应，对于no-op GC，可以排除GC对此造成的影响。\n5. Last-drop latency improvements \n6. Last-drop throughput improvements. \n\n## JEP 327 Uincode 10\n支持最新的Unicode\n\n## JEP 328 Flight Recorder\n\n## JEP 330 Launch Single-File Source-Code Programs\n合并之前的javac以及javap。\n\n```\njavac A.java\njava A 1 2\n\nJava 11:\njava A.java 1 2\n```\n\n## JEP 332 Transport Layer Security (TLS) 1.3\n实现了RFC 8446中的TLS1.3\n\n## JEP 333 ZGC: A Scalable Low-Latency Garbage Collector (Experimental)\n\n引入ZGC垃圾收集器，主要实现了以下几个目标：\n1. 停顿时间不超过10ms\n2. 能够处理小(几百兆)的到非常大(几TB)的heap大小\n3. 相比于G1垃圾收集器，不超过15%的吞吐量下降\n4. 为将来的GC收集器奠定基础\n\n\n## remove and deprecate\n### JEP 320 Remove the Java EE and CORBA Modules\n删除Java9已经标记为Deprecate的Java EE以及CORBA模块。主要包括\n\n1. JAX-WS: Java API for XML-Based Web Service\n2. JAXB: Java Architecture for XML Binding\n3. JAF: JavaBeans Activation Frameword\n\n\n### JEP 335 Deprecate the Nashorn JavaScript Engine \n\n### JEP 336 Deprecate the Pack200 Tools and API","slug":"java/java11/2018-10-04-java11-examples-2","published":1,"updated":"2018-10-14T10:11:09.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf96004228t1a8k6gi5f","content":"<p>Java 11中的新特性（下）</p>\n<a id=\"more\"></a>\n\n<h2 id=\"JEP-309-Dynamic-Class-File-Constants\"><a href=\"#JEP-309-Dynamic-Class-File-Constants\" class=\"headerlink\" title=\"JEP 309 Dynamic Class-File Constants\"></a>JEP 309 Dynamic Class-File Constants</h2><p>JVM规范中在常量池中添加一个新的类型 CONSTANT_Dynamic</p>\n<h2 id=\"JEP-315-Improve-Aarch64-Intrinsics\"><a href=\"#JEP-315-Improve-Aarch64-Intrinsics\" class=\"headerlink\" title=\"JEP 315 Improve Aarch64 Intrinsics\"></a>JEP 315 Improve Aarch64 Intrinsics</h2><h2 id=\"JEP-318-Epsilon-A-No-Op-Garbage-Collector\"><a href=\"#JEP-318-Epsilon-A-No-Op-Garbage-Collector\" class=\"headerlink\" title=\"JEP 318 Epsilon: A No-Op Garbage Collector\"></a>JEP 318 Epsilon: A No-Op Garbage Collector</h2><p>一个新的垃圾收集器，在GC时并不执行任何操作。<br>主要有一下几的目的：</p>\n<ol>\n<li>性能测试。便于在性能测试的时候排除GC的影响</li>\n<li>内存压力测试</li>\n<li>VM接口测试。</li>\n<li>短生命周期任务。 短生命周期的任务希望能够非常快速地得到响应，对于no-op GC，可以排除GC对此造成的影响。</li>\n<li>Last-drop latency improvements </li>\n<li>Last-drop throughput improvements. </li>\n</ol>\n<h2 id=\"JEP-327-Uincode-10\"><a href=\"#JEP-327-Uincode-10\" class=\"headerlink\" title=\"JEP 327 Uincode 10\"></a>JEP 327 Uincode 10</h2><p>支持最新的Unicode</p>\n<h2 id=\"JEP-328-Flight-Recorder\"><a href=\"#JEP-328-Flight-Recorder\" class=\"headerlink\" title=\"JEP 328 Flight Recorder\"></a>JEP 328 Flight Recorder</h2><h2 id=\"JEP-330-Launch-Single-File-Source-Code-Programs\"><a href=\"#JEP-330-Launch-Single-File-Source-Code-Programs\" class=\"headerlink\" title=\"JEP 330 Launch Single-File Source-Code Programs\"></a>JEP 330 Launch Single-File Source-Code Programs</h2><p>合并之前的javac以及javap。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac A.java</span><br><span class=\"line\">java A 1 2</span><br><span class=\"line\"></span><br><span class=\"line\">Java 11:</span><br><span class=\"line\">java A.java 1 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JEP-332-Transport-Layer-Security-TLS-1-3\"><a href=\"#JEP-332-Transport-Layer-Security-TLS-1-3\" class=\"headerlink\" title=\"JEP 332 Transport Layer Security (TLS) 1.3\"></a>JEP 332 Transport Layer Security (TLS) 1.3</h2><p>实现了RFC 8446中的TLS1.3</p>\n<h2 id=\"JEP-333-ZGC-A-Scalable-Low-Latency-Garbage-Collector-Experimental\"><a href=\"#JEP-333-ZGC-A-Scalable-Low-Latency-Garbage-Collector-Experimental\" class=\"headerlink\" title=\"JEP 333 ZGC: A Scalable Low-Latency Garbage Collector (Experimental)\"></a>JEP 333 ZGC: A Scalable Low-Latency Garbage Collector (Experimental)</h2><p>引入ZGC垃圾收集器，主要实现了以下几个目标：</p>\n<ol>\n<li>停顿时间不超过10ms</li>\n<li>能够处理小(几百兆)的到非常大(几TB)的heap大小</li>\n<li>相比于G1垃圾收集器，不超过15%的吞吐量下降</li>\n<li>为将来的GC收集器奠定基础</li>\n</ol>\n<h2 id=\"remove-and-deprecate\"><a href=\"#remove-and-deprecate\" class=\"headerlink\" title=\"remove and deprecate\"></a>remove and deprecate</h2><h3 id=\"JEP-320-Remove-the-Java-EE-and-CORBA-Modules\"><a href=\"#JEP-320-Remove-the-Java-EE-and-CORBA-Modules\" class=\"headerlink\" title=\"JEP 320 Remove the Java EE and CORBA Modules\"></a>JEP 320 Remove the Java EE and CORBA Modules</h3><p>删除Java9已经标记为Deprecate的Java EE以及CORBA模块。主要包括</p>\n<ol>\n<li>JAX-WS: Java API for XML-Based Web Service</li>\n<li>JAXB: Java Architecture for XML Binding</li>\n<li>JAF: JavaBeans Activation Frameword</li>\n</ol>\n<h3 id=\"JEP-335-Deprecate-the-Nashorn-JavaScript-Engine\"><a href=\"#JEP-335-Deprecate-the-Nashorn-JavaScript-Engine\" class=\"headerlink\" title=\"JEP 335 Deprecate the Nashorn JavaScript Engine\"></a>JEP 335 Deprecate the Nashorn JavaScript Engine</h3><h3 id=\"JEP-336-Deprecate-the-Pack200-Tools-and-API\"><a href=\"#JEP-336-Deprecate-the-Pack200-Tools-and-API\" class=\"headerlink\" title=\"JEP 336 Deprecate the Pack200 Tools and API\"></a>JEP 336 Deprecate the Pack200 Tools and API</h3>","site":{"data":{}},"excerpt":"<p>Java 11中的新特性（下）</p>","more":"<h2 id=\"JEP-309-Dynamic-Class-File-Constants\"><a href=\"#JEP-309-Dynamic-Class-File-Constants\" class=\"headerlink\" title=\"JEP 309 Dynamic Class-File Constants\"></a>JEP 309 Dynamic Class-File Constants</h2><p>JVM规范中在常量池中添加一个新的类型 CONSTANT_Dynamic</p>\n<h2 id=\"JEP-315-Improve-Aarch64-Intrinsics\"><a href=\"#JEP-315-Improve-Aarch64-Intrinsics\" class=\"headerlink\" title=\"JEP 315 Improve Aarch64 Intrinsics\"></a>JEP 315 Improve Aarch64 Intrinsics</h2><h2 id=\"JEP-318-Epsilon-A-No-Op-Garbage-Collector\"><a href=\"#JEP-318-Epsilon-A-No-Op-Garbage-Collector\" class=\"headerlink\" title=\"JEP 318 Epsilon: A No-Op Garbage Collector\"></a>JEP 318 Epsilon: A No-Op Garbage Collector</h2><p>一个新的垃圾收集器，在GC时并不执行任何操作。<br>主要有一下几的目的：</p>\n<ol>\n<li>性能测试。便于在性能测试的时候排除GC的影响</li>\n<li>内存压力测试</li>\n<li>VM接口测试。</li>\n<li>短生命周期任务。 短生命周期的任务希望能够非常快速地得到响应，对于no-op GC，可以排除GC对此造成的影响。</li>\n<li>Last-drop latency improvements </li>\n<li>Last-drop throughput improvements. </li>\n</ol>\n<h2 id=\"JEP-327-Uincode-10\"><a href=\"#JEP-327-Uincode-10\" class=\"headerlink\" title=\"JEP 327 Uincode 10\"></a>JEP 327 Uincode 10</h2><p>支持最新的Unicode</p>\n<h2 id=\"JEP-328-Flight-Recorder\"><a href=\"#JEP-328-Flight-Recorder\" class=\"headerlink\" title=\"JEP 328 Flight Recorder\"></a>JEP 328 Flight Recorder</h2><h2 id=\"JEP-330-Launch-Single-File-Source-Code-Programs\"><a href=\"#JEP-330-Launch-Single-File-Source-Code-Programs\" class=\"headerlink\" title=\"JEP 330 Launch Single-File Source-Code Programs\"></a>JEP 330 Launch Single-File Source-Code Programs</h2><p>合并之前的javac以及javap。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac A.java</span><br><span class=\"line\">java A 1 2</span><br><span class=\"line\"></span><br><span class=\"line\">Java 11:</span><br><span class=\"line\">java A.java 1 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JEP-332-Transport-Layer-Security-TLS-1-3\"><a href=\"#JEP-332-Transport-Layer-Security-TLS-1-3\" class=\"headerlink\" title=\"JEP 332 Transport Layer Security (TLS) 1.3\"></a>JEP 332 Transport Layer Security (TLS) 1.3</h2><p>实现了RFC 8446中的TLS1.3</p>\n<h2 id=\"JEP-333-ZGC-A-Scalable-Low-Latency-Garbage-Collector-Experimental\"><a href=\"#JEP-333-ZGC-A-Scalable-Low-Latency-Garbage-Collector-Experimental\" class=\"headerlink\" title=\"JEP 333 ZGC: A Scalable Low-Latency Garbage Collector (Experimental)\"></a>JEP 333 ZGC: A Scalable Low-Latency Garbage Collector (Experimental)</h2><p>引入ZGC垃圾收集器，主要实现了以下几个目标：</p>\n<ol>\n<li>停顿时间不超过10ms</li>\n<li>能够处理小(几百兆)的到非常大(几TB)的heap大小</li>\n<li>相比于G1垃圾收集器，不超过15%的吞吐量下降</li>\n<li>为将来的GC收集器奠定基础</li>\n</ol>\n<h2 id=\"remove-and-deprecate\"><a href=\"#remove-and-deprecate\" class=\"headerlink\" title=\"remove and deprecate\"></a>remove and deprecate</h2><h3 id=\"JEP-320-Remove-the-Java-EE-and-CORBA-Modules\"><a href=\"#JEP-320-Remove-the-Java-EE-and-CORBA-Modules\" class=\"headerlink\" title=\"JEP 320 Remove the Java EE and CORBA Modules\"></a>JEP 320 Remove the Java EE and CORBA Modules</h3><p>删除Java9已经标记为Deprecate的Java EE以及CORBA模块。主要包括</p>\n<ol>\n<li>JAX-WS: Java API for XML-Based Web Service</li>\n<li>JAXB: Java Architecture for XML Binding</li>\n<li>JAF: JavaBeans Activation Frameword</li>\n</ol>\n<h3 id=\"JEP-335-Deprecate-the-Nashorn-JavaScript-Engine\"><a href=\"#JEP-335-Deprecate-the-Nashorn-JavaScript-Engine\" class=\"headerlink\" title=\"JEP 335 Deprecate the Nashorn JavaScript Engine\"></a>JEP 335 Deprecate the Nashorn JavaScript Engine</h3><h3 id=\"JEP-336-Deprecate-the-Pack200-Tools-and-API\"><a href=\"#JEP-336-Deprecate-the-Pack200-Tools-and-API\" class=\"headerlink\" title=\"JEP 336 Deprecate the Pack200 Tools and API\"></a>JEP 336 Deprecate the Pack200 Tools and API</h3>"},{"author":"ivyxjc","date":"2018-10-03T16:00:00.000Z","title":"Java 11 的新特性(上)","keywords":null,"description":null,"toc":true,"_content":"\nJava 11中的新特性（上）\n\n<!--more-->\n\n## JEP 181 Nest-Based Acess Control\n这一提案是为了增强自Java 1.1即引入的嵌套类设计。\n\n嵌套类主要有两个用处。\n\n第一是因为其只使用于很短的代码块中，在Java8之前，这主要依靠实现一个匿名类来完成。Java8之后，这种用法可以被lambda表达取代。\n\n另一种用法是因为需要访问另一个类的内部。嵌套类具有和成员变量以及成员方法相同的访问权限。\n\nJEP181主要是为了解决JVM级别的权限与源码权限不一致的问题。\n\n### 代码分析\n\n```java\npublic class JEP181 {\n\n    public class Nest1 {\n        private int var1;\n\n        public void doSome() throws Exception {\n            final Nest2 nest2 = new Nest2();\n            nest2.var2 = 2;\n            System.out.println(nest2.var2);\n            final Field f2 = Nest2.class.getDeclaredField(\"var2\");\n            f2.setInt(nest2, 2);\n            System.out.println(nest2.var2);\n        }\n    }\n\n    public class Nest2 {\n        private int var2;\n    }\n\n    public static void main(String[] args) throws Exception {\n        JEP181 jep181 = new JEP181();\n        JEP181.Nest1 nest1 = jep181.new Nest1();\n        nest1.doSome();\n    }\n}\n\nresult:\njava 11: 2 2\njava 8: java.lang.IllegalAccessException\n```\n这一段代码在Java8中是不正确的。会抛出`java.lang.IllegalAccessException`。主要问题出在`f2.setInt(nest2,2)`，这里由于在`Nest2`中是private的，所以无法直接set值。但是却又可以直接调用`nest2.var2=2`来设置该值，因为嵌套类是可以访问别的嵌套类的私有属性的。Java 11修复了这个令人困惑的现象。\n\n>JEP 181 官方介绍<br />\nA field or method R is accessible to a class or interface D if and only if any of the following conditions are true:<br />\n...<br />\nR is private and is declared in a different class or interface C, and C and D, are nestmates\n\n\n## JEP 321 HttpClient\n\n`HttpClient`在Java9开始引入，Java10对此有所更新。Java11根据一些反馈对API进行了一些改进，但是大部分都没有变化。该API通过CompletableFutures提供了非阻塞request和response,\n关于请求和响应的背压机制以及流控制都由Java11新提供的Flow API来提供。\n\n虽然API没有什么变化，但是实现几乎全部重写了。Java11的全部实现都是异步的（Java9,10的Http/1.1的实现是阻塞的）.\n\n\n### 同步\n\n```java\nstatic void syncGet()\n        throws IOException, InterruptedException, URISyntaxException {\n        HttpClient httpClient = HttpClient.newHttpClient();\n\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"http://www.baidu.com\"))\n            .timeout(Duration.ofSeconds(20))\n            .header(\"Content-Type\", \"application/json\")\n            .build();\n        HttpResponse<Path> response =\n            httpClient.send(request, HttpResponse.BodyHandlers.ofFile(Paths.get(\"abc.txt\")));\n        log.debug(\"Response status code: \" + response.statusCode());\n        log.debug(\"Response headers: \" + response.headers());\n        log.debug(\"Response body: \" + response.body());\n    }\n```\n关于同步的用法都比较简单，和别的很多http库的设计也比较相像。\n\n### 异步\n```java\n static void asyncGet() {\n        HttpClient httpClient = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"http://www.baidu.com\"))\n            .build();\n\n        CompletableFuture<String> strResponse =\n            httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n                .thenApply(HttpResponse::body);\n        strResponse.whenComplete((resp, t) -> {\n            if (t != null) {\n                log.debug(t.getMessage());\n            } else {\n                log.debug(resp);\n            }\n        }).join();\n    }\n```\n\n## JEP 323 Local-Variable Syntax for Lambda Parameters \n\nJava 9，Java 10引入了var用来简化声明变量的过程，Java 11进一步增强了该特性。\n\n```java\nlist.sort((@NotNull var t1, @NotNull var t2) -> {\n            if (t1.equals(t2)) {\n                return 0;\n            }\n            return t1 > t2 ? 1 : -1;\n        });\n```\n在Java 11之前，上述代码未能正确执行。\n`(var x, var y)->...`在一般情况下并没有什么用，但是如果需要给lambda表达式变量添加注解的话，那么lambda中可以使用var就有了作用。\n","source":"_posts/java/java11/2018-10-04-java11-examples-1.md","raw":"---\nauthor: ivyxjc\ndate: 2018-10-04\ntitle: Java 11 的新特性(上)\ncategory: Java\ntags: [Java]\nkeywords:\ndescription:\ntoc: true\n---\n\nJava 11中的新特性（上）\n\n<!--more-->\n\n## JEP 181 Nest-Based Acess Control\n这一提案是为了增强自Java 1.1即引入的嵌套类设计。\n\n嵌套类主要有两个用处。\n\n第一是因为其只使用于很短的代码块中，在Java8之前，这主要依靠实现一个匿名类来完成。Java8之后，这种用法可以被lambda表达取代。\n\n另一种用法是因为需要访问另一个类的内部。嵌套类具有和成员变量以及成员方法相同的访问权限。\n\nJEP181主要是为了解决JVM级别的权限与源码权限不一致的问题。\n\n### 代码分析\n\n```java\npublic class JEP181 {\n\n    public class Nest1 {\n        private int var1;\n\n        public void doSome() throws Exception {\n            final Nest2 nest2 = new Nest2();\n            nest2.var2 = 2;\n            System.out.println(nest2.var2);\n            final Field f2 = Nest2.class.getDeclaredField(\"var2\");\n            f2.setInt(nest2, 2);\n            System.out.println(nest2.var2);\n        }\n    }\n\n    public class Nest2 {\n        private int var2;\n    }\n\n    public static void main(String[] args) throws Exception {\n        JEP181 jep181 = new JEP181();\n        JEP181.Nest1 nest1 = jep181.new Nest1();\n        nest1.doSome();\n    }\n}\n\nresult:\njava 11: 2 2\njava 8: java.lang.IllegalAccessException\n```\n这一段代码在Java8中是不正确的。会抛出`java.lang.IllegalAccessException`。主要问题出在`f2.setInt(nest2,2)`，这里由于在`Nest2`中是private的，所以无法直接set值。但是却又可以直接调用`nest2.var2=2`来设置该值，因为嵌套类是可以访问别的嵌套类的私有属性的。Java 11修复了这个令人困惑的现象。\n\n>JEP 181 官方介绍<br />\nA field or method R is accessible to a class or interface D if and only if any of the following conditions are true:<br />\n...<br />\nR is private and is declared in a different class or interface C, and C and D, are nestmates\n\n\n## JEP 321 HttpClient\n\n`HttpClient`在Java9开始引入，Java10对此有所更新。Java11根据一些反馈对API进行了一些改进，但是大部分都没有变化。该API通过CompletableFutures提供了非阻塞request和response,\n关于请求和响应的背压机制以及流控制都由Java11新提供的Flow API来提供。\n\n虽然API没有什么变化，但是实现几乎全部重写了。Java11的全部实现都是异步的（Java9,10的Http/1.1的实现是阻塞的）.\n\n\n### 同步\n\n```java\nstatic void syncGet()\n        throws IOException, InterruptedException, URISyntaxException {\n        HttpClient httpClient = HttpClient.newHttpClient();\n\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"http://www.baidu.com\"))\n            .timeout(Duration.ofSeconds(20))\n            .header(\"Content-Type\", \"application/json\")\n            .build();\n        HttpResponse<Path> response =\n            httpClient.send(request, HttpResponse.BodyHandlers.ofFile(Paths.get(\"abc.txt\")));\n        log.debug(\"Response status code: \" + response.statusCode());\n        log.debug(\"Response headers: \" + response.headers());\n        log.debug(\"Response body: \" + response.body());\n    }\n```\n关于同步的用法都比较简单，和别的很多http库的设计也比较相像。\n\n### 异步\n```java\n static void asyncGet() {\n        HttpClient httpClient = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"http://www.baidu.com\"))\n            .build();\n\n        CompletableFuture<String> strResponse =\n            httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n                .thenApply(HttpResponse::body);\n        strResponse.whenComplete((resp, t) -> {\n            if (t != null) {\n                log.debug(t.getMessage());\n            } else {\n                log.debug(resp);\n            }\n        }).join();\n    }\n```\n\n## JEP 323 Local-Variable Syntax for Lambda Parameters \n\nJava 9，Java 10引入了var用来简化声明变量的过程，Java 11进一步增强了该特性。\n\n```java\nlist.sort((@NotNull var t1, @NotNull var t2) -> {\n            if (t1.equals(t2)) {\n                return 0;\n            }\n            return t1 > t2 ? 1 : -1;\n        });\n```\n在Java 11之前，上述代码未能正确执行。\n`(var x, var y)->...`在一般情况下并没有什么用，但是如果需要给lambda表达式变量添加注解的话，那么lambda中可以使用var就有了作用。\n","slug":"java/java11/2018-10-04-java11-examples-1","published":1,"updated":"2018-10-14T10:10:56.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf97004528t1kcioyfzf","content":"<p>Java 11中的新特性（上）</p>\n<a id=\"more\"></a>\n\n<h2 id=\"JEP-181-Nest-Based-Acess-Control\"><a href=\"#JEP-181-Nest-Based-Acess-Control\" class=\"headerlink\" title=\"JEP 181 Nest-Based Acess Control\"></a>JEP 181 Nest-Based Acess Control</h2><p>这一提案是为了增强自Java 1.1即引入的嵌套类设计。</p>\n<p>嵌套类主要有两个用处。</p>\n<p>第一是因为其只使用于很短的代码块中，在Java8之前，这主要依靠实现一个匿名类来完成。Java8之后，这种用法可以被lambda表达取代。</p>\n<p>另一种用法是因为需要访问另一个类的内部。嵌套类具有和成员变量以及成员方法相同的访问权限。</p>\n<p>JEP181主要是为了解决JVM级别的权限与源码权限不一致的问题。</p>\n<h3 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JEP181</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nest1</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> var1;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSome</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Nest2 nest2 = <span class=\"keyword\">new</span> Nest2();</span><br><span class=\"line\">            nest2.var2 = <span class=\"number\">2</span>;</span><br><span class=\"line\">            System.out.println(nest2.var2);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Field f2 = Nest2.class.getDeclaredField(<span class=\"string\">\"var2\"</span>);</span><br><span class=\"line\">            f2.setInt(nest2, <span class=\"number\">2</span>);</span><br><span class=\"line\">            System.out.println(nest2.var2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nest2</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> var2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        JEP181 jep181 = <span class=\"keyword\">new</span> JEP181();</span><br><span class=\"line\">        JEP181.Nest1 nest1 = jep181.new Nest1();</span><br><span class=\"line\">        nest1.doSome();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">result:</span><br><span class=\"line\">java <span class=\"number\">11</span>: <span class=\"number\">2</span> <span class=\"number\">2</span></span><br><span class=\"line\">java <span class=\"number\">8</span>: java.lang.IllegalAccessException</span><br></pre></td></tr></table></figure>\n\n<p>这一段代码在Java8中是不正确的。会抛出<code>java.lang.IllegalAccessException</code>。主要问题出在<code>f2.setInt(nest2,2)</code>，这里由于在<code>Nest2</code>中是private的，所以无法直接set值。但是却又可以直接调用<code>nest2.var2=2</code>来设置该值，因为嵌套类是可以访问别的嵌套类的私有属性的。Java 11修复了这个令人困惑的现象。</p>\n<blockquote>\n<p>JEP 181 官方介绍<br><br>A field or method R is accessible to a class or interface D if and only if any of the following conditions are true:<br><br>…<br><br>R is private and is declared in a different class or interface C, and C and D, are nestmates</p>\n</blockquote>\n<h2 id=\"JEP-321-HttpClient\"><a href=\"#JEP-321-HttpClient\" class=\"headerlink\" title=\"JEP 321 HttpClient\"></a>JEP 321 HttpClient</h2><p><code>HttpClient</code>在Java9开始引入，Java10对此有所更新。Java11根据一些反馈对API进行了一些改进，但是大部分都没有变化。该API通过CompletableFutures提供了非阻塞request和response,<br>关于请求和响应的背压机制以及流控制都由Java11新提供的Flow API来提供。</p>\n<p>虽然API没有什么变化，但是实现几乎全部重写了。Java11的全部实现都是异步的（Java9,10的Http/1.1的实现是阻塞的）.</p>\n<h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">syncGet</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> IOException, InterruptedException, URISyntaxException </span>&#123;</span><br><span class=\"line\">        HttpClient httpClient = HttpClient.newHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        HttpRequest request = HttpRequest.newBuilder()</span><br><span class=\"line\">            .uri(URI.create(<span class=\"string\">\"http://www.baidu.com\"</span>))</span><br><span class=\"line\">            .timeout(Duration.ofSeconds(<span class=\"number\">20</span>))</span><br><span class=\"line\">            .header(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">        HttpResponse&lt;Path&gt; response =</span><br><span class=\"line\">            httpClient.send(request, HttpResponse.BodyHandlers.ofFile(Paths.get(<span class=\"string\">\"abc.txt\"</span>)));</span><br><span class=\"line\">        log.debug(<span class=\"string\">\"Response status code: \"</span> + response.statusCode());</span><br><span class=\"line\">        log.debug(<span class=\"string\">\"Response headers: \"</span> + response.headers());</span><br><span class=\"line\">        log.debug(<span class=\"string\">\"Response body: \"</span> + response.body());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于同步的用法都比较简单，和别的很多http库的设计也比较相像。</p>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">asyncGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       HttpClient httpClient = HttpClient.newHttpClient();</span><br><span class=\"line\">       HttpRequest request = HttpRequest.newBuilder()</span><br><span class=\"line\">           .uri(URI.create(<span class=\"string\">\"http://www.baidu.com\"</span>))</span><br><span class=\"line\">           .build();</span><br><span class=\"line\"></span><br><span class=\"line\">       CompletableFuture&lt;String&gt; strResponse =</span><br><span class=\"line\">           httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())</span><br><span class=\"line\">               .thenApply(HttpResponse::body);</span><br><span class=\"line\">       strResponse.whenComplete((resp, t) -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               log.debug(t.getMessage());</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               log.debug(resp);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;).join();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JEP-323-Local-Variable-Syntax-for-Lambda-Parameters\"><a href=\"#JEP-323-Local-Variable-Syntax-for-Lambda-Parameters\" class=\"headerlink\" title=\"JEP 323 Local-Variable Syntax for Lambda Parameters\"></a>JEP 323 Local-Variable Syntax for Lambda Parameters</h2><p>Java 9，Java 10引入了var用来简化声明变量的过程，Java 11进一步增强了该特性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.sort((<span class=\"meta\">@NotNull</span> <span class=\"keyword\">var</span> t1, <span class=\"meta\">@NotNull</span> <span class=\"keyword\">var</span> t2) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1.equals(t2)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t1 &gt; t2 ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在Java 11之前，上述代码未能正确执行。<br><code>(var x, var y)-&gt;...</code>在一般情况下并没有什么用，但是如果需要给lambda表达式变量添加注解的话，那么lambda中可以使用var就有了作用。</p>\n","site":{"data":{}},"excerpt":"<p>Java 11中的新特性（上）</p>","more":"<h2 id=\"JEP-181-Nest-Based-Acess-Control\"><a href=\"#JEP-181-Nest-Based-Acess-Control\" class=\"headerlink\" title=\"JEP 181 Nest-Based Acess Control\"></a>JEP 181 Nest-Based Acess Control</h2><p>这一提案是为了增强自Java 1.1即引入的嵌套类设计。</p>\n<p>嵌套类主要有两个用处。</p>\n<p>第一是因为其只使用于很短的代码块中，在Java8之前，这主要依靠实现一个匿名类来完成。Java8之后，这种用法可以被lambda表达取代。</p>\n<p>另一种用法是因为需要访问另一个类的内部。嵌套类具有和成员变量以及成员方法相同的访问权限。</p>\n<p>JEP181主要是为了解决JVM级别的权限与源码权限不一致的问题。</p>\n<h3 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JEP181</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nest1</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> var1;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSome</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Nest2 nest2 = <span class=\"keyword\">new</span> Nest2();</span><br><span class=\"line\">            nest2.var2 = <span class=\"number\">2</span>;</span><br><span class=\"line\">            System.out.println(nest2.var2);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Field f2 = Nest2.class.getDeclaredField(<span class=\"string\">\"var2\"</span>);</span><br><span class=\"line\">            f2.setInt(nest2, <span class=\"number\">2</span>);</span><br><span class=\"line\">            System.out.println(nest2.var2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nest2</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> var2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        JEP181 jep181 = <span class=\"keyword\">new</span> JEP181();</span><br><span class=\"line\">        JEP181.Nest1 nest1 = jep181.new Nest1();</span><br><span class=\"line\">        nest1.doSome();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">result:</span><br><span class=\"line\">java <span class=\"number\">11</span>: <span class=\"number\">2</span> <span class=\"number\">2</span></span><br><span class=\"line\">java <span class=\"number\">8</span>: java.lang.IllegalAccessException</span><br></pre></td></tr></table></figure>\n\n<p>这一段代码在Java8中是不正确的。会抛出<code>java.lang.IllegalAccessException</code>。主要问题出在<code>f2.setInt(nest2,2)</code>，这里由于在<code>Nest2</code>中是private的，所以无法直接set值。但是却又可以直接调用<code>nest2.var2=2</code>来设置该值，因为嵌套类是可以访问别的嵌套类的私有属性的。Java 11修复了这个令人困惑的现象。</p>\n<blockquote>\n<p>JEP 181 官方介绍<br><br>A field or method R is accessible to a class or interface D if and only if any of the following conditions are true:<br><br>…<br><br>R is private and is declared in a different class or interface C, and C and D, are nestmates</p>\n</blockquote>\n<h2 id=\"JEP-321-HttpClient\"><a href=\"#JEP-321-HttpClient\" class=\"headerlink\" title=\"JEP 321 HttpClient\"></a>JEP 321 HttpClient</h2><p><code>HttpClient</code>在Java9开始引入，Java10对此有所更新。Java11根据一些反馈对API进行了一些改进，但是大部分都没有变化。该API通过CompletableFutures提供了非阻塞request和response,<br>关于请求和响应的背压机制以及流控制都由Java11新提供的Flow API来提供。</p>\n<p>虽然API没有什么变化，但是实现几乎全部重写了。Java11的全部实现都是异步的（Java9,10的Http/1.1的实现是阻塞的）.</p>\n<h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">syncGet</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> IOException, InterruptedException, URISyntaxException </span>&#123;</span><br><span class=\"line\">        HttpClient httpClient = HttpClient.newHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        HttpRequest request = HttpRequest.newBuilder()</span><br><span class=\"line\">            .uri(URI.create(<span class=\"string\">\"http://www.baidu.com\"</span>))</span><br><span class=\"line\">            .timeout(Duration.ofSeconds(<span class=\"number\">20</span>))</span><br><span class=\"line\">            .header(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">        HttpResponse&lt;Path&gt; response =</span><br><span class=\"line\">            httpClient.send(request, HttpResponse.BodyHandlers.ofFile(Paths.get(<span class=\"string\">\"abc.txt\"</span>)));</span><br><span class=\"line\">        log.debug(<span class=\"string\">\"Response status code: \"</span> + response.statusCode());</span><br><span class=\"line\">        log.debug(<span class=\"string\">\"Response headers: \"</span> + response.headers());</span><br><span class=\"line\">        log.debug(<span class=\"string\">\"Response body: \"</span> + response.body());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于同步的用法都比较简单，和别的很多http库的设计也比较相像。</p>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">asyncGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       HttpClient httpClient = HttpClient.newHttpClient();</span><br><span class=\"line\">       HttpRequest request = HttpRequest.newBuilder()</span><br><span class=\"line\">           .uri(URI.create(<span class=\"string\">\"http://www.baidu.com\"</span>))</span><br><span class=\"line\">           .build();</span><br><span class=\"line\"></span><br><span class=\"line\">       CompletableFuture&lt;String&gt; strResponse =</span><br><span class=\"line\">           httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())</span><br><span class=\"line\">               .thenApply(HttpResponse::body);</span><br><span class=\"line\">       strResponse.whenComplete((resp, t) -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               log.debug(t.getMessage());</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               log.debug(resp);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;).join();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JEP-323-Local-Variable-Syntax-for-Lambda-Parameters\"><a href=\"#JEP-323-Local-Variable-Syntax-for-Lambda-Parameters\" class=\"headerlink\" title=\"JEP 323 Local-Variable Syntax for Lambda Parameters\"></a>JEP 323 Local-Variable Syntax for Lambda Parameters</h2><p>Java 9，Java 10引入了var用来简化声明变量的过程，Java 11进一步增强了该特性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.sort((<span class=\"meta\">@NotNull</span> <span class=\"keyword\">var</span> t1, <span class=\"meta\">@NotNull</span> <span class=\"keyword\">var</span> t2) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1.equals(t2)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t1 &gt; t2 ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在Java 11之前，上述代码未能正确执行。<br><code>(var x, var y)-&gt;...</code>在一般情况下并没有什么用，但是如果需要给lambda表达式变量添加注解的话，那么lambda中可以使用var就有了作用。</p>"},{"author":"ivyxjc","date":"2016-12-19T16:00:00.000Z","title":"Spring装配bean","keywords":null,"description":"Spring装配bean","toc":true,"_content":"\nSpring有三种装配机制:\n1. 在XML文件进行显示配置\n2. 在Java中进行显示配置\n3. 隐式的bean发现机制和自动装配\n\n\n<!--more-->\n\n\n## 自动化装配bean\n\n### 使得bean可以被发现\n\n```java\npublic interface CompactDisc {\n    void play();\n}\n```\n\n```java\n@Component\npublic class SgtPeppers implements CompactDisc{\n\n    private String title=\"title\";\n    private String artist=\"artist\";\n\n    @Override\n    public void play() {\n        System.out.println(\"Playing \"+title+\" by \"+artist);\n    }\n}\n```\n\n在类上使用@Component注解, 这个注解表明该类会作为组件类.\n\n### 开启组件扫描\n\n\n#### Java开启组件扫描\n\n在类前添加@ComponentScan注解, 即可开启组件扫描, 默认扫描本类所在的包及其子包, 查找所有带@Component注解的类.\n\n```java\n@Configuration\n@ComponentScan\npublic class CDPlayerConfig {\n}\n```\n\n### 扫描其它的包\n\n可以给ComponentScan添加相关的属性来自定义需要扫描的包:\n\n1. ComponentScan(\"packageName\")\n2. ComponentScan(basePackage={\"package1\",\"package2\"})\n3. ComponentScan(basePackageClasses={Class1.class,CLass2.class})\n\n\n方案1将扫描指定包名, 方案2将扫描指定的多个包及其子包, 方案3将扫描这个几个类所在的包及其子包. 在第三种方法中, 我们可以在包中添加一个空的接口, 然后使用该接口来作为扫描的标记.\n\n#### XML文件开启组件扫描\n\n\n```xml\n<context:component-scan base-package=\"packageName\"/>\n```\n\n\n\n### 添加注解自动装配\n\n```java\n@Autowired\npublic void setCompactDisc(CompactDisc cd){\n    this.cd = cd;\n}\n```\n\n如果没有匹配的bean, 在创建应用上下文时, Spring会抛出一个异常. 可以使用`@Autowired(required=false)`来避免此异常. 此时, Spring会尝试自动装箱, 但是如果没有匹配的bean时, Spring会让该bean处于未装配的状态. 如果此时调用未装配状态的属性时 可以能会抛出NullPointerException.\n\n## Java装配bean\n\n利用JavaConfig来装配bean是比较好的方案. 相对于使用XML文件来装配bean, 它更为强大, 类型安全且更便于重构.\n\n\n### 创建配置类\n\n创建配置类, 为类添加@Configuration的注解.\n\n```java\n@Configuration\npublic class BeanConfig{\n    ...\n}\n```\n\n### 声明bean\n\n利用JavaConfig来声明bean, 需要编写一个创建所需类型的实例的方法, 并在该方法上添加@Bean注解.\n\n```java\n@Bean\npublic ClassName bean1(){\n    return new ClassName();\n}\n```\n\n@Bean的注解会告诉Spring该方法会返回一个ClassName实例, 该对象将被注册为bean, 方法体中包含了最终产生的bean的具体方法.\n\n该bean的ID默认即为方法名, 当然可以使用`@Bean(name=\"id\")`自定义bean的id.\n\n\n```java\n@Bean\npublic Class1 classBean1(){\n    return ...;\n}\n\npublic ClassName bean1(){\n    return new ClassName(classBean1);\n}\n\n\npublic ClassName bean2(){\n    return new ClassName(classBean1);\n}\n\n```\n\n默认情况下, Spring的bean都是单例, 所以当有多个注入方法中都使用到了classBean1方法的时候, 事实上传入bean1和bean2方法中的Class1实例为同一个.\n\n```java\n@Bean\npublic ClassName bean1(Class1 class1){\n    return new ....;\n}\n```\n\n在这里, `bean1`方法请求了一个Class1参数. 当Spring调用bean1方法来创建一个ClassName bean的时候, 会自动地装配一个Class1到该方法中. 这种方法是比较好的, 使用这种方法, 它不会要求Class1也在同一个配置类中声明. Spring可以自动扫描多个JavaConfig类, 甚至XML文件来实现这种装配.\n\n## XML装配bean\n\nXML在Spring早期是描述配置的主要书写方式, 但是现在更因为依赖于自动化配置和依赖Java的配置. 一个很主要的原因即在于, 使用XML文件来配置时, 大量的class属性是以字符串形式来保存的, 并不能在编译期间接受类型检查. 不过可以利用IDE的自动感知功能来确保XML配置中类型的正确.\n\n\n最基本的XML配置文件如下:\n\n```xml\n\n\n```\n\n### 声明一个简单的bean\n\n可以按照如下方式声明bean:\n\n```xml\n<bean class=\"ClassName\" />\n```\n\n可以向这个bean添加id:\n\n```xml\n<bean id=\"id\" class=\"ClassName\" />\n```\n\n### 构造器注入初始化bean\n\n两种方案来构建构造器注入:\n1. `<construct-arg>`元素\n2. `c-`命名空间\n\n在大部分情况下, 这两种方式基本上是相同的, 但是对于部分情况, 只有`<construct-arg>`能够做到(例如注入集合).\n\n\n#### 构造器注入bean引用\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n    <construct-arg ref=\"bean1\"/>\n</bean>\n```\n\n创建一个ClassName实例,其中将一个ID为bean1的bean引用传递到ClassName的构造器中.\n\n使用c-命名空间:<br>\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n    <c:arg-ref=\"bean1\"/>\n</bean>\n\n<bean id=\"id\" class=\"ClassName\"\n    <c:_0-ref=\"bean1\"/>\n</bean>\n\n<bean id=\"id\" class=\"ClassName\"\n    <c:_-ref=\"bean1\"/>\n</bean>\n```\n\n1. 其中c:表示c-命名空间前缀, arg是构造器中相应的参数名称, -ref表示注入的是bean引用. bean1为要注入的bean的ID.\n2. 也可以使用参数在参数列表中的位置来注入bean, _0, _1 ...来表示对应的参数\n3. 如果只有一个参数, 可以只使用_\n\n\n#### 构造器注入字面量\n\n```java\npublic ClassName(String title, String artist){\n    ...\n}\n```\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n    <construct-arg value=\"some strings\"/>\n    <construct-arg value=\"some strings\"/>\n</bean>\n```\n\n使用c-命名空间:<br>\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n    <c:_title=\"some strings\"/>\n    <c:_artist=\"some strings\"/>\n</bean>\n\n<bean id=\"id\" class=\"ClassName\"\n    <c:_0=\"some strings\"/>\n    <c:_1=\"some strings\"/>\n</bean>\n```\n\n与装配bean引用的区别就在与删除了最后的-ref. 如果只有一个参数, 同样可以使用 _ . \n\n\n#### 构造器注入集合\n\n```java\npublic ClassName(String title, String artist, List<String> tracks){\n    ....\n}\n```\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n    <construct-arg value=\"some strings\"/>\n    <construct-arg value=\"some strings\"/>\n    <construct-arg>\n        <list>\n            <value>some strings</value>\n            <value>some strings</value>\n            <value>some strings</value>\n        </list>\n    </construct-arg>\n</bean>\n```\n\n如果bean引用的list的话, 将value改为ref即可. 如果需要使用集合, 将list改为set即可.\n\n### 属性注入初始化bean\n\n\n```java\n@Autowired\npublic void setSomeArg(Class1 arg1){\n    ...\n}\n\n```\n\n```xml\n<bean id=\"id\" ClassName=\"ClassName\">\n    <property name=\"someArg\" ref=\"bean1\" />\n</bean> \n```\n\n`<property>`元素为属性的Setter方法提供的功能与`<construct-arg>`元素为构造器所提供的功能是一样的, 用法也类似, 同样可以使用p-命名空间来代替.\n\n```\n<bean id=\"id\" ClassName=\"ClassName\">\n    <p:someArg-ref=\"bean1\" />\n</bean> \n```","source":"_posts/javaWeb/spring/2016-12-20-Spring-bean.md","raw":"---\nauthor: ivyxjc\ndate: 2016-12-20\ntitle: Spring装配bean\ncategory: JavaWeb\ntags: [javaweb,spring]\nkeywords:\ndescription: Spring装配bean\ntoc: true\n---\n\nSpring有三种装配机制:\n1. 在XML文件进行显示配置\n2. 在Java中进行显示配置\n3. 隐式的bean发现机制和自动装配\n\n\n<!--more-->\n\n\n## 自动化装配bean\n\n### 使得bean可以被发现\n\n```java\npublic interface CompactDisc {\n    void play();\n}\n```\n\n```java\n@Component\npublic class SgtPeppers implements CompactDisc{\n\n    private String title=\"title\";\n    private String artist=\"artist\";\n\n    @Override\n    public void play() {\n        System.out.println(\"Playing \"+title+\" by \"+artist);\n    }\n}\n```\n\n在类上使用@Component注解, 这个注解表明该类会作为组件类.\n\n### 开启组件扫描\n\n\n#### Java开启组件扫描\n\n在类前添加@ComponentScan注解, 即可开启组件扫描, 默认扫描本类所在的包及其子包, 查找所有带@Component注解的类.\n\n```java\n@Configuration\n@ComponentScan\npublic class CDPlayerConfig {\n}\n```\n\n### 扫描其它的包\n\n可以给ComponentScan添加相关的属性来自定义需要扫描的包:\n\n1. ComponentScan(\"packageName\")\n2. ComponentScan(basePackage={\"package1\",\"package2\"})\n3. ComponentScan(basePackageClasses={Class1.class,CLass2.class})\n\n\n方案1将扫描指定包名, 方案2将扫描指定的多个包及其子包, 方案3将扫描这个几个类所在的包及其子包. 在第三种方法中, 我们可以在包中添加一个空的接口, 然后使用该接口来作为扫描的标记.\n\n#### XML文件开启组件扫描\n\n\n```xml\n<context:component-scan base-package=\"packageName\"/>\n```\n\n\n\n### 添加注解自动装配\n\n```java\n@Autowired\npublic void setCompactDisc(CompactDisc cd){\n    this.cd = cd;\n}\n```\n\n如果没有匹配的bean, 在创建应用上下文时, Spring会抛出一个异常. 可以使用`@Autowired(required=false)`来避免此异常. 此时, Spring会尝试自动装箱, 但是如果没有匹配的bean时, Spring会让该bean处于未装配的状态. 如果此时调用未装配状态的属性时 可以能会抛出NullPointerException.\n\n## Java装配bean\n\n利用JavaConfig来装配bean是比较好的方案. 相对于使用XML文件来装配bean, 它更为强大, 类型安全且更便于重构.\n\n\n### 创建配置类\n\n创建配置类, 为类添加@Configuration的注解.\n\n```java\n@Configuration\npublic class BeanConfig{\n    ...\n}\n```\n\n### 声明bean\n\n利用JavaConfig来声明bean, 需要编写一个创建所需类型的实例的方法, 并在该方法上添加@Bean注解.\n\n```java\n@Bean\npublic ClassName bean1(){\n    return new ClassName();\n}\n```\n\n@Bean的注解会告诉Spring该方法会返回一个ClassName实例, 该对象将被注册为bean, 方法体中包含了最终产生的bean的具体方法.\n\n该bean的ID默认即为方法名, 当然可以使用`@Bean(name=\"id\")`自定义bean的id.\n\n\n```java\n@Bean\npublic Class1 classBean1(){\n    return ...;\n}\n\npublic ClassName bean1(){\n    return new ClassName(classBean1);\n}\n\n\npublic ClassName bean2(){\n    return new ClassName(classBean1);\n}\n\n```\n\n默认情况下, Spring的bean都是单例, 所以当有多个注入方法中都使用到了classBean1方法的时候, 事实上传入bean1和bean2方法中的Class1实例为同一个.\n\n```java\n@Bean\npublic ClassName bean1(Class1 class1){\n    return new ....;\n}\n```\n\n在这里, `bean1`方法请求了一个Class1参数. 当Spring调用bean1方法来创建一个ClassName bean的时候, 会自动地装配一个Class1到该方法中. 这种方法是比较好的, 使用这种方法, 它不会要求Class1也在同一个配置类中声明. Spring可以自动扫描多个JavaConfig类, 甚至XML文件来实现这种装配.\n\n## XML装配bean\n\nXML在Spring早期是描述配置的主要书写方式, 但是现在更因为依赖于自动化配置和依赖Java的配置. 一个很主要的原因即在于, 使用XML文件来配置时, 大量的class属性是以字符串形式来保存的, 并不能在编译期间接受类型检查. 不过可以利用IDE的自动感知功能来确保XML配置中类型的正确.\n\n\n最基本的XML配置文件如下:\n\n```xml\n\n\n```\n\n### 声明一个简单的bean\n\n可以按照如下方式声明bean:\n\n```xml\n<bean class=\"ClassName\" />\n```\n\n可以向这个bean添加id:\n\n```xml\n<bean id=\"id\" class=\"ClassName\" />\n```\n\n### 构造器注入初始化bean\n\n两种方案来构建构造器注入:\n1. `<construct-arg>`元素\n2. `c-`命名空间\n\n在大部分情况下, 这两种方式基本上是相同的, 但是对于部分情况, 只有`<construct-arg>`能够做到(例如注入集合).\n\n\n#### 构造器注入bean引用\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n    <construct-arg ref=\"bean1\"/>\n</bean>\n```\n\n创建一个ClassName实例,其中将一个ID为bean1的bean引用传递到ClassName的构造器中.\n\n使用c-命名空间:<br>\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n    <c:arg-ref=\"bean1\"/>\n</bean>\n\n<bean id=\"id\" class=\"ClassName\"\n    <c:_0-ref=\"bean1\"/>\n</bean>\n\n<bean id=\"id\" class=\"ClassName\"\n    <c:_-ref=\"bean1\"/>\n</bean>\n```\n\n1. 其中c:表示c-命名空间前缀, arg是构造器中相应的参数名称, -ref表示注入的是bean引用. bean1为要注入的bean的ID.\n2. 也可以使用参数在参数列表中的位置来注入bean, _0, _1 ...来表示对应的参数\n3. 如果只有一个参数, 可以只使用_\n\n\n#### 构造器注入字面量\n\n```java\npublic ClassName(String title, String artist){\n    ...\n}\n```\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n    <construct-arg value=\"some strings\"/>\n    <construct-arg value=\"some strings\"/>\n</bean>\n```\n\n使用c-命名空间:<br>\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n    <c:_title=\"some strings\"/>\n    <c:_artist=\"some strings\"/>\n</bean>\n\n<bean id=\"id\" class=\"ClassName\"\n    <c:_0=\"some strings\"/>\n    <c:_1=\"some strings\"/>\n</bean>\n```\n\n与装配bean引用的区别就在与删除了最后的-ref. 如果只有一个参数, 同样可以使用 _ . \n\n\n#### 构造器注入集合\n\n```java\npublic ClassName(String title, String artist, List<String> tracks){\n    ....\n}\n```\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n    <construct-arg value=\"some strings\"/>\n    <construct-arg value=\"some strings\"/>\n    <construct-arg>\n        <list>\n            <value>some strings</value>\n            <value>some strings</value>\n            <value>some strings</value>\n        </list>\n    </construct-arg>\n</bean>\n```\n\n如果bean引用的list的话, 将value改为ref即可. 如果需要使用集合, 将list改为set即可.\n\n### 属性注入初始化bean\n\n\n```java\n@Autowired\npublic void setSomeArg(Class1 arg1){\n    ...\n}\n\n```\n\n```xml\n<bean id=\"id\" ClassName=\"ClassName\">\n    <property name=\"someArg\" ref=\"bean1\" />\n</bean> \n```\n\n`<property>`元素为属性的Setter方法提供的功能与`<construct-arg>`元素为构造器所提供的功能是一样的, 用法也类似, 同样可以使用p-命名空间来代替.\n\n```\n<bean id=\"id\" ClassName=\"ClassName\">\n    <p:someArg-ref=\"bean1\" />\n</bean> \n```","slug":"javaWeb/spring/2016-12-20-Spring-bean","published":1,"updated":"2018-08-09T10:10:11.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf98004828t11xqbm0nw","content":"<p>Spring有三种装配机制:</p>\n<ol>\n<li>在XML文件进行显示配置</li>\n<li>在Java中进行显示配置</li>\n<li>隐式的bean发现机制和自动装配</li>\n</ol>\n<a id=\"more\"></a>\n\n\n<h2 id=\"自动化装配bean\"><a href=\"#自动化装配bean\" class=\"headerlink\" title=\"自动化装配bean\"></a>自动化装配bean</h2><h3 id=\"使得bean可以被发现\"><a href=\"#使得bean可以被发现\" class=\"headerlink\" title=\"使得bean可以被发现\"></a>使得bean可以被发现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CompactDisc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SgtPeppers</span> <span class=\"keyword\">implements</span> <span class=\"title\">CompactDisc</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title=<span class=\"string\">\"title\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String artist=<span class=\"string\">\"artist\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Playing \"</span>+title+<span class=\"string\">\" by \"</span>+artist);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在类上使用@Component注解, 这个注解表明该类会作为组件类.</p>\n<h3 id=\"开启组件扫描\"><a href=\"#开启组件扫描\" class=\"headerlink\" title=\"开启组件扫描\"></a>开启组件扫描</h3><h4 id=\"Java开启组件扫描\"><a href=\"#Java开启组件扫描\" class=\"headerlink\" title=\"Java开启组件扫描\"></a>Java开启组件扫描</h4><p>在类前添加@ComponentScan注解, 即可开启组件扫描, 默认扫描本类所在的包及其子包, 查找所有带@Component注解的类.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayerConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扫描其它的包\"><a href=\"#扫描其它的包\" class=\"headerlink\" title=\"扫描其它的包\"></a>扫描其它的包</h3><p>可以给ComponentScan添加相关的属性来自定义需要扫描的包:</p>\n<ol>\n<li>ComponentScan(“packageName”)</li>\n<li>ComponentScan(basePackage={“package1”,”package2”})</li>\n<li>ComponentScan(basePackageClasses={Class1.class,CLass2.class})</li>\n</ol>\n<p>方案1将扫描指定包名, 方案2将扫描指定的多个包及其子包, 方案3将扫描这个几个类所在的包及其子包. 在第三种方法中, 我们可以在包中添加一个空的接口, 然后使用该接口来作为扫描的标记.</p>\n<h4 id=\"XML文件开启组件扫描\"><a href=\"#XML文件开启组件扫描\" class=\"headerlink\" title=\"XML文件开启组件扫描\"></a>XML文件开启组件扫描</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"packageName\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加注解自动装配\"><a href=\"#添加注解自动装配\" class=\"headerlink\" title=\"添加注解自动装配\"></a>添加注解自动装配</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCompactDisc</span><span class=\"params\">(CompactDisc cd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cd = cd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果没有匹配的bean, 在创建应用上下文时, Spring会抛出一个异常. 可以使用<code>@Autowired(required=false)</code>来避免此异常. 此时, Spring会尝试自动装箱, 但是如果没有匹配的bean时, Spring会让该bean处于未装配的状态. 如果此时调用未装配状态的属性时 可以能会抛出NullPointerException.</p>\n<h2 id=\"Java装配bean\"><a href=\"#Java装配bean\" class=\"headerlink\" title=\"Java装配bean\"></a>Java装配bean</h2><p>利用JavaConfig来装配bean是比较好的方案. 相对于使用XML文件来装配bean, 它更为强大, 类型安全且更便于重构.</p>\n<h3 id=\"创建配置类\"><a href=\"#创建配置类\" class=\"headerlink\" title=\"创建配置类\"></a>创建配置类</h3><p>创建配置类, 为类添加@Configuration的注解.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanConfig</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明bean\"><a href=\"#声明bean\" class=\"headerlink\" title=\"声明bean\"></a>声明bean</h3><p>利用JavaConfig来声明bean, 需要编写一个创建所需类型的实例的方法, 并在该方法上添加@Bean注解.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">bean1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClassName();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Bean的注解会告诉Spring该方法会返回一个ClassName实例, 该对象将被注册为bean, 方法体中包含了最终产生的bean的具体方法.</p>\n<p>该bean的ID默认即为方法名, 当然可以使用<code>@Bean(name=&quot;id&quot;)</code>自定义bean的id.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Class1 <span class=\"title\">classBean1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ...;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">bean1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClassName(classBean1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">bean2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClassName(classBean1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下, Spring的bean都是单例, 所以当有多个注入方法中都使用到了classBean1方法的时候, 事实上传入bean1和bean2方法中的Class1实例为同一个.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">bean1</span><span class=\"params\">(Class1 class1)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ....;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里, <code>bean1</code>方法请求了一个Class1参数. 当Spring调用bean1方法来创建一个ClassName bean的时候, 会自动地装配一个Class1到该方法中. 这种方法是比较好的, 使用这种方法, 它不会要求Class1也在同一个配置类中声明. Spring可以自动扫描多个JavaConfig类, 甚至XML文件来实现这种装配.</p>\n<h2 id=\"XML装配bean\"><a href=\"#XML装配bean\" class=\"headerlink\" title=\"XML装配bean\"></a>XML装配bean</h2><p>XML在Spring早期是描述配置的主要书写方式, 但是现在更因为依赖于自动化配置和依赖Java的配置. 一个很主要的原因即在于, 使用XML文件来配置时, 大量的class属性是以字符串形式来保存的, 并不能在编译期间接受类型检查. 不过可以利用IDE的自动感知功能来确保XML配置中类型的正确.</p>\n<p>最基本的XML配置文件如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明一个简单的bean\"><a href=\"#声明一个简单的bean\" class=\"headerlink\" title=\"声明一个简单的bean\"></a>声明一个简单的bean</h3><p>可以按照如下方式声明bean:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以向这个bean添加id:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造器注入初始化bean\"><a href=\"#构造器注入初始化bean\" class=\"headerlink\" title=\"构造器注入初始化bean\"></a>构造器注入初始化bean</h3><p>两种方案来构建构造器注入:</p>\n<ol>\n<li><code>&lt;construct-arg&gt;</code>元素</li>\n<li><code>c-</code>命名空间</li>\n</ol>\n<p>在大部分情况下, 这两种方式基本上是相同的, 但是对于部分情况, 只有<code>&lt;construct-arg&gt;</code>能够做到(例如注入集合).</p>\n<h4 id=\"构造器注入bean引用\"><a href=\"#构造器注入bean引用\" class=\"headerlink\" title=\"构造器注入bean引用\"></a>构造器注入bean引用</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;construct-arg ref=\"bean1\"/&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建一个ClassName实例,其中将一个ID为bean1的bean引用传递到ClassName的构造器中.</p>\n<p>使用c-命名空间:<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;c:arg-ref=\"bean1\"/&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;c:_0-ref=\"bean1\"/&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;c:_-ref=\"bean1\"/&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>其中c:表示c-命名空间前缀, arg是构造器中相应的参数名称, -ref表示注入的是bean引用. bean1为要注入的bean的ID.</li>\n<li>也可以使用参数在参数列表中的位置来注入bean, _0, _1 …来表示对应的参数</li>\n<li>如果只有一个参数, 可以只使用_</li>\n</ol>\n<h4 id=\"构造器注入字面量\"><a href=\"#构造器注入字面量\" class=\"headerlink\" title=\"构造器注入字面量\"></a>构造器注入字面量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClassName</span><span class=\"params\">(String title, String artist)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;construct-arg value=\"some strings\"/&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">construct-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some strings\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用c-命名空间:<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;c:_title=\"some strings\"/&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:_artist=\"some</span> <span class=\"attr\">strings</span>\"/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;c:_0=\"some strings\"/&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:_1=\"some</span> <span class=\"attr\">strings</span>\"/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>与装配bean引用的区别就在与删除了最后的-ref. 如果只有一个参数, 同样可以使用 _ . </p>\n<h4 id=\"构造器注入集合\"><a href=\"#构造器注入集合\" class=\"headerlink\" title=\"构造器注入集合\"></a>构造器注入集合</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClassName</span><span class=\"params\">(String title, String artist, List&lt;String&gt; tracks)</span></span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;construct-arg value=\"some strings\"/&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">construct-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some strings\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">construct-arg</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>some strings<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>some strings<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>some strings<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">construct-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果bean引用的list的话, 将value改为ref即可. 如果需要使用集合, 将list改为set即可.</p>\n<h3 id=\"属性注入初始化bean\"><a href=\"#属性注入初始化bean\" class=\"headerlink\" title=\"属性注入初始化bean\"></a>属性注入初始化bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSomeArg</span><span class=\"params\">(Class1 arg1)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">ClassName</span>=<span class=\"string\">\"ClassName\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"someArg\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bean1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;property&gt;</code>元素为属性的Setter方法提供的功能与<code>&lt;construct-arg&gt;</code>元素为构造器所提供的功能是一样的, 用法也类似, 同样可以使用p-命名空间来代替.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;id&quot; ClassName=&quot;ClassName&quot;&gt;</span><br><span class=\"line\">    &lt;p:someArg-ref=&quot;bean1&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Spring有三种装配机制:</p>\n<ol>\n<li>在XML文件进行显示配置</li>\n<li>在Java中进行显示配置</li>\n<li>隐式的bean发现机制和自动装配</li>\n</ol>","more":"<h2 id=\"自动化装配bean\"><a href=\"#自动化装配bean\" class=\"headerlink\" title=\"自动化装配bean\"></a>自动化装配bean</h2><h3 id=\"使得bean可以被发现\"><a href=\"#使得bean可以被发现\" class=\"headerlink\" title=\"使得bean可以被发现\"></a>使得bean可以被发现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CompactDisc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SgtPeppers</span> <span class=\"keyword\">implements</span> <span class=\"title\">CompactDisc</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title=<span class=\"string\">\"title\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String artist=<span class=\"string\">\"artist\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Playing \"</span>+title+<span class=\"string\">\" by \"</span>+artist);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在类上使用@Component注解, 这个注解表明该类会作为组件类.</p>\n<h3 id=\"开启组件扫描\"><a href=\"#开启组件扫描\" class=\"headerlink\" title=\"开启组件扫描\"></a>开启组件扫描</h3><h4 id=\"Java开启组件扫描\"><a href=\"#Java开启组件扫描\" class=\"headerlink\" title=\"Java开启组件扫描\"></a>Java开启组件扫描</h4><p>在类前添加@ComponentScan注解, 即可开启组件扫描, 默认扫描本类所在的包及其子包, 查找所有带@Component注解的类.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayerConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扫描其它的包\"><a href=\"#扫描其它的包\" class=\"headerlink\" title=\"扫描其它的包\"></a>扫描其它的包</h3><p>可以给ComponentScan添加相关的属性来自定义需要扫描的包:</p>\n<ol>\n<li>ComponentScan(“packageName”)</li>\n<li>ComponentScan(basePackage={“package1”,”package2”})</li>\n<li>ComponentScan(basePackageClasses={Class1.class,CLass2.class})</li>\n</ol>\n<p>方案1将扫描指定包名, 方案2将扫描指定的多个包及其子包, 方案3将扫描这个几个类所在的包及其子包. 在第三种方法中, 我们可以在包中添加一个空的接口, 然后使用该接口来作为扫描的标记.</p>\n<h4 id=\"XML文件开启组件扫描\"><a href=\"#XML文件开启组件扫描\" class=\"headerlink\" title=\"XML文件开启组件扫描\"></a>XML文件开启组件扫描</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"packageName\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加注解自动装配\"><a href=\"#添加注解自动装配\" class=\"headerlink\" title=\"添加注解自动装配\"></a>添加注解自动装配</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCompactDisc</span><span class=\"params\">(CompactDisc cd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cd = cd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果没有匹配的bean, 在创建应用上下文时, Spring会抛出一个异常. 可以使用<code>@Autowired(required=false)</code>来避免此异常. 此时, Spring会尝试自动装箱, 但是如果没有匹配的bean时, Spring会让该bean处于未装配的状态. 如果此时调用未装配状态的属性时 可以能会抛出NullPointerException.</p>\n<h2 id=\"Java装配bean\"><a href=\"#Java装配bean\" class=\"headerlink\" title=\"Java装配bean\"></a>Java装配bean</h2><p>利用JavaConfig来装配bean是比较好的方案. 相对于使用XML文件来装配bean, 它更为强大, 类型安全且更便于重构.</p>\n<h3 id=\"创建配置类\"><a href=\"#创建配置类\" class=\"headerlink\" title=\"创建配置类\"></a>创建配置类</h3><p>创建配置类, 为类添加@Configuration的注解.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanConfig</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明bean\"><a href=\"#声明bean\" class=\"headerlink\" title=\"声明bean\"></a>声明bean</h3><p>利用JavaConfig来声明bean, 需要编写一个创建所需类型的实例的方法, 并在该方法上添加@Bean注解.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">bean1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClassName();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Bean的注解会告诉Spring该方法会返回一个ClassName实例, 该对象将被注册为bean, 方法体中包含了最终产生的bean的具体方法.</p>\n<p>该bean的ID默认即为方法名, 当然可以使用<code>@Bean(name=&quot;id&quot;)</code>自定义bean的id.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Class1 <span class=\"title\">classBean1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ...;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">bean1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClassName(classBean1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">bean2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClassName(classBean1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下, Spring的bean都是单例, 所以当有多个注入方法中都使用到了classBean1方法的时候, 事实上传入bean1和bean2方法中的Class1实例为同一个.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">bean1</span><span class=\"params\">(Class1 class1)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ....;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里, <code>bean1</code>方法请求了一个Class1参数. 当Spring调用bean1方法来创建一个ClassName bean的时候, 会自动地装配一个Class1到该方法中. 这种方法是比较好的, 使用这种方法, 它不会要求Class1也在同一个配置类中声明. Spring可以自动扫描多个JavaConfig类, 甚至XML文件来实现这种装配.</p>\n<h2 id=\"XML装配bean\"><a href=\"#XML装配bean\" class=\"headerlink\" title=\"XML装配bean\"></a>XML装配bean</h2><p>XML在Spring早期是描述配置的主要书写方式, 但是现在更因为依赖于自动化配置和依赖Java的配置. 一个很主要的原因即在于, 使用XML文件来配置时, 大量的class属性是以字符串形式来保存的, 并不能在编译期间接受类型检查. 不过可以利用IDE的自动感知功能来确保XML配置中类型的正确.</p>\n<p>最基本的XML配置文件如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明一个简单的bean\"><a href=\"#声明一个简单的bean\" class=\"headerlink\" title=\"声明一个简单的bean\"></a>声明一个简单的bean</h3><p>可以按照如下方式声明bean:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以向这个bean添加id:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造器注入初始化bean\"><a href=\"#构造器注入初始化bean\" class=\"headerlink\" title=\"构造器注入初始化bean\"></a>构造器注入初始化bean</h3><p>两种方案来构建构造器注入:</p>\n<ol>\n<li><code>&lt;construct-arg&gt;</code>元素</li>\n<li><code>c-</code>命名空间</li>\n</ol>\n<p>在大部分情况下, 这两种方式基本上是相同的, 但是对于部分情况, 只有<code>&lt;construct-arg&gt;</code>能够做到(例如注入集合).</p>\n<h4 id=\"构造器注入bean引用\"><a href=\"#构造器注入bean引用\" class=\"headerlink\" title=\"构造器注入bean引用\"></a>构造器注入bean引用</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;construct-arg ref=\"bean1\"/&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建一个ClassName实例,其中将一个ID为bean1的bean引用传递到ClassName的构造器中.</p>\n<p>使用c-命名空间:<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;c:arg-ref=\"bean1\"/&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;c:_0-ref=\"bean1\"/&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;c:_-ref=\"bean1\"/&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>其中c:表示c-命名空间前缀, arg是构造器中相应的参数名称, -ref表示注入的是bean引用. bean1为要注入的bean的ID.</li>\n<li>也可以使用参数在参数列表中的位置来注入bean, _0, _1 …来表示对应的参数</li>\n<li>如果只有一个参数, 可以只使用_</li>\n</ol>\n<h4 id=\"构造器注入字面量\"><a href=\"#构造器注入字面量\" class=\"headerlink\" title=\"构造器注入字面量\"></a>构造器注入字面量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClassName</span><span class=\"params\">(String title, String artist)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;construct-arg value=\"some strings\"/&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">construct-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some strings\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用c-命名空间:<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;c:_title=\"some strings\"/&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:_artist=\"some</span> <span class=\"attr\">strings</span>\"/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;c:_0=\"some strings\"/&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:_1=\"some</span> <span class=\"attr\">strings</span>\"/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>与装配bean引用的区别就在与删除了最后的-ref. 如果只有一个参数, 同样可以使用 _ . </p>\n<h4 id=\"构造器注入集合\"><a href=\"#构造器注入集合\" class=\"headerlink\" title=\"构造器注入集合\"></a>构造器注入集合</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClassName</span><span class=\"params\">(String title, String artist, List&lt;String&gt; tracks)</span></span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\">    &lt;construct-arg value=\"some strings\"/&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">construct-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some strings\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">construct-arg</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>some strings<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>some strings<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>some strings<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">construct-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果bean引用的list的话, 将value改为ref即可. 如果需要使用集合, 将list改为set即可.</p>\n<h3 id=\"属性注入初始化bean\"><a href=\"#属性注入初始化bean\" class=\"headerlink\" title=\"属性注入初始化bean\"></a>属性注入初始化bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSomeArg</span><span class=\"params\">(Class1 arg1)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">ClassName</span>=<span class=\"string\">\"ClassName\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"someArg\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bean1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;property&gt;</code>元素为属性的Setter方法提供的功能与<code>&lt;construct-arg&gt;</code>元素为构造器所提供的功能是一样的, 用法也类似, 同样可以使用p-命名空间来代替.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;id&quot; ClassName=&quot;ClassName&quot;&gt;</span><br><span class=\"line\">    &lt;p:someArg-ref=&quot;bean1&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>"},{"author":"ivyxjc","date":"2016-12-25T16:00:00.000Z","title":"Spring 面向切面编程","keywords":null,"description":"Spring 面向切面编程","toc":true,"_content":"\n","source":"_posts/javaWeb/spring/2016-12-26-Spring-aop-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-12-26\ntitle: Spring 面向切面编程\ncategory: JavaWeb\ntags: [javaweb,spring]\nkeywords:\ndescription: Spring 面向切面编程\ntoc: true\n---\n\n","slug":"javaWeb/spring/2016-12-26-Spring-aop-basic","published":1,"updated":"2018-08-09T10:10:11.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf99004b28t13aoukhje","content":"","site":{"data":{}},"excerpt":"","more":""},{"author":"ivyxjc","date":"2016-12-24T16:00:00.000Z","title":"Spring高级装配","keywords":null,"description":"Spring高级装配","toc":true,"_content":"\n## 环境与配置\n\n由于在项目开发时和项目配置时, 可能会有一些代码的不同, 如何根据不同的环境来进行配置. Spring有bean profile的功能. \n\n### 在JavaConfig中配置profile\n\n在Java配置中, 使用@Profile注解来确定这个bean属于哪一个profile.\n\n```java\npublic class Config{\n    @Bean\n    @Profile(\"dev\")\n    public ClassName function1(){\n        ...\n    }\n\n    @Bean\n    @Profile(\"prod\")\n    public ClassName function2(){\n        ...\n    }\n}\n```\n\n### 在XML中配置profile\n\n\n### 激活profile\n\nSpring依据两个独立的属性来判断激活哪一个profile. 这两个独立的属性便是spring.profiles.active和spring.profiles.default. 如果设置了active参数, 则根据该值来判断激活哪一个profile. 若没有, 则根据default值来判断, 若两个值都未设置, 则只会加载那些没有定义在profile中的bean.\n\n## 条件化bean\n\nSpring4之后引入了@Conditional注解, 给定的计算结果为true, 则创建该bean, 否则该bean会被忽略.\n\n\n```java\n@Bean\n@Conditional(MagicExistsCondition.class)\npublic .....{\n    ...\n}\n\n```\n\n```java\npublic class MagicExistsCondition implements Condition{\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata){\n        ...\n    }\n}\n```\n\n其中ConditionContext是一个接口, 主要有以下几个作用:\n\n1. 借助getRegistry()返回的BeanDefinitionRegistry检查bean定义\n2. 借助getBeanFactory()返回的ConfigurableListableBeanFactory检查bean是否存在, 探查bean的属性\n3. 借助getEnvironment()返回的Environment检查环境变量是否存在以及它的值是什么\n4. 读取并探查getResourceLoader()返回的ResourceLoader所加载的资源\n5. 借助getClassLoader()返回的ClassLoader加载并检查类是否存在\n\nAnnotatedTypeMetadata可以检查带有@Bean注解的方法上还有什么注解\n\n可以借助isAnnotated(String str) 来判断带有@Bean注解的方法是否还有特定的注解 \n\n## 处理自动装配的歧义性\n\n当有多个bean都满足某一装配要求时, 就会出现问题. 解决方法有:\n\n1. 标示首选的bean\n2. 使用限定符\n\n\n###  标示首选的bean\n\n@Primary可以来将一个bean标识为首选bean. @Primary既可以与@Component组合用在组件扫描的bean上, 也可以与@Bean组合用在JavaConfig文件中.\n\n\n```java\n@Componen\n@Primary\npublic class ClassName implements InterfaceName{\n    ....\n}\n```\n\n```java\n@Bean\n@Primary\npublic  ClassName getBean1(...){\n    ....\n}\n```\n\n当然, 也可以使用XML文件来标识首选bean\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n        primary=\"true\" />\n```\n\n不可以将多个可能产生歧义的bean设为首选.\n\n### 使用限定符\n\n标示首选bean只可以解决较为简单的bean歧义问题, 如果问题较为复杂, 则无法解决. \n\n使用@Qualifier注解是使用限定符的主要方式. 它可以与@Autowired和@Inject协同使用.\n\n```java\n@Autowired\n@Qualifier(\"bean_id\")\npublic void setArg1(InterfaceName i){\n    ...\n}\n```\n\n@Qualifier注解声明了想要注入的bean的ID.  \n\n\n@Qualifier也可以使用自定义的限定符而非bean的id, 方法如下:\n\n```java\n@Component\n@Qualifier(\"qualifier_id\")\npublic class ClassName implements InterfaceName{\n    ...\n}\n```\n\n### 使用自定义限定符\n\n当一个限定符仍然不可以解决歧义问题, 就需要使用自定义限定符号(Java8之前版本不支持同一个条目重复出现多个相同类型的注解). \n\n注: Java8允许出现重复注解, 只要注解本身在定义的时候带有@Repeatable即可. \n\n```java\n@Target({ElementType.CONSTRUCTOR,ElementType.FIELD,\n        ElementType.METHOD,ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Cold{\n\n}\n\n@Target({ElementType.CONSTRUCTOR,ElementType.FIELD,\n        ElementType.METHOD,ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Warm{\n\n}\n```\n\n使用:\n\n```java\n@Component\n@Cold\n@Warm\npublic class ClassName implements InterfaceName{\n    ...\n}\n```\n\n## Bean的作用域\n\n\nSpring定义了多个作用域:\n\n1. 单例(Singleton): 在整个应用中, 只创建一个实例( 默认实现) \n2. 原型(Prototype): 每次注入或者通过Spring应用上下文获取的时候, 都会创建一个新的实例\n3. 会话(Session): 在Web应用中, 为每一个回话创建一个bean实例\n4. 请求(Request): 在Web应用中, 为每个请求创建一个bean实例\n\n\n如果要使用单例以外的作用域, 可以使用@Scope注解.\n\n使用组件扫描来发现和声明bean, 则可以在bean的类上使用@Scope注解\n\n\n```java\n@Componet\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic class ClassName{\n\n}\n```\n\n使用`@Scope(\"prototype\")`也是可以的, 但是更易出错.\n\n同样可以在Java配置中来声明原型bean\n\n\n```java\n@Bean\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic ClassName getArg(){\n    ....\n}\n```\n\n使用XML文件也可以来配置bean.\n\n```xml\n<bean id=\"id\"\n    class=\"ClassName\"\n    scope=\"prototype\" />\n```\n\n## 运行时注入\n\n","source":"_posts/javaWeb/spring/2016-12-25-Spring-Intermediate.md","raw":"---\nauthor: ivyxjc\ndate: 2016-12-25\ntitle: Spring高级装配\ncategory: JavaWeb\ntags: [javaweb,spring]\nkeywords:\ndescription: Spring高级装配\ntoc: true\n---\n\n## 环境与配置\n\n由于在项目开发时和项目配置时, 可能会有一些代码的不同, 如何根据不同的环境来进行配置. Spring有bean profile的功能. \n\n### 在JavaConfig中配置profile\n\n在Java配置中, 使用@Profile注解来确定这个bean属于哪一个profile.\n\n```java\npublic class Config{\n    @Bean\n    @Profile(\"dev\")\n    public ClassName function1(){\n        ...\n    }\n\n    @Bean\n    @Profile(\"prod\")\n    public ClassName function2(){\n        ...\n    }\n}\n```\n\n### 在XML中配置profile\n\n\n### 激活profile\n\nSpring依据两个独立的属性来判断激活哪一个profile. 这两个独立的属性便是spring.profiles.active和spring.profiles.default. 如果设置了active参数, 则根据该值来判断激活哪一个profile. 若没有, 则根据default值来判断, 若两个值都未设置, 则只会加载那些没有定义在profile中的bean.\n\n## 条件化bean\n\nSpring4之后引入了@Conditional注解, 给定的计算结果为true, 则创建该bean, 否则该bean会被忽略.\n\n\n```java\n@Bean\n@Conditional(MagicExistsCondition.class)\npublic .....{\n    ...\n}\n\n```\n\n```java\npublic class MagicExistsCondition implements Condition{\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata){\n        ...\n    }\n}\n```\n\n其中ConditionContext是一个接口, 主要有以下几个作用:\n\n1. 借助getRegistry()返回的BeanDefinitionRegistry检查bean定义\n2. 借助getBeanFactory()返回的ConfigurableListableBeanFactory检查bean是否存在, 探查bean的属性\n3. 借助getEnvironment()返回的Environment检查环境变量是否存在以及它的值是什么\n4. 读取并探查getResourceLoader()返回的ResourceLoader所加载的资源\n5. 借助getClassLoader()返回的ClassLoader加载并检查类是否存在\n\nAnnotatedTypeMetadata可以检查带有@Bean注解的方法上还有什么注解\n\n可以借助isAnnotated(String str) 来判断带有@Bean注解的方法是否还有特定的注解 \n\n## 处理自动装配的歧义性\n\n当有多个bean都满足某一装配要求时, 就会出现问题. 解决方法有:\n\n1. 标示首选的bean\n2. 使用限定符\n\n\n###  标示首选的bean\n\n@Primary可以来将一个bean标识为首选bean. @Primary既可以与@Component组合用在组件扫描的bean上, 也可以与@Bean组合用在JavaConfig文件中.\n\n\n```java\n@Componen\n@Primary\npublic class ClassName implements InterfaceName{\n    ....\n}\n```\n\n```java\n@Bean\n@Primary\npublic  ClassName getBean1(...){\n    ....\n}\n```\n\n当然, 也可以使用XML文件来标识首选bean\n\n```xml\n<bean id=\"id\" class=\"ClassName\"\n        primary=\"true\" />\n```\n\n不可以将多个可能产生歧义的bean设为首选.\n\n### 使用限定符\n\n标示首选bean只可以解决较为简单的bean歧义问题, 如果问题较为复杂, 则无法解决. \n\n使用@Qualifier注解是使用限定符的主要方式. 它可以与@Autowired和@Inject协同使用.\n\n```java\n@Autowired\n@Qualifier(\"bean_id\")\npublic void setArg1(InterfaceName i){\n    ...\n}\n```\n\n@Qualifier注解声明了想要注入的bean的ID.  \n\n\n@Qualifier也可以使用自定义的限定符而非bean的id, 方法如下:\n\n```java\n@Component\n@Qualifier(\"qualifier_id\")\npublic class ClassName implements InterfaceName{\n    ...\n}\n```\n\n### 使用自定义限定符\n\n当一个限定符仍然不可以解决歧义问题, 就需要使用自定义限定符号(Java8之前版本不支持同一个条目重复出现多个相同类型的注解). \n\n注: Java8允许出现重复注解, 只要注解本身在定义的时候带有@Repeatable即可. \n\n```java\n@Target({ElementType.CONSTRUCTOR,ElementType.FIELD,\n        ElementType.METHOD,ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Cold{\n\n}\n\n@Target({ElementType.CONSTRUCTOR,ElementType.FIELD,\n        ElementType.METHOD,ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Warm{\n\n}\n```\n\n使用:\n\n```java\n@Component\n@Cold\n@Warm\npublic class ClassName implements InterfaceName{\n    ...\n}\n```\n\n## Bean的作用域\n\n\nSpring定义了多个作用域:\n\n1. 单例(Singleton): 在整个应用中, 只创建一个实例( 默认实现) \n2. 原型(Prototype): 每次注入或者通过Spring应用上下文获取的时候, 都会创建一个新的实例\n3. 会话(Session): 在Web应用中, 为每一个回话创建一个bean实例\n4. 请求(Request): 在Web应用中, 为每个请求创建一个bean实例\n\n\n如果要使用单例以外的作用域, 可以使用@Scope注解.\n\n使用组件扫描来发现和声明bean, 则可以在bean的类上使用@Scope注解\n\n\n```java\n@Componet\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic class ClassName{\n\n}\n```\n\n使用`@Scope(\"prototype\")`也是可以的, 但是更易出错.\n\n同样可以在Java配置中来声明原型bean\n\n\n```java\n@Bean\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic ClassName getArg(){\n    ....\n}\n```\n\n使用XML文件也可以来配置bean.\n\n```xml\n<bean id=\"id\"\n    class=\"ClassName\"\n    scope=\"prototype\" />\n```\n\n## 运行时注入\n\n","slug":"javaWeb/spring/2016-12-25-Spring-Intermediate","published":1,"updated":"2018-08-09T10:10:11.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf9a004e28t1qwx62t97","content":"<h2 id=\"环境与配置\"><a href=\"#环境与配置\" class=\"headerlink\" title=\"环境与配置\"></a>环境与配置</h2><p>由于在项目开发时和项目配置时, 可能会有一些代码的不同, 如何根据不同的环境来进行配置. Spring有bean profile的功能. </p>\n<h3 id=\"在JavaConfig中配置profile\"><a href=\"#在JavaConfig中配置profile\" class=\"headerlink\" title=\"在JavaConfig中配置profile\"></a>在JavaConfig中配置profile</h3><p>在Java配置中, 使用@Profile注解来确定这个bean属于哪一个profile.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Config</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"dev\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">function1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"prod\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">function2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在XML中配置profile\"><a href=\"#在XML中配置profile\" class=\"headerlink\" title=\"在XML中配置profile\"></a>在XML中配置profile</h3><h3 id=\"激活profile\"><a href=\"#激活profile\" class=\"headerlink\" title=\"激活profile\"></a>激活profile</h3><p>Spring依据两个独立的属性来判断激活哪一个profile. 这两个独立的属性便是spring.profiles.active和spring.profiles.default. 如果设置了active参数, 则根据该值来判断激活哪一个profile. 若没有, 则根据default值来判断, 若两个值都未设置, 则只会加载那些没有定义在profile中的bean.</p>\n<h2 id=\"条件化bean\"><a href=\"#条件化bean\" class=\"headerlink\" title=\"条件化bean\"></a>条件化bean</h2><p>Spring4之后引入了@Conditional注解, 给定的计算结果为true, 则创建该bean, 否则该bean会被忽略.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional</span>(MagicExistsCondition.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> .....&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MagicExistsCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span></span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中ConditionContext是一个接口, 主要有以下几个作用:</p>\n<ol>\n<li>借助getRegistry()返回的BeanDefinitionRegistry检查bean定义</li>\n<li>借助getBeanFactory()返回的ConfigurableListableBeanFactory检查bean是否存在, 探查bean的属性</li>\n<li>借助getEnvironment()返回的Environment检查环境变量是否存在以及它的值是什么</li>\n<li>读取并探查getResourceLoader()返回的ResourceLoader所加载的资源</li>\n<li>借助getClassLoader()返回的ClassLoader加载并检查类是否存在</li>\n</ol>\n<p>AnnotatedTypeMetadata可以检查带有@Bean注解的方法上还有什么注解</p>\n<p>可以借助isAnnotated(String str) 来判断带有@Bean注解的方法是否还有特定的注解 </p>\n<h2 id=\"处理自动装配的歧义性\"><a href=\"#处理自动装配的歧义性\" class=\"headerlink\" title=\"处理自动装配的歧义性\"></a>处理自动装配的歧义性</h2><p>当有多个bean都满足某一装配要求时, 就会出现问题. 解决方法有:</p>\n<ol>\n<li>标示首选的bean</li>\n<li>使用限定符</li>\n</ol>\n<h3 id=\"标示首选的bean\"><a href=\"#标示首选的bean\" class=\"headerlink\" title=\"标示首选的bean\"></a>标示首选的bean</h3><p>@Primary可以来将一个bean标识为首选bean. @Primary既可以与@Component组合用在组件扫描的bean上, 也可以与@Bean组合用在JavaConfig文件中.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Componen</span></span><br><span class=\"line\"><span class=\"meta\">@Primary</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceName</span></span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Primary</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  ClassName <span class=\"title\">getBean1</span><span class=\"params\">(...)</span></span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然, 也可以使用XML文件来标识首选bean</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">primary</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不可以将多个可能产生歧义的bean设为首选.</p>\n<h3 id=\"使用限定符\"><a href=\"#使用限定符\" class=\"headerlink\" title=\"使用限定符\"></a>使用限定符</h3><p>标示首选bean只可以解决较为简单的bean歧义问题, 如果问题较为复杂, 则无法解决. </p>\n<p>使用@Qualifier注解是使用限定符的主要方式. 它可以与@Autowired和@Inject协同使用.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"bean_id\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setArg1</span><span class=\"params\">(InterfaceName i)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Qualifier注解声明了想要注入的bean的ID.  </p>\n<p>@Qualifier也可以使用自定义的限定符而非bean的id, 方法如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"qualifier_id\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceName</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用自定义限定符\"><a href=\"#使用自定义限定符\" class=\"headerlink\" title=\"使用自定义限定符\"></a>使用自定义限定符</h3><p>当一个限定符仍然不可以解决歧义问题, 就需要使用自定义限定符号(Java8之前版本不支持同一个条目重复出现多个相同类型的注解). </p>\n<p>注: Java8允许出现重复注解, 只要注解本身在定义的时候带有@Repeatable即可. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.CONSTRUCTOR,ElementType.FIELD,</span><br><span class=\"line\">        ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Cold&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.CONSTRUCTOR,ElementType.FIELD,</span><br><span class=\"line\">        ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Warm&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Cold</span></span><br><span class=\"line\"><span class=\"meta\">@Warm</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceName</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean的作用域</h2><p>Spring定义了多个作用域:</p>\n<ol>\n<li>单例(Singleton): 在整个应用中, 只创建一个实例( 默认实现) </li>\n<li>原型(Prototype): 每次注入或者通过Spring应用上下文获取的时候, 都会创建一个新的实例</li>\n<li>会话(Session): 在Web应用中, 为每一个回话创建一个bean实例</li>\n<li>请求(Request): 在Web应用中, 为每个请求创建一个bean实例</li>\n</ol>\n<p>如果要使用单例以外的作用域, 可以使用@Scope注解.</p>\n<p>使用组件扫描来发现和声明bean, 则可以在bean的类上使用@Scope注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Componet</span></span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>@Scope(&quot;prototype&quot;)</code>也是可以的, 但是更易出错.</p>\n<p>同样可以在Java配置中来声明原型bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">getArg</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用XML文件也可以来配置bean.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行时注入\"><a href=\"#运行时注入\" class=\"headerlink\" title=\"运行时注入\"></a>运行时注入</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境与配置\"><a href=\"#环境与配置\" class=\"headerlink\" title=\"环境与配置\"></a>环境与配置</h2><p>由于在项目开发时和项目配置时, 可能会有一些代码的不同, 如何根据不同的环境来进行配置. Spring有bean profile的功能. </p>\n<h3 id=\"在JavaConfig中配置profile\"><a href=\"#在JavaConfig中配置profile\" class=\"headerlink\" title=\"在JavaConfig中配置profile\"></a>在JavaConfig中配置profile</h3><p>在Java配置中, 使用@Profile注解来确定这个bean属于哪一个profile.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Config</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"dev\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">function1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"prod\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">function2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在XML中配置profile\"><a href=\"#在XML中配置profile\" class=\"headerlink\" title=\"在XML中配置profile\"></a>在XML中配置profile</h3><h3 id=\"激活profile\"><a href=\"#激活profile\" class=\"headerlink\" title=\"激活profile\"></a>激活profile</h3><p>Spring依据两个独立的属性来判断激活哪一个profile. 这两个独立的属性便是spring.profiles.active和spring.profiles.default. 如果设置了active参数, 则根据该值来判断激活哪一个profile. 若没有, 则根据default值来判断, 若两个值都未设置, 则只会加载那些没有定义在profile中的bean.</p>\n<h2 id=\"条件化bean\"><a href=\"#条件化bean\" class=\"headerlink\" title=\"条件化bean\"></a>条件化bean</h2><p>Spring4之后引入了@Conditional注解, 给定的计算结果为true, 则创建该bean, 否则该bean会被忽略.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional</span>(MagicExistsCondition.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> .....&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MagicExistsCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span></span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中ConditionContext是一个接口, 主要有以下几个作用:</p>\n<ol>\n<li>借助getRegistry()返回的BeanDefinitionRegistry检查bean定义</li>\n<li>借助getBeanFactory()返回的ConfigurableListableBeanFactory检查bean是否存在, 探查bean的属性</li>\n<li>借助getEnvironment()返回的Environment检查环境变量是否存在以及它的值是什么</li>\n<li>读取并探查getResourceLoader()返回的ResourceLoader所加载的资源</li>\n<li>借助getClassLoader()返回的ClassLoader加载并检查类是否存在</li>\n</ol>\n<p>AnnotatedTypeMetadata可以检查带有@Bean注解的方法上还有什么注解</p>\n<p>可以借助isAnnotated(String str) 来判断带有@Bean注解的方法是否还有特定的注解 </p>\n<h2 id=\"处理自动装配的歧义性\"><a href=\"#处理自动装配的歧义性\" class=\"headerlink\" title=\"处理自动装配的歧义性\"></a>处理自动装配的歧义性</h2><p>当有多个bean都满足某一装配要求时, 就会出现问题. 解决方法有:</p>\n<ol>\n<li>标示首选的bean</li>\n<li>使用限定符</li>\n</ol>\n<h3 id=\"标示首选的bean\"><a href=\"#标示首选的bean\" class=\"headerlink\" title=\"标示首选的bean\"></a>标示首选的bean</h3><p>@Primary可以来将一个bean标识为首选bean. @Primary既可以与@Component组合用在组件扫描的bean上, 也可以与@Bean组合用在JavaConfig文件中.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Componen</span></span><br><span class=\"line\"><span class=\"meta\">@Primary</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceName</span></span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Primary</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  ClassName <span class=\"title\">getBean1</span><span class=\"params\">(...)</span></span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然, 也可以使用XML文件来标识首选bean</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">primary</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不可以将多个可能产生歧义的bean设为首选.</p>\n<h3 id=\"使用限定符\"><a href=\"#使用限定符\" class=\"headerlink\" title=\"使用限定符\"></a>使用限定符</h3><p>标示首选bean只可以解决较为简单的bean歧义问题, 如果问题较为复杂, 则无法解决. </p>\n<p>使用@Qualifier注解是使用限定符的主要方式. 它可以与@Autowired和@Inject协同使用.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"bean_id\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setArg1</span><span class=\"params\">(InterfaceName i)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Qualifier注解声明了想要注入的bean的ID.  </p>\n<p>@Qualifier也可以使用自定义的限定符而非bean的id, 方法如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"qualifier_id\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceName</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用自定义限定符\"><a href=\"#使用自定义限定符\" class=\"headerlink\" title=\"使用自定义限定符\"></a>使用自定义限定符</h3><p>当一个限定符仍然不可以解决歧义问题, 就需要使用自定义限定符号(Java8之前版本不支持同一个条目重复出现多个相同类型的注解). </p>\n<p>注: Java8允许出现重复注解, 只要注解本身在定义的时候带有@Repeatable即可. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.CONSTRUCTOR,ElementType.FIELD,</span><br><span class=\"line\">        ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Cold&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.CONSTRUCTOR,ElementType.FIELD,</span><br><span class=\"line\">        ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Warm&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Cold</span></span><br><span class=\"line\"><span class=\"meta\">@Warm</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceName</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean的作用域</h2><p>Spring定义了多个作用域:</p>\n<ol>\n<li>单例(Singleton): 在整个应用中, 只创建一个实例( 默认实现) </li>\n<li>原型(Prototype): 每次注入或者通过Spring应用上下文获取的时候, 都会创建一个新的实例</li>\n<li>会话(Session): 在Web应用中, 为每一个回话创建一个bean实例</li>\n<li>请求(Request): 在Web应用中, 为每个请求创建一个bean实例</li>\n</ol>\n<p>如果要使用单例以外的作用域, 可以使用@Scope注解.</p>\n<p>使用组件扫描来发现和声明bean, 则可以在bean的类上使用@Scope注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Componet</span></span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>@Scope(&quot;prototype&quot;)</code>也是可以的, 但是更易出错.</p>\n<p>同样可以在Java配置中来声明原型bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassName <span class=\"title\">getArg</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用XML文件也可以来配置bean.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"ClassName\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行时注入\"><a href=\"#运行时注入\" class=\"headerlink\" title=\"运行时注入\"></a>运行时注入</h2>"},{"author":"ivyxjc","date":"2016-10-03T16:00:00.000Z","title":"matplotlib绘制2D，3D散点图","keywords":null,"description":"matplotlib是一个常见的绘图库. 本文介绍如何使用matplotlib 绘制2d散点图, 3d散点图.","_content":"\n\n\n## 2d散点图\n\n```python\n#设置颜色\ncolors = ['#0000FF','#3CB371']\n#各点大小的list\nsizeLab=np.add(sizeLab,20)\n# print(sizeLab)\n\n#设置横轴上下限\nplt.xlim(0,25)\n\n#设置横轴标号\n# plt.xticks(np.linspace(0,15,5,endpoint=True))\n\n#设置记号的标签\nplt.xticks([2*np.pi, 4*np.pi, 0, np.pi/2, np.pi],\n       [r'$2\\pi$', r'$4\\pi$', r'$0$', r'$\\pi/2$', r'$\\pi$'])\n\n#设置横纵坐标label\nplt.xlabel(\"x 轴label\")\nplt.ylabel(\"y 轴label\")\n\n\nplt.scatter(datingDataMat[:,1],datingDataMat[:,2],s=sizeLab, c=colors)\nplt.show()\n```\n\n## 3d散点图\n\n```python\nfig=plt.figure()\nax=fig.add_subplot(111,projection='3d')\n\n#设置坐标\nax.set_xlabel(\"飞行里程数\")\nax.set_ylabel(\"游戏时间百分比\")\nax.set_zlabel(\"冰激凌消耗量\")\n\ntype1=ax.scatter(dataDidnlike[:,0], dataDidnlike[:,1], dataDidnlike[:,2], c='#3c345b')\ntype2=ax.scatter(dataSmallDoses[:,0], dataSmallDoses[:,1],dataSmallDoses[:,2],c=\"#4576f7\")\ntype3=ax.scatter(dataLargeDoses[:,0], dataLargeDoses[:,1], dataLargeDoses[:,2],c=\"#43ff1a\")\n\n#设置图例\nax.legend((type1, type2, type3), (u'不喜欢', u'魅力一般', u'极具魅力'), loc=2)\n\nplt.show()\n```\n","source":"_posts/python/matplotlib/2016-10-04-matplotlib-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-04\ntitle: matplotlib绘制2D，3D散点图\ncategory: Python\ntags: [python,matplotlib]\nkeywords:\ndescription: matplotlib是一个常见的绘图库. 本文介绍如何使用matplotlib 绘制2d散点图, 3d散点图.\n---\n\n\n\n## 2d散点图\n\n```python\n#设置颜色\ncolors = ['#0000FF','#3CB371']\n#各点大小的list\nsizeLab=np.add(sizeLab,20)\n# print(sizeLab)\n\n#设置横轴上下限\nplt.xlim(0,25)\n\n#设置横轴标号\n# plt.xticks(np.linspace(0,15,5,endpoint=True))\n\n#设置记号的标签\nplt.xticks([2*np.pi, 4*np.pi, 0, np.pi/2, np.pi],\n       [r'$2\\pi$', r'$4\\pi$', r'$0$', r'$\\pi/2$', r'$\\pi$'])\n\n#设置横纵坐标label\nplt.xlabel(\"x 轴label\")\nplt.ylabel(\"y 轴label\")\n\n\nplt.scatter(datingDataMat[:,1],datingDataMat[:,2],s=sizeLab, c=colors)\nplt.show()\n```\n\n## 3d散点图\n\n```python\nfig=plt.figure()\nax=fig.add_subplot(111,projection='3d')\n\n#设置坐标\nax.set_xlabel(\"飞行里程数\")\nax.set_ylabel(\"游戏时间百分比\")\nax.set_zlabel(\"冰激凌消耗量\")\n\ntype1=ax.scatter(dataDidnlike[:,0], dataDidnlike[:,1], dataDidnlike[:,2], c='#3c345b')\ntype2=ax.scatter(dataSmallDoses[:,0], dataSmallDoses[:,1],dataSmallDoses[:,2],c=\"#4576f7\")\ntype3=ax.scatter(dataLargeDoses[:,0], dataLargeDoses[:,1], dataLargeDoses[:,2],c=\"#43ff1a\")\n\n#设置图例\nax.legend((type1, type2, type3), (u'不喜欢', u'魅力一般', u'极具魅力'), loc=2)\n\nplt.show()\n```\n","slug":"python/matplotlib/2016-10-04-matplotlib-basic","published":1,"updated":"2018-08-09T10:10:11.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf9b004h28t1tys1wyd1","content":"<h2 id=\"2d散点图\"><a href=\"#2d散点图\" class=\"headerlink\" title=\"2d散点图\"></a>2d散点图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置颜色</span></span><br><span class=\"line\">colors = [<span class=\"string\">'#0000FF'</span>,<span class=\"string\">'#3CB371'</span>]</span><br><span class=\"line\"><span class=\"comment\">#各点大小的list</span></span><br><span class=\"line\">sizeLab=np.add(sizeLab,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\"># print(sizeLab)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置横轴上下限</span></span><br><span class=\"line\">plt.xlim(<span class=\"number\">0</span>,<span class=\"number\">25</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置横轴标号</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xticks(np.linspace(0,15,5,endpoint=True))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置记号的标签</span></span><br><span class=\"line\">plt.xticks([<span class=\"number\">2</span>*np.pi, <span class=\"number\">4</span>*np.pi, <span class=\"number\">0</span>, np.pi/<span class=\"number\">2</span>, np.pi],</span><br><span class=\"line\">       [<span class=\"string\">r'$2\\pi$'</span>, <span class=\"string\">r'$4\\pi$'</span>, <span class=\"string\">r'$0$'</span>, <span class=\"string\">r'$\\pi/2$'</span>, <span class=\"string\">r'$\\pi$'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置横纵坐标label</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">\"x 轴label\"</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">\"y 轴label\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">plt.scatter(datingDataMat[:,<span class=\"number\">1</span>],datingDataMat[:,<span class=\"number\">2</span>],s=sizeLab, c=colors)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3d散点图\"><a href=\"#3d散点图\" class=\"headerlink\" title=\"3d散点图\"></a>3d散点图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig=plt.figure()</span><br><span class=\"line\">ax=fig.add_subplot(<span class=\"number\">111</span>,projection=<span class=\"string\">'3d'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置坐标</span></span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">\"飞行里程数\"</span>)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">\"游戏时间百分比\"</span>)</span><br><span class=\"line\">ax.set_zlabel(<span class=\"string\">\"冰激凌消耗量\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">type1=ax.scatter(dataDidnlike[:,<span class=\"number\">0</span>], dataDidnlike[:,<span class=\"number\">1</span>], dataDidnlike[:,<span class=\"number\">2</span>], c=<span class=\"string\">'#3c345b'</span>)</span><br><span class=\"line\">type2=ax.scatter(dataSmallDoses[:,<span class=\"number\">0</span>], dataSmallDoses[:,<span class=\"number\">1</span>],dataSmallDoses[:,<span class=\"number\">2</span>],c=<span class=\"string\">\"#4576f7\"</span>)</span><br><span class=\"line\">type3=ax.scatter(dataLargeDoses[:,<span class=\"number\">0</span>], dataLargeDoses[:,<span class=\"number\">1</span>], dataLargeDoses[:,<span class=\"number\">2</span>],c=<span class=\"string\">\"#43ff1a\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置图例</span></span><br><span class=\"line\">ax.legend((type1, type2, type3), (<span class=\"string\">u'不喜欢'</span>, <span class=\"string\">u'魅力一般'</span>, <span class=\"string\">u'极具魅力'</span>), loc=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2d散点图\"><a href=\"#2d散点图\" class=\"headerlink\" title=\"2d散点图\"></a>2d散点图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置颜色</span></span><br><span class=\"line\">colors = [<span class=\"string\">'#0000FF'</span>,<span class=\"string\">'#3CB371'</span>]</span><br><span class=\"line\"><span class=\"comment\">#各点大小的list</span></span><br><span class=\"line\">sizeLab=np.add(sizeLab,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\"># print(sizeLab)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置横轴上下限</span></span><br><span class=\"line\">plt.xlim(<span class=\"number\">0</span>,<span class=\"number\">25</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置横轴标号</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xticks(np.linspace(0,15,5,endpoint=True))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置记号的标签</span></span><br><span class=\"line\">plt.xticks([<span class=\"number\">2</span>*np.pi, <span class=\"number\">4</span>*np.pi, <span class=\"number\">0</span>, np.pi/<span class=\"number\">2</span>, np.pi],</span><br><span class=\"line\">       [<span class=\"string\">r'$2\\pi$'</span>, <span class=\"string\">r'$4\\pi$'</span>, <span class=\"string\">r'$0$'</span>, <span class=\"string\">r'$\\pi/2$'</span>, <span class=\"string\">r'$\\pi$'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置横纵坐标label</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">\"x 轴label\"</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">\"y 轴label\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">plt.scatter(datingDataMat[:,<span class=\"number\">1</span>],datingDataMat[:,<span class=\"number\">2</span>],s=sizeLab, c=colors)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3d散点图\"><a href=\"#3d散点图\" class=\"headerlink\" title=\"3d散点图\"></a>3d散点图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig=plt.figure()</span><br><span class=\"line\">ax=fig.add_subplot(<span class=\"number\">111</span>,projection=<span class=\"string\">'3d'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置坐标</span></span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">\"飞行里程数\"</span>)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">\"游戏时间百分比\"</span>)</span><br><span class=\"line\">ax.set_zlabel(<span class=\"string\">\"冰激凌消耗量\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">type1=ax.scatter(dataDidnlike[:,<span class=\"number\">0</span>], dataDidnlike[:,<span class=\"number\">1</span>], dataDidnlike[:,<span class=\"number\">2</span>], c=<span class=\"string\">'#3c345b'</span>)</span><br><span class=\"line\">type2=ax.scatter(dataSmallDoses[:,<span class=\"number\">0</span>], dataSmallDoses[:,<span class=\"number\">1</span>],dataSmallDoses[:,<span class=\"number\">2</span>],c=<span class=\"string\">\"#4576f7\"</span>)</span><br><span class=\"line\">type3=ax.scatter(dataLargeDoses[:,<span class=\"number\">0</span>], dataLargeDoses[:,<span class=\"number\">1</span>], dataLargeDoses[:,<span class=\"number\">2</span>],c=<span class=\"string\">\"#43ff1a\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置图例</span></span><br><span class=\"line\">ax.legend((type1, type2, type3), (<span class=\"string\">u'不喜欢'</span>, <span class=\"string\">u'魅力一般'</span>, <span class=\"string\">u'极具魅力'</span>), loc=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-10-03T16:00:00.000Z","title":"numpy user guide","keywords":null,"description":"numpy是常见的科学计算库. 本文介绍numpy库的一些常见操作,例如numpy.tile(A, reprs), numpy.sum(), axis,  dtye等相关知识.","_content":"\n## numpy.tile(A,reprs)\n[numpy.tile](http://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html)\n\n` numpy.tile(A, reps)`\n\nThis method will return a `max( d, A.ndim) ` dimension array( `d= len( reprs) `).\n\nif`d> A.ndim`, it will return a d-dimension array by prepending new axes;<br>\netc.\n\n```python\n>>>a = np.array([[1,2,3],[1,2,3]])\n>>>np.tile(a,(2,3,2))\n\n[[[1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]]\n\n [[1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]]]\n```\n\nif `d< A.ndim`, it will return an A.ndim-dimension array by prepending 1's to it .\nFor example, for an shape of(1,2,2,3), a reps of (2,3) will be treated as (1,1,2,3)\n\n```python\n>>>a = np.array([[[[1,2,3],[1,2,3]]]])\n>>>np.tile(a,(2,2))\n\n[[[[1 2 3 1 2 3]\n   [1 2 3 1 2 3]\n   [1 2 3 1 2 3]\n   [1 2 3 1 2 3]]]]\n\n>>>a = np.array([[[[1,2,3],[1,2,3]]]])\n>>>np.tile(a,(2,1,3))\n\n[[[[1 2 3 1 2 3 1 2 3]\n   [1 2 3 1 2 3 1 2 3]]\n\n  [[1 2 3 1 2 3 1 2 3]\n   [1 2 3 1 2 3 1 2 3]]]]\n```\n\n## numpy.sum()\n[numpy.sum()](http://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html)\n\n`numpy.sum(a, axis=None, dtype=None, out=None, keepdims=False)`\n\n## axis\nThis is a litte complex. `abs(axis)` must be less than `a.ndim`.\n\n![](http://oezmbgg4j.bkt.clouddn.com/numpy_sum_1.jpg)\n![](http://oezmbgg4j.bkt.clouddn.com/numpy_sum_2.jpg)\n\n### dtype\n\n```python\n>>>b=np.array([0.3,0.4,0.9,1.5,1.9])\n>>>print(b.sum(dtype=np.int32))\n\n2\n```\n\n\n### keepdims\n\nIf this parameter is assigned to True, the it will return an array as dimension with the size that input array is\n\n\n```python\n>>>b=np.array([[[0.3,0.4,0.9,1.5,1.9]]])\n>>>print(b.sum())\n\n5.0\n\n\n>>>b=np.array([[[0.3,0.4,0.9,1.5,1.9]]])\n>>>print(b.sum(keepdims=True))\n\n[[[ 5.]]]\n```\n","source":"_posts/python/numpy/2016-10-04-numpy-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-04\ntitle: numpy user guide\ncategory: Python\ntags: [python,numpy]\nkeywords:\ndescription: numpy是常见的科学计算库. 本文介绍numpy库的一些常见操作,例如numpy.tile(A, reprs), numpy.sum(), axis,  dtye等相关知识.\n---\n\n## numpy.tile(A,reprs)\n[numpy.tile](http://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html)\n\n` numpy.tile(A, reps)`\n\nThis method will return a `max( d, A.ndim) ` dimension array( `d= len( reprs) `).\n\nif`d> A.ndim`, it will return a d-dimension array by prepending new axes;<br>\netc.\n\n```python\n>>>a = np.array([[1,2,3],[1,2,3]])\n>>>np.tile(a,(2,3,2))\n\n[[[1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]]\n\n [[1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]\n  [1 2 3 1 2 3]]]\n```\n\nif `d< A.ndim`, it will return an A.ndim-dimension array by prepending 1's to it .\nFor example, for an shape of(1,2,2,3), a reps of (2,3) will be treated as (1,1,2,3)\n\n```python\n>>>a = np.array([[[[1,2,3],[1,2,3]]]])\n>>>np.tile(a,(2,2))\n\n[[[[1 2 3 1 2 3]\n   [1 2 3 1 2 3]\n   [1 2 3 1 2 3]\n   [1 2 3 1 2 3]]]]\n\n>>>a = np.array([[[[1,2,3],[1,2,3]]]])\n>>>np.tile(a,(2,1,3))\n\n[[[[1 2 3 1 2 3 1 2 3]\n   [1 2 3 1 2 3 1 2 3]]\n\n  [[1 2 3 1 2 3 1 2 3]\n   [1 2 3 1 2 3 1 2 3]]]]\n```\n\n## numpy.sum()\n[numpy.sum()](http://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html)\n\n`numpy.sum(a, axis=None, dtype=None, out=None, keepdims=False)`\n\n## axis\nThis is a litte complex. `abs(axis)` must be less than `a.ndim`.\n\n![](http://oezmbgg4j.bkt.clouddn.com/numpy_sum_1.jpg)\n![](http://oezmbgg4j.bkt.clouddn.com/numpy_sum_2.jpg)\n\n### dtype\n\n```python\n>>>b=np.array([0.3,0.4,0.9,1.5,1.9])\n>>>print(b.sum(dtype=np.int32))\n\n2\n```\n\n\n### keepdims\n\nIf this parameter is assigned to True, the it will return an array as dimension with the size that input array is\n\n\n```python\n>>>b=np.array([[[0.3,0.4,0.9,1.5,1.9]]])\n>>>print(b.sum())\n\n5.0\n\n\n>>>b=np.array([[[0.3,0.4,0.9,1.5,1.9]]])\n>>>print(b.sum(keepdims=True))\n\n[[[ 5.]]]\n```\n","slug":"python/numpy/2016-10-04-numpy-basic","published":1,"updated":"2018-08-09T10:10:11.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf9b004k28t1k3vmqvj1","content":"<h2 id=\"numpy-tile-A-reprs\"><a href=\"#numpy-tile-A-reprs\" class=\"headerlink\" title=\"numpy.tile(A,reprs)\"></a>numpy.tile(A,reprs)</h2><p><a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html\" target=\"_blank\" rel=\"noopener\">numpy.tile</a></p>\n<p><code>numpy.tile(A, reps)</code></p>\n<p>This method will return a <code>max( d, A.ndim)</code> dimension array( <code>d= len( reprs)</code>).</p>\n<p>if<code>d&gt; A.ndim</code>, it will return a d-dimension array by prepending new axes;<br><br>etc.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]])</span><br><span class=\"line\">&gt;&gt;&gt;np.tile(a,(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">[[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"> [[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]]]</span><br></pre></td></tr></table></figure>\n\n<p>if <code>d&lt; A.ndim</code>, it will return an A.ndim-dimension array by prepending 1’s to it .<br>For example, for an shape of(1,2,2,3), a reps of (2,3) will be treated as (1,1,2,3)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;a = np.array([[[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]]]])</span><br><span class=\"line\">&gt;&gt;&gt;np.tile(a,(<span class=\"number\">2</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">[[[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]]]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;a = np.array([[[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]]]])</span><br><span class=\"line\">&gt;&gt;&gt;np.tile(a,(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">[[[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">  [[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]]]]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"numpy-sum\"><a href=\"#numpy-sum\" class=\"headerlink\" title=\"numpy.sum()\"></a>numpy.sum()</h2><p><a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html\" target=\"_blank\" rel=\"noopener\">numpy.sum()</a></p>\n<p><code>numpy.sum(a, axis=None, dtype=None, out=None, keepdims=False)</code></p>\n<h2 id=\"axis\"><a href=\"#axis\" class=\"headerlink\" title=\"axis\"></a>axis</h2><p>This is a litte complex. <code>abs(axis)</code> must be less than <code>a.ndim</code>.</p>\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/numpy_sum_1.jpg\" alt><br><img src=\"http://oezmbgg4j.bkt.clouddn.com/numpy_sum_2.jpg\" alt></p>\n<h3 id=\"dtype\"><a href=\"#dtype\" class=\"headerlink\" title=\"dtype\"></a>dtype</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;b=np.array([<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.9</span>,<span class=\"number\">1.5</span>,<span class=\"number\">1.9</span>])</span><br><span class=\"line\">&gt;&gt;&gt;print(b.sum(dtype=np.int32))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"keepdims\"><a href=\"#keepdims\" class=\"headerlink\" title=\"keepdims\"></a>keepdims</h3><p>If this parameter is assigned to True, the it will return an array as dimension with the size that input array is</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;b=np.array([[[<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.9</span>,<span class=\"number\">1.5</span>,<span class=\"number\">1.9</span>]]])</span><br><span class=\"line\">&gt;&gt;&gt;print(b.sum())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;b=np.array([[[<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.9</span>,<span class=\"number\">1.5</span>,<span class=\"number\">1.9</span>]]])</span><br><span class=\"line\">&gt;&gt;&gt;print(b.sum(keepdims=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">[[[ <span class=\"number\">5.</span>]]]</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"numpy-tile-A-reprs\"><a href=\"#numpy-tile-A-reprs\" class=\"headerlink\" title=\"numpy.tile(A,reprs)\"></a>numpy.tile(A,reprs)</h2><p><a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html\" target=\"_blank\" rel=\"noopener\">numpy.tile</a></p>\n<p><code>numpy.tile(A, reps)</code></p>\n<p>This method will return a <code>max( d, A.ndim)</code> dimension array( <code>d= len( reprs)</code>).</p>\n<p>if<code>d&gt; A.ndim</code>, it will return a d-dimension array by prepending new axes;<br><br>etc.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]])</span><br><span class=\"line\">&gt;&gt;&gt;np.tile(a,(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">[[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"> [[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">  [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]]]</span><br></pre></td></tr></table></figure>\n\n<p>if <code>d&lt; A.ndim</code>, it will return an A.ndim-dimension array by prepending 1’s to it .<br>For example, for an shape of(1,2,2,3), a reps of (2,3) will be treated as (1,1,2,3)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;a = np.array([[[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]]]])</span><br><span class=\"line\">&gt;&gt;&gt;np.tile(a,(<span class=\"number\">2</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">[[[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]]]]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;a = np.array([[[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]]]])</span><br><span class=\"line\">&gt;&gt;&gt;np.tile(a,(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">[[[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">  [[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\">   [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]]]]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"numpy-sum\"><a href=\"#numpy-sum\" class=\"headerlink\" title=\"numpy.sum()\"></a>numpy.sum()</h2><p><a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html\" target=\"_blank\" rel=\"noopener\">numpy.sum()</a></p>\n<p><code>numpy.sum(a, axis=None, dtype=None, out=None, keepdims=False)</code></p>\n<h2 id=\"axis\"><a href=\"#axis\" class=\"headerlink\" title=\"axis\"></a>axis</h2><p>This is a litte complex. <code>abs(axis)</code> must be less than <code>a.ndim</code>.</p>\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/numpy_sum_1.jpg\" alt><br><img src=\"http://oezmbgg4j.bkt.clouddn.com/numpy_sum_2.jpg\" alt></p>\n<h3 id=\"dtype\"><a href=\"#dtype\" class=\"headerlink\" title=\"dtype\"></a>dtype</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;b=np.array([<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.9</span>,<span class=\"number\">1.5</span>,<span class=\"number\">1.9</span>])</span><br><span class=\"line\">&gt;&gt;&gt;print(b.sum(dtype=np.int32))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"keepdims\"><a href=\"#keepdims\" class=\"headerlink\" title=\"keepdims\"></a>keepdims</h3><p>If this parameter is assigned to True, the it will return an array as dimension with the size that input array is</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;b=np.array([[[<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.9</span>,<span class=\"number\">1.5</span>,<span class=\"number\">1.9</span>]]])</span><br><span class=\"line\">&gt;&gt;&gt;print(b.sum())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;b=np.array([[[<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.9</span>,<span class=\"number\">1.5</span>,<span class=\"number\">1.9</span>]]])</span><br><span class=\"line\">&gt;&gt;&gt;print(b.sum(keepdims=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">[[[ <span class=\"number\">5.</span>]]]</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-03-28T16:00:00.000Z","title":"python文件处理","keywords":null,"description":"python os模块的学习","_content":"\n## 遍历文件夹下所有的文件\n\n```python\nos.listdir(path)\n```\n","source":"_posts/python/os/2016-03-29-python-os.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-29\ntitle: python文件处理\ncategory: Python\ntags: [python,regex]\nkeywords:\ndescription: python os模块的学习\n---\n\n## 遍历文件夹下所有的文件\n\n```python\nos.listdir(path)\n```\n","slug":"python/os/2016-03-29-python-os","published":1,"updated":"2018-08-09T10:10:11.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf9e004n28t16hqvn6j9","content":"<h2 id=\"遍历文件夹下所有的文件\"><a href=\"#遍历文件夹下所有的文件\" class=\"headerlink\" title=\"遍历文件夹下所有的文件\"></a>遍历文件夹下所有的文件</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.listdir(path)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"遍历文件夹下所有的文件\"><a href=\"#遍历文件夹下所有的文件\" class=\"headerlink\" title=\"遍历文件夹下所有的文件\"></a>遍历文件夹下所有的文件</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.listdir(path)</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-12-29T16:00:00.000Z","title":"构建Spring Web应用","keywords":null,"description":"构建Spring Web应用","toc":true,"_content":"\n\n","source":"_posts/javaWeb/spring/2016-12-30-spring-mvc-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-12-30\ntitle: 构建Spring Web应用\ncategory: JavaWeb\ntags: [javaweb,spring]\nkeywords:\ndescription: 构建Spring Web应用\ntoc: true\n---\n\n\n","slug":"javaWeb/spring/2016-12-30-spring-mvc-basic","published":1,"updated":"2018-08-09T10:10:11.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf9f004q28t1cqyjhx1p","content":"","site":{"data":{}},"excerpt":"","more":""},{"author":"ivyxjc","date":"2016-10-29T16:00:00.000Z","title":"Raspberry安装","keywords":null,"description":"Raspberry第一次安装","toc":true,"_content":"\n\n## 更改源\n\n需要更改的地方有两个:\n1. `/etc/apt/source.list`\n2. `/etc/apt/source.list.d/raspi.list`\n\n将其中的网址换掉即可.\n\n## 如何连接局域网中的小米硬盘\n\n命令行的方式都试了一下, 没找到有效的.\n\n用的方法是远程桌面连接Raspberry, `GO->Network->`找到硬盘, 然后移动到pi文件下面.\n","source":"_posts/python/raspberry/2016-10-30-raspberry-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-30\ntitle: Raspberry安装\ncategory: Python\ntags: [python,generators]\nkeywords:\ndescription: Raspberry第一次安装\ntoc: true\n---\n\n\n## 更改源\n\n需要更改的地方有两个:\n1. `/etc/apt/source.list`\n2. `/etc/apt/source.list.d/raspi.list`\n\n将其中的网址换掉即可.\n\n## 如何连接局域网中的小米硬盘\n\n命令行的方式都试了一下, 没找到有效的.\n\n用的方法是远程桌面连接Raspberry, `GO->Network->`找到硬盘, 然后移动到pi文件下面.\n","slug":"python/raspberry/2016-10-30-raspberry-basic","published":1,"updated":"2018-08-09T10:10:11.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf9g004t28t1ks7tixjf","content":"<h2 id=\"更改源\"><a href=\"#更改源\" class=\"headerlink\" title=\"更改源\"></a>更改源</h2><p>需要更改的地方有两个:</p>\n<ol>\n<li><code>/etc/apt/source.list</code></li>\n<li><code>/etc/apt/source.list.d/raspi.list</code></li>\n</ol>\n<p>将其中的网址换掉即可.</p>\n<h2 id=\"如何连接局域网中的小米硬盘\"><a href=\"#如何连接局域网中的小米硬盘\" class=\"headerlink\" title=\"如何连接局域网中的小米硬盘\"></a>如何连接局域网中的小米硬盘</h2><p>命令行的方式都试了一下, 没找到有效的.</p>\n<p>用的方法是远程桌面连接Raspberry, <code>GO-&gt;Network-&gt;</code>找到硬盘, 然后移动到pi文件下面.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"更改源\"><a href=\"#更改源\" class=\"headerlink\" title=\"更改源\"></a>更改源</h2><p>需要更改的地方有两个:</p>\n<ol>\n<li><code>/etc/apt/source.list</code></li>\n<li><code>/etc/apt/source.list.d/raspi.list</code></li>\n</ol>\n<p>将其中的网址换掉即可.</p>\n<h2 id=\"如何连接局域网中的小米硬盘\"><a href=\"#如何连接局域网中的小米硬盘\" class=\"headerlink\" title=\"如何连接局域网中的小米硬盘\"></a>如何连接局域网中的小米硬盘</h2><p>命令行的方式都试了一下, 没找到有效的.</p>\n<p>用的方法是远程桌面连接Raspberry, <code>GO-&gt;Network-&gt;</code>找到硬盘, 然后移动到pi文件下面.</p>\n"},{"author":"ivyxjc","date":"2019-01-17T16:00:00.000Z","title":"使用Spring Boot + Oauth2 来做权限管理","keywords":null,"description":"使用Spring Boot + Oauth2 来做权限管理","toc":true,"_content":"\n\n\n\n<!--nomore-->\n\n## Oauth2和JWT的联系与区别\n","source":"_posts/javaWeb/spring/2019-01-18-spring-oauth2.md","raw":"---\nauthor: ivyxjc\ndate: 2019-01-18\ntitle: 使用Spring Boot + Oauth2 来做权限管理\ncategory: JavaWeb\ntags: [javaweb,spring,oauth2]\nkeywords:\ndescription: 使用Spring Boot + Oauth2 来做权限管理\ntoc: true\n---\n\n\n\n\n<!--nomore-->\n\n## Oauth2和JWT的联系与区别\n","slug":"javaWeb/spring/2019-01-18-spring-oauth2","published":1,"updated":"2019-01-20T10:52:05.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf9h004w28t1yf279ibv","content":"<!--nomore-->\n\n<h2 id=\"Oauth2和JWT的联系与区别\"><a href=\"#Oauth2和JWT的联系与区别\" class=\"headerlink\" title=\"Oauth2和JWT的联系与区别\"></a>Oauth2和JWT的联系与区别</h2>","site":{"data":{}},"excerpt":"","more":"<!--nomore-->\n\n<h2 id=\"Oauth2和JWT的联系与区别\"><a href=\"#Oauth2和JWT的联系与区别\" class=\"headerlink\" title=\"Oauth2和JWT的联系与区别\"></a>Oauth2和JWT的联系与区别</h2>"},{"author":"ivyxjc","date":"2016-11-29T16:00:00.000Z","title":"Glide源码分析 一","keywords":null,"description":"Glide源码分析","_content":"\n\n## 从Glide入口开始 \n\n\nGlide最简单的用法如下所示\n\n```java\nGlide.with(context);\n    .load(url)\n    //硬盘存储策略\n    .diskCacheStrategy(DiskCacheStrategy.ALL)\n    //是否启用内存缓存 默认为true\n    .skipMemoryCache(false)\n    .centerCrop()\n    .into(imageView);\n```\n\n### with(context)\n\n```java\npublic static RequestManager with(Context context) {\n    RequestManagerRetriever retriever = RequestManagerRetriever.get();\n    return retriever.get(context);\n}\n```\n\n###  RequestManagerRetriever get(context)\n\n依据传入的context的类型, 进行相应的操作. context的类型主要分为`FragmentActivity`, `Activity`和`ContextWrapper`, 当context是`ContextWrapper`时, 调用`get(Context context)`查看其封装的是哪一种Activity.\n\n```java\nRequestManagerRetriever.java\n\npublic RequestManager get(Context context) {\n    if (context == null) {\n        throw new IllegalArgumentException(\"You cannot start a load on a null Context\");\n    } else if (Util.isOnMainThread() && !(context instanceof Application)) {\n        if (context instanceof FragmentActivity) {\n            return get((FragmentActivity) context);\n        } else if (context instanceof Activity) {\n            return get((Activity) context);\n        } else if (context instanceof ContextWrapper) {\n            return get(((ContextWrapper) context).getBaseContext());\n        }\n    }\n\n    return getApplicationManager(context);\n}\n```\n### RequestManagerRetriever get(Activity) get(FragmentActivity)\n\n```java\nRequestManagerRetriever.java\n\npublic RequestManager get(FragmentActivity activity) {\n    if (Util.isOnBackgroundThread()) {\n        return get(activity.getApplicationContext());\n    } else {\n        assertNotDestroyed(activity);\n        FragmentManager fm = activity.getSupportFragmentManager();\n        return supportFragmentGet(activity, fm);\n    }\n}\n```\n\n```java\n@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic RequestManager get(Activity activity) {\n    if (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {\n        return get(activity.getApplicationContext());\n    } else {\n        //判断activity是否已经被销毁, 如果销毁抛出异常\n        assertNotDestroyed(activity);\n        //获取对应FragmenManager\n        android.app.FragmentManager fm = activity.getFragmentManager();\n        return fragmentGet(activity, fm);\n    }\n}\n```\n\n这两个方法差别不大, 主要是因为`FragmentActivity`来自于support v4库中, 和标准库Activity获取FragmentManager的方法以及返回的FragmentManager类型不太相同.\n\n\n###  RequestManagerRetriever fragmentGet(Context, FramentManager)\n\n\n```java\nRequestManagerRetriever.java\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\nRequestManagerFragment getRequestManagerFragment(final android.app.FragmentManager fm) {\n    RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);\n    if (current == null) {\n        current = pendingRequestManagerFragments.get(fm);\n        if (current == null) {\n            current = new RequestManagerFragment();\n            pendingRequestManagerFragments.put(fm, current);\n            fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();\n            handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();\n        }\n    }\n    return current;\n}\n\n@TargetApi(Build.VERSION_CODES.HONEYCOMB)\nRequestManager fragmentGet(Context context, android.app.FragmentManager fm) {\n    RequestManagerFragment current = getRequestManagerFragment(fm);\n    RequestManager requestManager = current.getRequestManager();\n    if (requestManager == null) {\n        requestManager = new RequestManager(context, current.getLifecycle(), current.getRequestManagerTreeNode());\n        current.setRequestManager(requestManager);\n    }\n    return requestManager;\n}\n```\n\n这两段代码的主要意义在于生成一个`RequestManagerFragment`并没有内容的但是绑定在制定的context上. 其实目的就是将该Fragment的生命周期绑定在该context上, 并在相应的方法调用时执行相应的操作.\n\n\n```java\nRequestManagerFragment.java\n\nActivityFragmentLifecycle lifecycle;\n\n@Override\npublic void onStart() {\n    super.onStart();\n    lifecycle.onStart();\n}\n\n@Override\npublic void onStop() {\n    super.onStop();\n    lifecycle.onStop();\n}\n\n@Override\npublic void onDestroy() {\n    super.onDestroy();\n    lifecycle.onDestroy();\n}\n\n```\n\n\n### RequestManager\n\n\n```java\nRequestManager implements LifecycleListener\n//ActivityFragmentLifecycle 也实现了 LifecycleListener\n@Override\npublic void onStart() {\n    // onStart might not be called because this object may be created after the fragment/activity's onStart method.\n    resumeRequests();\n}\n\n/**\n    * Lifecycle callback that unregisters for connectivity events (if the android.permission.ACCESS_NETWORK_STATE\n    * permission is present) and pauses in progress loads.\n    */\n@Override\npublic void onStop() {\n    pauseRequests();\n}\n\n/**\n    * Lifecycle callback that cancels all in progress requests and clears and recycles resources for all completed\n    * requests.\n    */\n@Override\npublic void onDestroy() {\n    requestTracker.clearRequests();\n}\n```\n\n```java\nclass ActivityFragmentLifecycle implements Lifecycle {\n    private final Set<LifecycleListener> lifecycleListeners =\n            Collections.newSetFromMap(new WeakHashMap<LifecycleListener, Boolean>());\n    private boolean isStarted;\n    private boolean isDestroyed;\n\n    /**\n     * Adds the given listener to the list of listeners to be notified on each lifecycle event.\n     *\n     * <p>\n     *     The latest lifecycle event will be called on the given listener synchronously in this method. If the\n     *     activity or fragment is stopped, {@link LifecycleListener#onStop()}} will be called, and same for onStart and\n     *     onDestroy.\n     * </p>\n     *\n     * <p>\n     *     Note - {@link com.bumptech.glide.manager.LifecycleListener}s that are added more than once will have their\n     *     lifecycle methods called more than once. It is the caller's responsibility to avoid adding listeners\n     *     multiple times.\n     * </p>\n     */\n    @Override\n    public void addListener(LifecycleListener listener) {\n        lifecycleListeners.add(listener);\n\n        if (isDestroyed) {\n            listener.onDestroy();\n        } else if (isStarted) {\n            listener.onStart();\n        } else {\n            listener.onStop();\n        }\n    }\n\n    void onStart() {\n        isStarted = true;\n        for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {\n            lifecycleListener.onStart();\n        }\n    }\n\n    void onStop() {\n        isStarted = false;\n        for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {\n            lifecycleListener.onStop();\n        }\n    }\n\n    void onDestroy() {\n        isDestroyed = true;\n        for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {\n            lifecycleListener.onDestroy();\n        }\n    }\n}\n```\n\n上述的代码总体的目的就是将RequestManager的生命周期和RequestManagerFragment绑定起来, 进而和Activity的生命周期绑定起来.\n\n## RequestManager\n\n下面来看一下RequestManager的功能.\n\n### 构造函数\n\n```java\nRequestManager.java\n\npublic RequestManager(Context context, Lifecycle lifecycle, RequestManagerTreeNode treeNode) {\n    this(context, lifecycle, treeNode, new RequestTracker(), new ConnectivityMonitorFactory());\n}\n\nRequestManager(Context context, final Lifecycle lifecycle, RequestManagerTreeNode treeNode,\n        RequestTracker requestTracker, ConnectivityMonitorFactory factory) {\n    this.context = context.getApplicationContext();\n    this.lifecycle = lifecycle;\n    this.treeNode = treeNode;\n    this.requestTracker = requestTracker;\n    this.glide = Glide.get(context);\n    this.optionsApplier = new OptionsApplier();\n\n    ConnectivityMonitor connectivityMonitor = factory.build(context,\n            new RequestManagerConnectivityListener(requestTracker));\n\n    // If we're the application level request manager, we may be created on a background thread. In that case we\n    // cannot risk synchronously pausing or resuming requests, so we hack around the issue by delaying adding\n    // ourselves as a lifecycle listener by posting to the main thread. This should be entirely safe.\n    if (Util.isOnBackgroundThread()) {\n        new Handler(Looper.getMainLooper()).post(new Runnable() {\n            @Override\n            public void run() {\n                lifecycle.addListener(RequestManager.this);\n            }\n        });\n    } else {\n        lifecycle.addListener(this);\n    }\n    lifecycle.addListener(connectivityMonitor);\n}\n```\n\n#### Glide.get(context)\n\n该方法就是利用单例模式获取一个Glide实例.\n\n```java\nGlide.java\n\nprivate static volatile Glide glide;\n\npublic static Glide get(Context context) {\n    if (glide == null) {\n        synchronized (Glide.class) {\n            if (glide == null) {\n                Context applicationContext = context.getApplicationContext();\n                List<GlideModule> modules = new ManifestParser(applicationContext).parse();\n\n                GlideBuilder builder = new GlideBuilder(applicationContext);\n                for (GlideModule module : modules) {\n                    module.applyOptions(applicationContext, builder);\n                }\n                glide = builder.createGlide();\n                for (GlideModule module : modules) {\n                    module.registerComponents(applicationContext, glide);\n                }\n            }\n        }\n    }\n\n    return glide;\n}\n```\n\n#### GlideBuilder\n\n利用GlideBuilder中的createGlide()方法生成了Glide, 在这个过程中完成了以下几个任务:\n\n1. 初始化线程池\n2. 初始化bitmap池\n3. 初始化内存缓存类\n4. 初始化内部磁盘缓存类\n5. 初始化引擎类\n6. 设置默认的解码格式\n\n```java\nGlideBuilder.java\n\nGlide createGlide() {\n    if (sourceService == null) {\n        //初始化线程池\n        final int cores = Math.max(1, Runtime.getRuntime().availableProcessors());\n        sourceService = new FifoPriorityThreadPoolExecutor(cores);\n    }\n    if (diskCacheService == null) {\n        diskCacheService = new FifoPriorityThreadPoolExecutor(1);\n    }\n\n    //初始化bitmap池\n    MemorySizeCalculator calculator = new MemorySizeCalculator(context);\n    if (bitmapPool == null) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            int size = calculator.getBitmapPoolSize();\n            bitmapPool = new LruBitmapPool(size);\n        } else {\n            bitmapPool = new BitmapPoolAdapter();\n        }\n    }\n\n    if (memoryCache == null) {\n        memoryCache = new LruResourceCache(calculator.getMemoryCacheSize());\n    }\n\n    if (diskCacheFactory == null) {\n        diskCacheFactory = new InternalCacheDiskCacheFactory(context);\n    }\n\n    if (engine == null) {\n        engine = new Engine(memoryCache, diskCacheFactory, diskCacheService, sourceService);\n    }\n\n    if (decodeFormat == null) {\n        decodeFormat = DecodeFormat.DEFAULT;\n    }\n\n    return new Glide(engine, memoryCache, bitmapPool, context, decodeFormat);\n}\n```\n\n#### ManifestParser\n\n```java\nManifestParser.java\n\n\nprivate static final String GLIDE_MODULE_VALUE = \"GlideModule\";\n\npublic List<GlideModule> parse() {\n    List<GlideModule> modules = new ArrayList<GlideModule>();\n    try {\n        //根据PackageName获取metadata信息\n        ApplicationInfo appInfo = context.getPackageManager().getApplicationInfo(\n                context.getPackageName(), PackageManager.GET_META_DATA);\n        //若有metadata信息\n        if (appInfo.metaData != null) {\n            //遍历metadata\n            for (String key : appInfo.metaData.keySet()) {\n                //将key和GLIDE_MODULE_VALUE相等的全部加入modules 之中\n                if (GLIDE_MODULE_VALUE.equals(appInfo.metaData.get(key))) {\n                    modules.add(parseModule(key));\n                }\n            }\n        }\n    } catch (PackageManager.NameNotFoundException e) {\n        throw new RuntimeException(\"Unable to find metadata to parse GlideModules\", e);\n    }\n\n    return modules;\n}\n\n//通过反射获取GlideModule实例\nprivate static GlideModule parseModule(String className) {\n    Class<?> clazz;\n    try {\n        clazz = Class.forName(className);\n    } catch (ClassNotFoundException e) {\n        throw new IllegalArgumentException(\"Unable to find GlideModule implementation\", e);\n    }\n\n    Object module;\n    try {\n        module = clazz.newInstance();\n    } catch (InstantiationException e) {\n        throw new RuntimeException(\"Unable to instantiate GlideModule implementation for \" + clazz, e);\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(\"Unable to instantiate GlideModule implementation for \" + clazz, e);\n    }\n\n    if (!(module instanceof GlideModule)) {\n        throw new RuntimeException(\"Expected instanceof GlideModule, but found: \" + module);\n    }\n    return (GlideModule) module;\n}\n```\n\n通过反射的方式获取在Manifest.xml中自定义的GlideModule对象, 获得之后遍历ArrayList<GlideModule>, 对每一个GlideModuled调用相应的applyOptions()和registerComponents()方法.\n\n\n","source":"_posts/android/第三方库/2016-11-30-Glide-source_1.md","raw":"---\nauthor: ivyxjc\ndate: 2016-11-30\ntitle: Glide源码分析 一\ntags: [android,project]\nkeywords:\ndescription: Glide源码分析\n---\n\n\n## 从Glide入口开始 \n\n\nGlide最简单的用法如下所示\n\n```java\nGlide.with(context);\n    .load(url)\n    //硬盘存储策略\n    .diskCacheStrategy(DiskCacheStrategy.ALL)\n    //是否启用内存缓存 默认为true\n    .skipMemoryCache(false)\n    .centerCrop()\n    .into(imageView);\n```\n\n### with(context)\n\n```java\npublic static RequestManager with(Context context) {\n    RequestManagerRetriever retriever = RequestManagerRetriever.get();\n    return retriever.get(context);\n}\n```\n\n###  RequestManagerRetriever get(context)\n\n依据传入的context的类型, 进行相应的操作. context的类型主要分为`FragmentActivity`, `Activity`和`ContextWrapper`, 当context是`ContextWrapper`时, 调用`get(Context context)`查看其封装的是哪一种Activity.\n\n```java\nRequestManagerRetriever.java\n\npublic RequestManager get(Context context) {\n    if (context == null) {\n        throw new IllegalArgumentException(\"You cannot start a load on a null Context\");\n    } else if (Util.isOnMainThread() && !(context instanceof Application)) {\n        if (context instanceof FragmentActivity) {\n            return get((FragmentActivity) context);\n        } else if (context instanceof Activity) {\n            return get((Activity) context);\n        } else if (context instanceof ContextWrapper) {\n            return get(((ContextWrapper) context).getBaseContext());\n        }\n    }\n\n    return getApplicationManager(context);\n}\n```\n### RequestManagerRetriever get(Activity) get(FragmentActivity)\n\n```java\nRequestManagerRetriever.java\n\npublic RequestManager get(FragmentActivity activity) {\n    if (Util.isOnBackgroundThread()) {\n        return get(activity.getApplicationContext());\n    } else {\n        assertNotDestroyed(activity);\n        FragmentManager fm = activity.getSupportFragmentManager();\n        return supportFragmentGet(activity, fm);\n    }\n}\n```\n\n```java\n@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic RequestManager get(Activity activity) {\n    if (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {\n        return get(activity.getApplicationContext());\n    } else {\n        //判断activity是否已经被销毁, 如果销毁抛出异常\n        assertNotDestroyed(activity);\n        //获取对应FragmenManager\n        android.app.FragmentManager fm = activity.getFragmentManager();\n        return fragmentGet(activity, fm);\n    }\n}\n```\n\n这两个方法差别不大, 主要是因为`FragmentActivity`来自于support v4库中, 和标准库Activity获取FragmentManager的方法以及返回的FragmentManager类型不太相同.\n\n\n###  RequestManagerRetriever fragmentGet(Context, FramentManager)\n\n\n```java\nRequestManagerRetriever.java\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\nRequestManagerFragment getRequestManagerFragment(final android.app.FragmentManager fm) {\n    RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);\n    if (current == null) {\n        current = pendingRequestManagerFragments.get(fm);\n        if (current == null) {\n            current = new RequestManagerFragment();\n            pendingRequestManagerFragments.put(fm, current);\n            fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();\n            handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();\n        }\n    }\n    return current;\n}\n\n@TargetApi(Build.VERSION_CODES.HONEYCOMB)\nRequestManager fragmentGet(Context context, android.app.FragmentManager fm) {\n    RequestManagerFragment current = getRequestManagerFragment(fm);\n    RequestManager requestManager = current.getRequestManager();\n    if (requestManager == null) {\n        requestManager = new RequestManager(context, current.getLifecycle(), current.getRequestManagerTreeNode());\n        current.setRequestManager(requestManager);\n    }\n    return requestManager;\n}\n```\n\n这两段代码的主要意义在于生成一个`RequestManagerFragment`并没有内容的但是绑定在制定的context上. 其实目的就是将该Fragment的生命周期绑定在该context上, 并在相应的方法调用时执行相应的操作.\n\n\n```java\nRequestManagerFragment.java\n\nActivityFragmentLifecycle lifecycle;\n\n@Override\npublic void onStart() {\n    super.onStart();\n    lifecycle.onStart();\n}\n\n@Override\npublic void onStop() {\n    super.onStop();\n    lifecycle.onStop();\n}\n\n@Override\npublic void onDestroy() {\n    super.onDestroy();\n    lifecycle.onDestroy();\n}\n\n```\n\n\n### RequestManager\n\n\n```java\nRequestManager implements LifecycleListener\n//ActivityFragmentLifecycle 也实现了 LifecycleListener\n@Override\npublic void onStart() {\n    // onStart might not be called because this object may be created after the fragment/activity's onStart method.\n    resumeRequests();\n}\n\n/**\n    * Lifecycle callback that unregisters for connectivity events (if the android.permission.ACCESS_NETWORK_STATE\n    * permission is present) and pauses in progress loads.\n    */\n@Override\npublic void onStop() {\n    pauseRequests();\n}\n\n/**\n    * Lifecycle callback that cancels all in progress requests and clears and recycles resources for all completed\n    * requests.\n    */\n@Override\npublic void onDestroy() {\n    requestTracker.clearRequests();\n}\n```\n\n```java\nclass ActivityFragmentLifecycle implements Lifecycle {\n    private final Set<LifecycleListener> lifecycleListeners =\n            Collections.newSetFromMap(new WeakHashMap<LifecycleListener, Boolean>());\n    private boolean isStarted;\n    private boolean isDestroyed;\n\n    /**\n     * Adds the given listener to the list of listeners to be notified on each lifecycle event.\n     *\n     * <p>\n     *     The latest lifecycle event will be called on the given listener synchronously in this method. If the\n     *     activity or fragment is stopped, {@link LifecycleListener#onStop()}} will be called, and same for onStart and\n     *     onDestroy.\n     * </p>\n     *\n     * <p>\n     *     Note - {@link com.bumptech.glide.manager.LifecycleListener}s that are added more than once will have their\n     *     lifecycle methods called more than once. It is the caller's responsibility to avoid adding listeners\n     *     multiple times.\n     * </p>\n     */\n    @Override\n    public void addListener(LifecycleListener listener) {\n        lifecycleListeners.add(listener);\n\n        if (isDestroyed) {\n            listener.onDestroy();\n        } else if (isStarted) {\n            listener.onStart();\n        } else {\n            listener.onStop();\n        }\n    }\n\n    void onStart() {\n        isStarted = true;\n        for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {\n            lifecycleListener.onStart();\n        }\n    }\n\n    void onStop() {\n        isStarted = false;\n        for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {\n            lifecycleListener.onStop();\n        }\n    }\n\n    void onDestroy() {\n        isDestroyed = true;\n        for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {\n            lifecycleListener.onDestroy();\n        }\n    }\n}\n```\n\n上述的代码总体的目的就是将RequestManager的生命周期和RequestManagerFragment绑定起来, 进而和Activity的生命周期绑定起来.\n\n## RequestManager\n\n下面来看一下RequestManager的功能.\n\n### 构造函数\n\n```java\nRequestManager.java\n\npublic RequestManager(Context context, Lifecycle lifecycle, RequestManagerTreeNode treeNode) {\n    this(context, lifecycle, treeNode, new RequestTracker(), new ConnectivityMonitorFactory());\n}\n\nRequestManager(Context context, final Lifecycle lifecycle, RequestManagerTreeNode treeNode,\n        RequestTracker requestTracker, ConnectivityMonitorFactory factory) {\n    this.context = context.getApplicationContext();\n    this.lifecycle = lifecycle;\n    this.treeNode = treeNode;\n    this.requestTracker = requestTracker;\n    this.glide = Glide.get(context);\n    this.optionsApplier = new OptionsApplier();\n\n    ConnectivityMonitor connectivityMonitor = factory.build(context,\n            new RequestManagerConnectivityListener(requestTracker));\n\n    // If we're the application level request manager, we may be created on a background thread. In that case we\n    // cannot risk synchronously pausing or resuming requests, so we hack around the issue by delaying adding\n    // ourselves as a lifecycle listener by posting to the main thread. This should be entirely safe.\n    if (Util.isOnBackgroundThread()) {\n        new Handler(Looper.getMainLooper()).post(new Runnable() {\n            @Override\n            public void run() {\n                lifecycle.addListener(RequestManager.this);\n            }\n        });\n    } else {\n        lifecycle.addListener(this);\n    }\n    lifecycle.addListener(connectivityMonitor);\n}\n```\n\n#### Glide.get(context)\n\n该方法就是利用单例模式获取一个Glide实例.\n\n```java\nGlide.java\n\nprivate static volatile Glide glide;\n\npublic static Glide get(Context context) {\n    if (glide == null) {\n        synchronized (Glide.class) {\n            if (glide == null) {\n                Context applicationContext = context.getApplicationContext();\n                List<GlideModule> modules = new ManifestParser(applicationContext).parse();\n\n                GlideBuilder builder = new GlideBuilder(applicationContext);\n                for (GlideModule module : modules) {\n                    module.applyOptions(applicationContext, builder);\n                }\n                glide = builder.createGlide();\n                for (GlideModule module : modules) {\n                    module.registerComponents(applicationContext, glide);\n                }\n            }\n        }\n    }\n\n    return glide;\n}\n```\n\n#### GlideBuilder\n\n利用GlideBuilder中的createGlide()方法生成了Glide, 在这个过程中完成了以下几个任务:\n\n1. 初始化线程池\n2. 初始化bitmap池\n3. 初始化内存缓存类\n4. 初始化内部磁盘缓存类\n5. 初始化引擎类\n6. 设置默认的解码格式\n\n```java\nGlideBuilder.java\n\nGlide createGlide() {\n    if (sourceService == null) {\n        //初始化线程池\n        final int cores = Math.max(1, Runtime.getRuntime().availableProcessors());\n        sourceService = new FifoPriorityThreadPoolExecutor(cores);\n    }\n    if (diskCacheService == null) {\n        diskCacheService = new FifoPriorityThreadPoolExecutor(1);\n    }\n\n    //初始化bitmap池\n    MemorySizeCalculator calculator = new MemorySizeCalculator(context);\n    if (bitmapPool == null) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            int size = calculator.getBitmapPoolSize();\n            bitmapPool = new LruBitmapPool(size);\n        } else {\n            bitmapPool = new BitmapPoolAdapter();\n        }\n    }\n\n    if (memoryCache == null) {\n        memoryCache = new LruResourceCache(calculator.getMemoryCacheSize());\n    }\n\n    if (diskCacheFactory == null) {\n        diskCacheFactory = new InternalCacheDiskCacheFactory(context);\n    }\n\n    if (engine == null) {\n        engine = new Engine(memoryCache, diskCacheFactory, diskCacheService, sourceService);\n    }\n\n    if (decodeFormat == null) {\n        decodeFormat = DecodeFormat.DEFAULT;\n    }\n\n    return new Glide(engine, memoryCache, bitmapPool, context, decodeFormat);\n}\n```\n\n#### ManifestParser\n\n```java\nManifestParser.java\n\n\nprivate static final String GLIDE_MODULE_VALUE = \"GlideModule\";\n\npublic List<GlideModule> parse() {\n    List<GlideModule> modules = new ArrayList<GlideModule>();\n    try {\n        //根据PackageName获取metadata信息\n        ApplicationInfo appInfo = context.getPackageManager().getApplicationInfo(\n                context.getPackageName(), PackageManager.GET_META_DATA);\n        //若有metadata信息\n        if (appInfo.metaData != null) {\n            //遍历metadata\n            for (String key : appInfo.metaData.keySet()) {\n                //将key和GLIDE_MODULE_VALUE相等的全部加入modules 之中\n                if (GLIDE_MODULE_VALUE.equals(appInfo.metaData.get(key))) {\n                    modules.add(parseModule(key));\n                }\n            }\n        }\n    } catch (PackageManager.NameNotFoundException e) {\n        throw new RuntimeException(\"Unable to find metadata to parse GlideModules\", e);\n    }\n\n    return modules;\n}\n\n//通过反射获取GlideModule实例\nprivate static GlideModule parseModule(String className) {\n    Class<?> clazz;\n    try {\n        clazz = Class.forName(className);\n    } catch (ClassNotFoundException e) {\n        throw new IllegalArgumentException(\"Unable to find GlideModule implementation\", e);\n    }\n\n    Object module;\n    try {\n        module = clazz.newInstance();\n    } catch (InstantiationException e) {\n        throw new RuntimeException(\"Unable to instantiate GlideModule implementation for \" + clazz, e);\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(\"Unable to instantiate GlideModule implementation for \" + clazz, e);\n    }\n\n    if (!(module instanceof GlideModule)) {\n        throw new RuntimeException(\"Expected instanceof GlideModule, but found: \" + module);\n    }\n    return (GlideModule) module;\n}\n```\n\n通过反射的方式获取在Manifest.xml中自定义的GlideModule对象, 获得之后遍历ArrayList<GlideModule>, 对每一个GlideModuled调用相应的applyOptions()和registerComponents()方法.\n\n\n","slug":"android/第三方库/2016-11-30-Glide-source_1","published":1,"updated":"2018-08-09T10:10:11.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglf9t005428t1hsfdi6lp","content":"<h2 id=\"从Glide入口开始\"><a href=\"#从Glide入口开始\" class=\"headerlink\" title=\"从Glide入口开始\"></a>从Glide入口开始</h2><p>Glide最简单的用法如下所示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(context);</span><br><span class=\"line\">    .load(url)</span><br><span class=\"line\">    <span class=\"comment\">//硬盘存储策略</span></span><br><span class=\"line\">    .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class=\"line\">    <span class=\"comment\">//是否启用内存缓存 默认为true</span></span><br><span class=\"line\">    .skipMemoryCache(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">    .centerCrop()</span><br><span class=\"line\">    .into(imageView);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"with-context\"><a href=\"#with-context\" class=\"headerlink\" title=\"with(context)\"></a>with(context)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestManager <span class=\"title\">with</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    RequestManagerRetriever retriever = RequestManagerRetriever.get();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retriever.get(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RequestManagerRetriever-get-context\"><a href=\"#RequestManagerRetriever-get-context\" class=\"headerlink\" title=\"RequestManagerRetriever get(context)\"></a>RequestManagerRetriever get(context)</h3><p>依据传入的context的类型, 进行相应的操作. context的类型主要分为<code>FragmentActivity</code>, <code>Activity</code>和<code>ContextWrapper</code>, 当context是<code>ContextWrapper</code>时, 调用<code>get(Context context)</code>查看其封装的是哪一种Activity.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManagerRetriever.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"You cannot start a load on a null Context\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Util.isOnMainThread() &amp;&amp; !(context <span class=\"keyword\">instanceof</span> Application)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> get((FragmentActivity) context);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (context <span class=\"keyword\">instanceof</span> Activity) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> get((Activity) context);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (context <span class=\"keyword\">instanceof</span> ContextWrapper) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(((ContextWrapper) context).getBaseContext());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getApplicationManager(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RequestManagerRetriever-get-Activity-get-FragmentActivity\"><a href=\"#RequestManagerRetriever-get-Activity-get-FragmentActivity\" class=\"headerlink\" title=\"RequestManagerRetriever get(Activity) get(FragmentActivity)\"></a>RequestManagerRetriever get(Activity) get(FragmentActivity)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManagerRetriever.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(FragmentActivity activity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(activity.getApplicationContext());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        assertNotDestroyed(activity);</span><br><span class=\"line\">        FragmentManager fm = activity.getSupportFragmentManager();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supportFragmentGet(activity, fm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(activity.getApplicationContext());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断activity是否已经被销毁, 如果销毁抛出异常</span></span><br><span class=\"line\">        assertNotDestroyed(activity);</span><br><span class=\"line\">        <span class=\"comment\">//获取对应FragmenManager</span></span><br><span class=\"line\">        android.app.FragmentManager fm = activity.getFragmentManager();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragmentGet(activity, fm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个方法差别不大, 主要是因为<code>FragmentActivity</code>来自于support v4库中, 和标准库Activity获取FragmentManager的方法以及返回的FragmentManager类型不太相同.</p>\n<h3 id=\"RequestManagerRetriever-fragmentGet-Context-FramentManager\"><a href=\"#RequestManagerRetriever-fragmentGet-Context-FramentManager\" class=\"headerlink\" title=\"RequestManagerRetriever fragmentGet(Context, FramentManager)\"></a>RequestManagerRetriever fragmentGet(Context, FramentManager)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManagerRetriever.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.JELLY_BEAN_MR1)</span><br><span class=\"line\"><span class=\"function\">RequestManagerFragment <span class=\"title\">getRequestManagerFragment</span><span class=\"params\">(<span class=\"keyword\">final</span> android.app.FragmentManager fm)</span> </span>&#123;</span><br><span class=\"line\">    RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        current = pendingRequestManagerFragments.get(fm);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            current = <span class=\"keyword\">new</span> RequestManagerFragment();</span><br><span class=\"line\">            pendingRequestManagerFragments.put(fm, current);</span><br><span class=\"line\">            fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();</span><br><span class=\"line\">            handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</span><br><span class=\"line\"><span class=\"function\">RequestManager <span class=\"title\">fragmentGet</span><span class=\"params\">(Context context, android.app.FragmentManager fm)</span> </span>&#123;</span><br><span class=\"line\">    RequestManagerFragment current = getRequestManagerFragment(fm);</span><br><span class=\"line\">    RequestManager requestManager = current.getRequestManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        requestManager = <span class=\"keyword\">new</span> RequestManager(context, current.getLifecycle(), current.getRequestManagerTreeNode());</span><br><span class=\"line\">        current.setRequestManager(requestManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> requestManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两段代码的主要意义在于生成一个<code>RequestManagerFragment</code>并没有内容的但是绑定在制定的context上. 其实目的就是将该Fragment的生命周期绑定在该context上, 并在相应的方法调用时执行相应的操作.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManagerFragment.java</span><br><span class=\"line\"></span><br><span class=\"line\">ActivityFragmentLifecycle lifecycle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">    lifecycle.onStart();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">    lifecycle.onStop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    lifecycle.onDestroy();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RequestManager\"><a href=\"#RequestManager\" class=\"headerlink\" title=\"RequestManager\"></a>RequestManager</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManager implements LifecycleListener</span><br><span class=\"line\"><span class=\"comment\">//ActivityFragmentLifecycle 也实现了 LifecycleListener</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// onStart might not be called because this object may be created after the fragment/activity's onStart method.</span></span><br><span class=\"line\">    resumeRequests();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Lifecycle callback that unregisters for connectivity events (if the android.permission.ACCESS_NETWORK_STATE</span></span><br><span class=\"line\"><span class=\"comment\">    * permission is present) and pauses in progress loads.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    pauseRequests();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Lifecycle callback that cancels all in progress requests and clears and recycles resources for all completed</span></span><br><span class=\"line\"><span class=\"comment\">    * requests.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    requestTracker.clearRequests();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityFragmentLifecycle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;LifecycleListener&gt; lifecycleListeners =</span><br><span class=\"line\">            Collections.newSetFromMap(<span class=\"keyword\">new</span> WeakHashMap&lt;LifecycleListener, Boolean&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isStarted;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isDestroyed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Adds the given listener to the list of listeners to be notified on each lifecycle event.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     The latest lifecycle event will be called on the given listener synchronously in this method. If the</span></span><br><span class=\"line\"><span class=\"comment\">     *     activity or fragment is stopped, &#123;<span class=\"doctag\">@link</span> LifecycleListener#onStop()&#125;&#125; will be called, and same for onStart and</span></span><br><span class=\"line\"><span class=\"comment\">     *     onDestroy.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     Note - &#123;<span class=\"doctag\">@link</span> com.bumptech.glide.manager.LifecycleListener&#125;s that are added more than once will have their</span></span><br><span class=\"line\"><span class=\"comment\">     *     lifecycle methods called more than once. It is the caller's responsibility to avoid adding listeners</span></span><br><span class=\"line\"><span class=\"comment\">     *     multiple times.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addListener</span><span class=\"params\">(LifecycleListener listener)</span> </span>&#123;</span><br><span class=\"line\">        lifecycleListeners.add(listener);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDestroyed) &#123;</span><br><span class=\"line\">            listener.onDestroy();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isStarted) &#123;</span><br><span class=\"line\">            listener.onStart();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            listener.onStop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        isStarted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class=\"line\">            lifecycleListener.onStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        isStarted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class=\"line\">            lifecycleListener.onStop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        isDestroyed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class=\"line\">            lifecycleListener.onDestroy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述的代码总体的目的就是将RequestManager的生命周期和RequestManagerFragment绑定起来, 进而和Activity的生命周期绑定起来.</p>\n<h2 id=\"RequestManager-1\"><a href=\"#RequestManager-1\" class=\"headerlink\" title=\"RequestManager\"></a>RequestManager</h2><p>下面来看一下RequestManager的功能.</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManager.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestManager</span><span class=\"params\">(Context context, Lifecycle lifecycle, RequestManagerTreeNode treeNode)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(context, lifecycle, treeNode, <span class=\"keyword\">new</span> RequestTracker(), <span class=\"keyword\">new</span> ConnectivityMonitorFactory());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">RequestManager(Context context, <span class=\"keyword\">final</span> Lifecycle lifecycle, RequestManagerTreeNode treeNode,</span><br><span class=\"line\">        RequestTracker requestTracker, ConnectivityMonitorFactory factory) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context = context.getApplicationContext();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lifecycle = lifecycle;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeNode = treeNode;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requestTracker = requestTracker;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.glide = Glide.get(context);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.optionsApplier = <span class=\"keyword\">new</span> OptionsApplier();</span><br><span class=\"line\"></span><br><span class=\"line\">    ConnectivityMonitor connectivityMonitor = factory.build(context,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> RequestManagerConnectivityListener(requestTracker));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If we're the application level request manager, we may be created on a background thread. In that case we</span></span><br><span class=\"line\">    <span class=\"comment\">// cannot risk synchronously pausing or resuming requests, so we hack around the issue by delaying adding</span></span><br><span class=\"line\">    <span class=\"comment\">// ourselves as a lifecycle listener by posting to the main thread. This should be entirely safe.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Handler(Looper.getMainLooper()).post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                lifecycle.addListener(RequestManager.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        lifecycle.addListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lifecycle.addListener(connectivityMonitor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Glide-get-context\"><a href=\"#Glide-get-context\" class=\"headerlink\" title=\"Glide.get(context)\"></a>Glide.get(context)</h4><p>该方法就是利用单例模式获取一个Glide实例.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Glide glide;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Glide <span class=\"title\">get</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (glide == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Glide.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (glide == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Context applicationContext = context.getApplicationContext();</span><br><span class=\"line\">                List&lt;GlideModule&gt; modules = <span class=\"keyword\">new</span> ManifestParser(applicationContext).parse();</span><br><span class=\"line\"></span><br><span class=\"line\">                GlideBuilder builder = <span class=\"keyword\">new</span> GlideBuilder(applicationContext);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (GlideModule <span class=\"keyword\">module</span> : modules) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">module</span>.applyOptions(applicationContext, builder);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                glide = builder.createGlide();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (GlideModule <span class=\"keyword\">module</span> : modules) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">module</span>.registerComponents(applicationContext, glide);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> glide;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GlideBuilder\"><a href=\"#GlideBuilder\" class=\"headerlink\" title=\"GlideBuilder\"></a>GlideBuilder</h4><p>利用GlideBuilder中的createGlide()方法生成了Glide, 在这个过程中完成了以下几个任务:</p>\n<ol>\n<li>初始化线程池</li>\n<li>初始化bitmap池</li>\n<li>初始化内存缓存类</li>\n<li>初始化内部磁盘缓存类</li>\n<li>初始化引擎类</li>\n<li>设置默认的解码格式</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlideBuilder.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Glide <span class=\"title\">createGlide</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sourceService == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化线程池</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> cores = Math.max(<span class=\"number\">1</span>, Runtime.getRuntime().availableProcessors());</span><br><span class=\"line\">        sourceService = <span class=\"keyword\">new</span> FifoPriorityThreadPoolExecutor(cores);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diskCacheService == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        diskCacheService = <span class=\"keyword\">new</span> FifoPriorityThreadPoolExecutor(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化bitmap池</span></span><br><span class=\"line\">    MemorySizeCalculator calculator = <span class=\"keyword\">new</span> MemorySizeCalculator(context);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bitmapPool == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = calculator.getBitmapPoolSize();</span><br><span class=\"line\">            bitmapPool = <span class=\"keyword\">new</span> LruBitmapPool(size);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            bitmapPool = <span class=\"keyword\">new</span> BitmapPoolAdapter();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memoryCache == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        memoryCache = <span class=\"keyword\">new</span> LruResourceCache(calculator.getMemoryCacheSize());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diskCacheFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        diskCacheFactory = <span class=\"keyword\">new</span> InternalCacheDiskCacheFactory(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (engine == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        engine = <span class=\"keyword\">new</span> Engine(memoryCache, diskCacheFactory, diskCacheService, sourceService);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (decodeFormat == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        decodeFormat = DecodeFormat.DEFAULT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Glide(engine, memoryCache, bitmapPool, context, decodeFormat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ManifestParser\"><a href=\"#ManifestParser\" class=\"headerlink\" title=\"ManifestParser\"></a>ManifestParser</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ManifestParser.java</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String GLIDE_MODULE_VALUE = <span class=\"string\">\"GlideModule\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;GlideModule&gt; <span class=\"title\">parse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;GlideModule&gt; modules = <span class=\"keyword\">new</span> ArrayList&lt;GlideModule&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据PackageName获取metadata信息</span></span><br><span class=\"line\">        ApplicationInfo appInfo = context.getPackageManager().getApplicationInfo(</span><br><span class=\"line\">                context.getPackageName(), PackageManager.GET_META_DATA);</span><br><span class=\"line\">        <span class=\"comment\">//若有metadata信息</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (appInfo.metaData != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历metadata</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String key : appInfo.metaData.keySet()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//将key和GLIDE_MODULE_VALUE相等的全部加入modules 之中</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (GLIDE_MODULE_VALUE.equals(appInfo.metaData.get(key))) &#123;</span><br><span class=\"line\">                    modules.add(parseModule(key));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to find metadata to parse GlideModules\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> modules;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过反射获取GlideModule实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> GlideModule <span class=\"title\">parseModule</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; clazz;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        clazz = Class.forName(className);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unable to find GlideModule implementation\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object <span class=\"keyword\">module</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">module</span> = clazz.newInstance();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to instantiate GlideModule implementation for \"</span> + clazz, e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to instantiate GlideModule implementation for \"</span> + clazz, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">module</span> <span class=\"keyword\">instanceof</span> GlideModule)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Expected instanceof GlideModule, but found: \"</span> + <span class=\"keyword\">module</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (GlideModule) <span class=\"keyword\">module</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过反射的方式获取在Manifest.xml中自定义的GlideModule对象, 获得之后遍历ArrayList<glidemodule>, 对每一个GlideModuled调用相应的applyOptions()和registerComponents()方法.</glidemodule></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"从Glide入口开始\"><a href=\"#从Glide入口开始\" class=\"headerlink\" title=\"从Glide入口开始\"></a>从Glide入口开始</h2><p>Glide最简单的用法如下所示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(context);</span><br><span class=\"line\">    .load(url)</span><br><span class=\"line\">    <span class=\"comment\">//硬盘存储策略</span></span><br><span class=\"line\">    .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class=\"line\">    <span class=\"comment\">//是否启用内存缓存 默认为true</span></span><br><span class=\"line\">    .skipMemoryCache(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">    .centerCrop()</span><br><span class=\"line\">    .into(imageView);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"with-context\"><a href=\"#with-context\" class=\"headerlink\" title=\"with(context)\"></a>with(context)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestManager <span class=\"title\">with</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    RequestManagerRetriever retriever = RequestManagerRetriever.get();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retriever.get(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RequestManagerRetriever-get-context\"><a href=\"#RequestManagerRetriever-get-context\" class=\"headerlink\" title=\"RequestManagerRetriever get(context)\"></a>RequestManagerRetriever get(context)</h3><p>依据传入的context的类型, 进行相应的操作. context的类型主要分为<code>FragmentActivity</code>, <code>Activity</code>和<code>ContextWrapper</code>, 当context是<code>ContextWrapper</code>时, 调用<code>get(Context context)</code>查看其封装的是哪一种Activity.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManagerRetriever.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"You cannot start a load on a null Context\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Util.isOnMainThread() &amp;&amp; !(context <span class=\"keyword\">instanceof</span> Application)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> get((FragmentActivity) context);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (context <span class=\"keyword\">instanceof</span> Activity) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> get((Activity) context);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (context <span class=\"keyword\">instanceof</span> ContextWrapper) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(((ContextWrapper) context).getBaseContext());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getApplicationManager(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RequestManagerRetriever-get-Activity-get-FragmentActivity\"><a href=\"#RequestManagerRetriever-get-Activity-get-FragmentActivity\" class=\"headerlink\" title=\"RequestManagerRetriever get(Activity) get(FragmentActivity)\"></a>RequestManagerRetriever get(Activity) get(FragmentActivity)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManagerRetriever.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(FragmentActivity activity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(activity.getApplicationContext());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        assertNotDestroyed(activity);</span><br><span class=\"line\">        FragmentManager fm = activity.getSupportFragmentManager();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supportFragmentGet(activity, fm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(activity.getApplicationContext());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断activity是否已经被销毁, 如果销毁抛出异常</span></span><br><span class=\"line\">        assertNotDestroyed(activity);</span><br><span class=\"line\">        <span class=\"comment\">//获取对应FragmenManager</span></span><br><span class=\"line\">        android.app.FragmentManager fm = activity.getFragmentManager();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragmentGet(activity, fm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个方法差别不大, 主要是因为<code>FragmentActivity</code>来自于support v4库中, 和标准库Activity获取FragmentManager的方法以及返回的FragmentManager类型不太相同.</p>\n<h3 id=\"RequestManagerRetriever-fragmentGet-Context-FramentManager\"><a href=\"#RequestManagerRetriever-fragmentGet-Context-FramentManager\" class=\"headerlink\" title=\"RequestManagerRetriever fragmentGet(Context, FramentManager)\"></a>RequestManagerRetriever fragmentGet(Context, FramentManager)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManagerRetriever.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.JELLY_BEAN_MR1)</span><br><span class=\"line\"><span class=\"function\">RequestManagerFragment <span class=\"title\">getRequestManagerFragment</span><span class=\"params\">(<span class=\"keyword\">final</span> android.app.FragmentManager fm)</span> </span>&#123;</span><br><span class=\"line\">    RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        current = pendingRequestManagerFragments.get(fm);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            current = <span class=\"keyword\">new</span> RequestManagerFragment();</span><br><span class=\"line\">            pendingRequestManagerFragments.put(fm, current);</span><br><span class=\"line\">            fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();</span><br><span class=\"line\">            handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</span><br><span class=\"line\"><span class=\"function\">RequestManager <span class=\"title\">fragmentGet</span><span class=\"params\">(Context context, android.app.FragmentManager fm)</span> </span>&#123;</span><br><span class=\"line\">    RequestManagerFragment current = getRequestManagerFragment(fm);</span><br><span class=\"line\">    RequestManager requestManager = current.getRequestManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        requestManager = <span class=\"keyword\">new</span> RequestManager(context, current.getLifecycle(), current.getRequestManagerTreeNode());</span><br><span class=\"line\">        current.setRequestManager(requestManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> requestManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两段代码的主要意义在于生成一个<code>RequestManagerFragment</code>并没有内容的但是绑定在制定的context上. 其实目的就是将该Fragment的生命周期绑定在该context上, 并在相应的方法调用时执行相应的操作.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManagerFragment.java</span><br><span class=\"line\"></span><br><span class=\"line\">ActivityFragmentLifecycle lifecycle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">    lifecycle.onStart();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">    lifecycle.onStop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    lifecycle.onDestroy();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RequestManager\"><a href=\"#RequestManager\" class=\"headerlink\" title=\"RequestManager\"></a>RequestManager</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManager implements LifecycleListener</span><br><span class=\"line\"><span class=\"comment\">//ActivityFragmentLifecycle 也实现了 LifecycleListener</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// onStart might not be called because this object may be created after the fragment/activity's onStart method.</span></span><br><span class=\"line\">    resumeRequests();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Lifecycle callback that unregisters for connectivity events (if the android.permission.ACCESS_NETWORK_STATE</span></span><br><span class=\"line\"><span class=\"comment\">    * permission is present) and pauses in progress loads.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    pauseRequests();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Lifecycle callback that cancels all in progress requests and clears and recycles resources for all completed</span></span><br><span class=\"line\"><span class=\"comment\">    * requests.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    requestTracker.clearRequests();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityFragmentLifecycle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;LifecycleListener&gt; lifecycleListeners =</span><br><span class=\"line\">            Collections.newSetFromMap(<span class=\"keyword\">new</span> WeakHashMap&lt;LifecycleListener, Boolean&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isStarted;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isDestroyed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Adds the given listener to the list of listeners to be notified on each lifecycle event.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     The latest lifecycle event will be called on the given listener synchronously in this method. If the</span></span><br><span class=\"line\"><span class=\"comment\">     *     activity or fragment is stopped, &#123;<span class=\"doctag\">@link</span> LifecycleListener#onStop()&#125;&#125; will be called, and same for onStart and</span></span><br><span class=\"line\"><span class=\"comment\">     *     onDestroy.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     Note - &#123;<span class=\"doctag\">@link</span> com.bumptech.glide.manager.LifecycleListener&#125;s that are added more than once will have their</span></span><br><span class=\"line\"><span class=\"comment\">     *     lifecycle methods called more than once. It is the caller's responsibility to avoid adding listeners</span></span><br><span class=\"line\"><span class=\"comment\">     *     multiple times.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addListener</span><span class=\"params\">(LifecycleListener listener)</span> </span>&#123;</span><br><span class=\"line\">        lifecycleListeners.add(listener);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDestroyed) &#123;</span><br><span class=\"line\">            listener.onDestroy();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isStarted) &#123;</span><br><span class=\"line\">            listener.onStart();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            listener.onStop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        isStarted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class=\"line\">            lifecycleListener.onStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        isStarted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class=\"line\">            lifecycleListener.onStop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        isDestroyed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class=\"line\">            lifecycleListener.onDestroy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述的代码总体的目的就是将RequestManager的生命周期和RequestManagerFragment绑定起来, 进而和Activity的生命周期绑定起来.</p>\n<h2 id=\"RequestManager-1\"><a href=\"#RequestManager-1\" class=\"headerlink\" title=\"RequestManager\"></a>RequestManager</h2><p>下面来看一下RequestManager的功能.</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestManager.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestManager</span><span class=\"params\">(Context context, Lifecycle lifecycle, RequestManagerTreeNode treeNode)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(context, lifecycle, treeNode, <span class=\"keyword\">new</span> RequestTracker(), <span class=\"keyword\">new</span> ConnectivityMonitorFactory());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">RequestManager(Context context, <span class=\"keyword\">final</span> Lifecycle lifecycle, RequestManagerTreeNode treeNode,</span><br><span class=\"line\">        RequestTracker requestTracker, ConnectivityMonitorFactory factory) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context = context.getApplicationContext();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lifecycle = lifecycle;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeNode = treeNode;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requestTracker = requestTracker;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.glide = Glide.get(context);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.optionsApplier = <span class=\"keyword\">new</span> OptionsApplier();</span><br><span class=\"line\"></span><br><span class=\"line\">    ConnectivityMonitor connectivityMonitor = factory.build(context,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> RequestManagerConnectivityListener(requestTracker));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If we're the application level request manager, we may be created on a background thread. In that case we</span></span><br><span class=\"line\">    <span class=\"comment\">// cannot risk synchronously pausing or resuming requests, so we hack around the issue by delaying adding</span></span><br><span class=\"line\">    <span class=\"comment\">// ourselves as a lifecycle listener by posting to the main thread. This should be entirely safe.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Handler(Looper.getMainLooper()).post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                lifecycle.addListener(RequestManager.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        lifecycle.addListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lifecycle.addListener(connectivityMonitor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Glide-get-context\"><a href=\"#Glide-get-context\" class=\"headerlink\" title=\"Glide.get(context)\"></a>Glide.get(context)</h4><p>该方法就是利用单例模式获取一个Glide实例.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Glide glide;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Glide <span class=\"title\">get</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (glide == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Glide.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (glide == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Context applicationContext = context.getApplicationContext();</span><br><span class=\"line\">                List&lt;GlideModule&gt; modules = <span class=\"keyword\">new</span> ManifestParser(applicationContext).parse();</span><br><span class=\"line\"></span><br><span class=\"line\">                GlideBuilder builder = <span class=\"keyword\">new</span> GlideBuilder(applicationContext);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (GlideModule <span class=\"keyword\">module</span> : modules) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">module</span>.applyOptions(applicationContext, builder);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                glide = builder.createGlide();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (GlideModule <span class=\"keyword\">module</span> : modules) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">module</span>.registerComponents(applicationContext, glide);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> glide;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GlideBuilder\"><a href=\"#GlideBuilder\" class=\"headerlink\" title=\"GlideBuilder\"></a>GlideBuilder</h4><p>利用GlideBuilder中的createGlide()方法生成了Glide, 在这个过程中完成了以下几个任务:</p>\n<ol>\n<li>初始化线程池</li>\n<li>初始化bitmap池</li>\n<li>初始化内存缓存类</li>\n<li>初始化内部磁盘缓存类</li>\n<li>初始化引擎类</li>\n<li>设置默认的解码格式</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlideBuilder.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Glide <span class=\"title\">createGlide</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sourceService == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化线程池</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> cores = Math.max(<span class=\"number\">1</span>, Runtime.getRuntime().availableProcessors());</span><br><span class=\"line\">        sourceService = <span class=\"keyword\">new</span> FifoPriorityThreadPoolExecutor(cores);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diskCacheService == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        diskCacheService = <span class=\"keyword\">new</span> FifoPriorityThreadPoolExecutor(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化bitmap池</span></span><br><span class=\"line\">    MemorySizeCalculator calculator = <span class=\"keyword\">new</span> MemorySizeCalculator(context);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bitmapPool == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = calculator.getBitmapPoolSize();</span><br><span class=\"line\">            bitmapPool = <span class=\"keyword\">new</span> LruBitmapPool(size);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            bitmapPool = <span class=\"keyword\">new</span> BitmapPoolAdapter();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memoryCache == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        memoryCache = <span class=\"keyword\">new</span> LruResourceCache(calculator.getMemoryCacheSize());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diskCacheFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        diskCacheFactory = <span class=\"keyword\">new</span> InternalCacheDiskCacheFactory(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (engine == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        engine = <span class=\"keyword\">new</span> Engine(memoryCache, diskCacheFactory, diskCacheService, sourceService);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (decodeFormat == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        decodeFormat = DecodeFormat.DEFAULT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Glide(engine, memoryCache, bitmapPool, context, decodeFormat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ManifestParser\"><a href=\"#ManifestParser\" class=\"headerlink\" title=\"ManifestParser\"></a>ManifestParser</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ManifestParser.java</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String GLIDE_MODULE_VALUE = <span class=\"string\">\"GlideModule\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;GlideModule&gt; <span class=\"title\">parse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;GlideModule&gt; modules = <span class=\"keyword\">new</span> ArrayList&lt;GlideModule&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据PackageName获取metadata信息</span></span><br><span class=\"line\">        ApplicationInfo appInfo = context.getPackageManager().getApplicationInfo(</span><br><span class=\"line\">                context.getPackageName(), PackageManager.GET_META_DATA);</span><br><span class=\"line\">        <span class=\"comment\">//若有metadata信息</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (appInfo.metaData != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历metadata</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String key : appInfo.metaData.keySet()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//将key和GLIDE_MODULE_VALUE相等的全部加入modules 之中</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (GLIDE_MODULE_VALUE.equals(appInfo.metaData.get(key))) &#123;</span><br><span class=\"line\">                    modules.add(parseModule(key));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to find metadata to parse GlideModules\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> modules;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过反射获取GlideModule实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> GlideModule <span class=\"title\">parseModule</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; clazz;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        clazz = Class.forName(className);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unable to find GlideModule implementation\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object <span class=\"keyword\">module</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">module</span> = clazz.newInstance();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to instantiate GlideModule implementation for \"</span> + clazz, e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to instantiate GlideModule implementation for \"</span> + clazz, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">module</span> <span class=\"keyword\">instanceof</span> GlideModule)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Expected instanceof GlideModule, but found: \"</span> + <span class=\"keyword\">module</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (GlideModule) <span class=\"keyword\">module</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过反射的方式获取在Manifest.xml中自定义的GlideModule对象, 获得之后遍历ArrayList<glidemodule>, 对每一个GlideModuled调用相应的applyOptions()和registerComponents()方法.</glidemodule></p>\n"},{"author":"ivyxjc","date":"2017-02-28T16:00:00.000Z","title":"Fibonacci数列及相关问题","keywords":null,"description":"与Fibonacci数列相关的问题的解法","mathjax":true,"_content":"\n## Fibonacci数列及相关的问题的描述\n\n1. 给定正整数n, 求解Fibonacci数列第n项的值;\n2. 给定正整数N, 代表台阶, 一次可以跨2个或者1个台阶, 有多少走法\n3. 假设成熟的母牛只会生1头小母牛, 并且永远不会死, 第一年农场有1只成熟的母牛,从第二年开始, 母牛开始生小母牛. 每只小母牛3年之后成熟. 给定正整数N, 求出N年后牛的数量.\n\n\n## 基础解法\n\n### 递归的解法\n\n递归的解法是最基础, 也是最好理解, 但是时间复杂度很高, 为 $O(2^n)$ ,空间复杂度为$O(2^n)$\n\n```java\npublic static int fibRecursion(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fibRecursion(n - 1) + fibRecursion(n - 2);\n}\n```\n\n### 迭代的解法\n\n迭代的解法即将已经解决的位置处的数存储, 之后直接调用, 不用再计算\n\n时间复杂度为$O(n)$, 空间复杂度为$O(n)$.\n\n```java\npublic static int fibIteration(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    int[] arr = new int[n + 1];\n    arr[0] = 0;\n    arr[1] = 1;\n    for (int i = 2; i < n + 1; i++) {\n        arr[i] = arr[i - 1] + arr[i - 2];\n    }\n    return arr[n];\n}\n```\n\n仅记录前两个值, 空间复杂度为$O(1)$\n\n```java\npublic static BigInteger fibIteration(int n) {\n        if (n == 1) {\n            return new BigInteger(\"1\");\n        }\n        if (n == 0) {\n            return new BigInteger(\"1\");\n        }\n\n\n        BigInteger res = new BigInteger(\"0\");\n        BigInteger pre_1 = BigInteger.valueOf(1);\n        BigInteger pre_2 = BigInteger.valueOf(0);\n\n        for (int i = 2; i < n + 1; i++) {\n            res = pre_1.add(pre_2);\n            pre_2 = pre_1;\n            pre_1 = res;\n        }\n        return res;\n    }\n```\n\n## 进阶解法\n\n\n### 推导过程\n\n$$\nF(n)=F(n-1)+F(n-2) \\\\\\\\\n\\Rightarrow\n\\begin{vmatrix}\nF(n) & F(n-1) \\\\\\\\\n\\end{vmatrix}\n=\n\\begin{vmatrix}\nF(n) & F(n-1) \n\\end{vmatrix}\n\\times\n\\begin{vmatrix}\na & b \\\\\\\\\nc & d \n\\end{vmatrix}\\\\\\\\\n$$\n\n解得:<br>\n\n$$\na=1 \\\\\nb=1 \\\\\nc=1 \\\\\nd=1\n$$\n\n即: <br>\n\n$$\n\\begin{vmatrix}\n F(n) & F(n-1)\n\\end{vmatrix}\n=\n\\begin{vmatrix}\nF(n-1)& F(n-2)\n\\end{vmatrix}\n\\times\n\\begin{vmatrix}\n1 & 1 \\\\\\\\ \n1 & 0\n\\end{vmatrix}\n\\\\\\\\\n\\Rightarrow\n\\begin{vmatrix}\n F(n) & F(n-1)\n\\end{vmatrix}\n=\n\\begin{vmatrix}\n 1 & 1\n\\end{vmatrix}\n\\times\n{\\begin{vmatrix}\n1 & 1 \\\\\\\\ \n1 & 0\n\\end{vmatrix}}^{n-2}\n$$\n\n\n### 代码\n\n```java\n\npublic static BigInteger fibMatrix(int n) {\n    if (BigInteger.ZERO.compareTo(BigInteger.valueOf(n)) == 0) {\n        return new BigInteger(\"0\");\n    }\n    if (BigInteger.ONE.compareTo(BigInteger.valueOf(n)) == 0) {\n        return new BigInteger(\"1\");\n    }\n    return matrixPower(new int[][]{{1, 1}, {1, 0}}, n)[0][0];\n}\n\n//计算矩阵matrix的p次方\npublic static BigInteger[][] matrixPower(int[][] matrix, int p) throws IllegalArgumentException {\n    if (matrix[0].length != matrix.length) {\n        throw new IllegalArgumentException(\"矩阵输入错误, 无法进行乘法.\");\n    }\n    BigInteger[][] res = new BigInteger[matrix.length][matrix.length];\n    for (int i = 0; i < res.length; i++) {\n        for (int j = 0; j < res[0].length; j++) {\n            res[i][j] = BigInteger.valueOf(0);\n        }\n    }\n    for (int i = 0; i < res.length; i++) {\n        res[i][i] = new BigInteger(\"1\");\n    }\n\n    BigInteger[][] tmp = new BigInteger[matrix.length][matrix.length];\n    for (int i = 0; i < tmp.length; i++) {\n        for (int j = 0; j < tmp[0].length; j++) {\n            tmp[i][j] = BigInteger.valueOf(matrix[i][j]);\n        }\n    }\n\n    while (p > 0) {\n        int flag = p & 1;\n        if (flag == 1) {\n            res = multiMatrix(res, tmp);\n        }\n        tmp = multiMatrix(tmp, tmp);\n        p = p >> 1;\n    }\n\n    return multiMatrix(new BigInteger[][]{{new BigInteger(\"1\"), new BigInteger(\"1\")}}, res);\n}\n\n\n\n//矩阵乘法\npublic static BigInteger[][] multiMatrix(BigInteger[][] m1, BigInteger[][] m2) throws IllegalArgumentException {\n    if (m1[0].length != m2.length) {\n        throw new IllegalArgumentException(\"矩阵输入错误, 无法进行乘法.\");\n    }\n    BigInteger[][] res = new BigInteger[m1.length][m2[0].length];\n    for (int i = 0; i < m1.length; i++) {\n        for (int j = 0; j < m2[0].length; j++) {\n            res[i][j] = new BigInteger(\"0\");\n        }\n    }\n\n    for (int i = 0; i < m1.length; i++) {\n        for (int j = 0; j < m2[0].length; j++) {\n            for (int k = 0; k < m2.length; k++) {\n                res[i][j] = res[i][j].add(m1[i][k].multiply(m2[k][j]));\n            }\n        }\n    }\n    return res;\n}\n```\n\n\n## 运行时间比较:\n\n当n=45时, 递归的方法就需要6794ms才能完成.\n\n当n=1000000时, 迭代的方法耗时16s左右, 使用矩阵的方法只需耗时1.266s即完成\n","source":"_posts/algorithm/CodeIntervieBook/RecursionAndDP/2017-03-01-Fibonacci.md","raw":"---\nauthor: ivyxjc\ndate: 2017-03-01\ntitle: Fibonacci数列及相关问题\ncategory: Algorithm\ntags: [Fibonacci,dynamic_programming]\nkeywords:\ndescription: 与Fibonacci数列相关的问题的解法\nmathjax: true\n---\n\n## Fibonacci数列及相关的问题的描述\n\n1. 给定正整数n, 求解Fibonacci数列第n项的值;\n2. 给定正整数N, 代表台阶, 一次可以跨2个或者1个台阶, 有多少走法\n3. 假设成熟的母牛只会生1头小母牛, 并且永远不会死, 第一年农场有1只成熟的母牛,从第二年开始, 母牛开始生小母牛. 每只小母牛3年之后成熟. 给定正整数N, 求出N年后牛的数量.\n\n\n## 基础解法\n\n### 递归的解法\n\n递归的解法是最基础, 也是最好理解, 但是时间复杂度很高, 为 $O(2^n)$ ,空间复杂度为$O(2^n)$\n\n```java\npublic static int fibRecursion(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fibRecursion(n - 1) + fibRecursion(n - 2);\n}\n```\n\n### 迭代的解法\n\n迭代的解法即将已经解决的位置处的数存储, 之后直接调用, 不用再计算\n\n时间复杂度为$O(n)$, 空间复杂度为$O(n)$.\n\n```java\npublic static int fibIteration(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    int[] arr = new int[n + 1];\n    arr[0] = 0;\n    arr[1] = 1;\n    for (int i = 2; i < n + 1; i++) {\n        arr[i] = arr[i - 1] + arr[i - 2];\n    }\n    return arr[n];\n}\n```\n\n仅记录前两个值, 空间复杂度为$O(1)$\n\n```java\npublic static BigInteger fibIteration(int n) {\n        if (n == 1) {\n            return new BigInteger(\"1\");\n        }\n        if (n == 0) {\n            return new BigInteger(\"1\");\n        }\n\n\n        BigInteger res = new BigInteger(\"0\");\n        BigInteger pre_1 = BigInteger.valueOf(1);\n        BigInteger pre_2 = BigInteger.valueOf(0);\n\n        for (int i = 2; i < n + 1; i++) {\n            res = pre_1.add(pre_2);\n            pre_2 = pre_1;\n            pre_1 = res;\n        }\n        return res;\n    }\n```\n\n## 进阶解法\n\n\n### 推导过程\n\n$$\nF(n)=F(n-1)+F(n-2) \\\\\\\\\n\\Rightarrow\n\\begin{vmatrix}\nF(n) & F(n-1) \\\\\\\\\n\\end{vmatrix}\n=\n\\begin{vmatrix}\nF(n) & F(n-1) \n\\end{vmatrix}\n\\times\n\\begin{vmatrix}\na & b \\\\\\\\\nc & d \n\\end{vmatrix}\\\\\\\\\n$$\n\n解得:<br>\n\n$$\na=1 \\\\\nb=1 \\\\\nc=1 \\\\\nd=1\n$$\n\n即: <br>\n\n$$\n\\begin{vmatrix}\n F(n) & F(n-1)\n\\end{vmatrix}\n=\n\\begin{vmatrix}\nF(n-1)& F(n-2)\n\\end{vmatrix}\n\\times\n\\begin{vmatrix}\n1 & 1 \\\\\\\\ \n1 & 0\n\\end{vmatrix}\n\\\\\\\\\n\\Rightarrow\n\\begin{vmatrix}\n F(n) & F(n-1)\n\\end{vmatrix}\n=\n\\begin{vmatrix}\n 1 & 1\n\\end{vmatrix}\n\\times\n{\\begin{vmatrix}\n1 & 1 \\\\\\\\ \n1 & 0\n\\end{vmatrix}}^{n-2}\n$$\n\n\n### 代码\n\n```java\n\npublic static BigInteger fibMatrix(int n) {\n    if (BigInteger.ZERO.compareTo(BigInteger.valueOf(n)) == 0) {\n        return new BigInteger(\"0\");\n    }\n    if (BigInteger.ONE.compareTo(BigInteger.valueOf(n)) == 0) {\n        return new BigInteger(\"1\");\n    }\n    return matrixPower(new int[][]{{1, 1}, {1, 0}}, n)[0][0];\n}\n\n//计算矩阵matrix的p次方\npublic static BigInteger[][] matrixPower(int[][] matrix, int p) throws IllegalArgumentException {\n    if (matrix[0].length != matrix.length) {\n        throw new IllegalArgumentException(\"矩阵输入错误, 无法进行乘法.\");\n    }\n    BigInteger[][] res = new BigInteger[matrix.length][matrix.length];\n    for (int i = 0; i < res.length; i++) {\n        for (int j = 0; j < res[0].length; j++) {\n            res[i][j] = BigInteger.valueOf(0);\n        }\n    }\n    for (int i = 0; i < res.length; i++) {\n        res[i][i] = new BigInteger(\"1\");\n    }\n\n    BigInteger[][] tmp = new BigInteger[matrix.length][matrix.length];\n    for (int i = 0; i < tmp.length; i++) {\n        for (int j = 0; j < tmp[0].length; j++) {\n            tmp[i][j] = BigInteger.valueOf(matrix[i][j]);\n        }\n    }\n\n    while (p > 0) {\n        int flag = p & 1;\n        if (flag == 1) {\n            res = multiMatrix(res, tmp);\n        }\n        tmp = multiMatrix(tmp, tmp);\n        p = p >> 1;\n    }\n\n    return multiMatrix(new BigInteger[][]{{new BigInteger(\"1\"), new BigInteger(\"1\")}}, res);\n}\n\n\n\n//矩阵乘法\npublic static BigInteger[][] multiMatrix(BigInteger[][] m1, BigInteger[][] m2) throws IllegalArgumentException {\n    if (m1[0].length != m2.length) {\n        throw new IllegalArgumentException(\"矩阵输入错误, 无法进行乘法.\");\n    }\n    BigInteger[][] res = new BigInteger[m1.length][m2[0].length];\n    for (int i = 0; i < m1.length; i++) {\n        for (int j = 0; j < m2[0].length; j++) {\n            res[i][j] = new BigInteger(\"0\");\n        }\n    }\n\n    for (int i = 0; i < m1.length; i++) {\n        for (int j = 0; j < m2[0].length; j++) {\n            for (int k = 0; k < m2.length; k++) {\n                res[i][j] = res[i][j].add(m1[i][k].multiply(m2[k][j]));\n            }\n        }\n    }\n    return res;\n}\n```\n\n\n## 运行时间比较:\n\n当n=45时, 递归的方法就需要6794ms才能完成.\n\n当n=1000000时, 迭代的方法耗时16s左右, 使用矩阵的方法只需耗时1.266s即完成\n","slug":"algorithm/CodeIntervieBook/RecursionAndDP/2017-03-01-Fibonacci","published":1,"updated":"2018-10-04T09:20:49.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfaz007228t1b4wbl07x","content":"<h2 id=\"Fibonacci数列及相关的问题的描述\"><a href=\"#Fibonacci数列及相关的问题的描述\" class=\"headerlink\" title=\"Fibonacci数列及相关的问题的描述\"></a>Fibonacci数列及相关的问题的描述</h2><ol>\n<li>给定正整数n, 求解Fibonacci数列第n项的值;</li>\n<li>给定正整数N, 代表台阶, 一次可以跨2个或者1个台阶, 有多少走法</li>\n<li>假设成熟的母牛只会生1头小母牛, 并且永远不会死, 第一年农场有1只成熟的母牛,从第二年开始, 母牛开始生小母牛. 每只小母牛3年之后成熟. 给定正整数N, 求出N年后牛的数量.</li>\n</ol>\n<h2 id=\"基础解法\"><a href=\"#基础解法\" class=\"headerlink\" title=\"基础解法\"></a>基础解法</h2><h3 id=\"递归的解法\"><a href=\"#递归的解法\" class=\"headerlink\" title=\"递归的解法\"></a>递归的解法</h3><p>递归的解法是最基础, 也是最好理解, 但是时间复杂度很高, 为 $O(2^n)$ ,空间复杂度为$O(2^n)$</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibRecursion</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibRecursion(n - <span class=\"number\">1</span>) + fibRecursion(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迭代的解法\"><a href=\"#迭代的解法\" class=\"headerlink\" title=\"迭代的解法\"></a>迭代的解法</h3><p>迭代的解法即将已经解决的位置处的数存储, 之后直接调用, 不用再计算</p>\n<p>时间复杂度为$O(n)$, 空间复杂度为$O(n)$.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibIteration</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        arr[i] = arr[i - <span class=\"number\">1</span>] + arr[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>仅记录前两个值, 空间复杂度为$O(1)$</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger <span class=\"title\">fibIteration</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        BigInteger res = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">        BigInteger pre_1 = BigInteger.valueOf(<span class=\"number\">1</span>);</span><br><span class=\"line\">        BigInteger pre_2 = BigInteger.valueOf(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            res = pre_1.add(pre_2);</span><br><span class=\"line\">            pre_2 = pre_1;</span><br><span class=\"line\">            pre_1 = res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进阶解法\"><a href=\"#进阶解法\" class=\"headerlink\" title=\"进阶解法\"></a>进阶解法</h2><h3 id=\"推导过程\"><a href=\"#推导过程\" class=\"headerlink\" title=\"推导过程\"></a>推导过程</h3><p>$$<br>F(n)=F(n-1)+F(n-2) \\\\<br>\\Rightarrow<br>\\begin{vmatrix}<br>F(n) &amp; F(n-1) \\\\<br>\\end{vmatrix}<br>=<br>\\begin{vmatrix}<br>F(n) &amp; F(n-1)<br>\\end{vmatrix}<br>\\times<br>\\begin{vmatrix}<br>a &amp; b \\\\<br>c &amp; d<br>\\end{vmatrix}\\\\<br>$$</p>\n<p>解得:<br></p>\n<p>$$<br>a=1 \\<br>b=1 \\<br>c=1 \\<br>d=1<br>$$</p>\n<p>即: <br></p>\n<p>$$<br>\\begin{vmatrix}<br> F(n) &amp; F(n-1)<br>\\end{vmatrix}<br>=<br>\\begin{vmatrix}<br>F(n-1)&amp; F(n-2)<br>\\end{vmatrix}<br>\\times<br>\\begin{vmatrix}<br>1 &amp; 1 \\\\<br>1 &amp; 0<br>\\end{vmatrix}<br>\\\\<br>\\Rightarrow<br>\\begin{vmatrix}<br> F(n) &amp; F(n-1)<br>\\end{vmatrix}<br>=<br>\\begin{vmatrix}<br> 1 &amp; 1<br>\\end{vmatrix}<br>\\times<br>{\\begin{vmatrix}<br>1 &amp; 1 \\\\<br>1 &amp; 0<br>\\end{vmatrix}}^{n-2}<br>$$</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger <span class=\"title\">fibMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (BigInteger.ZERO.compareTo(BigInteger.valueOf(n)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (BigInteger.ONE.compareTo(BigInteger.valueOf(n)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> matrixPower(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;&#125;, n)[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//计算矩阵matrix的p次方</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger[][] matrixPower(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> p) <span class=\"keyword\">throws</span> IllegalArgumentException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix[<span class=\"number\">0</span>].length != matrix.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"矩阵输入错误, 无法进行乘法.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BigInteger[][] res = <span class=\"keyword\">new</span> BigInteger[matrix.length][matrix.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; res.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; res[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">            res[i][j] = BigInteger.valueOf(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; res.length; i++) &#123;</span><br><span class=\"line\">        res[i][i] = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    BigInteger[][] tmp = <span class=\"keyword\">new</span> BigInteger[matrix.length][matrix.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tmp[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">            tmp[i][j] = BigInteger.valueOf(matrix[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = p &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            res = multiMatrix(res, tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tmp = multiMatrix(tmp, tmp);</span><br><span class=\"line\">        p = p &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> multiMatrix(<span class=\"keyword\">new</span> BigInteger[][]&#123;&#123;<span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>), <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>)&#125;&#125;, res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//矩阵乘法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger[][] multiMatrix(BigInteger[][] m1, BigInteger[][] m2) <span class=\"keyword\">throws</span> IllegalArgumentException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m1[<span class=\"number\">0</span>].length != m2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"矩阵输入错误, 无法进行乘法.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BigInteger[][] res = <span class=\"keyword\">new</span> BigInteger[m1.length][m2[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m1.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m2[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">            res[i][j] = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m1.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m2[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; m2.length; k++) &#123;</span><br><span class=\"line\">                res[i][j] = res[i][j].add(m1[i][k].multiply(m2[k][j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行时间比较\"><a href=\"#运行时间比较\" class=\"headerlink\" title=\"运行时间比较:\"></a>运行时间比较:</h2><p>当n=45时, 递归的方法就需要6794ms才能完成.</p>\n<p>当n=1000000时, 迭代的方法耗时16s左右, 使用矩阵的方法只需耗时1.266s即完成</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fibonacci数列及相关的问题的描述\"><a href=\"#Fibonacci数列及相关的问题的描述\" class=\"headerlink\" title=\"Fibonacci数列及相关的问题的描述\"></a>Fibonacci数列及相关的问题的描述</h2><ol>\n<li>给定正整数n, 求解Fibonacci数列第n项的值;</li>\n<li>给定正整数N, 代表台阶, 一次可以跨2个或者1个台阶, 有多少走法</li>\n<li>假设成熟的母牛只会生1头小母牛, 并且永远不会死, 第一年农场有1只成熟的母牛,从第二年开始, 母牛开始生小母牛. 每只小母牛3年之后成熟. 给定正整数N, 求出N年后牛的数量.</li>\n</ol>\n<h2 id=\"基础解法\"><a href=\"#基础解法\" class=\"headerlink\" title=\"基础解法\"></a>基础解法</h2><h3 id=\"递归的解法\"><a href=\"#递归的解法\" class=\"headerlink\" title=\"递归的解法\"></a>递归的解法</h3><p>递归的解法是最基础, 也是最好理解, 但是时间复杂度很高, 为 $O(2^n)$ ,空间复杂度为$O(2^n)$</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibRecursion</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibRecursion(n - <span class=\"number\">1</span>) + fibRecursion(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迭代的解法\"><a href=\"#迭代的解法\" class=\"headerlink\" title=\"迭代的解法\"></a>迭代的解法</h3><p>迭代的解法即将已经解决的位置处的数存储, 之后直接调用, 不用再计算</p>\n<p>时间复杂度为$O(n)$, 空间复杂度为$O(n)$.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibIteration</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        arr[i] = arr[i - <span class=\"number\">1</span>] + arr[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>仅记录前两个值, 空间复杂度为$O(1)$</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger <span class=\"title\">fibIteration</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        BigInteger res = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">        BigInteger pre_1 = BigInteger.valueOf(<span class=\"number\">1</span>);</span><br><span class=\"line\">        BigInteger pre_2 = BigInteger.valueOf(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            res = pre_1.add(pre_2);</span><br><span class=\"line\">            pre_2 = pre_1;</span><br><span class=\"line\">            pre_1 = res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进阶解法\"><a href=\"#进阶解法\" class=\"headerlink\" title=\"进阶解法\"></a>进阶解法</h2><h3 id=\"推导过程\"><a href=\"#推导过程\" class=\"headerlink\" title=\"推导过程\"></a>推导过程</h3><p>$$<br>F(n)=F(n-1)+F(n-2) \\\\<br>\\Rightarrow<br>\\begin{vmatrix}<br>F(n) &amp; F(n-1) \\\\<br>\\end{vmatrix}<br>=<br>\\begin{vmatrix}<br>F(n) &amp; F(n-1)<br>\\end{vmatrix}<br>\\times<br>\\begin{vmatrix}<br>a &amp; b \\\\<br>c &amp; d<br>\\end{vmatrix}\\\\<br>$$</p>\n<p>解得:<br></p>\n<p>$$<br>a=1 \\<br>b=1 \\<br>c=1 \\<br>d=1<br>$$</p>\n<p>即: <br></p>\n<p>$$<br>\\begin{vmatrix}<br> F(n) &amp; F(n-1)<br>\\end{vmatrix}<br>=<br>\\begin{vmatrix}<br>F(n-1)&amp; F(n-2)<br>\\end{vmatrix}<br>\\times<br>\\begin{vmatrix}<br>1 &amp; 1 \\\\<br>1 &amp; 0<br>\\end{vmatrix}<br>\\\\<br>\\Rightarrow<br>\\begin{vmatrix}<br> F(n) &amp; F(n-1)<br>\\end{vmatrix}<br>=<br>\\begin{vmatrix}<br> 1 &amp; 1<br>\\end{vmatrix}<br>\\times<br>{\\begin{vmatrix}<br>1 &amp; 1 \\\\<br>1 &amp; 0<br>\\end{vmatrix}}^{n-2}<br>$$</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger <span class=\"title\">fibMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (BigInteger.ZERO.compareTo(BigInteger.valueOf(n)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (BigInteger.ONE.compareTo(BigInteger.valueOf(n)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> matrixPower(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;&#125;, n)[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//计算矩阵matrix的p次方</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger[][] matrixPower(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> p) <span class=\"keyword\">throws</span> IllegalArgumentException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix[<span class=\"number\">0</span>].length != matrix.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"矩阵输入错误, 无法进行乘法.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BigInteger[][] res = <span class=\"keyword\">new</span> BigInteger[matrix.length][matrix.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; res.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; res[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">            res[i][j] = BigInteger.valueOf(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; res.length; i++) &#123;</span><br><span class=\"line\">        res[i][i] = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    BigInteger[][] tmp = <span class=\"keyword\">new</span> BigInteger[matrix.length][matrix.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tmp[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">            tmp[i][j] = BigInteger.valueOf(matrix[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = p &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            res = multiMatrix(res, tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tmp = multiMatrix(tmp, tmp);</span><br><span class=\"line\">        p = p &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> multiMatrix(<span class=\"keyword\">new</span> BigInteger[][]&#123;&#123;<span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>), <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span>)&#125;&#125;, res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//矩阵乘法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger[][] multiMatrix(BigInteger[][] m1, BigInteger[][] m2) <span class=\"keyword\">throws</span> IllegalArgumentException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m1[<span class=\"number\">0</span>].length != m2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"矩阵输入错误, 无法进行乘法.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BigInteger[][] res = <span class=\"keyword\">new</span> BigInteger[m1.length][m2[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m1.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m2[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">            res[i][j] = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m1.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m2[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; m2.length; k++) &#123;</span><br><span class=\"line\">                res[i][j] = res[i][j].add(m1[i][k].multiply(m2[k][j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行时间比较\"><a href=\"#运行时间比较\" class=\"headerlink\" title=\"运行时间比较:\"></a>运行时间比较:</h2><p>当n=45时, 递归的方法就需要6794ms才能完成.</p>\n<p>当n=1000000时, 迭代的方法耗时16s左右, 使用矩阵的方法只需耗时1.266s即完成</p>\n"},{"author":"ivyxjc","date":"2016-02-20T16:00:00.000Z","title":"PAT 1010 Radix 25","keywords":null,"description":null,"mathjax":true,"_content":"\n该题未全部完成，未通过全部测例 20/25\n\n这道题目是[PAT甲级习题](http://www.patest.cn/contests/pat-a-practise)中通过率最低的一道题，通过率只有$0.08$。我暂时也未能通过全部测例，还差4个测例。应该是边界条件未考虑充分。\n\n\n## 题目\nEach input file contains one test case. Each case occupies a line which contains 4 positive integers:<br>\n$N_1$ $N_2$ tag radix<br>\nHere $N_1$ and $N_2$ each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number \"radix\" is the radix of N1 if \"tag\" is 1, or of N2 if \"tag\" is 2. <br>\n\n中文大意：\n输入4个数\n其中第四个数表示第三个数所指的那个数$N$的进制，现在来判断另一个数$M$在哪一种进制下回合$N$相同，若存在则输出进制，否则输出\"Impossible\"。<br>\n\n## 解法\n\n### String Convert to Long\n就是输入数据，由于数据中可能含有字母，仍存储为```String```格式。对已经给出进制的树先算出其对应的十进制数是多少：\n\n```java\n//已知字符串和进制，算出对应的十进制数\npublic static long strToLong(String str,long radix){\n    long res=0;\n    int tmp=0;\n    for(int i=str.length()-1;i>=0;i--){\n        res+=map.get(str.charAt(i))*Math.pow(radix,tmp++);\n    }\n    return res;\n}\n\n```\n\n### 获得未知进制数中最大的字符所代表的十进制数\n\n因为进制数一定要大于最大的字符，所以可以通过这一步获得进制的下限\n\n```java\nString resNumStr = dataStr[resRadixNumPosi];\n    //获取未知进制数中最大的字符所代表的十进制数\n    int biggestCharInResNumStr = map.get(resNumStr.charAt(0));\n    for (int i = 0; i < resNumStr.length(); i++) {\n        if (map.get(resNumStr.charAt(i)) > biggestCharInResNumStr) {\n            biggestCharInResNumStr = map.get(resNumStr.charAt(i));\n        }\n    }\n```\n\n### 二分查找\n\n下限即上一步所求出的数+1\n上限即为已知进制的数\n\n退出条件:\n    若上下限相同，检查对应两个数在该进制是否相同\n    若下限大于上限，输出Impossible; return;\n\n```java\npublic static void findRadix(long num,String str,long radixBegin,long radixEnd){\n    if(radixBegin>radixEnd){\n        System.out.println(\"Impossible\");\n        return;\n    }\n    if(radixBegin==radixEnd){\n        if(strToLong(str,radixBegin)==num){\n            System.out.println(radixBegin);\n            return;\n        }else{\n            System.out.println(\"Impossible\");\n            return;\n        }\n    }\n    long radixMiddle=(radixBegin+radixEnd)>>1;\n    long middleRadixNum=strToLong(str,radixMiddle);\n    if(middleRadixNum>num){\n        findRadix(num,str,radixBegin,radixMiddle);\n    }else if(middleRadixNum==num){\n        System.out.println(radixMiddle);\n        return;\n    }else{\n        findRadix(num,str,radixMiddle+1,radixEnd);\n    }\n\n\n}\n\n```\n\n### 边界条件\n\n1. N1和N2一样时，应该输出其中最大字符所代表的数值再+1；\n\n\n### 代码实现\n\n\n```java\npackage PAT;\n\nimport java.util.HashMap;\nimport java.util.Scanner;\n\n/**\n * Created by xgh on 2016/2/21.\n */\npublic class _1010_Radix_25{\n    private static HashMap<Character,Integer> map=new HashMap<Character, Integer>();\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        String[] dataStr = (in.nextLine()).split(\" \");\n        int charRepNum = 10;\n        for (char i = 'a'; i <= 'z'; i++) {\n            map.put(i, charRepNum++);\n        }\n        for (int i = 0; i < 9; i++) {\n            map.put((char) (i + 48), i);\n        }\n\n\n        int givenRadixNumPosi = Integer.parseInt(dataStr[2]);\n        long givenRadix = Integer.parseInt(dataStr[3]);\n\n        long aaa = 0;\n        long givenNum = 0;\n        String givenNumStr = dataStr[givenRadixNumPosi - 1];\n//        System.out.println(givenNumStr);\n//        System.out.println(givenRadixNumPosi-1);\n//        for(char e:map.keySet()){\n//            System.out.println(e+\" ==== \"+map.get(e));\n//        }\n        for (int i = givenNumStr.length() - 1; i >= 0; i--) {\n            givenNum += map.get(givenNumStr.charAt(i)) * Math.pow(givenRadix, aaa++);\n        }\n\n        int resRadixNumPosi = 0;\n        if (givenRadixNumPosi == 1) {\n            resRadixNumPosi = 1;\n        } else {\n            resRadixNumPosi = 0;\n        }\n\n        String resNumStr = dataStr[resRadixNumPosi];\n        int biggestCharInResNumStr = map.get(resNumStr.charAt(0));\n        for (int i = 0; i < resNumStr.length(); i++) {\n            if (map.get(resNumStr.charAt(i)) > biggestCharInResNumStr) {\n                biggestCharInResNumStr = map.get(resNumStr.charAt(i));\n            }\n        }\n\n\n        if(strToLong(resNumStr,biggestCharInResNumStr+1)==givenNum){\n            System.out.println(biggestCharInResNumStr+1);\n            return;\n        }\n\n//        System.out.println(Integer.parseInt(\"ab\"));\n//        System.out.println(givenNum);\n//        System.out.println(resNumStr);\n//        System.out.println(givenRadix+1);\n//        System.out.println(biggestCharInResNumStr+1);\n\n        findRadix(givenNum,resNumStr,biggestCharInResNumStr+1,givenNum+1);\n    }\n\n\n    public static void findRadix(long num,String str,long radixBegin,long radixEnd){\n        if(radixBegin>radixEnd){\n            System.out.println(\"Impossible\");\n            return;\n        }\n        if(radixBegin==radixEnd){\n            if(strToLong(str,radixBegin)==num){\n                System.out.println(radixBegin);\n                return;\n            }else{\n                System.out.println(\"Impossible\");\n                return;\n            }\n        }\n        long radixMiddle=(radixBegin+radixEnd)>>1;\n        long middleRadixNum=strToLong(str,radixMiddle);\n        if(middleRadixNum>num){\n            findRadix(num,str,radixBegin,radixMiddle);\n        }else if(middleRadixNum==num){\n            System.out.println(radixMiddle);\n            return;\n        }else{\n            findRadix(num,str,radixMiddle+1,radixEnd);\n        }\n\n\n    }\n\n    public static long strToLong(String str,long radix){\n        long res=0;\n        int tmp=0;\n        for(int i=str.length()-1;i>=0;i--){\n            res+=map.get(str.charAt(i))*Math.pow(radix,tmp++);\n        }\n        return res;\n    }\n}\n```\n","source":"_posts/algorithm/oj/PAT/2016-02-21-1010题-Radix-25分.md","raw":"---\nauthor: ivyxjc\ndate: 2016-02-21\ntitle: PAT 1010 Radix 25\ncategory: Algorithm \ntags: [todo,onlinejudge,binarysearch]\nkeywords:\ndescription:\nmathjax: true\n---\n\n该题未全部完成，未通过全部测例 20/25\n\n这道题目是[PAT甲级习题](http://www.patest.cn/contests/pat-a-practise)中通过率最低的一道题，通过率只有$0.08$。我暂时也未能通过全部测例，还差4个测例。应该是边界条件未考虑充分。\n\n\n## 题目\nEach input file contains one test case. Each case occupies a line which contains 4 positive integers:<br>\n$N_1$ $N_2$ tag radix<br>\nHere $N_1$ and $N_2$ each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number \"radix\" is the radix of N1 if \"tag\" is 1, or of N2 if \"tag\" is 2. <br>\n\n中文大意：\n输入4个数\n其中第四个数表示第三个数所指的那个数$N$的进制，现在来判断另一个数$M$在哪一种进制下回合$N$相同，若存在则输出进制，否则输出\"Impossible\"。<br>\n\n## 解法\n\n### String Convert to Long\n就是输入数据，由于数据中可能含有字母，仍存储为```String```格式。对已经给出进制的树先算出其对应的十进制数是多少：\n\n```java\n//已知字符串和进制，算出对应的十进制数\npublic static long strToLong(String str,long radix){\n    long res=0;\n    int tmp=0;\n    for(int i=str.length()-1;i>=0;i--){\n        res+=map.get(str.charAt(i))*Math.pow(radix,tmp++);\n    }\n    return res;\n}\n\n```\n\n### 获得未知进制数中最大的字符所代表的十进制数\n\n因为进制数一定要大于最大的字符，所以可以通过这一步获得进制的下限\n\n```java\nString resNumStr = dataStr[resRadixNumPosi];\n    //获取未知进制数中最大的字符所代表的十进制数\n    int biggestCharInResNumStr = map.get(resNumStr.charAt(0));\n    for (int i = 0; i < resNumStr.length(); i++) {\n        if (map.get(resNumStr.charAt(i)) > biggestCharInResNumStr) {\n            biggestCharInResNumStr = map.get(resNumStr.charAt(i));\n        }\n    }\n```\n\n### 二分查找\n\n下限即上一步所求出的数+1\n上限即为已知进制的数\n\n退出条件:\n    若上下限相同，检查对应两个数在该进制是否相同\n    若下限大于上限，输出Impossible; return;\n\n```java\npublic static void findRadix(long num,String str,long radixBegin,long radixEnd){\n    if(radixBegin>radixEnd){\n        System.out.println(\"Impossible\");\n        return;\n    }\n    if(radixBegin==radixEnd){\n        if(strToLong(str,radixBegin)==num){\n            System.out.println(radixBegin);\n            return;\n        }else{\n            System.out.println(\"Impossible\");\n            return;\n        }\n    }\n    long radixMiddle=(radixBegin+radixEnd)>>1;\n    long middleRadixNum=strToLong(str,radixMiddle);\n    if(middleRadixNum>num){\n        findRadix(num,str,radixBegin,radixMiddle);\n    }else if(middleRadixNum==num){\n        System.out.println(radixMiddle);\n        return;\n    }else{\n        findRadix(num,str,radixMiddle+1,radixEnd);\n    }\n\n\n}\n\n```\n\n### 边界条件\n\n1. N1和N2一样时，应该输出其中最大字符所代表的数值再+1；\n\n\n### 代码实现\n\n\n```java\npackage PAT;\n\nimport java.util.HashMap;\nimport java.util.Scanner;\n\n/**\n * Created by xgh on 2016/2/21.\n */\npublic class _1010_Radix_25{\n    private static HashMap<Character,Integer> map=new HashMap<Character, Integer>();\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        String[] dataStr = (in.nextLine()).split(\" \");\n        int charRepNum = 10;\n        for (char i = 'a'; i <= 'z'; i++) {\n            map.put(i, charRepNum++);\n        }\n        for (int i = 0; i < 9; i++) {\n            map.put((char) (i + 48), i);\n        }\n\n\n        int givenRadixNumPosi = Integer.parseInt(dataStr[2]);\n        long givenRadix = Integer.parseInt(dataStr[3]);\n\n        long aaa = 0;\n        long givenNum = 0;\n        String givenNumStr = dataStr[givenRadixNumPosi - 1];\n//        System.out.println(givenNumStr);\n//        System.out.println(givenRadixNumPosi-1);\n//        for(char e:map.keySet()){\n//            System.out.println(e+\" ==== \"+map.get(e));\n//        }\n        for (int i = givenNumStr.length() - 1; i >= 0; i--) {\n            givenNum += map.get(givenNumStr.charAt(i)) * Math.pow(givenRadix, aaa++);\n        }\n\n        int resRadixNumPosi = 0;\n        if (givenRadixNumPosi == 1) {\n            resRadixNumPosi = 1;\n        } else {\n            resRadixNumPosi = 0;\n        }\n\n        String resNumStr = dataStr[resRadixNumPosi];\n        int biggestCharInResNumStr = map.get(resNumStr.charAt(0));\n        for (int i = 0; i < resNumStr.length(); i++) {\n            if (map.get(resNumStr.charAt(i)) > biggestCharInResNumStr) {\n                biggestCharInResNumStr = map.get(resNumStr.charAt(i));\n            }\n        }\n\n\n        if(strToLong(resNumStr,biggestCharInResNumStr+1)==givenNum){\n            System.out.println(biggestCharInResNumStr+1);\n            return;\n        }\n\n//        System.out.println(Integer.parseInt(\"ab\"));\n//        System.out.println(givenNum);\n//        System.out.println(resNumStr);\n//        System.out.println(givenRadix+1);\n//        System.out.println(biggestCharInResNumStr+1);\n\n        findRadix(givenNum,resNumStr,biggestCharInResNumStr+1,givenNum+1);\n    }\n\n\n    public static void findRadix(long num,String str,long radixBegin,long radixEnd){\n        if(radixBegin>radixEnd){\n            System.out.println(\"Impossible\");\n            return;\n        }\n        if(radixBegin==radixEnd){\n            if(strToLong(str,radixBegin)==num){\n                System.out.println(radixBegin);\n                return;\n            }else{\n                System.out.println(\"Impossible\");\n                return;\n            }\n        }\n        long radixMiddle=(radixBegin+radixEnd)>>1;\n        long middleRadixNum=strToLong(str,radixMiddle);\n        if(middleRadixNum>num){\n            findRadix(num,str,radixBegin,radixMiddle);\n        }else if(middleRadixNum==num){\n            System.out.println(radixMiddle);\n            return;\n        }else{\n            findRadix(num,str,radixMiddle+1,radixEnd);\n        }\n\n\n    }\n\n    public static long strToLong(String str,long radix){\n        long res=0;\n        int tmp=0;\n        for(int i=str.length()-1;i>=0;i--){\n            res+=map.get(str.charAt(i))*Math.pow(radix,tmp++);\n        }\n        return res;\n    }\n}\n```\n","slug":"algorithm/oj/PAT/2016-02-21-1010题-Radix-25分","published":1,"updated":"2018-10-14T06:55:08.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfb1007528t1n5yt6oc5","content":"<p>该题未全部完成，未通过全部测例 20/25</p>\n<p>这道题目是<a href=\"http://www.patest.cn/contests/pat-a-practise\" target=\"_blank\" rel=\"noopener\">PAT甲级习题</a>中通过率最低的一道题，通过率只有$0.08$。我暂时也未能通过全部测例，还差4个测例。应该是边界条件未考虑充分。</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:<br><br>$N_1$ $N_2$ tag radix<br><br>Here $N_1$ and $N_2$ each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number “radix” is the radix of N1 if “tag” is 1, or of N2 if “tag” is 2. <br></p>\n<p>中文大意：<br>输入4个数<br>其中第四个数表示第三个数所指的那个数$N$的进制，现在来判断另一个数$M$在哪一种进制下回合$N$相同，若存在则输出进制，否则输出”Impossible”。<br></p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><h3 id=\"String-Convert-to-Long\"><a href=\"#String-Convert-to-Long\" class=\"headerlink\" title=\"String Convert to Long\"></a>String Convert to Long</h3><p>就是输入数据，由于数据中可能含有字母，仍存储为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">//已知字符串和进制，算出对应的十进制数</span><br><span class=\"line\">public static long strToLong(String str,long radix)&#123;</span><br><span class=\"line\">    long res=0;</span><br><span class=\"line\">    int tmp=0;</span><br><span class=\"line\">    for(int i=str.length()-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\">        res+=map.get(str.charAt(i))*Math.pow(radix,tmp++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"获得未知进制数中最大的字符所代表的十进制数\"><a href=\"#获得未知进制数中最大的字符所代表的十进制数\" class=\"headerlink\" title=\"获得未知进制数中最大的字符所代表的十进制数\"></a>获得未知进制数中最大的字符所代表的十进制数</h3><p>因为进制数一定要大于最大的字符，所以可以通过这一步获得进制的下限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String resNumStr = dataStr[resRadixNumPosi];</span><br><span class=\"line\">    <span class=\"comment\">//获取未知进制数中最大的字符所代表的十进制数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> biggestCharInResNumStr = map.get(resNumStr.charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; resNumStr.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.get(resNumStr.charAt(i)) &gt; biggestCharInResNumStr) &#123;</span><br><span class=\"line\">            biggestCharInResNumStr = map.get(resNumStr.charAt(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h3><p>下限即上一步所求出的数+1<br>上限即为已知进制的数</p>\n<p>退出条件:<br>    若上下限相同，检查对应两个数在该进制是否相同<br>    若下限大于上限，输出Impossible; return;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findRadix</span><span class=\"params\">(<span class=\"keyword\">long</span> num,String str,<span class=\"keyword\">long</span> radixBegin,<span class=\"keyword\">long</span> radixEnd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(radixBegin&gt;radixEnd)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Impossible\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(radixBegin==radixEnd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strToLong(str,radixBegin)==num)&#123;</span><br><span class=\"line\">            System.out.println(radixBegin);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Impossible\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> radixMiddle=(radixBegin+radixEnd)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> middleRadixNum=strToLong(str,radixMiddle);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(middleRadixNum&gt;num)&#123;</span><br><span class=\"line\">        findRadix(num,str,radixBegin,radixMiddle);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(middleRadixNum==num)&#123;</span><br><span class=\"line\">        System.out.println(radixMiddle);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        findRadix(num,str,radixMiddle+<span class=\"number\">1</span>,radixEnd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"边界条件\"><a href=\"#边界条件\" class=\"headerlink\" title=\"边界条件\"></a>边界条件</h3><ol>\n<li>N1和N2一样时，应该输出其中最大字符所代表的数值再+1；</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> PAT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by xgh on 2016/2/21.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_1010_Radix_25</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;Character,Integer&gt; map=<span class=\"keyword\">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        String[] dataStr = (in.nextLine()).split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> charRepNum = <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i = <span class=\"string\">'a'</span>; i &lt;= <span class=\"string\">'z'</span>; i++) &#123;</span><br><span class=\"line\">            map.put(i, charRepNum++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">            map.put((<span class=\"keyword\">char</span>) (i + <span class=\"number\">48</span>), i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> givenRadixNumPosi = Integer.parseInt(dataStr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> givenRadix = Integer.parseInt(dataStr[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> aaa = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> givenNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        String givenNumStr = dataStr[givenRadixNumPosi - <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(givenNumStr);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(givenRadixNumPosi-1);</span></span><br><span class=\"line\"><span class=\"comment\">//        for(char e:map.keySet())&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(e+\" ==== \"+map.get(e));</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = givenNumStr.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            givenNum += map.get(givenNumStr.charAt(i)) * Math.pow(givenRadix, aaa++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> resRadixNumPosi = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (givenRadixNumPosi == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            resRadixNumPosi = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resRadixNumPosi = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String resNumStr = dataStr[resRadixNumPosi];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> biggestCharInResNumStr = map.get(resNumStr.charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; resNumStr.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.get(resNumStr.charAt(i)) &gt; biggestCharInResNumStr) &#123;</span><br><span class=\"line\">                biggestCharInResNumStr = map.get(resNumStr.charAt(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strToLong(resNumStr,biggestCharInResNumStr+<span class=\"number\">1</span>)==givenNum)&#123;</span><br><span class=\"line\">            System.out.println(biggestCharInResNumStr+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Integer.parseInt(\"ab\"));</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(givenNum);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(resNumStr);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(givenRadix+1);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(biggestCharInResNumStr+1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        findRadix(givenNum,resNumStr,biggestCharInResNumStr+<span class=\"number\">1</span>,givenNum+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findRadix</span><span class=\"params\">(<span class=\"keyword\">long</span> num,String str,<span class=\"keyword\">long</span> radixBegin,<span class=\"keyword\">long</span> radixEnd)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(radixBegin&gt;radixEnd)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Impossible\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(radixBegin==radixEnd)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(strToLong(str,radixBegin)==num)&#123;</span><br><span class=\"line\">                System.out.println(radixBegin);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Impossible\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> radixMiddle=(radixBegin+radixEnd)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> middleRadixNum=strToLong(str,radixMiddle);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(middleRadixNum&gt;num)&#123;</span><br><span class=\"line\">            findRadix(num,str,radixBegin,radixMiddle);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(middleRadixNum==num)&#123;</span><br><span class=\"line\">            System.out.println(radixMiddle);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            findRadix(num,str,radixMiddle+<span class=\"number\">1</span>,radixEnd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">strToLong</span><span class=\"params\">(String str,<span class=\"keyword\">long</span> radix)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=str.length()-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            res+=map.get(str.charAt(i))*Math.pow(radix,tmp++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>该题未全部完成，未通过全部测例 20/25</p>\n<p>这道题目是<a href=\"http://www.patest.cn/contests/pat-a-practise\" target=\"_blank\" rel=\"noopener\">PAT甲级习题</a>中通过率最低的一道题，通过率只有$0.08$。我暂时也未能通过全部测例，还差4个测例。应该是边界条件未考虑充分。</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:<br><br>$N_1$ $N_2$ tag radix<br><br>Here $N_1$ and $N_2$ each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number “radix” is the radix of N1 if “tag” is 1, or of N2 if “tag” is 2. <br></p>\n<p>中文大意：<br>输入4个数<br>其中第四个数表示第三个数所指的那个数$N$的进制，现在来判断另一个数$M$在哪一种进制下回合$N$相同，若存在则输出进制，否则输出”Impossible”。<br></p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><h3 id=\"String-Convert-to-Long\"><a href=\"#String-Convert-to-Long\" class=\"headerlink\" title=\"String Convert to Long\"></a>String Convert to Long</h3><p>就是输入数据，由于数据中可能含有字母，仍存储为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">//已知字符串和进制，算出对应的十进制数</span><br><span class=\"line\">public static long strToLong(String str,long radix)&#123;</span><br><span class=\"line\">    long res=0;</span><br><span class=\"line\">    int tmp=0;</span><br><span class=\"line\">    for(int i=str.length()-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\">        res+=map.get(str.charAt(i))*Math.pow(radix,tmp++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"获得未知进制数中最大的字符所代表的十进制数\"><a href=\"#获得未知进制数中最大的字符所代表的十进制数\" class=\"headerlink\" title=\"获得未知进制数中最大的字符所代表的十进制数\"></a>获得未知进制数中最大的字符所代表的十进制数</h3><p>因为进制数一定要大于最大的字符，所以可以通过这一步获得进制的下限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String resNumStr = dataStr[resRadixNumPosi];</span><br><span class=\"line\">    <span class=\"comment\">//获取未知进制数中最大的字符所代表的十进制数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> biggestCharInResNumStr = map.get(resNumStr.charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; resNumStr.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.get(resNumStr.charAt(i)) &gt; biggestCharInResNumStr) &#123;</span><br><span class=\"line\">            biggestCharInResNumStr = map.get(resNumStr.charAt(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h3><p>下限即上一步所求出的数+1<br>上限即为已知进制的数</p>\n<p>退出条件:<br>    若上下限相同，检查对应两个数在该进制是否相同<br>    若下限大于上限，输出Impossible; return;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findRadix</span><span class=\"params\">(<span class=\"keyword\">long</span> num,String str,<span class=\"keyword\">long</span> radixBegin,<span class=\"keyword\">long</span> radixEnd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(radixBegin&gt;radixEnd)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Impossible\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(radixBegin==radixEnd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strToLong(str,radixBegin)==num)&#123;</span><br><span class=\"line\">            System.out.println(radixBegin);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Impossible\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> radixMiddle=(radixBegin+radixEnd)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> middleRadixNum=strToLong(str,radixMiddle);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(middleRadixNum&gt;num)&#123;</span><br><span class=\"line\">        findRadix(num,str,radixBegin,radixMiddle);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(middleRadixNum==num)&#123;</span><br><span class=\"line\">        System.out.println(radixMiddle);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        findRadix(num,str,radixMiddle+<span class=\"number\">1</span>,radixEnd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"边界条件\"><a href=\"#边界条件\" class=\"headerlink\" title=\"边界条件\"></a>边界条件</h3><ol>\n<li>N1和N2一样时，应该输出其中最大字符所代表的数值再+1；</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> PAT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by xgh on 2016/2/21.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_1010_Radix_25</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;Character,Integer&gt; map=<span class=\"keyword\">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        String[] dataStr = (in.nextLine()).split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> charRepNum = <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i = <span class=\"string\">'a'</span>; i &lt;= <span class=\"string\">'z'</span>; i++) &#123;</span><br><span class=\"line\">            map.put(i, charRepNum++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">            map.put((<span class=\"keyword\">char</span>) (i + <span class=\"number\">48</span>), i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> givenRadixNumPosi = Integer.parseInt(dataStr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> givenRadix = Integer.parseInt(dataStr[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> aaa = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> givenNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        String givenNumStr = dataStr[givenRadixNumPosi - <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(givenNumStr);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(givenRadixNumPosi-1);</span></span><br><span class=\"line\"><span class=\"comment\">//        for(char e:map.keySet())&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(e+\" ==== \"+map.get(e));</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = givenNumStr.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            givenNum += map.get(givenNumStr.charAt(i)) * Math.pow(givenRadix, aaa++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> resRadixNumPosi = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (givenRadixNumPosi == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            resRadixNumPosi = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resRadixNumPosi = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String resNumStr = dataStr[resRadixNumPosi];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> biggestCharInResNumStr = map.get(resNumStr.charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; resNumStr.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.get(resNumStr.charAt(i)) &gt; biggestCharInResNumStr) &#123;</span><br><span class=\"line\">                biggestCharInResNumStr = map.get(resNumStr.charAt(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strToLong(resNumStr,biggestCharInResNumStr+<span class=\"number\">1</span>)==givenNum)&#123;</span><br><span class=\"line\">            System.out.println(biggestCharInResNumStr+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Integer.parseInt(\"ab\"));</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(givenNum);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(resNumStr);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(givenRadix+1);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(biggestCharInResNumStr+1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        findRadix(givenNum,resNumStr,biggestCharInResNumStr+<span class=\"number\">1</span>,givenNum+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findRadix</span><span class=\"params\">(<span class=\"keyword\">long</span> num,String str,<span class=\"keyword\">long</span> radixBegin,<span class=\"keyword\">long</span> radixEnd)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(radixBegin&gt;radixEnd)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Impossible\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(radixBegin==radixEnd)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(strToLong(str,radixBegin)==num)&#123;</span><br><span class=\"line\">                System.out.println(radixBegin);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Impossible\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> radixMiddle=(radixBegin+radixEnd)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> middleRadixNum=strToLong(str,radixMiddle);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(middleRadixNum&gt;num)&#123;</span><br><span class=\"line\">            findRadix(num,str,radixBegin,radixMiddle);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(middleRadixNum==num)&#123;</span><br><span class=\"line\">            System.out.println(radixMiddle);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            findRadix(num,str,radixMiddle+<span class=\"number\">1</span>,radixEnd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">strToLong</span><span class=\"params\">(String str,<span class=\"keyword\">long</span> radix)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=str.length()-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            res+=map.get(str.charAt(i))*Math.pow(radix,tmp++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-09-23T16:00:00.000Z","title":"ActionBar PopuMenu","keywords":null,"description":"popupmenu可以非常方便得实现在指定view下弹出一个菜单,实现类似ActionBar中的效果.","_content":"\n## PopupMenu\npopupmenu可以非常方便得实现在指定view下弹出一个菜单,实现类似ActionBar中的效果.\n\n```java\npublic void showPopupMenu(View view){\n        final PopupAdapter adapter = (PopupAdapter) getListAdapter();\n        final String item = (String) view.getTag();\n\n        PopupMenu popup = new PopupMenu(getActivity(), view);\n\n        popup.getMenuInflater().inflate(R.menu.popup, popup.getMenu());\n\n        popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n            @Override\n            public boolean onMenuItemClick(MenuItem menuItem) {\n                switch (menuItem.getItemId()){\n                    case R.id.menu_remove:\n                        adapter.remove(item);\n                        return true;\n                }\n                return false;\n            }\n        });\n        popup.show();\n    }\n```\n","source":"_posts/android/AndroidSamples/UI/2016-09-24-ActionBar-PopupMenu.md","raw":"---\nauthor: ivyxjc\ndate: 2016-09-24\ntitle: ActionBar PopuMenu\ncategory: Android\ntags: [android,android_UI,android_fragment]\nkeywords:\ndescription: popupmenu可以非常方便得实现在指定view下弹出一个菜单,实现类似ActionBar中的效果.\n---\n\n## PopupMenu\npopupmenu可以非常方便得实现在指定view下弹出一个菜单,实现类似ActionBar中的效果.\n\n```java\npublic void showPopupMenu(View view){\n        final PopupAdapter adapter = (PopupAdapter) getListAdapter();\n        final String item = (String) view.getTag();\n\n        PopupMenu popup = new PopupMenu(getActivity(), view);\n\n        popup.getMenuInflater().inflate(R.menu.popup, popup.getMenu());\n\n        popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n            @Override\n            public boolean onMenuItemClick(MenuItem menuItem) {\n                switch (menuItem.getItemId()){\n                    case R.id.menu_remove:\n                        adapter.remove(item);\n                        return true;\n                }\n                return false;\n            }\n        });\n        popup.show();\n    }\n```\n","slug":"android/AndroidSamples/UI/2016-09-24-ActionBar-PopupMenu","published":1,"updated":"2018-08-09T10:10:11.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfb1007828t1o2v2ljtj","content":"<h2 id=\"PopupMenu\"><a href=\"#PopupMenu\" class=\"headerlink\" title=\"PopupMenu\"></a>PopupMenu</h2><p>popupmenu可以非常方便得实现在指定view下弹出一个菜单,实现类似ActionBar中的效果.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showPopupMenu</span><span class=\"params\">(View view)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PopupAdapter adapter = (PopupAdapter) getListAdapter();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String item = (String) view.getTag();</span><br><span class=\"line\"></span><br><span class=\"line\">        PopupMenu popup = <span class=\"keyword\">new</span> PopupMenu(getActivity(), view);</span><br><span class=\"line\"></span><br><span class=\"line\">        popup.getMenuInflater().inflate(R.menu.popup, popup.getMenu());</span><br><span class=\"line\"></span><br><span class=\"line\">        popup.setOnMenuItemClickListener(<span class=\"keyword\">new</span> PopupMenu.OnMenuItemClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onMenuItemClick</span><span class=\"params\">(MenuItem menuItem)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (menuItem.getItemId())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> R.id.menu_remove:</span><br><span class=\"line\">                        adapter.remove(item);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        popup.show();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"PopupMenu\"><a href=\"#PopupMenu\" class=\"headerlink\" title=\"PopupMenu\"></a>PopupMenu</h2><p>popupmenu可以非常方便得实现在指定view下弹出一个菜单,实现类似ActionBar中的效果.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showPopupMenu</span><span class=\"params\">(View view)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PopupAdapter adapter = (PopupAdapter) getListAdapter();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String item = (String) view.getTag();</span><br><span class=\"line\"></span><br><span class=\"line\">        PopupMenu popup = <span class=\"keyword\">new</span> PopupMenu(getActivity(), view);</span><br><span class=\"line\"></span><br><span class=\"line\">        popup.getMenuInflater().inflate(R.menu.popup, popup.getMenu());</span><br><span class=\"line\"></span><br><span class=\"line\">        popup.setOnMenuItemClickListener(<span class=\"keyword\">new</span> PopupMenu.OnMenuItemClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onMenuItemClick</span><span class=\"params\">(MenuItem menuItem)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (menuItem.getItemId())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> R.id.menu_remove:</span><br><span class=\"line\">                        adapter.remove(item);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        popup.show();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2017-03-03T16:00:00.000Z","title":"链表相交以及链表含环的相关问题","keywords":null,"description":"如何判断一个链表是否含环, 以及如何判断两个链表是否相交.","mathjax":true,"toc":true,"_content":"\n\n\n## 初步: 如何判断一个链表是否含有环\n\n使得两个名为fast, slow的节点等于头节点, fast每次向前两步,  slow每次向前一步, 如果fast.next为null, 或者fast.next.next为null, 则说明没有环. 如果fast和slow相遇, 说明有环.\n\n时间复杂度和环和长度以及链表长度有关, 为线性时间.\n\n\n### 代码\n\n```java\npublic boolean hasCycle(ListNode head) {\n        if(head==null){\n            return false;\n        }\n        ListNode fast=head;\n        ListNode slow=head;\n        //0: 无环 ; 1: 有环\n        int circleFlag=0;\n        while (true){\n            if(fast.next==null||fast.next.next==null){\n                return false;\n            }\n            fast=fast.next.next;\n            slow=slow.next;\n            if(fast==slow){\n                slow=head;\n                return true;\n            }\n        }\n    }\n```\n\n## 进阶: 如果一个链表有环, 找出进入环的第一个节点\n\n\n使得两个名为fast, slow的节点等于头节点, fast每次向前两步,  slow每次向前一步, 如果fast.next为null, 或者fast.next.next为null, 则说明没有环. 如果fast和slow相遇, 说明有环. 此时将fast节点移动号head节点(判断fast和slow是否相遇, 如果相遇,说明head节点即使入环的第一个节点). 之后fast的节点每次走一步, slow节点每次走一步. 下一次相遇的节点即是入环的第一个节点.\n\n### 证明\n\n某个链表总长度为n+m, 环的长度为m. <br>\n其中令\n\n$$n\\%m=n-x\\cdot m   ,(x=\\left \\lfloor \\tfrac{n}{m} \\right \\rfloor)$$\n\n\n1. slow节点到达入环的第一个节点时fast位置:<br>\n入环的第$n\\%m$节点, 即$n-x\\cdot m$.\n2. 第一次相遇时, 两个节点所处的位置:<br>\n入环的第$m-(n-x\\cdot m)$节点, 即$(x+1)\\cdot m-n$.\n3. 此时fast节点回到原点, 当fast节点再次走到入环的第一个节点时, slow节点的位置:<br>\n入环的地$((x+1)\\cdot m-n+n)\\%m$. 即$((x+1)\\cdot m)%m$. 即为入环的第一个节点. 因为从fast节点回到原点再到入环的第一个节点过程中, fast节点一直在环外, slow节点一直在环内. 所以此次相遇为第二次相遇. 即按照之前的走法, 第二次相遇的节点即为入环的第一个节点.\n\n### 代码\n\n```java\npublic ListNode detectCycle(ListNode head) {\n    if(head==null){\n        return null;\n    }\n    ListNode fast=head;\n    ListNode slow=head;\n    //0: 无环 ; 1: 有环\n\n    int circleFlag=0;\n    while (true){\n        if(fast.next==null||fast.next.next==null){\n            circleFlag=0;\n            break;\n        }\n        fast=fast.next.next;\n        slow=slow.next;\n        if(fast==slow){\n            fast=head;\n            circleFlag=1;\n            break;\n        }\n    }\n    if(circleFlag==0){\n        return null;\n    }\n    while(true){\n        if(fast==slow){\n            return fast;\n        }\n        slow=slow.next;\n        fast=fast.next;\n\n    }\n}\n```\n\n## 进阶: 以及如何判断两个链表是否相交\n\n### 一链表有环, 另一链表无环, 不相交\n\n### 两个链表都没有环\n\n计算两个链表的长度, 较长的链表先向前走`Math.abs(lenA-lenB)`步, 之后两个节点一起前进, 并相互比较, 若有相同的节点, 则说明两个链表在该节点出相交, 否则说明两个链表不相交.\n\n#### 代码\n\n\n```java\npublic int listLengthWithoutCycle(ListNode head){\n    int res=0;\n    while (head!=null){\n        head=head.next;\n        res+=1;\n    }\n    return res;\n}\npublic ListNode noLoop(ListNode headA, ListNode headB){\n    int lenA= listLengthWithoutCycle(headA);\n    int lenB= listLengthWithoutCycle(headB);\n    System.out.println(lenA);\n    System.out.println(lenB);\n    ListNode a=headA;\n    ListNode b=headB;\n    if(lenA<lenB){\n        a=headB;\n        b=headA;\n    }\n    int diff=Math.abs(lenA-lenB);\n    for (int i = 0;  i < diff;  i++) {\n        a=a.next;\n    }\n    while(true){\n        if(a==null||b==null){\n            return null;\n        }\n        if(a==b){\n            return a;\n        }\n        a=a.next;\n        b=b.next;\n    }\n}\n```\n### 两个链表都有环\n\n找出两个链表入环的第一个节点, 其中一个节点不断的赋值为该节点的next, 若能够遇到另一个链表的入环的一个节点, 则说明两个链表环内相交, 否则说明两个链表为环外相交或者不相交.\n\n如果两个链表是在环外相交的, 解法和都没有环的解法类似.\n\n\n\n\n#### 代码\n\n```java\npublic ListNode bothLoop(ListNode headA, ListNode headB,ListNode aIns,ListNode bIns){\n    //环内相交\n    ListNode aInsCopy=aIns;\n    while (true){\n        aIns=aIns.next;\n        if(aIns==aInsCopy){\n            break;\n        }\n        if(aIns==bIns){\n            return aIns;\n        }\n    }\n\n    //在while循环没有return, 说明并没有在环内相交\n    int lenA=listLengthWithCycle(headA);\n    int lenB=listLengthWithCycle(headB);\n    ListNode a=headA;\n    ListNode b=headB;\n    if(lenA<lenB){\n        a=headB;\n        b=headA;\n    }\n    int diff=Math.abs(lenA-lenB);\n    for (int i = 0;  i < diff;  i++) {\n        a=a.next;\n        if(a==aIns){\n            return null;\n        }\n    }\n    while(true){\n        if(a==b){\n            return a;\n        }\n        if(a==aIns){\n            return null;\n        }\n        if(b==bIns){\n            return null;\n        }\n        a=a.next;\n        b=b.next;\n    }\n}\n\n\npublic int listLengthWithCycle(ListNode node){\n    int res=0;\n    ListNode ins=detectCycle(node);\n    int flag=-1;\n    while (true){\n        if(flag==1){\n            break;\n        }\n        if(node==ins){\n            flag++;\n        }\n        res+=1;\n    }\n    return res;\n}\n```","source":"_posts/algorithm/CodeIntervieBook/LinkedList/2017-03-01-LinkedList-Cycle.md","raw":"---\nauthor: ivyxjc\ndate: 2017-03-04\ntitle: 链表相交以及链表含环的相关问题\ncategory: Algorithm\ntags: [linkedlist]\nkeywords:\ndescription: 如何判断一个链表是否含环, 以及如何判断两个链表是否相交.\nmathjax: true\ntoc: true\n---\n\n\n\n## 初步: 如何判断一个链表是否含有环\n\n使得两个名为fast, slow的节点等于头节点, fast每次向前两步,  slow每次向前一步, 如果fast.next为null, 或者fast.next.next为null, 则说明没有环. 如果fast和slow相遇, 说明有环.\n\n时间复杂度和环和长度以及链表长度有关, 为线性时间.\n\n\n### 代码\n\n```java\npublic boolean hasCycle(ListNode head) {\n        if(head==null){\n            return false;\n        }\n        ListNode fast=head;\n        ListNode slow=head;\n        //0: 无环 ; 1: 有环\n        int circleFlag=0;\n        while (true){\n            if(fast.next==null||fast.next.next==null){\n                return false;\n            }\n            fast=fast.next.next;\n            slow=slow.next;\n            if(fast==slow){\n                slow=head;\n                return true;\n            }\n        }\n    }\n```\n\n## 进阶: 如果一个链表有环, 找出进入环的第一个节点\n\n\n使得两个名为fast, slow的节点等于头节点, fast每次向前两步,  slow每次向前一步, 如果fast.next为null, 或者fast.next.next为null, 则说明没有环. 如果fast和slow相遇, 说明有环. 此时将fast节点移动号head节点(判断fast和slow是否相遇, 如果相遇,说明head节点即使入环的第一个节点). 之后fast的节点每次走一步, slow节点每次走一步. 下一次相遇的节点即是入环的第一个节点.\n\n### 证明\n\n某个链表总长度为n+m, 环的长度为m. <br>\n其中令\n\n$$n\\%m=n-x\\cdot m   ,(x=\\left \\lfloor \\tfrac{n}{m} \\right \\rfloor)$$\n\n\n1. slow节点到达入环的第一个节点时fast位置:<br>\n入环的第$n\\%m$节点, 即$n-x\\cdot m$.\n2. 第一次相遇时, 两个节点所处的位置:<br>\n入环的第$m-(n-x\\cdot m)$节点, 即$(x+1)\\cdot m-n$.\n3. 此时fast节点回到原点, 当fast节点再次走到入环的第一个节点时, slow节点的位置:<br>\n入环的地$((x+1)\\cdot m-n+n)\\%m$. 即$((x+1)\\cdot m)%m$. 即为入环的第一个节点. 因为从fast节点回到原点再到入环的第一个节点过程中, fast节点一直在环外, slow节点一直在环内. 所以此次相遇为第二次相遇. 即按照之前的走法, 第二次相遇的节点即为入环的第一个节点.\n\n### 代码\n\n```java\npublic ListNode detectCycle(ListNode head) {\n    if(head==null){\n        return null;\n    }\n    ListNode fast=head;\n    ListNode slow=head;\n    //0: 无环 ; 1: 有环\n\n    int circleFlag=0;\n    while (true){\n        if(fast.next==null||fast.next.next==null){\n            circleFlag=0;\n            break;\n        }\n        fast=fast.next.next;\n        slow=slow.next;\n        if(fast==slow){\n            fast=head;\n            circleFlag=1;\n            break;\n        }\n    }\n    if(circleFlag==0){\n        return null;\n    }\n    while(true){\n        if(fast==slow){\n            return fast;\n        }\n        slow=slow.next;\n        fast=fast.next;\n\n    }\n}\n```\n\n## 进阶: 以及如何判断两个链表是否相交\n\n### 一链表有环, 另一链表无环, 不相交\n\n### 两个链表都没有环\n\n计算两个链表的长度, 较长的链表先向前走`Math.abs(lenA-lenB)`步, 之后两个节点一起前进, 并相互比较, 若有相同的节点, 则说明两个链表在该节点出相交, 否则说明两个链表不相交.\n\n#### 代码\n\n\n```java\npublic int listLengthWithoutCycle(ListNode head){\n    int res=0;\n    while (head!=null){\n        head=head.next;\n        res+=1;\n    }\n    return res;\n}\npublic ListNode noLoop(ListNode headA, ListNode headB){\n    int lenA= listLengthWithoutCycle(headA);\n    int lenB= listLengthWithoutCycle(headB);\n    System.out.println(lenA);\n    System.out.println(lenB);\n    ListNode a=headA;\n    ListNode b=headB;\n    if(lenA<lenB){\n        a=headB;\n        b=headA;\n    }\n    int diff=Math.abs(lenA-lenB);\n    for (int i = 0;  i < diff;  i++) {\n        a=a.next;\n    }\n    while(true){\n        if(a==null||b==null){\n            return null;\n        }\n        if(a==b){\n            return a;\n        }\n        a=a.next;\n        b=b.next;\n    }\n}\n```\n### 两个链表都有环\n\n找出两个链表入环的第一个节点, 其中一个节点不断的赋值为该节点的next, 若能够遇到另一个链表的入环的一个节点, 则说明两个链表环内相交, 否则说明两个链表为环外相交或者不相交.\n\n如果两个链表是在环外相交的, 解法和都没有环的解法类似.\n\n\n\n\n#### 代码\n\n```java\npublic ListNode bothLoop(ListNode headA, ListNode headB,ListNode aIns,ListNode bIns){\n    //环内相交\n    ListNode aInsCopy=aIns;\n    while (true){\n        aIns=aIns.next;\n        if(aIns==aInsCopy){\n            break;\n        }\n        if(aIns==bIns){\n            return aIns;\n        }\n    }\n\n    //在while循环没有return, 说明并没有在环内相交\n    int lenA=listLengthWithCycle(headA);\n    int lenB=listLengthWithCycle(headB);\n    ListNode a=headA;\n    ListNode b=headB;\n    if(lenA<lenB){\n        a=headB;\n        b=headA;\n    }\n    int diff=Math.abs(lenA-lenB);\n    for (int i = 0;  i < diff;  i++) {\n        a=a.next;\n        if(a==aIns){\n            return null;\n        }\n    }\n    while(true){\n        if(a==b){\n            return a;\n        }\n        if(a==aIns){\n            return null;\n        }\n        if(b==bIns){\n            return null;\n        }\n        a=a.next;\n        b=b.next;\n    }\n}\n\n\npublic int listLengthWithCycle(ListNode node){\n    int res=0;\n    ListNode ins=detectCycle(node);\n    int flag=-1;\n    while (true){\n        if(flag==1){\n            break;\n        }\n        if(node==ins){\n            flag++;\n        }\n        res+=1;\n    }\n    return res;\n}\n```","slug":"algorithm/CodeIntervieBook/LinkedList/2017-03-01-LinkedList-Cycle","published":1,"updated":"2018-10-14T10:15:04.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfb2007b28t1zcfmuqux","content":"<h2 id=\"初步-如何判断一个链表是否含有环\"><a href=\"#初步-如何判断一个链表是否含有环\" class=\"headerlink\" title=\"初步: 如何判断一个链表是否含有环\"></a>初步: 如何判断一个链表是否含有环</h2><p>使得两个名为fast, slow的节点等于头节点, fast每次向前两步,  slow每次向前一步, 如果fast.next为null, 或者fast.next.next为null, 则说明没有环. 如果fast和slow相遇, 说明有环.</p>\n<p>时间复杂度和环和长度以及链表长度有关, 为线性时间.</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode fast=head;</span><br><span class=\"line\">        ListNode slow=head;</span><br><span class=\"line\">        <span class=\"comment\">//0: 无环 ; 1: 有环</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> circleFlag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fast.next==<span class=\"keyword\">null</span>||fast.next.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fast=fast.next.next;</span><br><span class=\"line\">            slow=slow.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">                slow=head;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进阶-如果一个链表有环-找出进入环的第一个节点\"><a href=\"#进阶-如果一个链表有环-找出进入环的第一个节点\" class=\"headerlink\" title=\"进阶: 如果一个链表有环, 找出进入环的第一个节点\"></a>进阶: 如果一个链表有环, 找出进入环的第一个节点</h2><p>使得两个名为fast, slow的节点等于头节点, fast每次向前两步,  slow每次向前一步, 如果fast.next为null, 或者fast.next.next为null, 则说明没有环. 如果fast和slow相遇, 说明有环. 此时将fast节点移动号head节点(判断fast和slow是否相遇, 如果相遇,说明head节点即使入环的第一个节点). 之后fast的节点每次走一步, slow节点每次走一步. 下一次相遇的节点即是入环的第一个节点.</p>\n<h3 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h3><p>某个链表总长度为n+m, 环的长度为m. <br><br>其中令</p>\n<p>$$n%m=n-x\\cdot m   ,(x=\\left \\lfloor \\tfrac{n}{m} \\right \\rfloor)$$</p>\n<ol>\n<li>slow节点到达入环的第一个节点时fast位置:<br><br>入环的第$n%m$节点, 即$n-x\\cdot m$.</li>\n<li>第一次相遇时, 两个节点所处的位置:<br><br>入环的第$m-(n-x\\cdot m)$节点, 即$(x+1)\\cdot m-n$.</li>\n<li>此时fast节点回到原点, 当fast节点再次走到入环的第一个节点时, slow节点的位置:<br><br>入环的地$((x+1)\\cdot m-n+n)%m$. 即$((x+1)\\cdot m)%m$. 即为入环的第一个节点. 因为从fast节点回到原点再到入环的第一个节点过程中, fast节点一直在环外, slow节点一直在环内. 所以此次相遇为第二次相遇. 即按照之前的走法, 第二次相遇的节点即为入环的第一个节点.</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">detectCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode fast=head;</span><br><span class=\"line\">    ListNode slow=head;</span><br><span class=\"line\">    <span class=\"comment\">//0: 无环 ; 1: 有环</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> circleFlag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fast.next==<span class=\"keyword\">null</span>||fast.next.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            circleFlag=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fast=fast.next.next;</span><br><span class=\"line\">        slow=slow.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">            fast=head;</span><br><span class=\"line\">            circleFlag=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(circleFlag==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fast;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        slow=slow.next;</span><br><span class=\"line\">        fast=fast.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进阶-以及如何判断两个链表是否相交\"><a href=\"#进阶-以及如何判断两个链表是否相交\" class=\"headerlink\" title=\"进阶: 以及如何判断两个链表是否相交\"></a>进阶: 以及如何判断两个链表是否相交</h2><h3 id=\"一链表有环-另一链表无环-不相交\"><a href=\"#一链表有环-另一链表无环-不相交\" class=\"headerlink\" title=\"一链表有环, 另一链表无环, 不相交\"></a>一链表有环, 另一链表无环, 不相交</h3><h3 id=\"两个链表都没有环\"><a href=\"#两个链表都没有环\" class=\"headerlink\" title=\"两个链表都没有环\"></a>两个链表都没有环</h3><p>计算两个链表的长度, 较长的链表先向前走<code>Math.abs(lenA-lenB)</code>步, 之后两个节点一起前进, 并相互比较, 若有相同的节点, 则说明两个链表在该节点出相交, 否则说明两个链表不相交.</p>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">listLengthWithoutCycle</span><span class=\"params\">(ListNode head)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        head=head.next;</span><br><span class=\"line\">        res+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">noLoop</span><span class=\"params\">(ListNode headA, ListNode headB)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenA= listLengthWithoutCycle(headA);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenB= listLengthWithoutCycle(headB);</span><br><span class=\"line\">    System.out.println(lenA);</span><br><span class=\"line\">    System.out.println(lenB);</span><br><span class=\"line\">    ListNode a=headA;</span><br><span class=\"line\">    ListNode b=headB;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lenA&lt;lenB)&#123;</span><br><span class=\"line\">        a=headB;</span><br><span class=\"line\">        b=headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> diff=Math.abs(lenA-lenB);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;  i &lt; diff;  i++) &#123;</span><br><span class=\"line\">        a=a.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==<span class=\"keyword\">null</span>||b==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==b)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a=a.next;</span><br><span class=\"line\">        b=b.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两个链表都有环\"><a href=\"#两个链表都有环\" class=\"headerlink\" title=\"两个链表都有环\"></a>两个链表都有环</h3><p>找出两个链表入环的第一个节点, 其中一个节点不断的赋值为该节点的next, 若能够遇到另一个链表的入环的一个节点, 则说明两个链表环内相交, 否则说明两个链表为环外相交或者不相交.</p>\n<p>如果两个链表是在环外相交的, 解法和都没有环的解法类似.</p>\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">bothLoop</span><span class=\"params\">(ListNode headA, ListNode headB,ListNode aIns,ListNode bIns)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//环内相交</span></span><br><span class=\"line\">    ListNode aInsCopy=aIns;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        aIns=aIns.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(aIns==aInsCopy)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(aIns==bIns)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aIns;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在while循环没有return, 说明并没有在环内相交</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenA=listLengthWithCycle(headA);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenB=listLengthWithCycle(headB);</span><br><span class=\"line\">    ListNode a=headA;</span><br><span class=\"line\">    ListNode b=headB;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lenA&lt;lenB)&#123;</span><br><span class=\"line\">        a=headB;</span><br><span class=\"line\">        b=headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> diff=Math.abs(lenA-lenB);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;  i &lt; diff;  i++) &#123;</span><br><span class=\"line\">        a=a.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==aIns)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==b)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==aIns)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b==bIns)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a=a.next;</span><br><span class=\"line\">        b=b.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">listLengthWithCycle</span><span class=\"params\">(ListNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    ListNode ins=detectCycle(node);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag=-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node==ins)&#123;</span><br><span class=\"line\">            flag++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"初步-如何判断一个链表是否含有环\"><a href=\"#初步-如何判断一个链表是否含有环\" class=\"headerlink\" title=\"初步: 如何判断一个链表是否含有环\"></a>初步: 如何判断一个链表是否含有环</h2><p>使得两个名为fast, slow的节点等于头节点, fast每次向前两步,  slow每次向前一步, 如果fast.next为null, 或者fast.next.next为null, 则说明没有环. 如果fast和slow相遇, 说明有环.</p>\n<p>时间复杂度和环和长度以及链表长度有关, 为线性时间.</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode fast=head;</span><br><span class=\"line\">        ListNode slow=head;</span><br><span class=\"line\">        <span class=\"comment\">//0: 无环 ; 1: 有环</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> circleFlag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fast.next==<span class=\"keyword\">null</span>||fast.next.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fast=fast.next.next;</span><br><span class=\"line\">            slow=slow.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">                slow=head;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进阶-如果一个链表有环-找出进入环的第一个节点\"><a href=\"#进阶-如果一个链表有环-找出进入环的第一个节点\" class=\"headerlink\" title=\"进阶: 如果一个链表有环, 找出进入环的第一个节点\"></a>进阶: 如果一个链表有环, 找出进入环的第一个节点</h2><p>使得两个名为fast, slow的节点等于头节点, fast每次向前两步,  slow每次向前一步, 如果fast.next为null, 或者fast.next.next为null, 则说明没有环. 如果fast和slow相遇, 说明有环. 此时将fast节点移动号head节点(判断fast和slow是否相遇, 如果相遇,说明head节点即使入环的第一个节点). 之后fast的节点每次走一步, slow节点每次走一步. 下一次相遇的节点即是入环的第一个节点.</p>\n<h3 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h3><p>某个链表总长度为n+m, 环的长度为m. <br><br>其中令</p>\n<p>$$n%m=n-x\\cdot m   ,(x=\\left \\lfloor \\tfrac{n}{m} \\right \\rfloor)$$</p>\n<ol>\n<li>slow节点到达入环的第一个节点时fast位置:<br><br>入环的第$n%m$节点, 即$n-x\\cdot m$.</li>\n<li>第一次相遇时, 两个节点所处的位置:<br><br>入环的第$m-(n-x\\cdot m)$节点, 即$(x+1)\\cdot m-n$.</li>\n<li>此时fast节点回到原点, 当fast节点再次走到入环的第一个节点时, slow节点的位置:<br><br>入环的地$((x+1)\\cdot m-n+n)%m$. 即$((x+1)\\cdot m)%m$. 即为入环的第一个节点. 因为从fast节点回到原点再到入环的第一个节点过程中, fast节点一直在环外, slow节点一直在环内. 所以此次相遇为第二次相遇. 即按照之前的走法, 第二次相遇的节点即为入环的第一个节点.</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">detectCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode fast=head;</span><br><span class=\"line\">    ListNode slow=head;</span><br><span class=\"line\">    <span class=\"comment\">//0: 无环 ; 1: 有环</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> circleFlag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fast.next==<span class=\"keyword\">null</span>||fast.next.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            circleFlag=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fast=fast.next.next;</span><br><span class=\"line\">        slow=slow.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">            fast=head;</span><br><span class=\"line\">            circleFlag=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(circleFlag==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fast;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        slow=slow.next;</span><br><span class=\"line\">        fast=fast.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进阶-以及如何判断两个链表是否相交\"><a href=\"#进阶-以及如何判断两个链表是否相交\" class=\"headerlink\" title=\"进阶: 以及如何判断两个链表是否相交\"></a>进阶: 以及如何判断两个链表是否相交</h2><h3 id=\"一链表有环-另一链表无环-不相交\"><a href=\"#一链表有环-另一链表无环-不相交\" class=\"headerlink\" title=\"一链表有环, 另一链表无环, 不相交\"></a>一链表有环, 另一链表无环, 不相交</h3><h3 id=\"两个链表都没有环\"><a href=\"#两个链表都没有环\" class=\"headerlink\" title=\"两个链表都没有环\"></a>两个链表都没有环</h3><p>计算两个链表的长度, 较长的链表先向前走<code>Math.abs(lenA-lenB)</code>步, 之后两个节点一起前进, 并相互比较, 若有相同的节点, 则说明两个链表在该节点出相交, 否则说明两个链表不相交.</p>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">listLengthWithoutCycle</span><span class=\"params\">(ListNode head)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        head=head.next;</span><br><span class=\"line\">        res+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">noLoop</span><span class=\"params\">(ListNode headA, ListNode headB)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenA= listLengthWithoutCycle(headA);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenB= listLengthWithoutCycle(headB);</span><br><span class=\"line\">    System.out.println(lenA);</span><br><span class=\"line\">    System.out.println(lenB);</span><br><span class=\"line\">    ListNode a=headA;</span><br><span class=\"line\">    ListNode b=headB;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lenA&lt;lenB)&#123;</span><br><span class=\"line\">        a=headB;</span><br><span class=\"line\">        b=headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> diff=Math.abs(lenA-lenB);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;  i &lt; diff;  i++) &#123;</span><br><span class=\"line\">        a=a.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==<span class=\"keyword\">null</span>||b==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==b)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a=a.next;</span><br><span class=\"line\">        b=b.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两个链表都有环\"><a href=\"#两个链表都有环\" class=\"headerlink\" title=\"两个链表都有环\"></a>两个链表都有环</h3><p>找出两个链表入环的第一个节点, 其中一个节点不断的赋值为该节点的next, 若能够遇到另一个链表的入环的一个节点, 则说明两个链表环内相交, 否则说明两个链表为环外相交或者不相交.</p>\n<p>如果两个链表是在环外相交的, 解法和都没有环的解法类似.</p>\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">bothLoop</span><span class=\"params\">(ListNode headA, ListNode headB,ListNode aIns,ListNode bIns)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//环内相交</span></span><br><span class=\"line\">    ListNode aInsCopy=aIns;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        aIns=aIns.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(aIns==aInsCopy)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(aIns==bIns)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aIns;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在while循环没有return, 说明并没有在环内相交</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenA=listLengthWithCycle(headA);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenB=listLengthWithCycle(headB);</span><br><span class=\"line\">    ListNode a=headA;</span><br><span class=\"line\">    ListNode b=headB;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lenA&lt;lenB)&#123;</span><br><span class=\"line\">        a=headB;</span><br><span class=\"line\">        b=headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> diff=Math.abs(lenA-lenB);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;  i &lt; diff;  i++) &#123;</span><br><span class=\"line\">        a=a.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==aIns)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==b)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==aIns)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b==bIns)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a=a.next;</span><br><span class=\"line\">        b=b.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">listLengthWithCycle</span><span class=\"params\">(ListNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    ListNode ins=detectCycle(node);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag=-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node==ins)&#123;</span><br><span class=\"line\">            flag++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"author":"ivyxjc","date":"2016-10-15T16:00:00.000Z","title":"ActionBar ShareActionProvider","keywords":null,"description":"ShareActionProvider 可以非常方便地提供分享功能.","toc":true,"_content":"\n\n## 添加share按钮\n\n添加share按钮的主要步骤:\n1. 在ActionBar中添加share按钮\n2. 从item中获取ShareActionProvider\n```java\nShareActionProvider`<br> `mShareActionProvider=(ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);\n```\n3. 向`ShareActionProvider`中添加`itent`\n\n\n```xml\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:support=\"http://schemas.android.com/apk/res-auto\">\n\n    <item\n        android:id=\"@+id/share_item\"\n        android:title=\"@string/menu_share\"\n\n        support:actionProviderClass=\"android.support.v7.widget.ShareActionProvider\"\n        support:showAsAction=\"always\"\n        />\n</menu>\n```\n\n```java\n/MainActivity.java\n\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.main_menu,menu);\n\n    MenuItem shareItem=menu.findItem(R.id.share_item);\n\n    mShareActionProvider=(ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);\n\n    int currentViewPagerItem=((ViewPager)findViewById(R.id.viewPager)).getCurrentItem();\n    setShareItem(currentViewPagerItem);\n    return super.onCreateOptionsMenu(menu);\n}\n\n\npublic void setShareItem(int i){\n    if(mShareActionProvider!=null){\n        ContentItem item=mItems.get(i);\n\n        Intent intent=item.getShareIntent(this);\n\n        mShareActionProvider.setShareIntent(intent);\n    }\n  }\n\n```\n\n\n```java\npublic Intent getShareIntent(Context context){\n    Intent intent=new Intent(Intent.ACTION_SEND);\n\n    switch (contentType) {\n        case CONTENT_TYPE_IMAGE:\n            intent.setType(\"image/jpg\");\n            intent.putExtra(Intent.EXTRA_STREAM, getContentUri());\n\n            break;\n\n        case CONTENT_TYPE_TEXT:\n            intent.setType(\"text/plain\");\n            intent.putExtra(Intent.EXTRA_TEXT, context.getString(contentResourceId));\n            break;\n    }\n\n    return intent;\n}\n```\n\n```java\n\\ContentItem\npublic Uri getContentUri(){\n    if(!TextUtils.isEmpty(contentAssetFilePath)){\n        return Uri.parse(ShareProvider.CONTENT_URI+contentAssetFilePath);\n    }else{\n        return null;\n    }\n}\n```\n\n## 注意点\n\n### 确保ShareActionProvider和所在的ViewPager的`CurrentItem()`对应\n\n很容易被`onCreateOptionsMenu()`中下列代码迷惑, 以为ShareActionProvider已经和`CurrentItem()`对应了.\n\n```java\nint currentViewPagerItem=((ViewPager)findViewById(R.id.viewPager)).getCurrentItem();\nsetShareItem(currentViewPagerItem);\n```\n\n事实上并没有, `onCreateOptionsMenu`方法只会在初始ActionBar时调用, 且也不会设置监听. 所以ShareActionProvider总是设置在了第一个item的intent中.\n\n所以需要添加以下代码, 确保切换页面后, ShareActionProvider和item仍是正确对应的.\n\n```java\nmViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {\n      @Override\n      public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n      }\n      @Override\n      public void onPageSelected(int position) {\n          setShareItem(position);\n      }\n      @Override\n      public void onPageScrollStateChanged(int state) {\n      }\n    });\n```\n\n\n### 如何获取图片uri\n\n\n获取`/res/drawable`中图片的uri可以使用以下方法:\n\n```java\nUri imageUri = Uri.parse(ContentResolver.SCHEME_ANDROID_RESOURCE +\n \"://\" + getResources().getResourcePackageName(R.drawable.ic_launcher)\n + '/' + getResources().getResourceTypeName(R.drawable.ic_launcher) + '/'\n +  getResources().getResourceEntryName(R.drawable.ic_launcher) );\n ```\n\n 等价于\n\n ```\nUri uri = Uri.parse(\"android.resource://your.package.here/drawable/image_name\");\n ```\n\n如果不正确,可以调用第一个方法,再使用Log自行查看准确的字符串.\n","source":"_posts/android/AndroidSamples/UI/2016-10-16-ActionBar-ShareActionProvider.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-16\ntitle: ActionBar ShareActionProvider\ncategory: Android\ntags: [android,android_UI,android_fragment]\nkeywords:\ndescription: ShareActionProvider 可以非常方便地提供分享功能.\ntoc: true\n---\n\n\n## 添加share按钮\n\n添加share按钮的主要步骤:\n1. 在ActionBar中添加share按钮\n2. 从item中获取ShareActionProvider\n```java\nShareActionProvider`<br> `mShareActionProvider=(ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);\n```\n3. 向`ShareActionProvider`中添加`itent`\n\n\n```xml\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:support=\"http://schemas.android.com/apk/res-auto\">\n\n    <item\n        android:id=\"@+id/share_item\"\n        android:title=\"@string/menu_share\"\n\n        support:actionProviderClass=\"android.support.v7.widget.ShareActionProvider\"\n        support:showAsAction=\"always\"\n        />\n</menu>\n```\n\n```java\n/MainActivity.java\n\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.main_menu,menu);\n\n    MenuItem shareItem=menu.findItem(R.id.share_item);\n\n    mShareActionProvider=(ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);\n\n    int currentViewPagerItem=((ViewPager)findViewById(R.id.viewPager)).getCurrentItem();\n    setShareItem(currentViewPagerItem);\n    return super.onCreateOptionsMenu(menu);\n}\n\n\npublic void setShareItem(int i){\n    if(mShareActionProvider!=null){\n        ContentItem item=mItems.get(i);\n\n        Intent intent=item.getShareIntent(this);\n\n        mShareActionProvider.setShareIntent(intent);\n    }\n  }\n\n```\n\n\n```java\npublic Intent getShareIntent(Context context){\n    Intent intent=new Intent(Intent.ACTION_SEND);\n\n    switch (contentType) {\n        case CONTENT_TYPE_IMAGE:\n            intent.setType(\"image/jpg\");\n            intent.putExtra(Intent.EXTRA_STREAM, getContentUri());\n\n            break;\n\n        case CONTENT_TYPE_TEXT:\n            intent.setType(\"text/plain\");\n            intent.putExtra(Intent.EXTRA_TEXT, context.getString(contentResourceId));\n            break;\n    }\n\n    return intent;\n}\n```\n\n```java\n\\ContentItem\npublic Uri getContentUri(){\n    if(!TextUtils.isEmpty(contentAssetFilePath)){\n        return Uri.parse(ShareProvider.CONTENT_URI+contentAssetFilePath);\n    }else{\n        return null;\n    }\n}\n```\n\n## 注意点\n\n### 确保ShareActionProvider和所在的ViewPager的`CurrentItem()`对应\n\n很容易被`onCreateOptionsMenu()`中下列代码迷惑, 以为ShareActionProvider已经和`CurrentItem()`对应了.\n\n```java\nint currentViewPagerItem=((ViewPager)findViewById(R.id.viewPager)).getCurrentItem();\nsetShareItem(currentViewPagerItem);\n```\n\n事实上并没有, `onCreateOptionsMenu`方法只会在初始ActionBar时调用, 且也不会设置监听. 所以ShareActionProvider总是设置在了第一个item的intent中.\n\n所以需要添加以下代码, 确保切换页面后, ShareActionProvider和item仍是正确对应的.\n\n```java\nmViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {\n      @Override\n      public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n      }\n      @Override\n      public void onPageSelected(int position) {\n          setShareItem(position);\n      }\n      @Override\n      public void onPageScrollStateChanged(int state) {\n      }\n    });\n```\n\n\n### 如何获取图片uri\n\n\n获取`/res/drawable`中图片的uri可以使用以下方法:\n\n```java\nUri imageUri = Uri.parse(ContentResolver.SCHEME_ANDROID_RESOURCE +\n \"://\" + getResources().getResourcePackageName(R.drawable.ic_launcher)\n + '/' + getResources().getResourceTypeName(R.drawable.ic_launcher) + '/'\n +  getResources().getResourceEntryName(R.drawable.ic_launcher) );\n ```\n\n 等价于\n\n ```\nUri uri = Uri.parse(\"android.resource://your.package.here/drawable/image_name\");\n ```\n\n如果不正确,可以调用第一个方法,再使用Log自行查看准确的字符串.\n","slug":"android/AndroidSamples/UI/2016-10-16-ActionBar-ShareActionProvider","published":1,"updated":"2018-08-09T10:10:11.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfb3007e28t1ca5sw8k2","content":"<h2 id=\"添加share按钮\"><a href=\"#添加share按钮\" class=\"headerlink\" title=\"添加share按钮\"></a>添加share按钮</h2><p>添加share按钮的主要步骤:</p>\n<ol>\n<li><p>在ActionBar中添加share按钮</p>\n</li>\n<li><p>从item中获取ShareActionProvider</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ShareActionProvider`&lt;br&gt; `mShareActionProvider=(ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>向<code>ShareActionProvider</code>中添加<code>itent</code></p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:support</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/share_item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/menu_share\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">support:actionProviderClass</span>=<span class=\"string\">\"android.support.v7.widget.ShareActionProvider\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">support:showAsAction</span>=<span class=\"string\">\"always\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/MainActivity.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">    getMenuInflater().inflate(R.menu.main_menu,menu);</span><br><span class=\"line\"></span><br><span class=\"line\">    MenuItem shareItem=menu.findItem(R.id.share_item);</span><br><span class=\"line\"></span><br><span class=\"line\">    mShareActionProvider=(ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> currentViewPagerItem=((ViewPager)findViewById(R.id.viewPager)).getCurrentItem();</span><br><span class=\"line\">    setShareItem(currentViewPagerItem);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onCreateOptionsMenu(menu);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setShareItem</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mShareActionProvider!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        ContentItem item=mItems.get(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        Intent intent=item.getShareIntent(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        mShareActionProvider.setShareIntent(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Intent <span class=\"title\">getShareIntent</span><span class=\"params\">(Context context)</span></span>&#123;</span><br><span class=\"line\">    Intent intent=<span class=\"keyword\">new</span> Intent(Intent.ACTION_SEND);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (contentType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> CONTENT_TYPE_IMAGE:</span><br><span class=\"line\">            intent.setType(<span class=\"string\">\"image/jpg\"</span>);</span><br><span class=\"line\">            intent.putExtra(Intent.EXTRA_STREAM, getContentUri());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> CONTENT_TYPE_TEXT:</span><br><span class=\"line\">            intent.setType(<span class=\"string\">\"text/plain\"</span>);</span><br><span class=\"line\">            intent.putExtra(Intent.EXTRA_TEXT, context.getString(contentResourceId));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> intent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\ContentItem</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Uri <span class=\"title\">getContentUri</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!TextUtils.isEmpty(contentAssetFilePath))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Uri.parse(ShareProvider.CONTENT_URI+contentAssetFilePath);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><h3 id=\"确保ShareActionProvider和所在的ViewPager的CurrentItem-对应\"><a href=\"#确保ShareActionProvider和所在的ViewPager的CurrentItem-对应\" class=\"headerlink\" title=\"确保ShareActionProvider和所在的ViewPager的CurrentItem()对应\"></a>确保ShareActionProvider和所在的ViewPager的<code>CurrentItem()</code>对应</h3><p>很容易被<code>onCreateOptionsMenu()</code>中下列代码迷惑, 以为ShareActionProvider已经和<code>CurrentItem()</code>对应了.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> currentViewPagerItem=((ViewPager)findViewById(R.id.viewPager)).getCurrentItem();</span><br><span class=\"line\">setShareItem(currentViewPagerItem);</span><br></pre></td></tr></table></figure>\n\n<p>事实上并没有, <code>onCreateOptionsMenu</code>方法只会在初始ActionBar时调用, 且也不会设置监听. 所以ShareActionProvider总是设置在了第一个item的intent中.</p>\n<p>所以需要添加以下代码, 确保切换页面后, ShareActionProvider和item仍是正确对应的.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mViewPager.setOnPageChangeListener(<span class=\"keyword\">new</span> ViewPager.OnPageChangeListener() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageScrolled</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">float</span> positionOffset, <span class=\"keyword\">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageSelected</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">          setShareItem(position);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageScrollStateChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> state)</span> </span>&#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何获取图片uri\"><a href=\"#如何获取图片uri\" class=\"headerlink\" title=\"如何获取图片uri\"></a>如何获取图片uri</h3><p>获取<code>/res/drawable</code>中图片的uri可以使用以下方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri imageUri = Uri.parse(ContentResolver.SCHEME_ANDROID_RESOURCE +</span><br><span class=\"line\"> <span class=\"string\">\"://\"</span> + getResources().getResourcePackageName(R.drawable.ic_launcher)</span><br><span class=\"line\"> + <span class=\"string\">'/'</span> + getResources().getResourceTypeName(R.drawable.ic_launcher) + <span class=\"string\">'/'</span></span><br><span class=\"line\"> +  getResources().getResourceEntryName(R.drawable.ic_launcher) );</span><br></pre></td></tr></table></figure>\n\n<p> 等价于</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri uri = Uri.parse(&quot;android.resource://your.package.here/drawable/image_name&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>如果不正确,可以调用第一个方法,再使用Log自行查看准确的字符串.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"添加share按钮\"><a href=\"#添加share按钮\" class=\"headerlink\" title=\"添加share按钮\"></a>添加share按钮</h2><p>添加share按钮的主要步骤:</p>\n<ol>\n<li><p>在ActionBar中添加share按钮</p>\n</li>\n<li><p>从item中获取ShareActionProvider</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ShareActionProvider`&lt;br&gt; `mShareActionProvider=(ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>向<code>ShareActionProvider</code>中添加<code>itent</code></p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:support</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/share_item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/menu_share\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">support:actionProviderClass</span>=<span class=\"string\">\"android.support.v7.widget.ShareActionProvider\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">support:showAsAction</span>=<span class=\"string\">\"always\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/MainActivity.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">    getMenuInflater().inflate(R.menu.main_menu,menu);</span><br><span class=\"line\"></span><br><span class=\"line\">    MenuItem shareItem=menu.findItem(R.id.share_item);</span><br><span class=\"line\"></span><br><span class=\"line\">    mShareActionProvider=(ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> currentViewPagerItem=((ViewPager)findViewById(R.id.viewPager)).getCurrentItem();</span><br><span class=\"line\">    setShareItem(currentViewPagerItem);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onCreateOptionsMenu(menu);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setShareItem</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mShareActionProvider!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        ContentItem item=mItems.get(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        Intent intent=item.getShareIntent(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        mShareActionProvider.setShareIntent(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Intent <span class=\"title\">getShareIntent</span><span class=\"params\">(Context context)</span></span>&#123;</span><br><span class=\"line\">    Intent intent=<span class=\"keyword\">new</span> Intent(Intent.ACTION_SEND);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (contentType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> CONTENT_TYPE_IMAGE:</span><br><span class=\"line\">            intent.setType(<span class=\"string\">\"image/jpg\"</span>);</span><br><span class=\"line\">            intent.putExtra(Intent.EXTRA_STREAM, getContentUri());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> CONTENT_TYPE_TEXT:</span><br><span class=\"line\">            intent.setType(<span class=\"string\">\"text/plain\"</span>);</span><br><span class=\"line\">            intent.putExtra(Intent.EXTRA_TEXT, context.getString(contentResourceId));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> intent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\ContentItem</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Uri <span class=\"title\">getContentUri</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!TextUtils.isEmpty(contentAssetFilePath))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Uri.parse(ShareProvider.CONTENT_URI+contentAssetFilePath);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><h3 id=\"确保ShareActionProvider和所在的ViewPager的CurrentItem-对应\"><a href=\"#确保ShareActionProvider和所在的ViewPager的CurrentItem-对应\" class=\"headerlink\" title=\"确保ShareActionProvider和所在的ViewPager的CurrentItem()对应\"></a>确保ShareActionProvider和所在的ViewPager的<code>CurrentItem()</code>对应</h3><p>很容易被<code>onCreateOptionsMenu()</code>中下列代码迷惑, 以为ShareActionProvider已经和<code>CurrentItem()</code>对应了.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> currentViewPagerItem=((ViewPager)findViewById(R.id.viewPager)).getCurrentItem();</span><br><span class=\"line\">setShareItem(currentViewPagerItem);</span><br></pre></td></tr></table></figure>\n\n<p>事实上并没有, <code>onCreateOptionsMenu</code>方法只会在初始ActionBar时调用, 且也不会设置监听. 所以ShareActionProvider总是设置在了第一个item的intent中.</p>\n<p>所以需要添加以下代码, 确保切换页面后, ShareActionProvider和item仍是正确对应的.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mViewPager.setOnPageChangeListener(<span class=\"keyword\">new</span> ViewPager.OnPageChangeListener() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageScrolled</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">float</span> positionOffset, <span class=\"keyword\">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageSelected</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">          setShareItem(position);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageScrollStateChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> state)</span> </span>&#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何获取图片uri\"><a href=\"#如何获取图片uri\" class=\"headerlink\" title=\"如何获取图片uri\"></a>如何获取图片uri</h3><p>获取<code>/res/drawable</code>中图片的uri可以使用以下方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri imageUri = Uri.parse(ContentResolver.SCHEME_ANDROID_RESOURCE +</span><br><span class=\"line\"> <span class=\"string\">\"://\"</span> + getResources().getResourcePackageName(R.drawable.ic_launcher)</span><br><span class=\"line\"> + <span class=\"string\">'/'</span> + getResources().getResourceTypeName(R.drawable.ic_launcher) + <span class=\"string\">'/'</span></span><br><span class=\"line\"> +  getResources().getResourceEntryName(R.drawable.ic_launcher) );</span><br></pre></td></tr></table></figure>\n\n<p> 等价于</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri uri = Uri.parse(&quot;android.resource://your.package.here/drawable/image_name&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>如果不正确,可以调用第一个方法,再使用Log自行查看准确的字符串.</p>\n"},{"author":"ivyxjc","date":"2016-04-20T16:00:00.000Z","title":"LeetCode 343,122 整数拆分求积 递增区间寻找","keywords":null,"description":"整数拆分求积 递增区间寻找","_content":"\n## 122 Best Time to Buy and Sell Stock II\n\nSay you have an array for which the ith element is the price of a given stock on day i.\n\nDesign an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\n\n\n已知物品每天的价格，讨论通过买卖可以赚到的最多利润。卖之前必须买，再一次买之前必须卖掉。\n\n寻找所有递增区间，区间尾头之差即单次利润。\n\n```java\npublic int maxProfit(int[] prices) {\n    int maxProfit=0;\n    for(int i=0;i<prices.length;){\n        int plus=1;\n        int flag=0;\n\n        while (i+plus<prices.length&&prices[i+plus-1]<prices[i+plus]){\n            plus+=1;\n            flag=1;\n        }\n        if(flag==1){\n            maxProfit+=prices[i+plus-1]-prices[i];\n        }\n        i+=plus;\n    }\n    return maxProfit;\n}\n```\n\n## 343 Integer Break\n\n给一个自然数n，把它拆分为若干个数的和，记这若干个数的乘积为M，求M的最大值。\n\n方法：尽可能将这个数拆分成3，原因下方解释。\n\n\n```java\npublic int integerBreak(int n) {\n    if(n==2){\n        return 1;\n    }\n    if(n==3){\n        return 2;\n    }\n    if(n==4){\n        return 4;\n    }\n    int mod=n%3;\n    int res=0;\n    res=(int)Math.pow(3,n/3);\n    System.out.println(res);\n    if(mod==1){\n        res=res/3*4;\n        return res;\n    }\n\n    if(mod==2){\n        res=res*2;\n        return res;\n    }\n    return res;\n}\n```\n\n### 证明\n\n因为有不等式\n$$\\sqrt[k]{x_1x_2x_3x_4...x_k}\\leq \\frac{x_1x_2x_3x_4...x_k}{k}$$\n\n设$n=x_1+x_2+x_3+x_4+x_5+...+x_k$，$P=x_1x_2x_3x_4x_5+...x_k$。\n\n所以有$P \\leq (\\frac{n}{k})^k$\n","source":"_posts/algorithm/oj/LeetCode/2016-04-21-medium-343-122.md","raw":"---\nauthor: ivyxjc\ndate: 2016-04-21\ntitle: LeetCode 343,122 整数拆分求积 递增区间寻找\ncategory: Algorithm\ntags: [algorithm]\nkeywords:\ndescription: 整数拆分求积 递增区间寻找\n---\n\n## 122 Best Time to Buy and Sell Stock II\n\nSay you have an array for which the ith element is the price of a given stock on day i.\n\nDesign an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\n\n\n已知物品每天的价格，讨论通过买卖可以赚到的最多利润。卖之前必须买，再一次买之前必须卖掉。\n\n寻找所有递增区间，区间尾头之差即单次利润。\n\n```java\npublic int maxProfit(int[] prices) {\n    int maxProfit=0;\n    for(int i=0;i<prices.length;){\n        int plus=1;\n        int flag=0;\n\n        while (i+plus<prices.length&&prices[i+plus-1]<prices[i+plus]){\n            plus+=1;\n            flag=1;\n        }\n        if(flag==1){\n            maxProfit+=prices[i+plus-1]-prices[i];\n        }\n        i+=plus;\n    }\n    return maxProfit;\n}\n```\n\n## 343 Integer Break\n\n给一个自然数n，把它拆分为若干个数的和，记这若干个数的乘积为M，求M的最大值。\n\n方法：尽可能将这个数拆分成3，原因下方解释。\n\n\n```java\npublic int integerBreak(int n) {\n    if(n==2){\n        return 1;\n    }\n    if(n==3){\n        return 2;\n    }\n    if(n==4){\n        return 4;\n    }\n    int mod=n%3;\n    int res=0;\n    res=(int)Math.pow(3,n/3);\n    System.out.println(res);\n    if(mod==1){\n        res=res/3*4;\n        return res;\n    }\n\n    if(mod==2){\n        res=res*2;\n        return res;\n    }\n    return res;\n}\n```\n\n### 证明\n\n因为有不等式\n$$\\sqrt[k]{x_1x_2x_3x_4...x_k}\\leq \\frac{x_1x_2x_3x_4...x_k}{k}$$\n\n设$n=x_1+x_2+x_3+x_4+x_5+...+x_k$，$P=x_1x_2x_3x_4x_5+...x_k$。\n\n所以有$P \\leq (\\frac{n}{k})^k$\n","slug":"algorithm/oj/LeetCode/2016-04-21-medium-343-122","published":1,"updated":"2019-09-16T14:31:12.711Z","_id":"ck0mglfb5007h28t1vob23i7m","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"122-Best-Time-to-Buy-and-Sell-Stock-II\"><a href=\"#122-Best-Time-to-Buy-and-Sell-Stock-II\" class=\"headerlink\" title=\"122 Best Time to Buy and Sell Stock II\"></a>122 Best Time to Buy and Sell Stock II</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>\n<p>已知物品每天的价格，讨论通过买卖可以赚到的最多利润。卖之前必须买，再一次买之前必须卖掉。</p>\n<p>寻找所有递增区间，区间尾头之差即单次利润。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxProfit=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;prices.length;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> plus=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i+plus&lt;prices.length&amp;&amp;prices[i+plus-<span class=\"number\">1</span>]&lt;prices[i+plus])&#123;</span><br><span class=\"line\">            plus+=<span class=\"number\">1</span>;</span><br><span class=\"line\">            flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            maxProfit+=prices[i+plus-<span class=\"number\">1</span>]-prices[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i+=plus;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxProfit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"343-Integer-Break\"><a href=\"#343-Integer-Break\" class=\"headerlink\" title=\"343 Integer Break\"></a>343 Integer Break</h2><p>给一个自然数n，把它拆分为若干个数的和，记这若干个数的乘积为M，求M的最大值。</p>\n<p>方法：尽可能将这个数拆分成3，原因下方解释。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">integerBreak</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mod=n%<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    res=(<span class=\"keyword\">int</span>)Math.pow(<span class=\"number\">3</span>,n/<span class=\"number\">3</span>);</span><br><span class=\"line\">    System.out.println(res);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mod==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        res=res/<span class=\"number\">3</span>*<span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mod==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        res=res*<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h3><p>因为有不等式<br>$$\\sqrt[k]{x_1x_2x_3x_4…x_k}\\leq \\frac{x_1x_2x_3x_4…x_k}{k}$$</p>\n<p>设$n=x_1+x_2+x_3+x_4+x_5+…+x_k$，$P=x_1x_2x_3x_4x_5+…x_k$。</p>\n<p>所以有$P \\leq (\\frac{n}{k})^k$</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"122-Best-Time-to-Buy-and-Sell-Stock-II\"><a href=\"#122-Best-Time-to-Buy-and-Sell-Stock-II\" class=\"headerlink\" title=\"122 Best Time to Buy and Sell Stock II\"></a>122 Best Time to Buy and Sell Stock II</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>\n<p>已知物品每天的价格，讨论通过买卖可以赚到的最多利润。卖之前必须买，再一次买之前必须卖掉。</p>\n<p>寻找所有递增区间，区间尾头之差即单次利润。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxProfit=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;prices.length;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> plus=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i+plus&lt;prices.length&amp;&amp;prices[i+plus-<span class=\"number\">1</span>]&lt;prices[i+plus])&#123;</span><br><span class=\"line\">            plus+=<span class=\"number\">1</span>;</span><br><span class=\"line\">            flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            maxProfit+=prices[i+plus-<span class=\"number\">1</span>]-prices[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i+=plus;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxProfit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"343-Integer-Break\"><a href=\"#343-Integer-Break\" class=\"headerlink\" title=\"343 Integer Break\"></a>343 Integer Break</h2><p>给一个自然数n，把它拆分为若干个数的和，记这若干个数的乘积为M，求M的最大值。</p>\n<p>方法：尽可能将这个数拆分成3，原因下方解释。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">integerBreak</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mod=n%<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    res=(<span class=\"keyword\">int</span>)Math.pow(<span class=\"number\">3</span>,n/<span class=\"number\">3</span>);</span><br><span class=\"line\">    System.out.println(res);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mod==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        res=res/<span class=\"number\">3</span>*<span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mod==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        res=res*<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h3><p>因为有不等式<br>$$\\sqrt[k]{x_1x_2x_3x_4…x_k}\\leq \\frac{x_1x_2x_3x_4…x_k}{k}$$</p>\n<p>设$n=x_1+x_2+x_3+x_4+x_5+…+x_k$，$P=x_1x_2x_3x_4x_5+…x_k$。</p>\n<p>所以有$P \\leq (\\frac{n}{k})^k$</p>\n"},{"author":"ivyxjc","date":"2016-09-23T16:00:00.000Z","title":"自定义FloatingActionButtom","keywords":null,"description":"如何自定义fab, 以及给其设置监听","_content":"\n\n## 设置监听的最基本方式\n\n```java\npublic class FloatingActionButton extends FrameLayout implements Checkable {\n\n    public static interface OnCheckedChangeListener {\n        void onCheckedChanged(FloatingActionButton fabView, boolean isChecked);\n    }\n\n    private OnCheckedChangeListener mOnCheckedChangeListener;\n\n    public void setOnCheckedChangeListener(OnCheckedChangeListener listener) {\n        mOnCheckedChangeListener = listener;\n    }\n```\n","source":"_posts/android/AndroidSamples/controls/2016-10-18-custom-button.md","raw":"---\nauthor: ivyxjc\ndate: 2016-09-24\ntitle: 自定义FloatingActionButtom\ncategory: Android\ntags: [android,android_control]\nkeywords:\ndescription: 如何自定义fab, 以及给其设置监听\n---\n\n\n## 设置监听的最基本方式\n\n```java\npublic class FloatingActionButton extends FrameLayout implements Checkable {\n\n    public static interface OnCheckedChangeListener {\n        void onCheckedChanged(FloatingActionButton fabView, boolean isChecked);\n    }\n\n    private OnCheckedChangeListener mOnCheckedChangeListener;\n\n    public void setOnCheckedChangeListener(OnCheckedChangeListener listener) {\n        mOnCheckedChangeListener = listener;\n    }\n```\n","slug":"android/AndroidSamples/controls/2016-10-18-custom-button","published":1,"updated":"2018-08-09T10:10:11.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfb6007k28t1ook1zquk","content":"<h2 id=\"设置监听的最基本方式\"><a href=\"#设置监听的最基本方式\" class=\"headerlink\" title=\"设置监听的最基本方式\"></a>设置监听的最基本方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FloatingActionButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">FrameLayout</span> <span class=\"keyword\">implements</span> <span class=\"title\">Checkable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnCheckedChangeListener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCheckedChanged</span><span class=\"params\">(FloatingActionButton fabView, <span class=\"keyword\">boolean</span> isChecked)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OnCheckedChangeListener mOnCheckedChangeListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnCheckedChangeListener</span><span class=\"params\">(OnCheckedChangeListener listener)</span> </span>&#123;</span><br><span class=\"line\">        mOnCheckedChangeListener = listener;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设置监听的最基本方式\"><a href=\"#设置监听的最基本方式\" class=\"headerlink\" title=\"设置监听的最基本方式\"></a>设置监听的最基本方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FloatingActionButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">FrameLayout</span> <span class=\"keyword\">implements</span> <span class=\"title\">Checkable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnCheckedChangeListener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCheckedChanged</span><span class=\"params\">(FloatingActionButton fabView, <span class=\"keyword\">boolean</span> isChecked)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OnCheckedChangeListener mOnCheckedChangeListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnCheckedChangeListener</span><span class=\"params\">(OnCheckedChangeListener listener)</span> </span>&#123;</span><br><span class=\"line\">        mOnCheckedChangeListener = listener;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-04-20T16:00:00.000Z","title":"LeetCode SingleNum 136,127,260","keywords":null,"description":"在一个int数组中, 找到出现次数与其它数并不一致的数. <br>(1). 若每个数字都出现2次, 一个数字出现的次数为1次, 对所有数字取异或.<br>(2).若每个数字都出现3次, 一个数字num出现1次. 对int32中的每一位出现1的次数进行统计, 如果该位上出现1的次数不是3的倍数,则说明num在该位上为1. <br> (3).每个数字出现两遍, 两个数字a,b例外. 对所有数求异或. 取结果二进制最右边为1的位置(`diff ^=-diff`). 以该位置为0或1, 将该数组分为两类, 题目转化为第一题.","_content":"\n这三题题意基本一样。\n1.136 题：每个数字出现两遍，一个数字例外。找出这个数字。\n2.137 题：每个数字出现三遍，一个数字例外。找出这个数字。\n3.260 题：每个数字出现两遍，两个数字例外。找出这个数字。\n\n## 使用排序的方法\n以136题为例：\n\n这种方法先将给的数组`int[] num`排序，因为数字相同则会在一起，则只需要比较`num[i]`和`nums[i+1]`若不相同，则返回`num[i]`其中`i=i+2`。\n特殊情况：\n数字出现在最末尾。\n\n```java\npublic int singleNumber(int[] nums) {\n    sort(nums);\n    int res=0;\n    for(int i=0;i<nums.length-1;){\n        if(nums[i]==nums[i+1]){\n            i+=2;\n        }else{\n            res=nums[i];\n            i+=2;\n            return res;\n        }\n    }\n    return nums[nums.length-1];\n}\n```\n\n## 使用位操作的方法\n\n### 136题\n\n因为数字会出现两次，所以对所有数字取**异或**会使得最后的数字即所求的数字。\n\n\n```java\npublic int singleNumber(int[] nums) {\n    int diff=0;\n    for(int i:nums){\n        diff=diff^i;\n    }\n    int res=diff;\n    return res;\n}\n```\n\n### 137题\n\n因为每个数字会重复三遍，所以统计32位中每一位上1出现的次数，若次数不为3的整数倍，则说明所求数字该位为1。\n\n```java\npublic int singleNumber(int[] nums) {\n    int [] count=new int[Integer.BYTES*8];\n    int res=0;\n    for(int i=0;i<count.length;i++){\n        int tmp=1<<i;\n        for(int j=0;j<nums.length;j++){\n            if((nums[j]&tmp)!=0){\n                count[i]++;\n            }\n        }\n        if(count[i]%3!=0){\n            res=res|tmp;\n        }\n    }\n\n    return res;\n}\n\n```\n\n\n### 260题\n\n同样是先对所有数字取异或，因为有两个数字只出现了一次，所以最终的结果`diff`是这两个数字的异或值。\n\n因为这两个数字不相同，所以这两个数字的二进制必定有某一位不相同。假设在`Xth`位上，一个数为0，另一个数为1。\n\n那么把所有数字分为两类，一类是在`Xth`为0的，另一类是在`Xth`为1的。\n\n关键是如何找到`Xth`位。方法时`diff ^=-diff`。\n该式子会找出最右侧的两个数字不同的位置，并将该为置为1，其余位置为0。其实就是找`diff`中为1的最右边的位置。\n\n\n```java\npublic int[] singleNumber(int[] nums) {\n    int diff = 0;\n    for (int num : nums) {\n        diff ^= num;\n    }\n\n    diff &= -diff;\n\n\n    int[] rets = {0, 0};\n\n    for (int num : nums)\n    {\n    //将数字分为两类，一类为某一位为0，另一类为某一位为1\n        if ((num & diff) == 0)\n        {\n            rets[0] ^= num;\n        }\n        else\n        {\n            rets[1] ^= num;\n        }\n    }\n    return rets;\n}\n```\n","source":"_posts/algorithm/oj/LeetCode/2016-04-21-medium-SingleNum.md","raw":"---\nauthor: ivyxjc\ndate: 2016-04-21\ntitle: LeetCode SingleNum 136,127,260\ncategory: Algorithm\ntags: [algorithm-quicksort,algorithm-bit-manipulation]\nkeywords:\ndescription: 在一个int数组中, 找到出现次数与其它数并不一致的数. <br>(1). 若每个数字都出现2次, 一个数字出现的次数为1次, 对所有数字取异或.<br>(2).若每个数字都出现3次, 一个数字num出现1次. 对int32中的每一位出现1的次数进行统计, 如果该位上出现1的次数不是3的倍数,则说明num在该位上为1. <br> (3).每个数字出现两遍, 两个数字a,b例外. 对所有数求异或. 取结果二进制最右边为1的位置(`diff ^=-diff`). 以该位置为0或1, 将该数组分为两类, 题目转化为第一题.\n---\n\n这三题题意基本一样。\n1.136 题：每个数字出现两遍，一个数字例外。找出这个数字。\n2.137 题：每个数字出现三遍，一个数字例外。找出这个数字。\n3.260 题：每个数字出现两遍，两个数字例外。找出这个数字。\n\n## 使用排序的方法\n以136题为例：\n\n这种方法先将给的数组`int[] num`排序，因为数字相同则会在一起，则只需要比较`num[i]`和`nums[i+1]`若不相同，则返回`num[i]`其中`i=i+2`。\n特殊情况：\n数字出现在最末尾。\n\n```java\npublic int singleNumber(int[] nums) {\n    sort(nums);\n    int res=0;\n    for(int i=0;i<nums.length-1;){\n        if(nums[i]==nums[i+1]){\n            i+=2;\n        }else{\n            res=nums[i];\n            i+=2;\n            return res;\n        }\n    }\n    return nums[nums.length-1];\n}\n```\n\n## 使用位操作的方法\n\n### 136题\n\n因为数字会出现两次，所以对所有数字取**异或**会使得最后的数字即所求的数字。\n\n\n```java\npublic int singleNumber(int[] nums) {\n    int diff=0;\n    for(int i:nums){\n        diff=diff^i;\n    }\n    int res=diff;\n    return res;\n}\n```\n\n### 137题\n\n因为每个数字会重复三遍，所以统计32位中每一位上1出现的次数，若次数不为3的整数倍，则说明所求数字该位为1。\n\n```java\npublic int singleNumber(int[] nums) {\n    int [] count=new int[Integer.BYTES*8];\n    int res=0;\n    for(int i=0;i<count.length;i++){\n        int tmp=1<<i;\n        for(int j=0;j<nums.length;j++){\n            if((nums[j]&tmp)!=0){\n                count[i]++;\n            }\n        }\n        if(count[i]%3!=0){\n            res=res|tmp;\n        }\n    }\n\n    return res;\n}\n\n```\n\n\n### 260题\n\n同样是先对所有数字取异或，因为有两个数字只出现了一次，所以最终的结果`diff`是这两个数字的异或值。\n\n因为这两个数字不相同，所以这两个数字的二进制必定有某一位不相同。假设在`Xth`位上，一个数为0，另一个数为1。\n\n那么把所有数字分为两类，一类是在`Xth`为0的，另一类是在`Xth`为1的。\n\n关键是如何找到`Xth`位。方法时`diff ^=-diff`。\n该式子会找出最右侧的两个数字不同的位置，并将该为置为1，其余位置为0。其实就是找`diff`中为1的最右边的位置。\n\n\n```java\npublic int[] singleNumber(int[] nums) {\n    int diff = 0;\n    for (int num : nums) {\n        diff ^= num;\n    }\n\n    diff &= -diff;\n\n\n    int[] rets = {0, 0};\n\n    for (int num : nums)\n    {\n    //将数字分为两类，一类为某一位为0，另一类为某一位为1\n        if ((num & diff) == 0)\n        {\n            rets[0] ^= num;\n        }\n        else\n        {\n            rets[1] ^= num;\n        }\n    }\n    return rets;\n}\n```\n","slug":"algorithm/oj/LeetCode/2016-04-21-medium-SingleNum","published":1,"updated":"2018-10-14T07:34:31.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfb6007m28t1ww3t2kaw","content":"<p>这三题题意基本一样。<br>1.136 题：每个数字出现两遍，一个数字例外。找出这个数字。<br>2.137 题：每个数字出现三遍，一个数字例外。找出这个数字。<br>3.260 题：每个数字出现两遍，两个数字例外。找出这个数字。</p>\n<h2 id=\"使用排序的方法\"><a href=\"#使用排序的方法\" class=\"headerlink\" title=\"使用排序的方法\"></a>使用排序的方法</h2><p>以136题为例：</p>\n<p>这种方法先将给的数组<code>int[] num</code>排序，因为数字相同则会在一起，则只需要比较<code>num[i]</code>和<code>nums[i+1]</code>若不相同，则返回<code>num[i]</code>其中<code>i=i+2</code>。<br>特殊情况：<br>数字出现在最末尾。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    sort(nums);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length-<span class=\"number\">1</span>;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i]==nums[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            i+=<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res=nums[i];</span><br><span class=\"line\">            i+=<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[nums.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用位操作的方法\"><a href=\"#使用位操作的方法\" class=\"headerlink\" title=\"使用位操作的方法\"></a>使用位操作的方法</h2><h3 id=\"136题\"><a href=\"#136题\" class=\"headerlink\" title=\"136题\"></a>136题</h3><p>因为数字会出现两次，所以对所有数字取<strong>异或</strong>会使得最后的数字即所求的数字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> diff=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i:nums)&#123;</span><br><span class=\"line\">        diff=diff^i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=diff;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"137题\"><a href=\"#137题\" class=\"headerlink\" title=\"137题\"></a>137题</h3><p>因为每个数字会重复三遍，所以统计32位中每一位上1出现的次数，若次数不为3的整数倍，则说明所求数字该位为1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> [] count=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[Integer.BYTES*<span class=\"number\">8</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;count.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp=<span class=\"number\">1</span>&lt;&lt;i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;nums.length;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((nums[j]&amp;tmp)!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                count[i]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count[i]%<span class=\"number\">3</span>!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res=res|tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"260题\"><a href=\"#260题\" class=\"headerlink\" title=\"260题\"></a>260题</h3><p>同样是先对所有数字取异或，因为有两个数字只出现了一次，所以最终的结果<code>diff</code>是这两个数字的异或值。</p>\n<p>因为这两个数字不相同，所以这两个数字的二进制必定有某一位不相同。假设在<code>Xth</code>位上，一个数为0，另一个数为1。</p>\n<p>那么把所有数字分为两类，一类是在<code>Xth</code>为0的，另一类是在<code>Xth</code>为1的。</p>\n<p>关键是如何找到<code>Xth</code>位。方法时<code>diff ^=-diff</code>。<br>该式子会找出最右侧的两个数字不同的位置，并将该为置为1，其余位置为0。其实就是找<code>diff</code>中为1的最右边的位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] singleNumber(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> diff = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">        diff ^= num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    diff &amp;= -diff;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] rets = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"comment\">//将数字分为两类，一类为某一位为0，另一类为某一位为1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((num &amp; diff) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rets[<span class=\"number\">0</span>] ^= num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rets[<span class=\"number\">1</span>] ^= num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rets;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>这三题题意基本一样。<br>1.136 题：每个数字出现两遍，一个数字例外。找出这个数字。<br>2.137 题：每个数字出现三遍，一个数字例外。找出这个数字。<br>3.260 题：每个数字出现两遍，两个数字例外。找出这个数字。</p>\n<h2 id=\"使用排序的方法\"><a href=\"#使用排序的方法\" class=\"headerlink\" title=\"使用排序的方法\"></a>使用排序的方法</h2><p>以136题为例：</p>\n<p>这种方法先将给的数组<code>int[] num</code>排序，因为数字相同则会在一起，则只需要比较<code>num[i]</code>和<code>nums[i+1]</code>若不相同，则返回<code>num[i]</code>其中<code>i=i+2</code>。<br>特殊情况：<br>数字出现在最末尾。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    sort(nums);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length-<span class=\"number\">1</span>;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i]==nums[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            i+=<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res=nums[i];</span><br><span class=\"line\">            i+=<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[nums.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用位操作的方法\"><a href=\"#使用位操作的方法\" class=\"headerlink\" title=\"使用位操作的方法\"></a>使用位操作的方法</h2><h3 id=\"136题\"><a href=\"#136题\" class=\"headerlink\" title=\"136题\"></a>136题</h3><p>因为数字会出现两次，所以对所有数字取<strong>异或</strong>会使得最后的数字即所求的数字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> diff=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i:nums)&#123;</span><br><span class=\"line\">        diff=diff^i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=diff;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"137题\"><a href=\"#137题\" class=\"headerlink\" title=\"137题\"></a>137题</h3><p>因为每个数字会重复三遍，所以统计32位中每一位上1出现的次数，若次数不为3的整数倍，则说明所求数字该位为1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> [] count=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[Integer.BYTES*<span class=\"number\">8</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;count.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp=<span class=\"number\">1</span>&lt;&lt;i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;nums.length;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((nums[j]&amp;tmp)!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                count[i]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count[i]%<span class=\"number\">3</span>!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res=res|tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"260题\"><a href=\"#260题\" class=\"headerlink\" title=\"260题\"></a>260题</h3><p>同样是先对所有数字取异或，因为有两个数字只出现了一次，所以最终的结果<code>diff</code>是这两个数字的异或值。</p>\n<p>因为这两个数字不相同，所以这两个数字的二进制必定有某一位不相同。假设在<code>Xth</code>位上，一个数为0，另一个数为1。</p>\n<p>那么把所有数字分为两类，一类是在<code>Xth</code>为0的，另一类是在<code>Xth</code>为1的。</p>\n<p>关键是如何找到<code>Xth</code>位。方法时<code>diff ^=-diff</code>。<br>该式子会找出最右侧的两个数字不同的位置，并将该为置为1，其余位置为0。其实就是找<code>diff</code>中为1的最右边的位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] singleNumber(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> diff = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">        diff ^= num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    diff &amp;= -diff;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] rets = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"comment\">//将数字分为两类，一类为某一位为0，另一类为某一位为1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((num &amp; diff) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rets[<span class=\"number\">0</span>] ^= num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rets[<span class=\"number\">1</span>] ^= num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rets;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-11-14T16:00:00.000Z","title":"JobScheduler","keywords":null,"description":"如何利用JobScheduler API执行预定的操作","_content":"\n## 任务写在JobService中\n```java\npublic class TestJobService extends JobService {\n    private static final String TAG = \"SyncService\";\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.i(TAG, \"Service created\");\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.i(TAG, \"Service destroyed\");\n    }\n\n    @Override\n    public boolean onStartJob(JobParameters params) {\n        // fake work\n        Log.i(TAG, \"on start job: \" + params.getJobId());\n        return true;\n    }\n\n    @Override\n    public boolean onStopJob(JobParameters params) {\n        Log.i(TAG, \"on stop job: \" + params.getJobId());\n        return true;\n    }\n\n    public void scheduleJob(JobInfo info){\n        Log.i(TAG, \"schedule job \");\n        JobScheduler js=(JobScheduler)getApplication().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n        js.schedule(info);\n    }\n}\n```\n\n## 设置调度的相关条件\n\n```java\n\n...\nmServiceComponent = new ComponentName(this, TestJobService.class);\n...\n\npublic void scheduleJob(View v){\n        JobInfo info=new JobInfo.Builder(sJobId,mServiceComponent)\n            //延迟\n            .setMinimumLatency(2000)\n            //最长延迟\n            .setOverrideDeadline(5000)\n            //所需网络类型  本例中 为需要无线网络\n            .setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED)\n            .setRequiresDeviceIdle(true)\n            .setRequiresCharging(true)\n            .build();\n        JobSchedulerjobScheduler=(JobScheduler)getApplication().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n        jobScheduler.schedule(info);\n\n    }\n```\n\n\n\n\n## 如何获取正在运行的所有程序的名称\n\n\n```java\npublic String getRunningProcessNames(){\n        ActivityManager am = (ActivityManager)this.getSystemService(ACTIVITY_SERVICE);\n\n        List<ActivityManager.RunningAppProcessInfo> l = am.getRunningAppProcesses();\n        PackageManager pm = this.getPackageManager();\n        StringBuilder sb=new StringBuilder();\n        for(ActivityManager.RunningAppProcessInfo i:l){\n            try{\n                CharSequence c = pm.getApplicationLabel(pm.getApplicationInfo(i.processName, PackageManager.GET_META_DATA));\n                sb.append(c.toString()+'\\n');\n            }catch (Exception e){\n                e.printStackTrace();\n            }\n        }\n        return sb.toString();\n    }\n```\n\n## 相关博客\n\n[在Android 5.0中使用JobScheduler](http://blog.csdn.net/bboyfeiyu/article/details/44809395)\n","source":"_posts/android/AndroidSamples/background/2016-11-15-jobscheduler.md","raw":"---\nauthor: ivyxjc\ndate: 2016-11-15\ntitle: JobScheduler\ncategory: Android\ntags: [android]\nkeywords:\ndescription: 如何利用JobScheduler API执行预定的操作\n---\n\n## 任务写在JobService中\n```java\npublic class TestJobService extends JobService {\n    private static final String TAG = \"SyncService\";\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.i(TAG, \"Service created\");\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.i(TAG, \"Service destroyed\");\n    }\n\n    @Override\n    public boolean onStartJob(JobParameters params) {\n        // fake work\n        Log.i(TAG, \"on start job: \" + params.getJobId());\n        return true;\n    }\n\n    @Override\n    public boolean onStopJob(JobParameters params) {\n        Log.i(TAG, \"on stop job: \" + params.getJobId());\n        return true;\n    }\n\n    public void scheduleJob(JobInfo info){\n        Log.i(TAG, \"schedule job \");\n        JobScheduler js=(JobScheduler)getApplication().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n        js.schedule(info);\n    }\n}\n```\n\n## 设置调度的相关条件\n\n```java\n\n...\nmServiceComponent = new ComponentName(this, TestJobService.class);\n...\n\npublic void scheduleJob(View v){\n        JobInfo info=new JobInfo.Builder(sJobId,mServiceComponent)\n            //延迟\n            .setMinimumLatency(2000)\n            //最长延迟\n            .setOverrideDeadline(5000)\n            //所需网络类型  本例中 为需要无线网络\n            .setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED)\n            .setRequiresDeviceIdle(true)\n            .setRequiresCharging(true)\n            .build();\n        JobSchedulerjobScheduler=(JobScheduler)getApplication().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n        jobScheduler.schedule(info);\n\n    }\n```\n\n\n\n\n## 如何获取正在运行的所有程序的名称\n\n\n```java\npublic String getRunningProcessNames(){\n        ActivityManager am = (ActivityManager)this.getSystemService(ACTIVITY_SERVICE);\n\n        List<ActivityManager.RunningAppProcessInfo> l = am.getRunningAppProcesses();\n        PackageManager pm = this.getPackageManager();\n        StringBuilder sb=new StringBuilder();\n        for(ActivityManager.RunningAppProcessInfo i:l){\n            try{\n                CharSequence c = pm.getApplicationLabel(pm.getApplicationInfo(i.processName, PackageManager.GET_META_DATA));\n                sb.append(c.toString()+'\\n');\n            }catch (Exception e){\n                e.printStackTrace();\n            }\n        }\n        return sb.toString();\n    }\n```\n\n## 相关博客\n\n[在Android 5.0中使用JobScheduler](http://blog.csdn.net/bboyfeiyu/article/details/44809395)\n","slug":"android/AndroidSamples/background/2016-11-15-jobscheduler","published":1,"updated":"2018-08-09T10:10:11.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfb8007o28t1n0d9o405","content":"<h2 id=\"任务写在JobService中\"><a href=\"#任务写在JobService中\" class=\"headerlink\" title=\"任务写在JobService中\"></a>任务写在JobService中</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJobService</span> <span class=\"keyword\">extends</span> <span class=\"title\">JobService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"SyncService\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"Service created\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"Service destroyed\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartJob</span><span class=\"params\">(JobParameters params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// fake work</span></span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"on start job: \"</span> + params.getJobId());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStopJob</span><span class=\"params\">(JobParameters params)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"on stop job: \"</span> + params.getJobId());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleJob</span><span class=\"params\">(JobInfo info)</span></span>&#123;</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"schedule job \"</span>);</span><br><span class=\"line\">        JobScheduler js=(JobScheduler)getApplication().getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class=\"line\">        js.schedule(info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置调度的相关条件\"><a href=\"#设置调度的相关条件\" class=\"headerlink\" title=\"设置调度的相关条件\"></a>设置调度的相关条件</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">mServiceComponent = <span class=\"keyword\">new</span> ComponentName(<span class=\"keyword\">this</span>, TestJobService.class);</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleJob</span><span class=\"params\">(View v)</span></span>&#123;</span><br><span class=\"line\">        JobInfo info=<span class=\"keyword\">new</span> JobInfo.Builder(sJobId,mServiceComponent)</span><br><span class=\"line\">            <span class=\"comment\">//延迟</span></span><br><span class=\"line\">            .setMinimumLatency(<span class=\"number\">2000</span>)</span><br><span class=\"line\">            <span class=\"comment\">//最长延迟</span></span><br><span class=\"line\">            .setOverrideDeadline(<span class=\"number\">5000</span>)</span><br><span class=\"line\">            <span class=\"comment\">//所需网络类型  本例中 为需要无线网络</span></span><br><span class=\"line\">            .setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED)</span><br><span class=\"line\">            .setRequiresDeviceIdle(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .setRequiresCharging(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">        JobSchedulerjobScheduler=(JobScheduler)getApplication().getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class=\"line\">        jobScheduler.schedule(info);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何获取正在运行的所有程序的名称\"><a href=\"#如何获取正在运行的所有程序的名称\" class=\"headerlink\" title=\"如何获取正在运行的所有程序的名称\"></a>如何获取正在运行的所有程序的名称</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRunningProcessNames</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ActivityManager am = (ActivityManager)<span class=\"keyword\">this</span>.getSystemService(ACTIVITY_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;ActivityManager.RunningAppProcessInfo&gt; l = am.getRunningAppProcesses();</span><br><span class=\"line\">        PackageManager pm = <span class=\"keyword\">this</span>.getPackageManager();</span><br><span class=\"line\">        StringBuilder sb=<span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ActivityManager.RunningAppProcessInfo i:l)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                CharSequence c = pm.getApplicationLabel(pm.getApplicationInfo(i.processName, PackageManager.GET_META_DATA));</span><br><span class=\"line\">                sb.append(c.toString()+<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关博客\"><a href=\"#相关博客\" class=\"headerlink\" title=\"相关博客\"></a>相关博客</h2><p><a href=\"http://blog.csdn.net/bboyfeiyu/article/details/44809395\" target=\"_blank\" rel=\"noopener\">在Android 5.0中使用JobScheduler</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"任务写在JobService中\"><a href=\"#任务写在JobService中\" class=\"headerlink\" title=\"任务写在JobService中\"></a>任务写在JobService中</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJobService</span> <span class=\"keyword\">extends</span> <span class=\"title\">JobService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"SyncService\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"Service created\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"Service destroyed\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartJob</span><span class=\"params\">(JobParameters params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// fake work</span></span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"on start job: \"</span> + params.getJobId());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStopJob</span><span class=\"params\">(JobParameters params)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"on stop job: \"</span> + params.getJobId());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleJob</span><span class=\"params\">(JobInfo info)</span></span>&#123;</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"schedule job \"</span>);</span><br><span class=\"line\">        JobScheduler js=(JobScheduler)getApplication().getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class=\"line\">        js.schedule(info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置调度的相关条件\"><a href=\"#设置调度的相关条件\" class=\"headerlink\" title=\"设置调度的相关条件\"></a>设置调度的相关条件</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">mServiceComponent = <span class=\"keyword\">new</span> ComponentName(<span class=\"keyword\">this</span>, TestJobService.class);</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleJob</span><span class=\"params\">(View v)</span></span>&#123;</span><br><span class=\"line\">        JobInfo info=<span class=\"keyword\">new</span> JobInfo.Builder(sJobId,mServiceComponent)</span><br><span class=\"line\">            <span class=\"comment\">//延迟</span></span><br><span class=\"line\">            .setMinimumLatency(<span class=\"number\">2000</span>)</span><br><span class=\"line\">            <span class=\"comment\">//最长延迟</span></span><br><span class=\"line\">            .setOverrideDeadline(<span class=\"number\">5000</span>)</span><br><span class=\"line\">            <span class=\"comment\">//所需网络类型  本例中 为需要无线网络</span></span><br><span class=\"line\">            .setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED)</span><br><span class=\"line\">            .setRequiresDeviceIdle(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .setRequiresCharging(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">        JobSchedulerjobScheduler=(JobScheduler)getApplication().getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class=\"line\">        jobScheduler.schedule(info);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何获取正在运行的所有程序的名称\"><a href=\"#如何获取正在运行的所有程序的名称\" class=\"headerlink\" title=\"如何获取正在运行的所有程序的名称\"></a>如何获取正在运行的所有程序的名称</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRunningProcessNames</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ActivityManager am = (ActivityManager)<span class=\"keyword\">this</span>.getSystemService(ACTIVITY_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;ActivityManager.RunningAppProcessInfo&gt; l = am.getRunningAppProcesses();</span><br><span class=\"line\">        PackageManager pm = <span class=\"keyword\">this</span>.getPackageManager();</span><br><span class=\"line\">        StringBuilder sb=<span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ActivityManager.RunningAppProcessInfo i:l)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                CharSequence c = pm.getApplicationLabel(pm.getApplicationInfo(i.processName, PackageManager.GET_META_DATA));</span><br><span class=\"line\">                sb.append(c.toString()+<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关博客\"><a href=\"#相关博客\" class=\"headerlink\" title=\"相关博客\"></a>相关博客</h2><p><a href=\"http://blog.csdn.net/bboyfeiyu/article/details/44809395\" target=\"_blank\" rel=\"noopener\">在Android 5.0中使用JobScheduler</a></p>\n"},{"author":"ivyxjc","date":"2016-04-25T16:00:00.000Z","title":"Maximum Depth of Binary Tree","keywords":null,"description":"寻找二叉树最长路径","_content":"\n## 寻找二叉树最长路径\n\n\n### 递归的方法\n\n1.节点为`null`时，返回深度为0\n2.节点的左右子节点中有一个为`null`时，返回`1+maxDepth(root.left(or root.right))`\n3.若节点的左右子节点都不为`null`时，返回两者中大的那一个。\n\n```java\npublic int maxDepth(TreeNode root) {\n        if(root==null){\n            return 0;\n        }else if(root.left!=null&& root.right!=null){\n            return max(1+maxDepth(root.left),1+maxDepth(root.right));\n        }else if(root.left==null){\n            return 1+maxDepth(root.right);\n        }else{\n            return 1+maxDepth(root.left);\n        }\n    }\n\n    public int max(int a,int b){\n        return (a>b?a:b);\n    }\n```\n","source":"_posts/algorithm/oj/LeetCode/2016-04-26-easy-MaximunDepthofBinary.md","raw":"---\nauthor: ivyxjc\ndate: 2016-04-26\ntitle: Maximum Depth of Binary Tree\ncategory: Algorithm\ntags: [algorithm-recursion]\nkeywords:\ndescription: 寻找二叉树最长路径\n---\n\n## 寻找二叉树最长路径\n\n\n### 递归的方法\n\n1.节点为`null`时，返回深度为0\n2.节点的左右子节点中有一个为`null`时，返回`1+maxDepth(root.left(or root.right))`\n3.若节点的左右子节点都不为`null`时，返回两者中大的那一个。\n\n```java\npublic int maxDepth(TreeNode root) {\n        if(root==null){\n            return 0;\n        }else if(root.left!=null&& root.right!=null){\n            return max(1+maxDepth(root.left),1+maxDepth(root.right));\n        }else if(root.left==null){\n            return 1+maxDepth(root.right);\n        }else{\n            return 1+maxDepth(root.left);\n        }\n    }\n\n    public int max(int a,int b){\n        return (a>b?a:b);\n    }\n```\n","slug":"algorithm/oj/LeetCode/2016-04-26-easy-MaximunDepthofBinary","published":1,"updated":"2018-10-14T07:34:26.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfb9007q28t1u1lkk52g","content":"<h2 id=\"寻找二叉树最长路径\"><a href=\"#寻找二叉树最长路径\" class=\"headerlink\" title=\"寻找二叉树最长路径\"></a>寻找二叉树最长路径</h2><h3 id=\"递归的方法\"><a href=\"#递归的方法\" class=\"headerlink\" title=\"递归的方法\"></a>递归的方法</h3><p>1.节点为<code>null</code>时，返回深度为0<br>2.节点的左右子节点中有一个为<code>null</code>时，返回<code>1+maxDepth(root.left(or root.right))</code><br>3.若节点的左右子节点都不为<code>null</code>时，返回两者中大的那一个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root.left!=<span class=\"keyword\">null</span>&amp;&amp; root.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(<span class=\"number\">1</span>+maxDepth(root.left),<span class=\"number\">1</span>+maxDepth(root.right));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root.left==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>+maxDepth(root.right);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>+maxDepth(root.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (a&gt;b?a:b);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"寻找二叉树最长路径\"><a href=\"#寻找二叉树最长路径\" class=\"headerlink\" title=\"寻找二叉树最长路径\"></a>寻找二叉树最长路径</h2><h3 id=\"递归的方法\"><a href=\"#递归的方法\" class=\"headerlink\" title=\"递归的方法\"></a>递归的方法</h3><p>1.节点为<code>null</code>时，返回深度为0<br>2.节点的左右子节点中有一个为<code>null</code>时，返回<code>1+maxDepth(root.left(or root.right))</code><br>3.若节点的左右子节点都不为<code>null</code>时，返回两者中大的那一个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root.left!=<span class=\"keyword\">null</span>&amp;&amp; root.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(<span class=\"number\">1</span>+maxDepth(root.left),<span class=\"number\">1</span>+maxDepth(root.right));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root.left==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>+maxDepth(root.right);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>+maxDepth(root.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (a&gt;b?a:b);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-04-25T16:00:00.000Z","title":"数根","keywords":null,"description":"数根就是指将一个数num的各位数字相加之后得到一个数字,若该数大于等于10则继续该运算直到得到一个小于10的数, 这个数被称为num的树根.","mathjax":true,"_content":"\n## 简介\n\n数根就是指将一个数的各位数字相加之后得到一个数字，若该数大于等于10则继续该运算所得到的那个数。\n\n例如：\n158 --》 1+5+8=14 --》 1+4=5\n\n\n## O(n) 解法\n\n就是按照树根的定义来做。\n\n```java\npublic int addDigits(int num) {\n   while(num>=10){\n       int [] tmp=getDigits(num);\n       num=0;\n       for(int i=0;i<tmp.length;i++){\n           num+=tmp[i];\n       }\n   }\n   return num;\n}\n\n\npublic int[] getDigits(int num){\n   int tmp=num;\n   int [] digits=new int[(int)Math.log(num)];\n   int index=0;\n   while(tmp!=0){\n       digits[index]=tmp%10;\n       tmp=tmp/10;\n       index+=1;\n   }\n   return digits;\n}\n```\n\n## O(1)解法\n\n树根有一些很巧妙的数学规律，使得该题可以在O(1)时间内完成。\n\n例：\n\n$12345=1*10000+2*1000+3*100+4*10+5*1$\n\n$$=1*9999+2*999+3*99+4*9+5*0+(1+2+3+4+5)$$\n\n我们发现一个数的各位数字之和和该数和9同余。\n\n所以树根与原数也应该同余（当一个数为9的倍数时，树根即为9）、\n\n```java\npublic int addDigits(int num) {\n    if(num==0){\n        return 0;\n    }\n    if(num%9==0){\n        return 9;\n    }else{\n        return num%9;\n    }\n\n}\n```\n","source":"_posts/algorithm/oj/LeetCode/2016-04-26-easy-add-digits.md","raw":"---\nauthor: ivyxjc\ndate: 2016-04-26\ntitle: 数根\ncategory: Algorithm\ntags: [algorithm-math]\nkeywords:\ndescription: 数根就是指将一个数num的各位数字相加之后得到一个数字,若该数大于等于10则继续该运算直到得到一个小于10的数, 这个数被称为num的树根.\nmathjax: true\n---\n\n## 简介\n\n数根就是指将一个数的各位数字相加之后得到一个数字，若该数大于等于10则继续该运算所得到的那个数。\n\n例如：\n158 --》 1+5+8=14 --》 1+4=5\n\n\n## O(n) 解法\n\n就是按照树根的定义来做。\n\n```java\npublic int addDigits(int num) {\n   while(num>=10){\n       int [] tmp=getDigits(num);\n       num=0;\n       for(int i=0;i<tmp.length;i++){\n           num+=tmp[i];\n       }\n   }\n   return num;\n}\n\n\npublic int[] getDigits(int num){\n   int tmp=num;\n   int [] digits=new int[(int)Math.log(num)];\n   int index=0;\n   while(tmp!=0){\n       digits[index]=tmp%10;\n       tmp=tmp/10;\n       index+=1;\n   }\n   return digits;\n}\n```\n\n## O(1)解法\n\n树根有一些很巧妙的数学规律，使得该题可以在O(1)时间内完成。\n\n例：\n\n$12345=1*10000+2*1000+3*100+4*10+5*1$\n\n$$=1*9999+2*999+3*99+4*9+5*0+(1+2+3+4+5)$$\n\n我们发现一个数的各位数字之和和该数和9同余。\n\n所以树根与原数也应该同余（当一个数为9的倍数时，树根即为9）、\n\n```java\npublic int addDigits(int num) {\n    if(num==0){\n        return 0;\n    }\n    if(num%9==0){\n        return 9;\n    }else{\n        return num%9;\n    }\n\n}\n```\n","slug":"algorithm/oj/LeetCode/2016-04-26-easy-add-digits","published":1,"updated":"2018-10-14T07:34:23.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfba007s28t1gwiv98iq","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>数根就是指将一个数的各位数字相加之后得到一个数字，若该数大于等于10则继续该运算所得到的那个数。</p>\n<p>例如：<br>158 –》 1+5+8=14 –》 1+4=5</p>\n<h2 id=\"O-n-解法\"><a href=\"#O-n-解法\" class=\"headerlink\" title=\"O(n) 解法\"></a>O(n) 解法</h2><p>就是按照树根的定义来做。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(num&gt;=<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> [] tmp=getDigits(num);</span><br><span class=\"line\">       num=<span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;tmp.length;i++)&#123;</span><br><span class=\"line\">           num+=tmp[i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getDigits(<span class=\"keyword\">int</span> num)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> tmp=num;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> [] digits=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[(<span class=\"keyword\">int</span>)Math.log(num)];</span><br><span class=\"line\">   <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(tmp!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">       digits[index]=tmp%<span class=\"number\">10</span>;</span><br><span class=\"line\">       tmp=tmp/<span class=\"number\">10</span>;</span><br><span class=\"line\">       index+=<span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"O-1-解法\"><a href=\"#O-1-解法\" class=\"headerlink\" title=\"O(1)解法\"></a>O(1)解法</h2><p>树根有一些很巧妙的数学规律，使得该题可以在O(1)时间内完成。</p>\n<p>例：</p>\n<p>$12345=1<em>10000+2</em>1000+3<em>100+4</em>10+5*1$</p>\n<p>$$=1<em>9999+2</em>999+3<em>99+4</em>9+5*0+(1+2+3+4+5)$$</p>\n<p>我们发现一个数的各位数字之和和该数和9同余。</p>\n<p>所以树根与原数也应该同余（当一个数为9的倍数时，树根即为9）、</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num%<span class=\"number\">9</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num%<span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>数根就是指将一个数的各位数字相加之后得到一个数字，若该数大于等于10则继续该运算所得到的那个数。</p>\n<p>例如：<br>158 –》 1+5+8=14 –》 1+4=5</p>\n<h2 id=\"O-n-解法\"><a href=\"#O-n-解法\" class=\"headerlink\" title=\"O(n) 解法\"></a>O(n) 解法</h2><p>就是按照树根的定义来做。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(num&gt;=<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> [] tmp=getDigits(num);</span><br><span class=\"line\">       num=<span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;tmp.length;i++)&#123;</span><br><span class=\"line\">           num+=tmp[i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getDigits(<span class=\"keyword\">int</span> num)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> tmp=num;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> [] digits=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[(<span class=\"keyword\">int</span>)Math.log(num)];</span><br><span class=\"line\">   <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(tmp!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">       digits[index]=tmp%<span class=\"number\">10</span>;</span><br><span class=\"line\">       tmp=tmp/<span class=\"number\">10</span>;</span><br><span class=\"line\">       index+=<span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"O-1-解法\"><a href=\"#O-1-解法\" class=\"headerlink\" title=\"O(1)解法\"></a>O(1)解法</h2><p>树根有一些很巧妙的数学规律，使得该题可以在O(1)时间内完成。</p>\n<p>例：</p>\n<p>$12345=1<em>10000+2</em>1000+3<em>100+4</em>10+5*1$</p>\n<p>$$=1<em>9999+2</em>999+3<em>99+4</em>9+5*0+(1+2+3+4+5)$$</p>\n<p>我们发现一个数的各位数字之和和该数和9同余。</p>\n<p>所以树根与原数也应该同余（当一个数为9的倍数时，树根即为9）、</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num%<span class=\"number\">9</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num%<span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-09-23T16:00:00.000Z","title":"ActionBarCompat","keywords":null,"description":"如何添加菜单项, 以及如何在运行时更改菜单项.","_content":"\n\n\n## 布局文件中添加menu\n\n```xml\nmenu_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:support=\"http://schemas.android.com/apk/res-auto\"\n    >\n    <item\n        android:id=\"@+id/menu_setting\"\n        android:icon=\"@mipmap/ic_action_settings\"\n        android:title=\"@string/menu_setting\"\n        support:showAsAction=\"never\"/>\n    <item\n        android:id=\"@+id/menu_refresh\"\n        android:icon=\"@mipmap/ic_action_refresh\"\n        android:title=\"@string/menu_refresh\"\n        support:showAsAction=\"always\"/>\n</menu>\n```\n\n## Activity中添加menu\n\n```xml\nvalues/ids.xml\n<resources>\n    <item name=\"menu_location\" type=\"id\"/>\n</resources>\n```\n\n```java\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.menu_main,menu);\n    MenuItem location=menu.add(0,R.id.menu_location,0,\"Location\");\n    location.setIcon(R.mipmap.ic_action_location);\n    MenuItemCompat.setShowAsAction(location,MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);\n    return true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()){\n        case R.id.menu_setting:\n            return true;\n        case R.id.menu_location:\n            return true;\n        case R.id.menu_refresh:\n            return true;\n    }\n    return super.onOptionsItemSelected(item);\n}\n```\n\n## 用法\n\n### 运行时更改菜单项\n\n```java\nmButtonForbidRefresh.setOnClickListener(new View.OnClickListener() {\n           private int i=0;\n           @Override\n           public void onClick(View view) {\n               i++;\n               if(i%2==1)\n                   mButtonForbidRefresh.setActivated(true);\n               else\n                   mButtonForbidRefresh.setActivated(false);\n               invalidateOptionsMenu();\n           }\n       });\n```\n\n\n```java\n@Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        menu.clear();\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        MenuItem item=menu.findItem(R.id.menu_refresh);\n        if(mButtonForbidRefresh.isActivated()){\n           item.setEnabled(false);\n        }\n\n        MenuItem location = menu.add(0, R.id.menu_location, Menu.CATEGORY_SECONDARY, \"Location\");\n        location.setIcon(R.mipmap.ic_action_location);\n        MenuItemCompat.setShowAsAction(location, MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);\n\n        return super.onPrepareOptionsMenu(menu);\n    }\n```\n\n`menu.findItem(int id)`<br>\n\n`menu.getItem(int index)`\n\n### onPrepareOptionsMenu(Menu menu)和onCreateOptionsMenu(Menu menu)区别\n`onCreateOptionsMenu(Menu menu)`只在最初的时候会调用每次点击menu都会调用一次`onPrepareOptionsMenu(Menu menu)`.使用`invalidateOptionsMenu()`会直接调用onPrepareOptionsMenu(Menu menu);\n\n\n### 多个Activity共用相同ActionBar\n\n如果应用包含多个 Activity，且其中某些 Activity 提供相同的选项菜单，则可考虑创建一个仅实现`onCreateOptionsMenu()` 和 `onOptionsItemSelected()`方法的 Activity。然后为每个应共享相同选项菜单的 Activity 扩展此类。 通过这种方式，您可以管理一个用于处理菜单操作的代码集，且每个子级类均会继承菜单行为。若要将菜单项添加到一个子级 Activity，请重写该 Activity 中的 `onCreateOptionsMenu()`。调用 `super.onCreateOptionsMenu(menu)`，以便创建原始菜单项，然后使用 `menu.add()` 添加新菜单项。此外，您还可以替代各个菜单项的超类行为。\n","source":"_posts/android/AndroidSamples/UI/2016-09-24-ActionBar-Basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-09-24\ntitle: ActionBarCompat\ncategory: Android\ntags: [android,android_UI]\nkeywords:\ndescription: 如何添加菜单项, 以及如何在运行时更改菜单项.\n---\n\n\n\n## 布局文件中添加menu\n\n```xml\nmenu_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:support=\"http://schemas.android.com/apk/res-auto\"\n    >\n    <item\n        android:id=\"@+id/menu_setting\"\n        android:icon=\"@mipmap/ic_action_settings\"\n        android:title=\"@string/menu_setting\"\n        support:showAsAction=\"never\"/>\n    <item\n        android:id=\"@+id/menu_refresh\"\n        android:icon=\"@mipmap/ic_action_refresh\"\n        android:title=\"@string/menu_refresh\"\n        support:showAsAction=\"always\"/>\n</menu>\n```\n\n## Activity中添加menu\n\n```xml\nvalues/ids.xml\n<resources>\n    <item name=\"menu_location\" type=\"id\"/>\n</resources>\n```\n\n```java\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.menu_main,menu);\n    MenuItem location=menu.add(0,R.id.menu_location,0,\"Location\");\n    location.setIcon(R.mipmap.ic_action_location);\n    MenuItemCompat.setShowAsAction(location,MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);\n    return true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()){\n        case R.id.menu_setting:\n            return true;\n        case R.id.menu_location:\n            return true;\n        case R.id.menu_refresh:\n            return true;\n    }\n    return super.onOptionsItemSelected(item);\n}\n```\n\n## 用法\n\n### 运行时更改菜单项\n\n```java\nmButtonForbidRefresh.setOnClickListener(new View.OnClickListener() {\n           private int i=0;\n           @Override\n           public void onClick(View view) {\n               i++;\n               if(i%2==1)\n                   mButtonForbidRefresh.setActivated(true);\n               else\n                   mButtonForbidRefresh.setActivated(false);\n               invalidateOptionsMenu();\n           }\n       });\n```\n\n\n```java\n@Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        menu.clear();\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        MenuItem item=menu.findItem(R.id.menu_refresh);\n        if(mButtonForbidRefresh.isActivated()){\n           item.setEnabled(false);\n        }\n\n        MenuItem location = menu.add(0, R.id.menu_location, Menu.CATEGORY_SECONDARY, \"Location\");\n        location.setIcon(R.mipmap.ic_action_location);\n        MenuItemCompat.setShowAsAction(location, MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);\n\n        return super.onPrepareOptionsMenu(menu);\n    }\n```\n\n`menu.findItem(int id)`<br>\n\n`menu.getItem(int index)`\n\n### onPrepareOptionsMenu(Menu menu)和onCreateOptionsMenu(Menu menu)区别\n`onCreateOptionsMenu(Menu menu)`只在最初的时候会调用每次点击menu都会调用一次`onPrepareOptionsMenu(Menu menu)`.使用`invalidateOptionsMenu()`会直接调用onPrepareOptionsMenu(Menu menu);\n\n\n### 多个Activity共用相同ActionBar\n\n如果应用包含多个 Activity，且其中某些 Activity 提供相同的选项菜单，则可考虑创建一个仅实现`onCreateOptionsMenu()` 和 `onOptionsItemSelected()`方法的 Activity。然后为每个应共享相同选项菜单的 Activity 扩展此类。 通过这种方式，您可以管理一个用于处理菜单操作的代码集，且每个子级类均会继承菜单行为。若要将菜单项添加到一个子级 Activity，请重写该 Activity 中的 `onCreateOptionsMenu()`。调用 `super.onCreateOptionsMenu(menu)`，以便创建原始菜单项，然后使用 `menu.add()` 添加新菜单项。此外，您还可以替代各个菜单项的超类行为。\n","slug":"android/AndroidSamples/UI/2016-09-24-ActionBar-Basic","published":1,"updated":"2018-08-09T10:10:11.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbb007u28t1grreaue0","content":"<h2 id=\"布局文件中添加menu\"><a href=\"#布局文件中添加menu\" class=\"headerlink\" title=\"布局文件中添加menu\"></a>布局文件中添加menu</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu_main.xml</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">xmlns:support</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_setting\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_action_settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/menu_setting\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">support:showAsAction</span>=<span class=\"string\">\"never\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_refresh\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_action_refresh\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/menu_refresh\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">support:showAsAction</span>=<span class=\"string\">\"always\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Activity中添加menu\"><a href=\"#Activity中添加menu\" class=\"headerlink\" title=\"Activity中添加menu\"></a>Activity中添加menu</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">values/ids.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"menu_location\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">    getMenuInflater().inflate(R.menu.menu_main,menu);</span><br><span class=\"line\">    MenuItem location=menu.add(<span class=\"number\">0</span>,R.id.menu_location,<span class=\"number\">0</span>,<span class=\"string\">\"Location\"</span>);</span><br><span class=\"line\">    location.setIcon(R.mipmap.ic_action_location);</span><br><span class=\"line\">    MenuItemCompat.setShowAsAction(location,MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (item.getItemId())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.menu_setting:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.menu_location:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.menu_refresh:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><h3 id=\"运行时更改菜单项\"><a href=\"#运行时更改菜单项\" class=\"headerlink\" title=\"运行时更改菜单项\"></a>运行时更改菜单项</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mButtonForbidRefresh.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">               i++;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">1</span>)</span><br><span class=\"line\">                   mButtonForbidRefresh.setActivated(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">                   mButtonForbidRefresh.setActivated(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">               invalidateOptionsMenu();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onPrepareOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">        menu.clear();</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class=\"line\">        MenuItem item=menu.findItem(R.id.menu_refresh);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mButtonForbidRefresh.isActivated())&#123;</span><br><span class=\"line\">           item.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MenuItem location = menu.add(<span class=\"number\">0</span>, R.id.menu_location, Menu.CATEGORY_SECONDARY, <span class=\"string\">\"Location\"</span>);</span><br><span class=\"line\">        location.setIcon(R.mipmap.ic_action_location);</span><br><span class=\"line\">        MenuItemCompat.setShowAsAction(location, MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onPrepareOptionsMenu(menu);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>menu.findItem(int id)</code><br></p>\n<p><code>menu.getItem(int index)</code></p>\n<h3 id=\"onPrepareOptionsMenu-Menu-menu-和onCreateOptionsMenu-Menu-menu-区别\"><a href=\"#onPrepareOptionsMenu-Menu-menu-和onCreateOptionsMenu-Menu-menu-区别\" class=\"headerlink\" title=\"onPrepareOptionsMenu(Menu menu)和onCreateOptionsMenu(Menu menu)区别\"></a>onPrepareOptionsMenu(Menu menu)和onCreateOptionsMenu(Menu menu)区别</h3><p><code>onCreateOptionsMenu(Menu menu)</code>只在最初的时候会调用每次点击menu都会调用一次<code>onPrepareOptionsMenu(Menu menu)</code>.使用<code>invalidateOptionsMenu()</code>会直接调用onPrepareOptionsMenu(Menu menu);</p>\n<h3 id=\"多个Activity共用相同ActionBar\"><a href=\"#多个Activity共用相同ActionBar\" class=\"headerlink\" title=\"多个Activity共用相同ActionBar\"></a>多个Activity共用相同ActionBar</h3><p>如果应用包含多个 Activity，且其中某些 Activity 提供相同的选项菜单，则可考虑创建一个仅实现<code>onCreateOptionsMenu()</code> 和 <code>onOptionsItemSelected()</code>方法的 Activity。然后为每个应共享相同选项菜单的 Activity 扩展此类。 通过这种方式，您可以管理一个用于处理菜单操作的代码集，且每个子级类均会继承菜单行为。若要将菜单项添加到一个子级 Activity，请重写该 Activity 中的 <code>onCreateOptionsMenu()</code>。调用 <code>super.onCreateOptionsMenu(menu)</code>，以便创建原始菜单项，然后使用 <code>menu.add()</code> 添加新菜单项。此外，您还可以替代各个菜单项的超类行为。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"布局文件中添加menu\"><a href=\"#布局文件中添加menu\" class=\"headerlink\" title=\"布局文件中添加menu\"></a>布局文件中添加menu</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu_main.xml</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">xmlns:support</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_setting\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_action_settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/menu_setting\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">support:showAsAction</span>=<span class=\"string\">\"never\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_refresh\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_action_refresh\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/menu_refresh\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">support:showAsAction</span>=<span class=\"string\">\"always\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Activity中添加menu\"><a href=\"#Activity中添加menu\" class=\"headerlink\" title=\"Activity中添加menu\"></a>Activity中添加menu</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">values/ids.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"menu_location\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">    getMenuInflater().inflate(R.menu.menu_main,menu);</span><br><span class=\"line\">    MenuItem location=menu.add(<span class=\"number\">0</span>,R.id.menu_location,<span class=\"number\">0</span>,<span class=\"string\">\"Location\"</span>);</span><br><span class=\"line\">    location.setIcon(R.mipmap.ic_action_location);</span><br><span class=\"line\">    MenuItemCompat.setShowAsAction(location,MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (item.getItemId())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.menu_setting:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.menu_location:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.menu_refresh:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><h3 id=\"运行时更改菜单项\"><a href=\"#运行时更改菜单项\" class=\"headerlink\" title=\"运行时更改菜单项\"></a>运行时更改菜单项</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mButtonForbidRefresh.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">               i++;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">1</span>)</span><br><span class=\"line\">                   mButtonForbidRefresh.setActivated(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">                   mButtonForbidRefresh.setActivated(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">               invalidateOptionsMenu();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onPrepareOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">        menu.clear();</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class=\"line\">        MenuItem item=menu.findItem(R.id.menu_refresh);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mButtonForbidRefresh.isActivated())&#123;</span><br><span class=\"line\">           item.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MenuItem location = menu.add(<span class=\"number\">0</span>, R.id.menu_location, Menu.CATEGORY_SECONDARY, <span class=\"string\">\"Location\"</span>);</span><br><span class=\"line\">        location.setIcon(R.mipmap.ic_action_location);</span><br><span class=\"line\">        MenuItemCompat.setShowAsAction(location, MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onPrepareOptionsMenu(menu);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>menu.findItem(int id)</code><br></p>\n<p><code>menu.getItem(int index)</code></p>\n<h3 id=\"onPrepareOptionsMenu-Menu-menu-和onCreateOptionsMenu-Menu-menu-区别\"><a href=\"#onPrepareOptionsMenu-Menu-menu-和onCreateOptionsMenu-Menu-menu-区别\" class=\"headerlink\" title=\"onPrepareOptionsMenu(Menu menu)和onCreateOptionsMenu(Menu menu)区别\"></a>onPrepareOptionsMenu(Menu menu)和onCreateOptionsMenu(Menu menu)区别</h3><p><code>onCreateOptionsMenu(Menu menu)</code>只在最初的时候会调用每次点击menu都会调用一次<code>onPrepareOptionsMenu(Menu menu)</code>.使用<code>invalidateOptionsMenu()</code>会直接调用onPrepareOptionsMenu(Menu menu);</p>\n<h3 id=\"多个Activity共用相同ActionBar\"><a href=\"#多个Activity共用相同ActionBar\" class=\"headerlink\" title=\"多个Activity共用相同ActionBar\"></a>多个Activity共用相同ActionBar</h3><p>如果应用包含多个 Activity，且其中某些 Activity 提供相同的选项菜单，则可考虑创建一个仅实现<code>onCreateOptionsMenu()</code> 和 <code>onOptionsItemSelected()</code>方法的 Activity。然后为每个应共享相同选项菜单的 Activity 扩展此类。 通过这种方式，您可以管理一个用于处理菜单操作的代码集，且每个子级类均会继承菜单行为。若要将菜单项添加到一个子级 Activity，请重写该 Activity 中的 <code>onCreateOptionsMenu()</code>。调用 <code>super.onCreateOptionsMenu(menu)</code>，以便创建原始菜单项，然后使用 <code>menu.add()</code> 添加新菜单项。此外，您还可以替代各个菜单项的超类行为。</p>\n"},{"author":"ivyxjc","date":"2016-11-20T16:00:00.000Z","title":"Translucent Bar","keywords":null,"description":"如何实现变色状态栏","_content":"\n1. [Android 实现变色状态栏 ](http://blog.csdn.net/sbsujjbcy/article/details/)<br>[archive.org备份页面](http://web.archive.org/web/20160421191353/http://blog.csdn.net/sbsujjbcy/article/details/48370371)\n","source":"_posts/android/UI相关/Bar/2016-11-26-Translucent-Bar.md","raw":"---\nauthor: ivyxjc\ndate: 2016-11-21\ntitle: Translucent Bar\ncategory: Android\ntags: [android,android_UI]\nkeywords:\ndescription: 如何实现变色状态栏\n---\n\n1. [Android 实现变色状态栏 ](http://blog.csdn.net/sbsujjbcy/article/details/)<br>[archive.org备份页面](http://web.archive.org/web/20160421191353/http://blog.csdn.net/sbsujjbcy/article/details/48370371)\n","slug":"android/UI相关/Bar/2016-11-26-Translucent-Bar","published":1,"updated":"2018-08-09T10:10:11.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbc007w28t11612o4pa","content":"<ol>\n<li><a href=\"http://blog.csdn.net/sbsujjbcy/article/details/\" target=\"_blank\" rel=\"noopener\">Android 实现变色状态栏 </a><br><a href=\"http://web.archive.org/web/20160421191353/http://blog.csdn.net/sbsujjbcy/article/details/48370371\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><a href=\"http://blog.csdn.net/sbsujjbcy/article/details/\" target=\"_blank\" rel=\"noopener\">Android 实现变色状态栏 </a><br><a href=\"http://web.archive.org/web/20160421191353/http://blog.csdn.net/sbsujjbcy/article/details/48370371\" target=\"_blank\" rel=\"noopener\">archive.org备份页面</a></li>\n</ol>\n"},{"author":"ivyxjc","date":"2016-04-25T16:00:00.000Z","title":"283 将0移到数组末尾","keywords":null,"description":"将数组中的0移动数组尾部, 其它数字顺序不变. 必须就地完成.","_content":"\n将数组中的0移动数组尾部，其它数字顺序不变。\n必须就地完成\n\n## 解法I（用时34ms）\n\n就是遍历数组，当一个数为0时，将该0和后面每一个数字都替换\n\n用zeroFinalIndex作为一个flag,该数后面的数都为0，初始值为nums.length。每有一个数为0，zeroFinalIndex--\n\n注意点：当有连续的0时，两个0替换，替换完成时nums[i]==0，此时i不应该+1.\n\n```java\npublic void moveZeroes(int[] nums) {\n    int zeroFinalIndex=nums.length;\n    for(int i=0;i<nums.length;){\n        if(nums[i]==0&&i<zeroFinalIndex){\n            int j=i+1;\n            if(j<zeroFinalIndex&&nums[j]==0){\n                i--;\n            }\n            while(j<zeroFinalIndex){\n                exch(nums,j-1,j);\n                j++;\n            }\n            zeroFinalIndex--;\n        }\n        i++;\n\n    }\n}\n```\n\n\n\n## 解法II（用时1ms）\n\n即将不为0的数字和第一个0交换，关键在于找到第一个0的位置 `zeroIndex`。\n\n首先将`zeroIndex`设为0，即使该数不为0，也只是自己和自己交换，不影响结果。\n\n当遇到一个数为0，此时`zeroIndex`等于该数的秩（即第一个0的秩序），等到`numsIndex`增加到一个不为0的数，和它交换。\n\n`zeroIndex`再+1仍是第一个0所在的位置。\n因为若只有一个0，则`nusm[zeroIndex]`和`nums[numsIndex]`交换后，`zeroIndex`所在的数仍为0。\n\n若有连续多个0，第一0交换后，`zeroIndex++`后仍为交换后第一个0所在的位置。\n\n```java\npublic void moveZeroesII(int [] nums){\n    for(int zeroIndex=0,numIndex=0;numIndex<nums.length;numIndex++){\n        if(nums[numIndex]!=0){\n            exch(nums,zeroIndex++,numIndex);\n        }\n    }\n\n}\n```\n","source":"_posts/algorithm/oj/LeetCode/2016-04-26-easy-move-zeroes.md","raw":"---\nauthor: ivyxjc\ndate: 2016-04-26\ntitle: 283 将0移到数组末尾\ncategory: Algorithm\ntags: [algorithm-array,algorithm-two-pointer]\nkeywords:\ndescription: 将数组中的0移动数组尾部, 其它数字顺序不变. 必须就地完成.\n---\n\n将数组中的0移动数组尾部，其它数字顺序不变。\n必须就地完成\n\n## 解法I（用时34ms）\n\n就是遍历数组，当一个数为0时，将该0和后面每一个数字都替换\n\n用zeroFinalIndex作为一个flag,该数后面的数都为0，初始值为nums.length。每有一个数为0，zeroFinalIndex--\n\n注意点：当有连续的0时，两个0替换，替换完成时nums[i]==0，此时i不应该+1.\n\n```java\npublic void moveZeroes(int[] nums) {\n    int zeroFinalIndex=nums.length;\n    for(int i=0;i<nums.length;){\n        if(nums[i]==0&&i<zeroFinalIndex){\n            int j=i+1;\n            if(j<zeroFinalIndex&&nums[j]==0){\n                i--;\n            }\n            while(j<zeroFinalIndex){\n                exch(nums,j-1,j);\n                j++;\n            }\n            zeroFinalIndex--;\n        }\n        i++;\n\n    }\n}\n```\n\n\n\n## 解法II（用时1ms）\n\n即将不为0的数字和第一个0交换，关键在于找到第一个0的位置 `zeroIndex`。\n\n首先将`zeroIndex`设为0，即使该数不为0，也只是自己和自己交换，不影响结果。\n\n当遇到一个数为0，此时`zeroIndex`等于该数的秩（即第一个0的秩序），等到`numsIndex`增加到一个不为0的数，和它交换。\n\n`zeroIndex`再+1仍是第一个0所在的位置。\n因为若只有一个0，则`nusm[zeroIndex]`和`nums[numsIndex]`交换后，`zeroIndex`所在的数仍为0。\n\n若有连续多个0，第一0交换后，`zeroIndex++`后仍为交换后第一个0所在的位置。\n\n```java\npublic void moveZeroesII(int [] nums){\n    for(int zeroIndex=0,numIndex=0;numIndex<nums.length;numIndex++){\n        if(nums[numIndex]!=0){\n            exch(nums,zeroIndex++,numIndex);\n        }\n    }\n\n}\n```\n","slug":"algorithm/oj/LeetCode/2016-04-26-easy-move-zeroes","published":1,"updated":"2018-10-14T07:34:27.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbc007y28t1kc3bldp9","content":"<p>将数组中的0移动数组尾部，其它数字顺序不变。<br>必须就地完成</p>\n<h2 id=\"解法I（用时34ms）\"><a href=\"#解法I（用时34ms）\" class=\"headerlink\" title=\"解法I（用时34ms）\"></a>解法I（用时34ms）</h2><p>就是遍历数组，当一个数为0时，将该0和后面每一个数字都替换</p>\n<p>用zeroFinalIndex作为一个flag,该数后面的数都为0，初始值为nums.length。每有一个数为0，zeroFinalIndex–</p>\n<p>注意点：当有连续的0时，两个0替换，替换完成时nums[i]==0，此时i不应该+1.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> zeroFinalIndex=nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i]==<span class=\"number\">0</span>&amp;&amp;i&lt;zeroFinalIndex)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&lt;zeroFinalIndex&amp;&amp;nums[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j&lt;zeroFinalIndex)&#123;</span><br><span class=\"line\">                exch(nums,j-<span class=\"number\">1</span>,j);</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            zeroFinalIndex--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解法II（用时1ms）\"><a href=\"#解法II（用时1ms）\" class=\"headerlink\" title=\"解法II（用时1ms）\"></a>解法II（用时1ms）</h2><p>即将不为0的数字和第一个0交换，关键在于找到第一个0的位置 <code>zeroIndex</code>。</p>\n<p>首先将<code>zeroIndex</code>设为0，即使该数不为0，也只是自己和自己交换，不影响结果。</p>\n<p>当遇到一个数为0，此时<code>zeroIndex</code>等于该数的秩（即第一个0的秩序），等到<code>numsIndex</code>增加到一个不为0的数，和它交换。</p>\n<p><code>zeroIndex</code>再+1仍是第一个0所在的位置。<br>因为若只有一个0，则<code>nusm[zeroIndex]</code>和<code>nums[numsIndex]</code>交换后，<code>zeroIndex</code>所在的数仍为0。</p>\n<p>若有连续多个0，第一0交换后，<code>zeroIndex++</code>后仍为交换后第一个0所在的位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveZeroesII</span><span class=\"params\">(<span class=\"keyword\">int</span> [] nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> zeroIndex=<span class=\"number\">0</span>,numIndex=<span class=\"number\">0</span>;numIndex&lt;nums.length;numIndex++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[numIndex]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            exch(nums,zeroIndex++,numIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>将数组中的0移动数组尾部，其它数字顺序不变。<br>必须就地完成</p>\n<h2 id=\"解法I（用时34ms）\"><a href=\"#解法I（用时34ms）\" class=\"headerlink\" title=\"解法I（用时34ms）\"></a>解法I（用时34ms）</h2><p>就是遍历数组，当一个数为0时，将该0和后面每一个数字都替换</p>\n<p>用zeroFinalIndex作为一个flag,该数后面的数都为0，初始值为nums.length。每有一个数为0，zeroFinalIndex–</p>\n<p>注意点：当有连续的0时，两个0替换，替换完成时nums[i]==0，此时i不应该+1.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> zeroFinalIndex=nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i]==<span class=\"number\">0</span>&amp;&amp;i&lt;zeroFinalIndex)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&lt;zeroFinalIndex&amp;&amp;nums[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j&lt;zeroFinalIndex)&#123;</span><br><span class=\"line\">                exch(nums,j-<span class=\"number\">1</span>,j);</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            zeroFinalIndex--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解法II（用时1ms）\"><a href=\"#解法II（用时1ms）\" class=\"headerlink\" title=\"解法II（用时1ms）\"></a>解法II（用时1ms）</h2><p>即将不为0的数字和第一个0交换，关键在于找到第一个0的位置 <code>zeroIndex</code>。</p>\n<p>首先将<code>zeroIndex</code>设为0，即使该数不为0，也只是自己和自己交换，不影响结果。</p>\n<p>当遇到一个数为0，此时<code>zeroIndex</code>等于该数的秩（即第一个0的秩序），等到<code>numsIndex</code>增加到一个不为0的数，和它交换。</p>\n<p><code>zeroIndex</code>再+1仍是第一个0所在的位置。<br>因为若只有一个0，则<code>nusm[zeroIndex]</code>和<code>nums[numsIndex]</code>交换后，<code>zeroIndex</code>所在的数仍为0。</p>\n<p>若有连续多个0，第一0交换后，<code>zeroIndex++</code>后仍为交换后第一个0所在的位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveZeroesII</span><span class=\"params\">(<span class=\"keyword\">int</span> [] nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> zeroIndex=<span class=\"number\">0</span>,numIndex=<span class=\"number\">0</span>;numIndex&lt;nums.length;numIndex++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[numIndex]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            exch(nums,zeroIndex++,numIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-03-18T16:00:00.000Z","title":"Fragment和Activity通信","keywords":null,"description":null,"_content":"\n## Fragment和Activity通信\n\n为了方便碎片和活动之间进行通信，FragmentManager 提供了一个类似于`findViewById()`的方法，专门用于从布局文件中获取碎片的实例，代码如下所示：\n\n```java\nRightFragment rightFragment = (RightFragment) getFragmentManager()\n.findFragmentById(R.id.right_fragment);\n```\n\n这样即可调用Fragment中的方法\n在Fragment中都可以用getActivity()方法来得到和当前Fragment相关联的Activity实例。\n\n```java\nMainActivity activity=(MainActivity)getActivity();\n```\n","source":"_posts/android/UI相关/Fragment/2016-03-19-Fragment-message-transportation.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-19\ntitle: Fragment和Activity通信\ncategory: Android\ntags: [android,android_UI,android_fragment]\nkeywords:\ndescription:\n---\n\n## Fragment和Activity通信\n\n为了方便碎片和活动之间进行通信，FragmentManager 提供了一个类似于`findViewById()`的方法，专门用于从布局文件中获取碎片的实例，代码如下所示：\n\n```java\nRightFragment rightFragment = (RightFragment) getFragmentManager()\n.findFragmentById(R.id.right_fragment);\n```\n\n这样即可调用Fragment中的方法\n在Fragment中都可以用getActivity()方法来得到和当前Fragment相关联的Activity实例。\n\n```java\nMainActivity activity=(MainActivity)getActivity();\n```\n","slug":"android/UI相关/Fragment/2016-03-19-Fragment-message-transportation","published":1,"updated":"2018-08-09T10:10:11.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbd008028t16mw2w2om","content":"<h2 id=\"Fragment和Activity通信\"><a href=\"#Fragment和Activity通信\" class=\"headerlink\" title=\"Fragment和Activity通信\"></a>Fragment和Activity通信</h2><p>为了方便碎片和活动之间进行通信，FragmentManager 提供了一个类似于<code>findViewById()</code>的方法，专门用于从布局文件中获取碎片的实例，代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RightFragment rightFragment = (RightFragment) getFragmentManager()</span><br><span class=\"line\">.findFragmentById(R.id.right_fragment);</span><br></pre></td></tr></table></figure>\n\n<p>这样即可调用Fragment中的方法<br>在Fragment中都可以用getActivity()方法来得到和当前Fragment相关联的Activity实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainActivity activity=(MainActivity)getActivity();</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fragment和Activity通信\"><a href=\"#Fragment和Activity通信\" class=\"headerlink\" title=\"Fragment和Activity通信\"></a>Fragment和Activity通信</h2><p>为了方便碎片和活动之间进行通信，FragmentManager 提供了一个类似于<code>findViewById()</code>的方法，专门用于从布局文件中获取碎片的实例，代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RightFragment rightFragment = (RightFragment) getFragmentManager()</span><br><span class=\"line\">.findFragmentById(R.id.right_fragment);</span><br></pre></td></tr></table></figure>\n\n<p>这样即可调用Fragment中的方法<br>在Fragment中都可以用getActivity()方法来得到和当前Fragment相关联的Activity实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainActivity activity=(MainActivity)getActivity();</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-02-21T16:00:00.000Z","title":"Layout_Gravity和Gravity","keywords":null,"description":"LayoutGravity和Gravity的区别","_content":"\n## Android Layout_Gravity和Gravity\n\n简单来说layout_gravity表示子控件在父容器的位置，gravity表示控件内容在控件内的位置。\n![如图所示][1]\n\n\n上面图片的xml代码\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\"\n              android:orientation=\"vertical\" >\n\n    <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"\n            android:background=\"#e3e2ad\"\n            android:orientation=\"vertical\"\n            android:id=\"@+id/\">\n\n        <TextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_gravity=\"center_horizontal\"\n                android:textSize=\"24sp\"\n                android:text=\"gravity=\" />\n        <!--如何设置为wrap_content 则gravity失效-->\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:background=\"#bcf5b1\"\n                android:gravity=\"left\"\n                android:text=\"left\" />\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:background=\"#aacaff\"\n                android:gravity=\"center_horizontal\"\n                android:text=\"center_horizontal\" />\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:background=\"#bcf5b1\"\n                android:gravity=\"right\"\n                android:text=\"right\" />\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:background=\"#aacaff\"\n                android:gravity=\"center\"\n                android:text=\"center\" />\n\n    </LinearLayout>\n    <!--match_parent改为wrap_content则下面的layout_gravity失效-->\n    <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"\n            android:background=\"#d6c6cd\"\n            android:orientation=\"vertical\" >\n\n        <TextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_gravity=\"center_horizontal\"\n                android:textSize=\"24sp\"\n                android:text=\"layout_gravity=\" />\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:layout_gravity=\"left\"\n                android:background=\"#bcf5b1\"\n                android:text=\"left\" />\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:layout_gravity=\"center_horizontal\"\n                android:background=\"#aacaff\"\n                android:text=\"center_horizontal\" />\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:layout_gravity=\"right\"\n                android:background=\"#bcf5b1\"\n                android:text=\"right\"\n                android:id=\"@+id/\"/>\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:layout_gravity=\"center\"\n                android:background=\"#aacaff\"\n                android:text=\"center\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n```\n\n参考\n1.[Gravity and layout_gravity on Android][2]\n\n\n  [1]: http://i.stack.imgur.com/xKdfI.png\n  [2]: http://stackoverflow.com/questions/3482742/gravity-and-layout-gravity-on-android\n","source":"_posts/android/UI相关/布局/2016-02-22-Layout-Gravity和Gravity.md","raw":"---\nauthor: ivyxjc\ndate: 2016-02-22\ntitle: Layout_Gravity和Gravity\ncategory: Android\ntags: [android,android_UI]\nkeywords:\ndescription: LayoutGravity和Gravity的区别\n---\n\n## Android Layout_Gravity和Gravity\n\n简单来说layout_gravity表示子控件在父容器的位置，gravity表示控件内容在控件内的位置。\n![如图所示][1]\n\n\n上面图片的xml代码\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\"\n              android:orientation=\"vertical\" >\n\n    <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"\n            android:background=\"#e3e2ad\"\n            android:orientation=\"vertical\"\n            android:id=\"@+id/\">\n\n        <TextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_gravity=\"center_horizontal\"\n                android:textSize=\"24sp\"\n                android:text=\"gravity=\" />\n        <!--如何设置为wrap_content 则gravity失效-->\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:background=\"#bcf5b1\"\n                android:gravity=\"left\"\n                android:text=\"left\" />\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:background=\"#aacaff\"\n                android:gravity=\"center_horizontal\"\n                android:text=\"center_horizontal\" />\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:background=\"#bcf5b1\"\n                android:gravity=\"right\"\n                android:text=\"right\" />\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:background=\"#aacaff\"\n                android:gravity=\"center\"\n                android:text=\"center\" />\n\n    </LinearLayout>\n    <!--match_parent改为wrap_content则下面的layout_gravity失效-->\n    <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"\n            android:background=\"#d6c6cd\"\n            android:orientation=\"vertical\" >\n\n        <TextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_gravity=\"center_horizontal\"\n                android:textSize=\"24sp\"\n                android:text=\"layout_gravity=\" />\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:layout_gravity=\"left\"\n                android:background=\"#bcf5b1\"\n                android:text=\"left\" />\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:layout_gravity=\"center_horizontal\"\n                android:background=\"#aacaff\"\n                android:text=\"center_horizontal\" />\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:layout_gravity=\"right\"\n                android:background=\"#bcf5b1\"\n                android:text=\"right\"\n                android:id=\"@+id/\"/>\n\n        <TextView\n                android:layout_width=\"200dp\"\n                android:layout_height=\"40dp\"\n                android:layout_gravity=\"center\"\n                android:background=\"#aacaff\"\n                android:text=\"center\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n```\n\n参考\n1.[Gravity and layout_gravity on Android][2]\n\n\n  [1]: http://i.stack.imgur.com/xKdfI.png\n  [2]: http://stackoverflow.com/questions/3482742/gravity-and-layout-gravity-on-android\n","slug":"android/UI相关/布局/2016-02-22-Layout-Gravity和Gravity","published":1,"updated":"2018-08-09T10:10:11.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbe008228t1eua8q76c","content":"<h2 id=\"Android-Layout-Gravity和Gravity\"><a href=\"#Android-Layout-Gravity和Gravity\" class=\"headerlink\" title=\"Android Layout_Gravity和Gravity\"></a>Android Layout_Gravity和Gravity</h2><p>简单来说layout_gravity表示子控件在父容器的位置，gravity表示控件内容在控件内的位置。<br><img src=\"http://i.stack.imgur.com/xKdfI.png\" alt=\"如图所示\"></p>\n<p>上面图片的xml代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"#e3e2ad\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center_horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"24sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"gravity=\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--如何设置为wrap_content 则gravity失效--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#bcf5b1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"left\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#aacaff\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center_horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"center_horizontal\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#bcf5b1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"right\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#aacaff\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"center\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--match_parent改为wrap_content则下面的layout_gravity失效--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"#d6c6cd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center_horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"24sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"layout_gravity=\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#bcf5b1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"left\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center_horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#aacaff\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"center_horizontal\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#bcf5b1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#aacaff\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"center\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<br>1.<a href=\"http://stackoverflow.com/questions/3482742/gravity-and-layout-gravity-on-android\" target=\"_blank\" rel=\"noopener\">Gravity and layout_gravity on Android</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Android-Layout-Gravity和Gravity\"><a href=\"#Android-Layout-Gravity和Gravity\" class=\"headerlink\" title=\"Android Layout_Gravity和Gravity\"></a>Android Layout_Gravity和Gravity</h2><p>简单来说layout_gravity表示子控件在父容器的位置，gravity表示控件内容在控件内的位置。<br><img src=\"http://i.stack.imgur.com/xKdfI.png\" alt=\"如图所示\"></p>\n<p>上面图片的xml代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"#e3e2ad\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center_horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"24sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"gravity=\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--如何设置为wrap_content 则gravity失效--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#bcf5b1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"left\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#aacaff\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center_horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"center_horizontal\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#bcf5b1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"right\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#aacaff\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"center\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--match_parent改为wrap_content则下面的layout_gravity失效--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"#d6c6cd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center_horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"24sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"layout_gravity=\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#bcf5b1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"left\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center_horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#aacaff\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"center_horizontal\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#bcf5b1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#aacaff\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"center\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<br>1.<a href=\"http://stackoverflow.com/questions/3482742/gravity-and-layout-gravity-on-android\" target=\"_blank\" rel=\"noopener\">Gravity and layout_gravity on Android</a></p>\n"},{"author":"ivyxjc","date":"2016-06-02T16:00:00.000Z","title":"Sunshine开发实战:架构(与官方原版有一些不同)","keywords":null,"description":"Sunshine开发实战","_content":"\n## 搜索\n通过搜索按钮,进入搜索界面,进行搜索,返回搜索结果,选择,将地址存入数据库中.\n\n## 刷新\n点击刷新按钮,联网获取数据,处理数据,若数据非null,存入数据库,从数据库中读取数据,刷新UI.\n","source":"_posts/android/开发实战/Sunshine开发实战/2016-06-03-sunshine-build-custom.md","raw":"---\nauthor: ivyxjc\ndate: 2016-06-03\ntitle: Sunshine开发实战:架构(与官方原版有一些不同)\ncategory: Android\ntags: [android]\nkeywords:\ndescription: Sunshine开发实战\n---\n\n## 搜索\n通过搜索按钮,进入搜索界面,进行搜索,返回搜索结果,选择,将地址存入数据库中.\n\n## 刷新\n点击刷新按钮,联网获取数据,处理数据,若数据非null,存入数据库,从数据库中读取数据,刷新UI.\n","slug":"android/开发实战/Sunshine开发实战/2016-06-03-sunshine-build-custom","published":1,"updated":"2018-08-09T10:10:11.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbf008428t1odg1o964","content":"<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><p>通过搜索按钮,进入搜索界面,进行搜索,返回搜索结果,选择,将地址存入数据库中.</p>\n<h2 id=\"刷新\"><a href=\"#刷新\" class=\"headerlink\" title=\"刷新\"></a>刷新</h2><p>点击刷新按钮,联网获取数据,处理数据,若数据非null,存入数据库,从数据库中读取数据,刷新UI.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><p>通过搜索按钮,进入搜索界面,进行搜索,返回搜索结果,选择,将地址存入数据库中.</p>\n<h2 id=\"刷新\"><a href=\"#刷新\" class=\"headerlink\" title=\"刷新\"></a>刷新</h2><p>点击刷新按钮,联网获取数据,处理数据,若数据非null,存入数据库,从数据库中读取数据,刷新UI.</p>\n"},{"author":"ivyxjc","date":"2016-06-01T16:00:00.000Z","title":"Sunshine开发实战:数据持久化","keywords":null,"description":"数据持久化","_content":"\n##　Sunshine应用数据存储总体框架\n![](http://oezmbgg4j.bkt.clouddn.com/sunshine_data_persistence.png)\n\n## WeatherContract\nA contract is an agreement between the data model, storeage, and views, presentation, describing how information is accessed.\n事实上就是在一个类中规定好所有相关的数据表中相应的表名,列名等等.\n\n## WeatherDBHelper\n\n创建数据库并进行初始化\n","source":"_posts/android/开发实战/Sunshine开发实战/2016-06-02-data-persistence.md","raw":"---\nauthor: ivyxjc\ndate: 2016-06-02\ntitle: Sunshine开发实战:数据持久化\ncategory: Android\ntags: [android,android_data]\nkeywords:\ndescription: 数据持久化\n---\n\n##　Sunshine应用数据存储总体框架\n![](http://oezmbgg4j.bkt.clouddn.com/sunshine_data_persistence.png)\n\n## WeatherContract\nA contract is an agreement between the data model, storeage, and views, presentation, describing how information is accessed.\n事实上就是在一个类中规定好所有相关的数据表中相应的表名,列名等等.\n\n## WeatherDBHelper\n\n创建数据库并进行初始化\n","slug":"android/开发实战/Sunshine开发实战/2016-06-02-data-persistence","published":1,"updated":"2018-08-09T10:10:11.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbf008628t10hr9rsvm","content":"<p>##　Sunshine应用数据存储总体框架<br><img src=\"http://oezmbgg4j.bkt.clouddn.com/sunshine_data_persistence.png\" alt></p>\n<h2 id=\"WeatherContract\"><a href=\"#WeatherContract\" class=\"headerlink\" title=\"WeatherContract\"></a>WeatherContract</h2><p>A contract is an agreement between the data model, storeage, and views, presentation, describing how information is accessed.<br>事实上就是在一个类中规定好所有相关的数据表中相应的表名,列名等等.</p>\n<h2 id=\"WeatherDBHelper\"><a href=\"#WeatherDBHelper\" class=\"headerlink\" title=\"WeatherDBHelper\"></a>WeatherDBHelper</h2><p>创建数据库并进行初始化</p>\n","site":{"data":{}},"excerpt":"","more":"<p>##　Sunshine应用数据存储总体框架<br><img src=\"http://oezmbgg4j.bkt.clouddn.com/sunshine_data_persistence.png\" alt></p>\n<h2 id=\"WeatherContract\"><a href=\"#WeatherContract\" class=\"headerlink\" title=\"WeatherContract\"></a>WeatherContract</h2><p>A contract is an agreement between the data model, storeage, and views, presentation, describing how information is accessed.<br>事实上就是在一个类中规定好所有相关的数据表中相应的表名,列名等等.</p>\n<h2 id=\"WeatherDBHelper\"><a href=\"#WeatherDBHelper\" class=\"headerlink\" title=\"WeatherDBHelper\"></a>WeatherDBHelper</h2><p>创建数据库并进行初始化</p>\n"},{"author":"ivyxjc","date":"2016-06-02T16:00:00.000Z","title":"Sunshine开发实战:测试","keywords":null,"description":"Android开发中如何进行测试的简单例子.","_content":"\n## 简单的例子\n\n```java\npublic class TestPractice extends AndroidTestCase {\n    //测试前进行的工作\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n    }\n\n//所有测试的类必须以test开头\n    public void testThatDemonstratesAssertations() throws Throwable{\n        int a=5;\n        int b=3;\n        int c=5;\n        int d=10;\n\n        assertEquals(\"X should be equal\",a,c);\n        assertTrue(\"Y should be true\",d>a);\n        assertFalse(\"Z should be false\",a==b);\n\n    }\n\n    //测试之后进行的工作\n    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n}\n```\n然后点击`run 'Tests in ...`即可.\n![](http://oezmbgg4j.bkt.clouddn.com/android_test_run.png)\n","source":"_posts/android/开发实战/Sunshine开发实战/2016-06-03-android-test.md","raw":"---\nauthor: ivyxjc\ndate: 2016-06-03\ntitle: Sunshine开发实战:测试\ncategory: Android\ntags: [android,android_test]\nkeywords:\ndescription: Android开发中如何进行测试的简单例子.\n---\n\n## 简单的例子\n\n```java\npublic class TestPractice extends AndroidTestCase {\n    //测试前进行的工作\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n    }\n\n//所有测试的类必须以test开头\n    public void testThatDemonstratesAssertations() throws Throwable{\n        int a=5;\n        int b=3;\n        int c=5;\n        int d=10;\n\n        assertEquals(\"X should be equal\",a,c);\n        assertTrue(\"Y should be true\",d>a);\n        assertFalse(\"Z should be false\",a==b);\n\n    }\n\n    //测试之后进行的工作\n    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n}\n```\n然后点击`run 'Tests in ...`即可.\n![](http://oezmbgg4j.bkt.clouddn.com/android_test_run.png)\n","slug":"android/开发实战/Sunshine开发实战/2016-06-03-android-test","published":1,"updated":"2018-08-09T10:10:11.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbg008828t17bi2508b","content":"<h2 id=\"简单的例子\"><a href=\"#简单的例子\" class=\"headerlink\" title=\"简单的例子\"></a>简单的例子</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPractice</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidTestCase</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//测试前进行的工作</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.setUp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所有测试的类必须以test开头</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testThatDemonstratesAssertations</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a=<span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b=<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c=<span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"X should be equal\"</span>,a,c);</span><br><span class=\"line\">        assertTrue(<span class=\"string\">\"Y should be true\"</span>,d&gt;a);</span><br><span class=\"line\">        assertFalse(<span class=\"string\">\"Z should be false\"</span>,a==b);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//测试之后进行的工作</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">tearDown</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.tearDown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后点击<code>run &#39;Tests in ...</code>即可.<br><img src=\"http://oezmbgg4j.bkt.clouddn.com/android_test_run.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简单的例子\"><a href=\"#简单的例子\" class=\"headerlink\" title=\"简单的例子\"></a>简单的例子</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPractice</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidTestCase</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//测试前进行的工作</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.setUp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所有测试的类必须以test开头</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testThatDemonstratesAssertations</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a=<span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b=<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c=<span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"X should be equal\"</span>,a,c);</span><br><span class=\"line\">        assertTrue(<span class=\"string\">\"Y should be true\"</span>,d&gt;a);</span><br><span class=\"line\">        assertFalse(<span class=\"string\">\"Z should be false\"</span>,a==b);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//测试之后进行的工作</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">tearDown</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.tearDown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后点击<code>run &#39;Tests in ...</code>即可.<br><img src=\"http://oezmbgg4j.bkt.clouddn.com/android_test_run.png\" alt></p>\n"},{"author":"ivyxjc","date":"2016-05-10T16:00:00.000Z","title":"android编程中的一些常见问题和解决办法","keywords":null,"description":"Android开发中常见的一些细节问题.","_content":"\n### 1.如何解决有些函数只能接受`String`而无法接受`Int`\n\n这样就无法使用`R.string...`.\n\n解决方法:<br>\n`getResources().getString(R.string.aaa))`\n","source":"_posts/android/开发实战/个人开发/2016-05-11-android-qa.md","raw":"---\nauthor: ivyxjc\ndate: 2016-05-11\ntitle: android编程中的一些常见问题和解决办法\ncategory: Android\ntags: [android,java]\nkeywords:\ndescription: Android开发中常见的一些细节问题.\n---\n\n### 1.如何解决有些函数只能接受`String`而无法接受`Int`\n\n这样就无法使用`R.string...`.\n\n解决方法:<br>\n`getResources().getString(R.string.aaa))`\n","slug":"android/开发实战/个人开发/2016-05-11-android-qa","published":1,"updated":"2018-08-09T10:10:11.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbh008a28t1tmevvwkg","content":"<h3 id=\"1-如何解决有些函数只能接受String而无法接受Int\"><a href=\"#1-如何解决有些函数只能接受String而无法接受Int\" class=\"headerlink\" title=\"1.如何解决有些函数只能接受String而无法接受Int\"></a>1.如何解决有些函数只能接受<code>String</code>而无法接受<code>Int</code></h3><p>这样就无法使用<code>R.string...</code>.</p>\n<p>解决方法:<br><br><code>getResources().getString(R.string.aaa))</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-如何解决有些函数只能接受String而无法接受Int\"><a href=\"#1-如何解决有些函数只能接受String而无法接受Int\" class=\"headerlink\" title=\"1.如何解决有些函数只能接受String而无法接受Int\"></a>1.如何解决有些函数只能接受<code>String</code>而无法接受<code>Int</code></h3><p>这样就无法使用<code>R.string...</code>.</p>\n<p>解决方法:<br><br><code>getResources().getString(R.string.aaa))</code></p>\n"},{"author":"ivyxjc","date":"2016-07-06T16:00:00.000Z","title":"简易计算器开发","keywords":null,"description":"一个简易计算器的开发中遇到的EditText相关问题.","_content":"\n## edittext按回车时操作\n\n如果有多行，没一行有多个edittext时，按回车时，它会到下一行的edittext之中，而不是同一行的下一个editext。\n\n在xml文件中添加`imeOptions`。\n\n```xml\n<EditText\n        android:layout_width=\"0dp\"\n        android:layout_weight=\"1\"\n        android:layout_height=\"wrap_content\"\n        android:inputType=\"numberDecimal\"\n        android:id=\"@+id/editText3\"\n        android:imeOptions=\"actionNext\"/>\n```\n\n但是最后一行按回车回跳到下一行最后一个而不是下一行第一个。\n\n\n\n## listfragment自己编写listadapter中button监听问题\n\nlistfragment自己编写listadapter中button总是监听最后一个item中的数据。\n\n![](http://oezmbgg4j.bkt.clouddn.com/listview_button_click.gif)\n\n无论点击哪一个button都是计算最后一行。\n","source":"_posts/android/开发实战/个人开发/2016-07-07-calculator.md","raw":"---\nauthor: ivyxjc\ndate: 2016-07-07\ntitle: 简易计算器开发\ncategory: Android\ntags: [android,android_project]\nkeywords:\ndescription: 一个简易计算器的开发中遇到的EditText相关问题.\n---\n\n## edittext按回车时操作\n\n如果有多行，没一行有多个edittext时，按回车时，它会到下一行的edittext之中，而不是同一行的下一个editext。\n\n在xml文件中添加`imeOptions`。\n\n```xml\n<EditText\n        android:layout_width=\"0dp\"\n        android:layout_weight=\"1\"\n        android:layout_height=\"wrap_content\"\n        android:inputType=\"numberDecimal\"\n        android:id=\"@+id/editText3\"\n        android:imeOptions=\"actionNext\"/>\n```\n\n但是最后一行按回车回跳到下一行最后一个而不是下一行第一个。\n\n\n\n## listfragment自己编写listadapter中button监听问题\n\nlistfragment自己编写listadapter中button总是监听最后一个item中的数据。\n\n![](http://oezmbgg4j.bkt.clouddn.com/listview_button_click.gif)\n\n无论点击哪一个button都是计算最后一行。\n","slug":"android/开发实战/个人开发/2016-07-07-calculator","published":1,"updated":"2018-08-09T10:10:11.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbi008c28t11hjfnmn8","content":"<h2 id=\"edittext按回车时操作\"><a href=\"#edittext按回车时操作\" class=\"headerlink\" title=\"edittext按回车时操作\"></a>edittext按回车时操作</h2><p>如果有多行，没一行有多个edittext时，按回车时，它会到下一行的edittext之中，而不是同一行的下一个editext。</p>\n<p>在xml文件中添加<code>imeOptions</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"numberDecimal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/editText3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeOptions</span>=<span class=\"string\">\"actionNext\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是最后一行按回车回跳到下一行最后一个而不是下一行第一个。</p>\n<h2 id=\"listfragment自己编写listadapter中button监听问题\"><a href=\"#listfragment自己编写listadapter中button监听问题\" class=\"headerlink\" title=\"listfragment自己编写listadapter中button监听问题\"></a>listfragment自己编写listadapter中button监听问题</h2><p>listfragment自己编写listadapter中button总是监听最后一个item中的数据。</p>\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/listview_button_click.gif\" alt></p>\n<p>无论点击哪一个button都是计算最后一行。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"edittext按回车时操作\"><a href=\"#edittext按回车时操作\" class=\"headerlink\" title=\"edittext按回车时操作\"></a>edittext按回车时操作</h2><p>如果有多行，没一行有多个edittext时，按回车时，它会到下一行的edittext之中，而不是同一行的下一个editext。</p>\n<p>在xml文件中添加<code>imeOptions</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"numberDecimal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/editText3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeOptions</span>=<span class=\"string\">\"actionNext\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是最后一行按回车回跳到下一行最后一个而不是下一行第一个。</p>\n<h2 id=\"listfragment自己编写listadapter中button监听问题\"><a href=\"#listfragment自己编写listadapter中button监听问题\" class=\"headerlink\" title=\"listfragment自己编写listadapter中button监听问题\"></a>listfragment自己编写listadapter中button监听问题</h2><p>listfragment自己编写listadapter中button总是监听最后一个item中的数据。</p>\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/listview_button_click.gif\" alt></p>\n<p>无论点击哪一个button都是计算最后一行。</p>\n"},{"author":"ivyxjc","date":"2016-03-08T16:00:00.000Z","title":"ProgressBar和ProgressDialog","keywords":null,"description":"各种类型进度条的samples, 包括ProgressBar, ProgressDialog 以及如何自定义ProgressBar.","_content":"\n## 分类\n\n可以精确显示进度(可以显示刻度或者百分比)\n\n不可以精确显示进度()\n\n```java\n//显示两种进度条\nsetProgressBarVisibility(true);\nsetProgressBarIndeterminateVisibility(false);\n```\n\n还可分类为圆圈型，直线型。\n\n## ProgressBar属性\n\n```xml\nandroid:max=\"100\"\nandroid:progress=\"50\"----第一进度\nandroid:secondaryProgress=\"80\"---第二进度\nandroid:indeterminate=\"true\"---设置是否精确显示，true显示不精确显示进度，false表示精确显示进度\n```\n\n## 实例\n\n```java\nfirst=progressBar.getProgress();//获取第一进度条的进度\nsecond=progressBar.getSecondaryProgress();//获取第二进度条的进度\nmax=progressBar.getMax();//获取进度条的最大进度\nint firstPercent=(int)(first/(float)max*100);\nint seconPercent=(int)(second/(float)max*100);\ntext.setText(\"FirstProgress\"+firstPercent+\"%  SecondProgress\"+seconPercent+\"%\");\n\naddButton.setOnClickListener(this);\nreduceButton.setOnClickListener(this);\nresetButton.setOnClickListener(this);\n\npublic void onClick(View v) {\n    switch (v.getId()){\n        case R.id.add:{\n            first+=5;\n            second+=5;\n            break;\n        }\n        case R.id.reduce:{\n            first-=5;\n            second-=5;\n            break;\n        }\n        case R.id.reset:{\n            first=0;\n            second=10;\n            break;\n        }\n        default:{\n\n        }\n    }\n    //也可使用incrementProgress\n    progressBar.setProgress(first);\n    progressBar.setSecondaryProgress(second);\n    int firstPercent=(int)(first/(float)max*100);\n    int seconPercent=(int)(second/(float)max*100);\n    text.setText(\"FirstProgress\" + firstPercent + \"%  SecondProgress\" + seconPercent+\"%\");\n}\n```\n\n![](http://oezmbgg4j.bkt.clouddn.com/progressbar.gif)\n\n## ProgressDialog\n\n```xml\n<Button\n    android:id=\"@+id/showDialog\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Dialog\"/>\n```\n\n```java\ncase R.id.showDialog:{\n    //新建ProgressDialog的对象\n    prodialog=new ProgressDialog(MainActivity.this);\n    //设置显示风格\n    prodialog.setProgress(ProgressDialog.STYLE_HORIZONTAL);\n    //设置标题\n    prodialog.setTitle(\"IVYXJC\");\n    //设置对话框文本\n    prodialog.setMessage(\"Welcome to ProgressDialog\");\n    //设置图标\n    prodialog.setIcon(android.R.drawable.ic_dialog_alert);\n    //设定最大进度\n    prodialog.setMax(100);\n    //设定初始化已经增长到的进度\n    prodialog.incrementProgressBy(50);\n    //进度条是明确显示进度的\n    prodialog.setIndeterminate(false);\n\n    //设定一个确定按钮\n    prodialog.setButton(DialogInterface.BUTTON_POSITIVE,\"确定\",new DialogInterface.OnClickListener()\n    {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            Toast.makeText(MainActivity.this,\"欢迎\",Toast.LENGTH_SHORT).show();\n        }\n    });\n\n    prodialog.show();\n    //\n\n\n    break;\n}\n```\n\n![](http://oezmbgg4j.bkt.clouddn.com/progressdialog.gif)\n\n## 自定义ProgressBar的样式\n\nProgressBar的样式是可以自定义的，可参考默认的样式更改。\n","source":"_posts/android/控件/Bar/2016-03-09-ProgressBar.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-09\ntitle: ProgressBar和ProgressDialog\ncategory: Android\ntags: [android,android_bar]\nkeywords:\ndescription: 各种类型进度条的samples, 包括ProgressBar, ProgressDialog 以及如何自定义ProgressBar.\n---\n\n## 分类\n\n可以精确显示进度(可以显示刻度或者百分比)\n\n不可以精确显示进度()\n\n```java\n//显示两种进度条\nsetProgressBarVisibility(true);\nsetProgressBarIndeterminateVisibility(false);\n```\n\n还可分类为圆圈型，直线型。\n\n## ProgressBar属性\n\n```xml\nandroid:max=\"100\"\nandroid:progress=\"50\"----第一进度\nandroid:secondaryProgress=\"80\"---第二进度\nandroid:indeterminate=\"true\"---设置是否精确显示，true显示不精确显示进度，false表示精确显示进度\n```\n\n## 实例\n\n```java\nfirst=progressBar.getProgress();//获取第一进度条的进度\nsecond=progressBar.getSecondaryProgress();//获取第二进度条的进度\nmax=progressBar.getMax();//获取进度条的最大进度\nint firstPercent=(int)(first/(float)max*100);\nint seconPercent=(int)(second/(float)max*100);\ntext.setText(\"FirstProgress\"+firstPercent+\"%  SecondProgress\"+seconPercent+\"%\");\n\naddButton.setOnClickListener(this);\nreduceButton.setOnClickListener(this);\nresetButton.setOnClickListener(this);\n\npublic void onClick(View v) {\n    switch (v.getId()){\n        case R.id.add:{\n            first+=5;\n            second+=5;\n            break;\n        }\n        case R.id.reduce:{\n            first-=5;\n            second-=5;\n            break;\n        }\n        case R.id.reset:{\n            first=0;\n            second=10;\n            break;\n        }\n        default:{\n\n        }\n    }\n    //也可使用incrementProgress\n    progressBar.setProgress(first);\n    progressBar.setSecondaryProgress(second);\n    int firstPercent=(int)(first/(float)max*100);\n    int seconPercent=(int)(second/(float)max*100);\n    text.setText(\"FirstProgress\" + firstPercent + \"%  SecondProgress\" + seconPercent+\"%\");\n}\n```\n\n![](http://oezmbgg4j.bkt.clouddn.com/progressbar.gif)\n\n## ProgressDialog\n\n```xml\n<Button\n    android:id=\"@+id/showDialog\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Dialog\"/>\n```\n\n```java\ncase R.id.showDialog:{\n    //新建ProgressDialog的对象\n    prodialog=new ProgressDialog(MainActivity.this);\n    //设置显示风格\n    prodialog.setProgress(ProgressDialog.STYLE_HORIZONTAL);\n    //设置标题\n    prodialog.setTitle(\"IVYXJC\");\n    //设置对话框文本\n    prodialog.setMessage(\"Welcome to ProgressDialog\");\n    //设置图标\n    prodialog.setIcon(android.R.drawable.ic_dialog_alert);\n    //设定最大进度\n    prodialog.setMax(100);\n    //设定初始化已经增长到的进度\n    prodialog.incrementProgressBy(50);\n    //进度条是明确显示进度的\n    prodialog.setIndeterminate(false);\n\n    //设定一个确定按钮\n    prodialog.setButton(DialogInterface.BUTTON_POSITIVE,\"确定\",new DialogInterface.OnClickListener()\n    {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            Toast.makeText(MainActivity.this,\"欢迎\",Toast.LENGTH_SHORT).show();\n        }\n    });\n\n    prodialog.show();\n    //\n\n\n    break;\n}\n```\n\n![](http://oezmbgg4j.bkt.clouddn.com/progressdialog.gif)\n\n## 自定义ProgressBar的样式\n\nProgressBar的样式是可以自定义的，可参考默认的样式更改。\n","slug":"android/控件/Bar/2016-03-09-ProgressBar","published":1,"updated":"2018-08-09T10:10:11.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbj008e28t1xc13wc2p","content":"<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><p>可以精确显示进度(可以显示刻度或者百分比)</p>\n<p>不可以精确显示进度()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//显示两种进度条</span></span><br><span class=\"line\">setProgressBarVisibility(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">setProgressBarIndeterminateVisibility(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>还可分类为圆圈型，直线型。</p>\n<h2 id=\"ProgressBar属性\"><a href=\"#ProgressBar属性\" class=\"headerlink\" title=\"ProgressBar属性\"></a>ProgressBar属性</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:max=\"100\"</span><br><span class=\"line\">android:progress=\"50\"----第一进度</span><br><span class=\"line\">android:secondaryProgress=\"80\"---第二进度</span><br><span class=\"line\">android:indeterminate=\"true\"---设置是否精确显示，true显示不精确显示进度，false表示精确显示进度</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first=progressBar.getProgress();<span class=\"comment\">//获取第一进度条的进度</span></span><br><span class=\"line\">second=progressBar.getSecondaryProgress();<span class=\"comment\">//获取第二进度条的进度</span></span><br><span class=\"line\">max=progressBar.getMax();<span class=\"comment\">//获取进度条的最大进度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> firstPercent=(<span class=\"keyword\">int</span>)(first/(<span class=\"keyword\">float</span>)max*<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> seconPercent=(<span class=\"keyword\">int</span>)(second/(<span class=\"keyword\">float</span>)max*<span class=\"number\">100</span>);</span><br><span class=\"line\">text.setText(<span class=\"string\">\"FirstProgress\"</span>+firstPercent+<span class=\"string\">\"%  SecondProgress\"</span>+seconPercent+<span class=\"string\">\"%\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">addButton.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">reduceButton.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">resetButton.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (v.getId())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.add:&#123;</span><br><span class=\"line\">            first+=<span class=\"number\">5</span>;</span><br><span class=\"line\">            second+=<span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.reduce:&#123;</span><br><span class=\"line\">            first-=<span class=\"number\">5</span>;</span><br><span class=\"line\">            second-=<span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.reset:&#123;</span><br><span class=\"line\">            first=<span class=\"number\">0</span>;</span><br><span class=\"line\">            second=<span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//也可使用incrementProgress</span></span><br><span class=\"line\">    progressBar.setProgress(first);</span><br><span class=\"line\">    progressBar.setSecondaryProgress(second);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> firstPercent=(<span class=\"keyword\">int</span>)(first/(<span class=\"keyword\">float</span>)max*<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> seconPercent=(<span class=\"keyword\">int</span>)(second/(<span class=\"keyword\">float</span>)max*<span class=\"number\">100</span>);</span><br><span class=\"line\">    text.setText(<span class=\"string\">\"FirstProgress\"</span> + firstPercent + <span class=\"string\">\"%  SecondProgress\"</span> + seconPercent+<span class=\"string\">\"%\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/progressbar.gif\" alt></p>\n<h2 id=\"ProgressDialog\"><a href=\"#ProgressDialog\" class=\"headerlink\" title=\"ProgressDialog\"></a>ProgressDialog</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/showDialog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Dialog\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> R.id.showDialog:&#123;</span><br><span class=\"line\">    <span class=\"comment\">//新建ProgressDialog的对象</span></span><br><span class=\"line\">    prodialog=<span class=\"keyword\">new</span> ProgressDialog(MainActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置显示风格</span></span><br><span class=\"line\">    prodialog.setProgress(ProgressDialog.STYLE_HORIZONTAL);</span><br><span class=\"line\">    <span class=\"comment\">//设置标题</span></span><br><span class=\"line\">    prodialog.setTitle(<span class=\"string\">\"IVYXJC\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置对话框文本</span></span><br><span class=\"line\">    prodialog.setMessage(<span class=\"string\">\"Welcome to ProgressDialog\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置图标</span></span><br><span class=\"line\">    prodialog.setIcon(android.R.drawable.ic_dialog_alert);</span><br><span class=\"line\">    <span class=\"comment\">//设定最大进度</span></span><br><span class=\"line\">    prodialog.setMax(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设定初始化已经增长到的进度</span></span><br><span class=\"line\">    prodialog.incrementProgressBy(<span class=\"number\">50</span>);</span><br><span class=\"line\">    <span class=\"comment\">//进度条是明确显示进度的</span></span><br><span class=\"line\">    prodialog.setIndeterminate(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设定一个确定按钮</span></span><br><span class=\"line\">    prodialog.setButton(DialogInterface.BUTTON_POSITIVE,<span class=\"string\">\"确定\"</span>,<span class=\"keyword\">new</span> DialogInterface.OnClickListener()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">            Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,<span class=\"string\">\"欢迎\"</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    prodialog.show();</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/progressdialog.gif\" alt></p>\n<h2 id=\"自定义ProgressBar的样式\"><a href=\"#自定义ProgressBar的样式\" class=\"headerlink\" title=\"自定义ProgressBar的样式\"></a>自定义ProgressBar的样式</h2><p>ProgressBar的样式是可以自定义的，可参考默认的样式更改。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><p>可以精确显示进度(可以显示刻度或者百分比)</p>\n<p>不可以精确显示进度()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//显示两种进度条</span></span><br><span class=\"line\">setProgressBarVisibility(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">setProgressBarIndeterminateVisibility(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>还可分类为圆圈型，直线型。</p>\n<h2 id=\"ProgressBar属性\"><a href=\"#ProgressBar属性\" class=\"headerlink\" title=\"ProgressBar属性\"></a>ProgressBar属性</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:max=\"100\"</span><br><span class=\"line\">android:progress=\"50\"----第一进度</span><br><span class=\"line\">android:secondaryProgress=\"80\"---第二进度</span><br><span class=\"line\">android:indeterminate=\"true\"---设置是否精确显示，true显示不精确显示进度，false表示精确显示进度</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first=progressBar.getProgress();<span class=\"comment\">//获取第一进度条的进度</span></span><br><span class=\"line\">second=progressBar.getSecondaryProgress();<span class=\"comment\">//获取第二进度条的进度</span></span><br><span class=\"line\">max=progressBar.getMax();<span class=\"comment\">//获取进度条的最大进度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> firstPercent=(<span class=\"keyword\">int</span>)(first/(<span class=\"keyword\">float</span>)max*<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> seconPercent=(<span class=\"keyword\">int</span>)(second/(<span class=\"keyword\">float</span>)max*<span class=\"number\">100</span>);</span><br><span class=\"line\">text.setText(<span class=\"string\">\"FirstProgress\"</span>+firstPercent+<span class=\"string\">\"%  SecondProgress\"</span>+seconPercent+<span class=\"string\">\"%\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">addButton.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">reduceButton.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">resetButton.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (v.getId())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.add:&#123;</span><br><span class=\"line\">            first+=<span class=\"number\">5</span>;</span><br><span class=\"line\">            second+=<span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.reduce:&#123;</span><br><span class=\"line\">            first-=<span class=\"number\">5</span>;</span><br><span class=\"line\">            second-=<span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.reset:&#123;</span><br><span class=\"line\">            first=<span class=\"number\">0</span>;</span><br><span class=\"line\">            second=<span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//也可使用incrementProgress</span></span><br><span class=\"line\">    progressBar.setProgress(first);</span><br><span class=\"line\">    progressBar.setSecondaryProgress(second);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> firstPercent=(<span class=\"keyword\">int</span>)(first/(<span class=\"keyword\">float</span>)max*<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> seconPercent=(<span class=\"keyword\">int</span>)(second/(<span class=\"keyword\">float</span>)max*<span class=\"number\">100</span>);</span><br><span class=\"line\">    text.setText(<span class=\"string\">\"FirstProgress\"</span> + firstPercent + <span class=\"string\">\"%  SecondProgress\"</span> + seconPercent+<span class=\"string\">\"%\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/progressbar.gif\" alt></p>\n<h2 id=\"ProgressDialog\"><a href=\"#ProgressDialog\" class=\"headerlink\" title=\"ProgressDialog\"></a>ProgressDialog</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/showDialog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Dialog\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> R.id.showDialog:&#123;</span><br><span class=\"line\">    <span class=\"comment\">//新建ProgressDialog的对象</span></span><br><span class=\"line\">    prodialog=<span class=\"keyword\">new</span> ProgressDialog(MainActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置显示风格</span></span><br><span class=\"line\">    prodialog.setProgress(ProgressDialog.STYLE_HORIZONTAL);</span><br><span class=\"line\">    <span class=\"comment\">//设置标题</span></span><br><span class=\"line\">    prodialog.setTitle(<span class=\"string\">\"IVYXJC\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置对话框文本</span></span><br><span class=\"line\">    prodialog.setMessage(<span class=\"string\">\"Welcome to ProgressDialog\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置图标</span></span><br><span class=\"line\">    prodialog.setIcon(android.R.drawable.ic_dialog_alert);</span><br><span class=\"line\">    <span class=\"comment\">//设定最大进度</span></span><br><span class=\"line\">    prodialog.setMax(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设定初始化已经增长到的进度</span></span><br><span class=\"line\">    prodialog.incrementProgressBy(<span class=\"number\">50</span>);</span><br><span class=\"line\">    <span class=\"comment\">//进度条是明确显示进度的</span></span><br><span class=\"line\">    prodialog.setIndeterminate(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设定一个确定按钮</span></span><br><span class=\"line\">    prodialog.setButton(DialogInterface.BUTTON_POSITIVE,<span class=\"string\">\"确定\"</span>,<span class=\"keyword\">new</span> DialogInterface.OnClickListener()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">            Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,<span class=\"string\">\"欢迎\"</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    prodialog.show();</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/progressdialog.gif\" alt></p>\n<h2 id=\"自定义ProgressBar的样式\"><a href=\"#自定义ProgressBar的样式\" class=\"headerlink\" title=\"自定义ProgressBar的样式\"></a>自定义ProgressBar的样式</h2><p>ProgressBar的样式是可以自定义的，可参考默认的样式更改。</p>\n"},{"author":"ivyxjc","date":"2016-03-24T16:00:00.000Z","title":"AlertDialog","keywords":null,"description":null,"_content":"\n\n## 在Activity中调用AlertDialog\n\n只能在`Activity`中调用`AlertDialog`，所以要想在`Receiver`中使用`AlerDialog`，可以在`Receiver`中用`starActivity()`启动有`AlertDialog`的`Activity`。\n\n\n```java\n@Override\npublic void onReceive(final Context context, Intent intent) {\n    Intent i=new Intent(context,AlertDialogActivity.class);\n    i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);;\n    context.startActivity(i);\n}\n```\n\n```java\npublic class AlertDialogActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(this);\n        dialogBuilder.setTitle(\"Warning\");\n\n        dialogBuilder.setMessage(\"you are force to be offline\");\n        dialogBuilder.setCancelable(false);\n        dialogBuilder.setPositiveButton(\"OK\",\n                new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        ActivityCollector.finishAll();\n                        Intent intent = new Intent(AlertDialogActivity.this,LoginActivity.class);\n                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                        startActivity(intent);//重新启动LoginActivity\n\n                    }\n                });\n        AlertDialog alertDialog=dialogBuilder.create();\n\n        alertDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n        alertDialog.show();\n    }\n}\n```\n","source":"_posts/android/控件/AlertDialog/2016-03-25-Alert-Dialog.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-25\ntitle: AlertDialog\ncategory: Android\ntags: [android,android_control]\nkeywords:\ndescription:\n---\n\n\n## 在Activity中调用AlertDialog\n\n只能在`Activity`中调用`AlertDialog`，所以要想在`Receiver`中使用`AlerDialog`，可以在`Receiver`中用`starActivity()`启动有`AlertDialog`的`Activity`。\n\n\n```java\n@Override\npublic void onReceive(final Context context, Intent intent) {\n    Intent i=new Intent(context,AlertDialogActivity.class);\n    i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);;\n    context.startActivity(i);\n}\n```\n\n```java\npublic class AlertDialogActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(this);\n        dialogBuilder.setTitle(\"Warning\");\n\n        dialogBuilder.setMessage(\"you are force to be offline\");\n        dialogBuilder.setCancelable(false);\n        dialogBuilder.setPositiveButton(\"OK\",\n                new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        ActivityCollector.finishAll();\n                        Intent intent = new Intent(AlertDialogActivity.this,LoginActivity.class);\n                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                        startActivity(intent);//重新启动LoginActivity\n\n                    }\n                });\n        AlertDialog alertDialog=dialogBuilder.create();\n\n        alertDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n        alertDialog.show();\n    }\n}\n```\n","slug":"android/控件/AlertDialog/2016-03-25-Alert-Dialog","published":1,"updated":"2018-08-09T10:10:11.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbk008g28t1ynu9400n","content":"<h2 id=\"在Activity中调用AlertDialog\"><a href=\"#在Activity中调用AlertDialog\" class=\"headerlink\" title=\"在Activity中调用AlertDialog\"></a>在Activity中调用AlertDialog</h2><p>只能在<code>Activity</code>中调用<code>AlertDialog</code>，所以要想在<code>Receiver</code>中使用<code>AlerDialog</code>，可以在<code>Receiver</code>中用<code>starActivity()</code>启动有<code>AlertDialog</code>的<code>Activity</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    Intent i=<span class=\"keyword\">new</span> Intent(context,AlertDialogActivity.class);</span><br><span class=\"line\">    i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);;</span><br><span class=\"line\">    context.startActivity(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlertDialogActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        AlertDialog.Builder dialogBuilder=<span class=\"keyword\">new</span> AlertDialog.Builder(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        dialogBuilder.setTitle(<span class=\"string\">\"Warning\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        dialogBuilder.setMessage(<span class=\"string\">\"you are force to be offline\"</span>);</span><br><span class=\"line\">        dialogBuilder.setCancelable(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        dialogBuilder.setPositiveButton(<span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                        ActivityCollector.finishAll();</span><br><span class=\"line\">                        Intent intent = <span class=\"keyword\">new</span> Intent(AlertDialogActivity.<span class=\"keyword\">this</span>,LoginActivity.class);</span><br><span class=\"line\">                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">                        startActivity(intent);<span class=\"comment\">//重新启动LoginActivity</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        AlertDialog alertDialog=dialogBuilder.create();</span><br><span class=\"line\"></span><br><span class=\"line\">        alertDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);</span><br><span class=\"line\">        alertDialog.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在Activity中调用AlertDialog\"><a href=\"#在Activity中调用AlertDialog\" class=\"headerlink\" title=\"在Activity中调用AlertDialog\"></a>在Activity中调用AlertDialog</h2><p>只能在<code>Activity</code>中调用<code>AlertDialog</code>，所以要想在<code>Receiver</code>中使用<code>AlerDialog</code>，可以在<code>Receiver</code>中用<code>starActivity()</code>启动有<code>AlertDialog</code>的<code>Activity</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    Intent i=<span class=\"keyword\">new</span> Intent(context,AlertDialogActivity.class);</span><br><span class=\"line\">    i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);;</span><br><span class=\"line\">    context.startActivity(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlertDialogActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        AlertDialog.Builder dialogBuilder=<span class=\"keyword\">new</span> AlertDialog.Builder(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        dialogBuilder.setTitle(<span class=\"string\">\"Warning\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        dialogBuilder.setMessage(<span class=\"string\">\"you are force to be offline\"</span>);</span><br><span class=\"line\">        dialogBuilder.setCancelable(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        dialogBuilder.setPositiveButton(<span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                        ActivityCollector.finishAll();</span><br><span class=\"line\">                        Intent intent = <span class=\"keyword\">new</span> Intent(AlertDialogActivity.<span class=\"keyword\">this</span>,LoginActivity.class);</span><br><span class=\"line\">                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">                        startActivity(intent);<span class=\"comment\">//重新启动LoginActivity</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        AlertDialog alertDialog=dialogBuilder.create();</span><br><span class=\"line\"></span><br><span class=\"line\">        alertDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);</span><br><span class=\"line\">        alertDialog.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-03-25T16:00:00.000Z","title":"Notification初步","keywords":null,"description":"如何设置Notificaton","_content":"\n## 通知\n\n```java\nMainActivity.java\n\nNotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);\n\nNotification.Builder builder=new Notification.Builder(this);\n\n//设置点击通知进入NotificationActivity\nIntent intent=new Intent(this,NotificationActivity.class);\n\n//第二个参数int requestCode相同，表示是同一个pendingIntent\nPendingIntent pi=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_CANCEL_CURRENT);\n\n//设置通知栏 布局，内容等...\nbuilder.setSmallIcon(R.mipmap.ic_launcher);\nbuilder.setContentTitle(\"Notification Title\");\nbuilder.setContentText(\"Notification text\");\nbuilder.setContentIntent(pi);\n\n//第一个参数在应用中是唯一的，代表这个通知\nnotificationManager.notify(11, builder.build());\n```\n\n1. FLAG_CANCEL_CURRENT:如果当前系统中已经存在一个相同的PendingIntent对象，那么就将先将已有的PendingIntent取消，然后重新生成一个PendingIntent对象。\n2. FLAG_NO_CREATE:如果当前系统中不存在相同的PendingIntent对象，系统将不会创建该PendingIntent对象而是直接返回null。\n3. FLAG_ONE_SHOT:该PendingIntent只作用一次。在该PendingIntent对象通过send()方法触发过后，PendingIntent将自动调用cancel()进行销毁，那么如果你再调用send()方法的话，系统将会返回一个SendIntentException。\n4. FLAG_UPDATE_CURRENT:如果系统中有一个和你描述的PendingIntent对等的PendingInent，那么系统将使用该PendingIntent对象，但是会使用新的Intent来更新之前PendingIntent中的Intent对象数据，例如更新Intent中的Extras。\n\n\n```java\nNotificationActivity.java\n\nNotificationManager manager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);\n\n//使通知在通知栏消失\nmanager.cancel(11);\n```\n\n```java\n//设置声音\nUri soundUri=Uri.fromFile(new File(\"/system/media/audio/ringtones/Boxbeat.ogg\"));\nbuilder.setSound(soundUri);\n\n//设置震动上\n//下标为偶数和0的标识手机静止的时长，奇数标识手机震动的时长\nlong [] vibrates={0,1000,1000,1000,1000,1000};\nbuilder.setVibrate(vibrates);\n```\n\n### 效果  \n\n![](/assets/img/posts/notification.gif)\n\n\n\n## 短信\n\n### 接收短信\n\n```java\nmReceiveFilter=new IntentFilter();\nmReceiveFilter.addAction(\"android.provider.Telephony.SMS_RECEIVED\");\nmMessageReceiver=new MessageReceiver();\nregisterReceiver(mMessageReceiver,mReceiveFilter);\n\nclass MessageReceiver extends BroadcastReceiver{\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Bundle bundle=intent.getExtras();\n\n            Object[] pdus=(Object[])bundle.get(\"pdus\");//提取短信消息\n\n            SmsMessage[] messages=new SmsMessage[pdus.length];\n\n            for(int i=0;i<messages.length;i++){\n                messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);\n            }\n\n            String address=messages[0].getOriginatingAddress();\n\n            String fullMessage=\"\";\n            for(SmsMessage message:messages){\n                fullMessage+=message.getMessageBody();//获取短信内容\n            }\n            sender.setText(address);\n            content.setText(fullMessage);\n        }\n    }\n\n```\n\n### 拦截短信\n系统发出的短信广播是一条有序广播，所以可以先获得该广播，再中止广播传递即可。\n\n1.提高MessageReceiver的优先级，让它能够先于系统短信程序接收到短信广播。\n2.调用`abortBroadcast()`方法，中止广播传递。\n\n### 发送短信\n\n```java\nmSendButton.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            Log.i(\"AAABBB\", \"before\");\n            SmsManager smsManager = SmsManager.getDefault();\n            Log.i(\"AAABBB\", \"getDefault\");\n            smsManager.sendTextMessage(mTo.getText().toString(), null, mEditText.toString(), null, null);\n        }\n    });\n```\n","source":"_posts/android/控件/Notification/2016-03-26-Notification-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-26\ntitle: Notification初步\ncategory: Android\ntags: [android]\nkeywords:\ndescription: 如何设置Notificaton\n---\n\n## 通知\n\n```java\nMainActivity.java\n\nNotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);\n\nNotification.Builder builder=new Notification.Builder(this);\n\n//设置点击通知进入NotificationActivity\nIntent intent=new Intent(this,NotificationActivity.class);\n\n//第二个参数int requestCode相同，表示是同一个pendingIntent\nPendingIntent pi=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_CANCEL_CURRENT);\n\n//设置通知栏 布局，内容等...\nbuilder.setSmallIcon(R.mipmap.ic_launcher);\nbuilder.setContentTitle(\"Notification Title\");\nbuilder.setContentText(\"Notification text\");\nbuilder.setContentIntent(pi);\n\n//第一个参数在应用中是唯一的，代表这个通知\nnotificationManager.notify(11, builder.build());\n```\n\n1. FLAG_CANCEL_CURRENT:如果当前系统中已经存在一个相同的PendingIntent对象，那么就将先将已有的PendingIntent取消，然后重新生成一个PendingIntent对象。\n2. FLAG_NO_CREATE:如果当前系统中不存在相同的PendingIntent对象，系统将不会创建该PendingIntent对象而是直接返回null。\n3. FLAG_ONE_SHOT:该PendingIntent只作用一次。在该PendingIntent对象通过send()方法触发过后，PendingIntent将自动调用cancel()进行销毁，那么如果你再调用send()方法的话，系统将会返回一个SendIntentException。\n4. FLAG_UPDATE_CURRENT:如果系统中有一个和你描述的PendingIntent对等的PendingInent，那么系统将使用该PendingIntent对象，但是会使用新的Intent来更新之前PendingIntent中的Intent对象数据，例如更新Intent中的Extras。\n\n\n```java\nNotificationActivity.java\n\nNotificationManager manager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);\n\n//使通知在通知栏消失\nmanager.cancel(11);\n```\n\n```java\n//设置声音\nUri soundUri=Uri.fromFile(new File(\"/system/media/audio/ringtones/Boxbeat.ogg\"));\nbuilder.setSound(soundUri);\n\n//设置震动上\n//下标为偶数和0的标识手机静止的时长，奇数标识手机震动的时长\nlong [] vibrates={0,1000,1000,1000,1000,1000};\nbuilder.setVibrate(vibrates);\n```\n\n### 效果  \n\n![](/assets/img/posts/notification.gif)\n\n\n\n## 短信\n\n### 接收短信\n\n```java\nmReceiveFilter=new IntentFilter();\nmReceiveFilter.addAction(\"android.provider.Telephony.SMS_RECEIVED\");\nmMessageReceiver=new MessageReceiver();\nregisterReceiver(mMessageReceiver,mReceiveFilter);\n\nclass MessageReceiver extends BroadcastReceiver{\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Bundle bundle=intent.getExtras();\n\n            Object[] pdus=(Object[])bundle.get(\"pdus\");//提取短信消息\n\n            SmsMessage[] messages=new SmsMessage[pdus.length];\n\n            for(int i=0;i<messages.length;i++){\n                messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);\n            }\n\n            String address=messages[0].getOriginatingAddress();\n\n            String fullMessage=\"\";\n            for(SmsMessage message:messages){\n                fullMessage+=message.getMessageBody();//获取短信内容\n            }\n            sender.setText(address);\n            content.setText(fullMessage);\n        }\n    }\n\n```\n\n### 拦截短信\n系统发出的短信广播是一条有序广播，所以可以先获得该广播，再中止广播传递即可。\n\n1.提高MessageReceiver的优先级，让它能够先于系统短信程序接收到短信广播。\n2.调用`abortBroadcast()`方法，中止广播传递。\n\n### 发送短信\n\n```java\nmSendButton.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            Log.i(\"AAABBB\", \"before\");\n            SmsManager smsManager = SmsManager.getDefault();\n            Log.i(\"AAABBB\", \"getDefault\");\n            smsManager.sendTextMessage(mTo.getText().toString(), null, mEditText.toString(), null, null);\n        }\n    });\n```\n","slug":"android/控件/Notification/2016-03-26-Notification-basic","published":1,"updated":"2018-08-09T10:10:11.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbl008i28t1ur5todb2","content":"<h2 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainActivity.java</span><br><span class=\"line\"></span><br><span class=\"line\">NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\">Notification.Builder builder=<span class=\"keyword\">new</span> Notification.Builder(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置点击通知进入NotificationActivity</span></span><br><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,NotificationActivity.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二个参数int requestCode相同，表示是同一个pendingIntent</span></span><br><span class=\"line\">PendingIntent pi=PendingIntent.getActivity(<span class=\"keyword\">this</span>,<span class=\"number\">0</span>,intent,PendingIntent.FLAG_CANCEL_CURRENT);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置通知栏 布局，内容等...</span></span><br><span class=\"line\">builder.setSmallIcon(R.mipmap.ic_launcher);</span><br><span class=\"line\">builder.setContentTitle(<span class=\"string\">\"Notification Title\"</span>);</span><br><span class=\"line\">builder.setContentText(<span class=\"string\">\"Notification text\"</span>);</span><br><span class=\"line\">builder.setContentIntent(pi);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一个参数在应用中是唯一的，代表这个通知</span></span><br><span class=\"line\">notificationManager.notify(<span class=\"number\">11</span>, builder.build());</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>FLAG_CANCEL_CURRENT:如果当前系统中已经存在一个相同的PendingIntent对象，那么就将先将已有的PendingIntent取消，然后重新生成一个PendingIntent对象。</li>\n<li>FLAG_NO_CREATE:如果当前系统中不存在相同的PendingIntent对象，系统将不会创建该PendingIntent对象而是直接返回null。</li>\n<li>FLAG_ONE_SHOT:该PendingIntent只作用一次。在该PendingIntent对象通过send()方法触发过后，PendingIntent将自动调用cancel()进行销毁，那么如果你再调用send()方法的话，系统将会返回一个SendIntentException。</li>\n<li>FLAG_UPDATE_CURRENT:如果系统中有一个和你描述的PendingIntent对等的PendingInent，那么系统将使用该PendingIntent对象，但是会使用新的Intent来更新之前PendingIntent中的Intent对象数据，例如更新Intent中的Extras。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NotificationActivity.java</span><br><span class=\"line\"></span><br><span class=\"line\">NotificationManager manager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使通知在通知栏消失</span></span><br><span class=\"line\">manager.cancel(<span class=\"number\">11</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置声音</span></span><br><span class=\"line\">Uri soundUri=Uri.fromFile(<span class=\"keyword\">new</span> File(<span class=\"string\">\"/system/media/audio/ringtones/Boxbeat.ogg\"</span>));</span><br><span class=\"line\">builder.setSound(soundUri);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置震动上</span></span><br><span class=\"line\"><span class=\"comment\">//下标为偶数和0的标识手机静止的时长，奇数标识手机震动的时长</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> [] vibrates=&#123;<span class=\"number\">0</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>&#125;;</span><br><span class=\"line\">builder.setVibrate(vibrates);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"/assets/img/posts/notification.gif\" alt></p>\n<h2 id=\"短信\"><a href=\"#短信\" class=\"headerlink\" title=\"短信\"></a>短信</h2><h3 id=\"接收短信\"><a href=\"#接收短信\" class=\"headerlink\" title=\"接收短信\"></a>接收短信</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mReceiveFilter=<span class=\"keyword\">new</span> IntentFilter();</span><br><span class=\"line\">mReceiveFilter.addAction(<span class=\"string\">\"android.provider.Telephony.SMS_RECEIVED\"</span>);</span><br><span class=\"line\">mMessageReceiver=<span class=\"keyword\">new</span> MessageReceiver();</span><br><span class=\"line\">registerReceiver(mMessageReceiver,mReceiveFilter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">            Bundle bundle=intent.getExtras();</span><br><span class=\"line\"></span><br><span class=\"line\">            Object[] pdus=(Object[])bundle.get(<span class=\"string\">\"pdus\"</span>);<span class=\"comment\">//提取短信消息</span></span><br><span class=\"line\"></span><br><span class=\"line\">            SmsMessage[] messages=<span class=\"keyword\">new</span> SmsMessage[pdus.length];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;messages.length;i++)&#123;</span><br><span class=\"line\">                messages[i]=SmsMessage.createFromPdu((<span class=\"keyword\">byte</span>[])pdus[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String address=messages[<span class=\"number\">0</span>].getOriginatingAddress();</span><br><span class=\"line\"></span><br><span class=\"line\">            String fullMessage=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(SmsMessage message:messages)&#123;</span><br><span class=\"line\">                fullMessage+=message.getMessageBody();<span class=\"comment\">//获取短信内容</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sender.setText(address);</span><br><span class=\"line\">            content.setText(fullMessage);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拦截短信\"><a href=\"#拦截短信\" class=\"headerlink\" title=\"拦截短信\"></a>拦截短信</h3><p>系统发出的短信广播是一条有序广播，所以可以先获得该广播，再中止广播传递即可。</p>\n<p>1.提高MessageReceiver的优先级，让它能够先于系统短信程序接收到短信广播。<br>2.调用<code>abortBroadcast()</code>方法，中止广播传递。</p>\n<h3 id=\"发送短信\"><a href=\"#发送短信\" class=\"headerlink\" title=\"发送短信\"></a>发送短信</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mSendButton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            Log.i(<span class=\"string\">\"AAABBB\"</span>, <span class=\"string\">\"before\"</span>);</span><br><span class=\"line\">            SmsManager smsManager = SmsManager.getDefault();</span><br><span class=\"line\">            Log.i(<span class=\"string\">\"AAABBB\"</span>, <span class=\"string\">\"getDefault\"</span>);</span><br><span class=\"line\">            smsManager.sendTextMessage(mTo.getText().toString(), <span class=\"keyword\">null</span>, mEditText.toString(), <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainActivity.java</span><br><span class=\"line\"></span><br><span class=\"line\">NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\">Notification.Builder builder=<span class=\"keyword\">new</span> Notification.Builder(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置点击通知进入NotificationActivity</span></span><br><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,NotificationActivity.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二个参数int requestCode相同，表示是同一个pendingIntent</span></span><br><span class=\"line\">PendingIntent pi=PendingIntent.getActivity(<span class=\"keyword\">this</span>,<span class=\"number\">0</span>,intent,PendingIntent.FLAG_CANCEL_CURRENT);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置通知栏 布局，内容等...</span></span><br><span class=\"line\">builder.setSmallIcon(R.mipmap.ic_launcher);</span><br><span class=\"line\">builder.setContentTitle(<span class=\"string\">\"Notification Title\"</span>);</span><br><span class=\"line\">builder.setContentText(<span class=\"string\">\"Notification text\"</span>);</span><br><span class=\"line\">builder.setContentIntent(pi);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一个参数在应用中是唯一的，代表这个通知</span></span><br><span class=\"line\">notificationManager.notify(<span class=\"number\">11</span>, builder.build());</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>FLAG_CANCEL_CURRENT:如果当前系统中已经存在一个相同的PendingIntent对象，那么就将先将已有的PendingIntent取消，然后重新生成一个PendingIntent对象。</li>\n<li>FLAG_NO_CREATE:如果当前系统中不存在相同的PendingIntent对象，系统将不会创建该PendingIntent对象而是直接返回null。</li>\n<li>FLAG_ONE_SHOT:该PendingIntent只作用一次。在该PendingIntent对象通过send()方法触发过后，PendingIntent将自动调用cancel()进行销毁，那么如果你再调用send()方法的话，系统将会返回一个SendIntentException。</li>\n<li>FLAG_UPDATE_CURRENT:如果系统中有一个和你描述的PendingIntent对等的PendingInent，那么系统将使用该PendingIntent对象，但是会使用新的Intent来更新之前PendingIntent中的Intent对象数据，例如更新Intent中的Extras。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NotificationActivity.java</span><br><span class=\"line\"></span><br><span class=\"line\">NotificationManager manager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使通知在通知栏消失</span></span><br><span class=\"line\">manager.cancel(<span class=\"number\">11</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置声音</span></span><br><span class=\"line\">Uri soundUri=Uri.fromFile(<span class=\"keyword\">new</span> File(<span class=\"string\">\"/system/media/audio/ringtones/Boxbeat.ogg\"</span>));</span><br><span class=\"line\">builder.setSound(soundUri);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置震动上</span></span><br><span class=\"line\"><span class=\"comment\">//下标为偶数和0的标识手机静止的时长，奇数标识手机震动的时长</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> [] vibrates=&#123;<span class=\"number\">0</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>&#125;;</span><br><span class=\"line\">builder.setVibrate(vibrates);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"/assets/img/posts/notification.gif\" alt></p>\n<h2 id=\"短信\"><a href=\"#短信\" class=\"headerlink\" title=\"短信\"></a>短信</h2><h3 id=\"接收短信\"><a href=\"#接收短信\" class=\"headerlink\" title=\"接收短信\"></a>接收短信</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mReceiveFilter=<span class=\"keyword\">new</span> IntentFilter();</span><br><span class=\"line\">mReceiveFilter.addAction(<span class=\"string\">\"android.provider.Telephony.SMS_RECEIVED\"</span>);</span><br><span class=\"line\">mMessageReceiver=<span class=\"keyword\">new</span> MessageReceiver();</span><br><span class=\"line\">registerReceiver(mMessageReceiver,mReceiveFilter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">            Bundle bundle=intent.getExtras();</span><br><span class=\"line\"></span><br><span class=\"line\">            Object[] pdus=(Object[])bundle.get(<span class=\"string\">\"pdus\"</span>);<span class=\"comment\">//提取短信消息</span></span><br><span class=\"line\"></span><br><span class=\"line\">            SmsMessage[] messages=<span class=\"keyword\">new</span> SmsMessage[pdus.length];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;messages.length;i++)&#123;</span><br><span class=\"line\">                messages[i]=SmsMessage.createFromPdu((<span class=\"keyword\">byte</span>[])pdus[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String address=messages[<span class=\"number\">0</span>].getOriginatingAddress();</span><br><span class=\"line\"></span><br><span class=\"line\">            String fullMessage=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(SmsMessage message:messages)&#123;</span><br><span class=\"line\">                fullMessage+=message.getMessageBody();<span class=\"comment\">//获取短信内容</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sender.setText(address);</span><br><span class=\"line\">            content.setText(fullMessage);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拦截短信\"><a href=\"#拦截短信\" class=\"headerlink\" title=\"拦截短信\"></a>拦截短信</h3><p>系统发出的短信广播是一条有序广播，所以可以先获得该广播，再中止广播传递即可。</p>\n<p>1.提高MessageReceiver的优先级，让它能够先于系统短信程序接收到短信广播。<br>2.调用<code>abortBroadcast()</code>方法，中止广播传递。</p>\n<h3 id=\"发送短信\"><a href=\"#发送短信\" class=\"headerlink\" title=\"发送短信\"></a>发送短信</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mSendButton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            Log.i(<span class=\"string\">\"AAABBB\"</span>, <span class=\"string\">\"before\"</span>);</span><br><span class=\"line\">            SmsManager smsManager = SmsManager.getDefault();</span><br><span class=\"line\">            Log.i(<span class=\"string\">\"AAABBB\"</span>, <span class=\"string\">\"getDefault\"</span>);</span><br><span class=\"line\">            smsManager.sendTextMessage(mTo.getText().toString(), <span class=\"keyword\">null</span>, mEditText.toString(), <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-10-29T16:00:00.000Z","title":"爬取豆瓣","keywords":null,"description":"获取豆瓣的内容并下载至本地, 并将其中有关内容解析至mysql数据库中","_content":"\n\n断断续续谢了一个多星期, 基本上完成了豆瓣的爬虫的编写.\n\n最初还是没有准备使用框架写, 还是准备利用`requests`获取网页内容然后分析, 后来觉得这么写有点浪费时间, 而且`requests`是阻塞的, 不便于写多线程的. 另一方面, python爬虫框架Scrapy大名鼎鼎, 不学习一下有点亏, 就决定使用Scrapy来写这个爬虫.\n\n\n## Scrapy\n\n利用Scrapy来写爬虫还是比较方便简单的, 主要的代码都在`douban_spider`中, 后续处理的代码在`pipeline`中, `setting`中还可以设置爬取速率, 是否遵循robot.txt, middleware等内容.\n\n## 获取的豆瓣信息\n\n```python\n{'casts': {'1004780': '雷诺·维尔森',\n           '1017898': '约翰·古德曼',\n           '1018140': '马克·瑞安',\n           '1025212': '彼特·库伦',\n           '1025213': '托马斯·列农',\n           '1027181': '渡边谦',\n           '1031825': '弗兰克·维尔克',\n           '1031847': '凯尔希·格兰莫',\n           '1031869': '索非亚·迈尔斯',\n           '1035674': '马克·沃尔伯格',\n           '1037706': '吕良伟',\n           '1040517': '斯坦利·图齐',\n           '1040990': '李冰冰',\n           '1041214': '罗伯特·福克沃斯',\n           '1049627': '约翰·迪·玛吉欧',\n           '1162139': '王敏德 ',\n           '1165630': '提图斯·维里沃',\n           '1248294': 'T·J·米勒',\n           '1274253': '妮可拉·佩尔茨',\n           '1275106': '纪培慧',\n           '1275667': '韩庚',\n           '1312271': '巫刚',\n           '1326135': '杰克·莱诺',\n           '1340189': '阿比盖尔·克莱恩',\n           '1340928': '邹市明'},\n 'directors': {'1027776': '迈克尔·贝'},\n 'writers': {'1027468': '伊伦·克鲁格'}\n\n #----------\n 'rating_better_than': {'动作片': '46', '科幻片': '44'},\n 'release_date': {'美国/中国大陆': '2014-06-27', '香港首映': '2014-06-19'},\n #----------\n\n 'movie_aka': ['变形金刚：歼灭世纪(港)', '变形金刚4：灭绝时代', '变形金刚4', '变4', 'Transformers4'],\n  'movie_tags': ['变形金刚', '科幻', '美国', '动作', '2014', '美国电影', 'Transformers', '电影'],\n 'movie_country': ['美国', '中国大陆'],\n 'movie_genre': ['动作', '科幻'],\n  'movie_language': [ '英语','汉语普通话', '粤语'],\n  'movie_similar': ['3610047',\n                    '6082518',\n                    '10741834',\n                    '2063914',\n                    '3718424',\n                    '3231742',\n                    '6390823',\n                    '24404677',\n                    '6560058',\n                    '3217149'],\n #----------          \n\n 'movie_id': '7054604',\n 'movie_imdb_id': 'tt2109248',\n\n 'movie_length': '166',\n 'movie_name': '变形金刚4：绝迹重生 Transformers: Age of Extinction',\n 'movie_rating': '6.6',\n 'movie_rating_distribute': ['11.0', '28.4', '43.5', '13.1', '4.1'],\n 'movie_rating_people_num': '178399',\n\n }\n```\n\n以变形金刚四为例, 数据根据格式主要分成四类:\n1. 导演, 编剧, 演员\n2. 数据格式为map的数据\n3. 数据格式为list的数据\n4. 数据格式为str的数据\n","source":"_posts/python/Spider/douban/2016-10-30-douban-spider.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-30\ntitle: 爬取豆瓣\ncategory: Python\ntags: [python,spider,xml]\nkeywords:\ndescription: 获取豆瓣的内容并下载至本地, 并将其中有关内容解析至mysql数据库中\n---\n\n\n断断续续谢了一个多星期, 基本上完成了豆瓣的爬虫的编写.\n\n最初还是没有准备使用框架写, 还是准备利用`requests`获取网页内容然后分析, 后来觉得这么写有点浪费时间, 而且`requests`是阻塞的, 不便于写多线程的. 另一方面, python爬虫框架Scrapy大名鼎鼎, 不学习一下有点亏, 就决定使用Scrapy来写这个爬虫.\n\n\n## Scrapy\n\n利用Scrapy来写爬虫还是比较方便简单的, 主要的代码都在`douban_spider`中, 后续处理的代码在`pipeline`中, `setting`中还可以设置爬取速率, 是否遵循robot.txt, middleware等内容.\n\n## 获取的豆瓣信息\n\n```python\n{'casts': {'1004780': '雷诺·维尔森',\n           '1017898': '约翰·古德曼',\n           '1018140': '马克·瑞安',\n           '1025212': '彼特·库伦',\n           '1025213': '托马斯·列农',\n           '1027181': '渡边谦',\n           '1031825': '弗兰克·维尔克',\n           '1031847': '凯尔希·格兰莫',\n           '1031869': '索非亚·迈尔斯',\n           '1035674': '马克·沃尔伯格',\n           '1037706': '吕良伟',\n           '1040517': '斯坦利·图齐',\n           '1040990': '李冰冰',\n           '1041214': '罗伯特·福克沃斯',\n           '1049627': '约翰·迪·玛吉欧',\n           '1162139': '王敏德 ',\n           '1165630': '提图斯·维里沃',\n           '1248294': 'T·J·米勒',\n           '1274253': '妮可拉·佩尔茨',\n           '1275106': '纪培慧',\n           '1275667': '韩庚',\n           '1312271': '巫刚',\n           '1326135': '杰克·莱诺',\n           '1340189': '阿比盖尔·克莱恩',\n           '1340928': '邹市明'},\n 'directors': {'1027776': '迈克尔·贝'},\n 'writers': {'1027468': '伊伦·克鲁格'}\n\n #----------\n 'rating_better_than': {'动作片': '46', '科幻片': '44'},\n 'release_date': {'美国/中国大陆': '2014-06-27', '香港首映': '2014-06-19'},\n #----------\n\n 'movie_aka': ['变形金刚：歼灭世纪(港)', '变形金刚4：灭绝时代', '变形金刚4', '变4', 'Transformers4'],\n  'movie_tags': ['变形金刚', '科幻', '美国', '动作', '2014', '美国电影', 'Transformers', '电影'],\n 'movie_country': ['美国', '中国大陆'],\n 'movie_genre': ['动作', '科幻'],\n  'movie_language': [ '英语','汉语普通话', '粤语'],\n  'movie_similar': ['3610047',\n                    '6082518',\n                    '10741834',\n                    '2063914',\n                    '3718424',\n                    '3231742',\n                    '6390823',\n                    '24404677',\n                    '6560058',\n                    '3217149'],\n #----------          \n\n 'movie_id': '7054604',\n 'movie_imdb_id': 'tt2109248',\n\n 'movie_length': '166',\n 'movie_name': '变形金刚4：绝迹重生 Transformers: Age of Extinction',\n 'movie_rating': '6.6',\n 'movie_rating_distribute': ['11.0', '28.4', '43.5', '13.1', '4.1'],\n 'movie_rating_people_num': '178399',\n\n }\n```\n\n以变形金刚四为例, 数据根据格式主要分成四类:\n1. 导演, 编剧, 演员\n2. 数据格式为map的数据\n3. 数据格式为list的数据\n4. 数据格式为str的数据\n","slug":"python/Spider/douban/2016-10-30-douban-spider","published":1,"updated":"2018-08-09T10:10:11.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbm008k28t1a7kqiatq","content":"<p>断断续续谢了一个多星期, 基本上完成了豆瓣的爬虫的编写.</p>\n<p>最初还是没有准备使用框架写, 还是准备利用<code>requests</code>获取网页内容然后分析, 后来觉得这么写有点浪费时间, 而且<code>requests</code>是阻塞的, 不便于写多线程的. 另一方面, python爬虫框架Scrapy大名鼎鼎, 不学习一下有点亏, 就决定使用Scrapy来写这个爬虫.</p>\n<h2 id=\"Scrapy\"><a href=\"#Scrapy\" class=\"headerlink\" title=\"Scrapy\"></a>Scrapy</h2><p>利用Scrapy来写爬虫还是比较方便简单的, 主要的代码都在<code>douban_spider</code>中, 后续处理的代码在<code>pipeline</code>中, <code>setting</code>中还可以设置爬取速率, 是否遵循robot.txt, middleware等内容.</p>\n<h2 id=\"获取的豆瓣信息\"><a href=\"#获取的豆瓣信息\" class=\"headerlink\" title=\"获取的豆瓣信息\"></a>获取的豆瓣信息</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'casts'</span>: &#123;<span class=\"string\">'1004780'</span>: <span class=\"string\">'雷诺·维尔森'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1017898'</span>: <span class=\"string\">'约翰·古德曼'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1018140'</span>: <span class=\"string\">'马克·瑞安'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1025212'</span>: <span class=\"string\">'彼特·库伦'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1025213'</span>: <span class=\"string\">'托马斯·列农'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1027181'</span>: <span class=\"string\">'渡边谦'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1031825'</span>: <span class=\"string\">'弗兰克·维尔克'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1031847'</span>: <span class=\"string\">'凯尔希·格兰莫'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1031869'</span>: <span class=\"string\">'索非亚·迈尔斯'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1035674'</span>: <span class=\"string\">'马克·沃尔伯格'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1037706'</span>: <span class=\"string\">'吕良伟'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1040517'</span>: <span class=\"string\">'斯坦利·图齐'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1040990'</span>: <span class=\"string\">'李冰冰'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1041214'</span>: <span class=\"string\">'罗伯特·福克沃斯'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1049627'</span>: <span class=\"string\">'约翰·迪·玛吉欧'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1162139'</span>: <span class=\"string\">'王敏德 '</span>,</span><br><span class=\"line\">           <span class=\"string\">'1165630'</span>: <span class=\"string\">'提图斯·维里沃'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1248294'</span>: <span class=\"string\">'T·J·米勒'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1274253'</span>: <span class=\"string\">'妮可拉·佩尔茨'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1275106'</span>: <span class=\"string\">'纪培慧'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1275667'</span>: <span class=\"string\">'韩庚'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1312271'</span>: <span class=\"string\">'巫刚'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1326135'</span>: <span class=\"string\">'杰克·莱诺'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1340189'</span>: <span class=\"string\">'阿比盖尔·克莱恩'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1340928'</span>: <span class=\"string\">'邹市明'</span>&#125;,</span><br><span class=\"line\"> <span class=\"string\">'directors'</span>: &#123;<span class=\"string\">'1027776'</span>: <span class=\"string\">'迈克尔·贝'</span>&#125;,</span><br><span class=\"line\"> <span class=\"string\">'writers'</span>: &#123;<span class=\"string\">'1027468'</span>: <span class=\"string\">'伊伦·克鲁格'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#----------</span></span><br><span class=\"line\"> <span class=\"string\">'rating_better_than'</span>: &#123;<span class=\"string\">'动作片'</span>: <span class=\"string\">'46'</span>, <span class=\"string\">'科幻片'</span>: <span class=\"string\">'44'</span>&#125;,</span><br><span class=\"line\"> <span class=\"string\">'release_date'</span>: &#123;<span class=\"string\">'美国/中国大陆'</span>: <span class=\"string\">'2014-06-27'</span>, <span class=\"string\">'香港首映'</span>: <span class=\"string\">'2014-06-19'</span>&#125;,</span><br><span class=\"line\"> <span class=\"comment\">#----------</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">'movie_aka'</span>: [<span class=\"string\">'变形金刚：歼灭世纪(港)'</span>, <span class=\"string\">'变形金刚4：灭绝时代'</span>, <span class=\"string\">'变形金刚4'</span>, <span class=\"string\">'变4'</span>, <span class=\"string\">'Transformers4'</span>],</span><br><span class=\"line\">  <span class=\"string\">'movie_tags'</span>: [<span class=\"string\">'变形金刚'</span>, <span class=\"string\">'科幻'</span>, <span class=\"string\">'美国'</span>, <span class=\"string\">'动作'</span>, <span class=\"string\">'2014'</span>, <span class=\"string\">'美国电影'</span>, <span class=\"string\">'Transformers'</span>, <span class=\"string\">'电影'</span>],</span><br><span class=\"line\"> <span class=\"string\">'movie_country'</span>: [<span class=\"string\">'美国'</span>, <span class=\"string\">'中国大陆'</span>],</span><br><span class=\"line\"> <span class=\"string\">'movie_genre'</span>: [<span class=\"string\">'动作'</span>, <span class=\"string\">'科幻'</span>],</span><br><span class=\"line\">  <span class=\"string\">'movie_language'</span>: [ <span class=\"string\">'英语'</span>,<span class=\"string\">'汉语普通话'</span>, <span class=\"string\">'粤语'</span>],</span><br><span class=\"line\">  <span class=\"string\">'movie_similar'</span>: [<span class=\"string\">'3610047'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'6082518'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'10741834'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'2063914'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'3718424'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'3231742'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'6390823'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'24404677'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'6560058'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'3217149'</span>],</span><br><span class=\"line\"> <span class=\"comment\">#----------          </span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">'movie_id'</span>: <span class=\"string\">'7054604'</span>,</span><br><span class=\"line\"> <span class=\"string\">'movie_imdb_id'</span>: <span class=\"string\">'tt2109248'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">'movie_length'</span>: <span class=\"string\">'166'</span>,</span><br><span class=\"line\"> <span class=\"string\">'movie_name'</span>: <span class=\"string\">'变形金刚4：绝迹重生 Transformers: Age of Extinction'</span>,</span><br><span class=\"line\"> <span class=\"string\">'movie_rating'</span>: <span class=\"string\">'6.6'</span>,</span><br><span class=\"line\"> <span class=\"string\">'movie_rating_distribute'</span>: [<span class=\"string\">'11.0'</span>, <span class=\"string\">'28.4'</span>, <span class=\"string\">'43.5'</span>, <span class=\"string\">'13.1'</span>, <span class=\"string\">'4.1'</span>],</span><br><span class=\"line\"> <span class=\"string\">'movie_rating_people_num'</span>: <span class=\"string\">'178399'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以变形金刚四为例, 数据根据格式主要分成四类:</p>\n<ol>\n<li>导演, 编剧, 演员</li>\n<li>数据格式为map的数据</li>\n<li>数据格式为list的数据</li>\n<li>数据格式为str的数据</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>断断续续谢了一个多星期, 基本上完成了豆瓣的爬虫的编写.</p>\n<p>最初还是没有准备使用框架写, 还是准备利用<code>requests</code>获取网页内容然后分析, 后来觉得这么写有点浪费时间, 而且<code>requests</code>是阻塞的, 不便于写多线程的. 另一方面, python爬虫框架Scrapy大名鼎鼎, 不学习一下有点亏, 就决定使用Scrapy来写这个爬虫.</p>\n<h2 id=\"Scrapy\"><a href=\"#Scrapy\" class=\"headerlink\" title=\"Scrapy\"></a>Scrapy</h2><p>利用Scrapy来写爬虫还是比较方便简单的, 主要的代码都在<code>douban_spider</code>中, 后续处理的代码在<code>pipeline</code>中, <code>setting</code>中还可以设置爬取速率, 是否遵循robot.txt, middleware等内容.</p>\n<h2 id=\"获取的豆瓣信息\"><a href=\"#获取的豆瓣信息\" class=\"headerlink\" title=\"获取的豆瓣信息\"></a>获取的豆瓣信息</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'casts'</span>: &#123;<span class=\"string\">'1004780'</span>: <span class=\"string\">'雷诺·维尔森'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1017898'</span>: <span class=\"string\">'约翰·古德曼'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1018140'</span>: <span class=\"string\">'马克·瑞安'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1025212'</span>: <span class=\"string\">'彼特·库伦'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1025213'</span>: <span class=\"string\">'托马斯·列农'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1027181'</span>: <span class=\"string\">'渡边谦'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1031825'</span>: <span class=\"string\">'弗兰克·维尔克'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1031847'</span>: <span class=\"string\">'凯尔希·格兰莫'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1031869'</span>: <span class=\"string\">'索非亚·迈尔斯'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1035674'</span>: <span class=\"string\">'马克·沃尔伯格'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1037706'</span>: <span class=\"string\">'吕良伟'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1040517'</span>: <span class=\"string\">'斯坦利·图齐'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1040990'</span>: <span class=\"string\">'李冰冰'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1041214'</span>: <span class=\"string\">'罗伯特·福克沃斯'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1049627'</span>: <span class=\"string\">'约翰·迪·玛吉欧'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1162139'</span>: <span class=\"string\">'王敏德 '</span>,</span><br><span class=\"line\">           <span class=\"string\">'1165630'</span>: <span class=\"string\">'提图斯·维里沃'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1248294'</span>: <span class=\"string\">'T·J·米勒'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1274253'</span>: <span class=\"string\">'妮可拉·佩尔茨'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1275106'</span>: <span class=\"string\">'纪培慧'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1275667'</span>: <span class=\"string\">'韩庚'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1312271'</span>: <span class=\"string\">'巫刚'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1326135'</span>: <span class=\"string\">'杰克·莱诺'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1340189'</span>: <span class=\"string\">'阿比盖尔·克莱恩'</span>,</span><br><span class=\"line\">           <span class=\"string\">'1340928'</span>: <span class=\"string\">'邹市明'</span>&#125;,</span><br><span class=\"line\"> <span class=\"string\">'directors'</span>: &#123;<span class=\"string\">'1027776'</span>: <span class=\"string\">'迈克尔·贝'</span>&#125;,</span><br><span class=\"line\"> <span class=\"string\">'writers'</span>: &#123;<span class=\"string\">'1027468'</span>: <span class=\"string\">'伊伦·克鲁格'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#----------</span></span><br><span class=\"line\"> <span class=\"string\">'rating_better_than'</span>: &#123;<span class=\"string\">'动作片'</span>: <span class=\"string\">'46'</span>, <span class=\"string\">'科幻片'</span>: <span class=\"string\">'44'</span>&#125;,</span><br><span class=\"line\"> <span class=\"string\">'release_date'</span>: &#123;<span class=\"string\">'美国/中国大陆'</span>: <span class=\"string\">'2014-06-27'</span>, <span class=\"string\">'香港首映'</span>: <span class=\"string\">'2014-06-19'</span>&#125;,</span><br><span class=\"line\"> <span class=\"comment\">#----------</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">'movie_aka'</span>: [<span class=\"string\">'变形金刚：歼灭世纪(港)'</span>, <span class=\"string\">'变形金刚4：灭绝时代'</span>, <span class=\"string\">'变形金刚4'</span>, <span class=\"string\">'变4'</span>, <span class=\"string\">'Transformers4'</span>],</span><br><span class=\"line\">  <span class=\"string\">'movie_tags'</span>: [<span class=\"string\">'变形金刚'</span>, <span class=\"string\">'科幻'</span>, <span class=\"string\">'美国'</span>, <span class=\"string\">'动作'</span>, <span class=\"string\">'2014'</span>, <span class=\"string\">'美国电影'</span>, <span class=\"string\">'Transformers'</span>, <span class=\"string\">'电影'</span>],</span><br><span class=\"line\"> <span class=\"string\">'movie_country'</span>: [<span class=\"string\">'美国'</span>, <span class=\"string\">'中国大陆'</span>],</span><br><span class=\"line\"> <span class=\"string\">'movie_genre'</span>: [<span class=\"string\">'动作'</span>, <span class=\"string\">'科幻'</span>],</span><br><span class=\"line\">  <span class=\"string\">'movie_language'</span>: [ <span class=\"string\">'英语'</span>,<span class=\"string\">'汉语普通话'</span>, <span class=\"string\">'粤语'</span>],</span><br><span class=\"line\">  <span class=\"string\">'movie_similar'</span>: [<span class=\"string\">'3610047'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'6082518'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'10741834'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'2063914'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'3718424'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'3231742'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'6390823'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'24404677'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'6560058'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'3217149'</span>],</span><br><span class=\"line\"> <span class=\"comment\">#----------          </span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">'movie_id'</span>: <span class=\"string\">'7054604'</span>,</span><br><span class=\"line\"> <span class=\"string\">'movie_imdb_id'</span>: <span class=\"string\">'tt2109248'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">'movie_length'</span>: <span class=\"string\">'166'</span>,</span><br><span class=\"line\"> <span class=\"string\">'movie_name'</span>: <span class=\"string\">'变形金刚4：绝迹重生 Transformers: Age of Extinction'</span>,</span><br><span class=\"line\"> <span class=\"string\">'movie_rating'</span>: <span class=\"string\">'6.6'</span>,</span><br><span class=\"line\"> <span class=\"string\">'movie_rating_distribute'</span>: [<span class=\"string\">'11.0'</span>, <span class=\"string\">'28.4'</span>, <span class=\"string\">'43.5'</span>, <span class=\"string\">'13.1'</span>, <span class=\"string\">'4.1'</span>],</span><br><span class=\"line\"> <span class=\"string\">'movie_rating_people_num'</span>: <span class=\"string\">'178399'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以变形金刚四为例, 数据根据格式主要分成四类:</p>\n<ol>\n<li>导演, 编剧, 演员</li>\n<li>数据格式为map的数据</li>\n<li>数据格式为list的数据</li>\n<li>数据格式为str的数据</li>\n</ol>\n"},{"author":"ivyxjc","date":"2016-03-06T16:00:00.000Z","title":"使用WebView显示网页","keywords":null,"description":"如何使用WebView访问网页.","_content":"\n## 访问权限\n\n调用第三方或者系统默认浏览器不需要使用网络访问权限，但是自己写WebView访问网络资源需要配置网络访问权限。\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n\n## 使用loadUrl()\n\nweb资源： webView.loadUrl(\"http://www.bing.com\");\n\n本地文件：webView.loadUrl(\"file:///android_asset/xx.html\");\n\n本地文件放在 asset文件夹中\n\n//使页面获得焦点\nwebView.requestFocus();\n\n## 处理页面导航\n\n当用户点击webView中的链接时，通常由默认浏览器打开并加载目标url，需要覆盖该默认处理方法。\n\n```java\nwebView.setWebViewClient(new WebViewClient(){\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, String url) {\n                //返回True的时候控制网页在WebView中打开\n                //返回False控制网页在默认浏览器中打开。\n                view.loadUrl(url);\n                return true;\n            }\n\n            //WebViewClient帮助WebView处理一些页面控制和请求通知,还有其它很多方法，如下\n\n            @Override\n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                super.onPageStarted(view, url, favicon);\n            }\n\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n            }\n        });\n```\n\n## WebView使用Javascript\n\n```java\n    WebSettings settings=webView.getSettings();\n    settings.setJavaScriptEnabled(true);\n```\n\n## 设置返回键逻辑\n\n```java\n@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\n    if(keyCode==KeyEvent.KEYCODE_BACK){\n        if(webView.canGoBack()){\n            Toast.makeText(this,webView.getUrl(),Toast.LENGTH_SHORT).show();\n            webView.goBack();//返回上一界面\n            return true;\n        }\n    }else{\n        System.exit(0);\n    }\n    return super.onKeyDown(keyCode, event);\n}\n```\n\n## 判断加载页面过程\n\n\n## 使用本地缓存\n\n```java\nWebSettings settings=webView.getSettings();   settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);\n```\n\n\n\n## 实例\n\n```xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingLeft=\"0dp\"\n    android:paddingRight=\"0dp\" >\n\n    <ProgressBar\n        android:id=\"@+id/progressBar\"\n        style=\"?android:attr/progressBarStyleHorizontal\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <WebView\n        android:id=\"@+id/webView\"\n        android:layout_below=\"@id/progressBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_alignParentEnd=\"true\"></WebView>\n</RelativeLayout>\n```\n\n```java\nwebView.setWebChromeClient(new WebChromeClient(){\n    @Override\n    public void onProgressChanged(WebView view, int newProgress) {\n        if (newProgress == 100) {\n            //网页已经加载完毕\n            progressCompleted();\n        } else {\n            //网页正在加载\n            progressUnCompleted(newProgress);\n        }\n    }\n\n    private void progressCompleted(){\n        progressBar.setProgress(100);\n    }\n\n    private void progressUnCompleted(int newProgress){\n        progressBar.setProgress(newProgress);\n    }\n});\n```\n\n![](http://oezmbgg4j.bkt.clouddn.com/webview.gif)\n","source":"_posts/android/控件/WebView/2016-03-07-使用WebView显示网页.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-07\ntitle: 使用WebView显示网页\ncategory: Android\ntags: [android,android_control]\nkeywords:\ndescription: 如何使用WebView访问网页.\n---\n\n## 访问权限\n\n调用第三方或者系统默认浏览器不需要使用网络访问权限，但是自己写WebView访问网络资源需要配置网络访问权限。\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n\n## 使用loadUrl()\n\nweb资源： webView.loadUrl(\"http://www.bing.com\");\n\n本地文件：webView.loadUrl(\"file:///android_asset/xx.html\");\n\n本地文件放在 asset文件夹中\n\n//使页面获得焦点\nwebView.requestFocus();\n\n## 处理页面导航\n\n当用户点击webView中的链接时，通常由默认浏览器打开并加载目标url，需要覆盖该默认处理方法。\n\n```java\nwebView.setWebViewClient(new WebViewClient(){\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, String url) {\n                //返回True的时候控制网页在WebView中打开\n                //返回False控制网页在默认浏览器中打开。\n                view.loadUrl(url);\n                return true;\n            }\n\n            //WebViewClient帮助WebView处理一些页面控制和请求通知,还有其它很多方法，如下\n\n            @Override\n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                super.onPageStarted(view, url, favicon);\n            }\n\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n            }\n        });\n```\n\n## WebView使用Javascript\n\n```java\n    WebSettings settings=webView.getSettings();\n    settings.setJavaScriptEnabled(true);\n```\n\n## 设置返回键逻辑\n\n```java\n@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\n    if(keyCode==KeyEvent.KEYCODE_BACK){\n        if(webView.canGoBack()){\n            Toast.makeText(this,webView.getUrl(),Toast.LENGTH_SHORT).show();\n            webView.goBack();//返回上一界面\n            return true;\n        }\n    }else{\n        System.exit(0);\n    }\n    return super.onKeyDown(keyCode, event);\n}\n```\n\n## 判断加载页面过程\n\n\n## 使用本地缓存\n\n```java\nWebSettings settings=webView.getSettings();   settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);\n```\n\n\n\n## 实例\n\n```xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingLeft=\"0dp\"\n    android:paddingRight=\"0dp\" >\n\n    <ProgressBar\n        android:id=\"@+id/progressBar\"\n        style=\"?android:attr/progressBarStyleHorizontal\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <WebView\n        android:id=\"@+id/webView\"\n        android:layout_below=\"@id/progressBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_alignParentEnd=\"true\"></WebView>\n</RelativeLayout>\n```\n\n```java\nwebView.setWebChromeClient(new WebChromeClient(){\n    @Override\n    public void onProgressChanged(WebView view, int newProgress) {\n        if (newProgress == 100) {\n            //网页已经加载完毕\n            progressCompleted();\n        } else {\n            //网页正在加载\n            progressUnCompleted(newProgress);\n        }\n    }\n\n    private void progressCompleted(){\n        progressBar.setProgress(100);\n    }\n\n    private void progressUnCompleted(int newProgress){\n        progressBar.setProgress(newProgress);\n    }\n});\n```\n\n![](http://oezmbgg4j.bkt.clouddn.com/webview.gif)\n","slug":"android/控件/WebView/2016-03-07-使用WebView显示网页","published":1,"updated":"2018-08-09T10:10:11.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbn008m28t1dzn3jqud","content":"<h2 id=\"访问权限\"><a href=\"#访问权限\" class=\"headerlink\" title=\"访问权限\"></a>访问权限</h2><p>调用第三方或者系统默认浏览器不需要使用网络访问权限，但是自己写WebView访问网络资源需要配置网络访问权限。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用loadUrl\"><a href=\"#使用loadUrl\" class=\"headerlink\" title=\"使用loadUrl()\"></a>使用loadUrl()</h2><p>web资源： webView.loadUrl(“<a href=\"http://www.bing.com&quot;\" target=\"_blank\" rel=\"noopener\">http://www.bing.com&quot;</a>);</p>\n<p>本地文件：webView.loadUrl(“file:///android_asset/xx.html”);</p>\n<p>本地文件放在 asset文件夹中</p>\n<p>//使页面获得焦点<br>webView.requestFocus();</p>\n<h2 id=\"处理页面导航\"><a href=\"#处理页面导航\" class=\"headerlink\" title=\"处理页面导航\"></a>处理页面导航</h2><p>当用户点击webView中的链接时，通常由默认浏览器打开并加载目标url，需要覆盖该默认处理方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//返回True的时候控制网页在WebView中打开</span></span><br><span class=\"line\">                <span class=\"comment\">//返回False控制网页在默认浏览器中打开。</span></span><br><span class=\"line\">                view.loadUrl(url);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//WebViewClient帮助WebView处理一些页面控制和请求通知,还有其它很多方法，如下</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.onPageFinished(view, url);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WebView使用Javascript\"><a href=\"#WebView使用Javascript\" class=\"headerlink\" title=\"WebView使用Javascript\"></a>WebView使用Javascript</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSettings settings=webView.getSettings();</span><br><span class=\"line\">settings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置返回键逻辑\"><a href=\"#设置返回键逻辑\" class=\"headerlink\" title=\"设置返回键逻辑\"></a>设置返回键逻辑</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(keyCode==KeyEvent.KEYCODE_BACK)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(webView.canGoBack())&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,webView.getUrl(),Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            webView.goBack();<span class=\"comment\">//返回上一界面</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断加载页面过程\"><a href=\"#判断加载页面过程\" class=\"headerlink\" title=\"判断加载页面过程\"></a>判断加载页面过程</h2><h2 id=\"使用本地缓存\"><a href=\"#使用本地缓存\" class=\"headerlink\" title=\"使用本地缓存\"></a>使用本地缓存</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSettings settings=webView.getSettings();   settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"0dp\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/progressBar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:attr/progressBarStyleHorizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">WebView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/webView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/progressBar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignParentEnd</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">WebView</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newProgress == <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网页已经加载完毕</span></span><br><span class=\"line\">            progressCompleted();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网页正在加载</span></span><br><span class=\"line\">            progressUnCompleted(newProgress);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">progressCompleted</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        progressBar.setProgress(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">progressUnCompleted</span><span class=\"params\">(<span class=\"keyword\">int</span> newProgress)</span></span>&#123;</span><br><span class=\"line\">        progressBar.setProgress(newProgress);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/webview.gif\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"访问权限\"><a href=\"#访问权限\" class=\"headerlink\" title=\"访问权限\"></a>访问权限</h2><p>调用第三方或者系统默认浏览器不需要使用网络访问权限，但是自己写WebView访问网络资源需要配置网络访问权限。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用loadUrl\"><a href=\"#使用loadUrl\" class=\"headerlink\" title=\"使用loadUrl()\"></a>使用loadUrl()</h2><p>web资源： webView.loadUrl(“<a href=\"http://www.bing.com&quot;\" target=\"_blank\" rel=\"noopener\">http://www.bing.com&quot;</a>);</p>\n<p>本地文件：webView.loadUrl(“file:///android_asset/xx.html”);</p>\n<p>本地文件放在 asset文件夹中</p>\n<p>//使页面获得焦点<br>webView.requestFocus();</p>\n<h2 id=\"处理页面导航\"><a href=\"#处理页面导航\" class=\"headerlink\" title=\"处理页面导航\"></a>处理页面导航</h2><p>当用户点击webView中的链接时，通常由默认浏览器打开并加载目标url，需要覆盖该默认处理方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//返回True的时候控制网页在WebView中打开</span></span><br><span class=\"line\">                <span class=\"comment\">//返回False控制网页在默认浏览器中打开。</span></span><br><span class=\"line\">                view.loadUrl(url);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//WebViewClient帮助WebView处理一些页面控制和请求通知,还有其它很多方法，如下</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.onPageFinished(view, url);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WebView使用Javascript\"><a href=\"#WebView使用Javascript\" class=\"headerlink\" title=\"WebView使用Javascript\"></a>WebView使用Javascript</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSettings settings=webView.getSettings();</span><br><span class=\"line\">settings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置返回键逻辑\"><a href=\"#设置返回键逻辑\" class=\"headerlink\" title=\"设置返回键逻辑\"></a>设置返回键逻辑</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(keyCode==KeyEvent.KEYCODE_BACK)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(webView.canGoBack())&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,webView.getUrl(),Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            webView.goBack();<span class=\"comment\">//返回上一界面</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断加载页面过程\"><a href=\"#判断加载页面过程\" class=\"headerlink\" title=\"判断加载页面过程\"></a>判断加载页面过程</h2><h2 id=\"使用本地缓存\"><a href=\"#使用本地缓存\" class=\"headerlink\" title=\"使用本地缓存\"></a>使用本地缓存</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSettings settings=webView.getSettings();   settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"0dp\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/progressBar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:attr/progressBarStyleHorizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">WebView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/webView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/progressBar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignParentEnd</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">WebView</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newProgress == <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网页已经加载完毕</span></span><br><span class=\"line\">            progressCompleted();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//网页正在加载</span></span><br><span class=\"line\">            progressUnCompleted(newProgress);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">progressCompleted</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        progressBar.setProgress(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">progressUnCompleted</span><span class=\"params\">(<span class=\"keyword\">int</span> newProgress)</span></span>&#123;</span><br><span class=\"line\">        progressBar.setProgress(newProgress);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://oezmbgg4j.bkt.clouddn.com/webview.gif\" alt></p>\n"},{"author":"ivyxjc","date":"2016-03-26T16:00:00.000Z","title":"Python Spider入门","keywords":null,"description":"利用`urllib.request.Request(url)`获取网络中的信息. 且可以设置Header, http methods, 代理等.","_content":"\n## 添加header和data\n\n```python\nrequest=urllib.request.Request(url)\nresponse=urllib.request.urlopen(request)\n#response是一个http.client.HTTPResponse对象\nprint(response.geturl()) #获取网址\nprint(response.info())  #获取信息\nprint(response.getcode()) # http状态码\n\nhtml=response.read()\n```\n\n`urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)`\n1.data参数：the HTTP request will be a POST instead of a GET when the data parameter is provided.data should be a buffer in the standard application/x-www-form-urlencoded format. The urllib.parse.urlencode() function takes a mapping or sequence of 2-tuples and returns a string in this format.<br>\n\n```python\ndata={}\ndata['type']='AUTO'\ndata['i']=content\ndata['doctype']='json'\ndata['xmlVersion']=1.8\ndata['keyfrom']='fanyi.web'\ndata['ue']='UTF-8'\ndata['action']='FY_BY_CLICKBUTTON'\ndata['typoResult']='true'\n\ndata=urllib.parse.urlencode(data).encode('utf-8')\n```\n\n2.headers：一个字典，可以直接从浏览器中复制过来\n\n```python\nheader={}\n#添加header的第一种方法\nheader['User-Agent']='Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'\nrequest=urllib.request.Request(url,data,header)\n#也可使用以下方法\nrequest.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0')\n```\n\n\n## 获取Response Headers\n\n下面代码是用来判断 网页是否使用`gzip`压缩过。\n```python\nfor i in response.getheaders():\n    if i[0]==\"Content-Encoding\":\n        if(i[-1]==\"gzip\"):\n            html=gzip.decompress(html)\n```\n\n## 使用代理\n\n\n\n1.参数是一个字典{'类型’：‘代理ip:端口号’}\n`proxy_support=urllib.request.ProxyHandler({})`\n2.定制、创建一个openner\n`opener=urllib.request.build_opener(proxy_support)\n3a.安装opener\n`urllib.request.install_opener(opener)`\n3b.调用opener\n`opener.open(url)`\n\n### 代码\n\n```python\nproxy_support=urllib.request.ProxyHandler({'http':random.choice(iplist)})\n\nopener=urllib.request.build_opener(proxy_support)\nopener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0')]\nurllib.request.install_opener(opener)\n\nreq=urllib.request.Request(url)\nresponse=urllib.request.urlopen(req)\n```\n\n\n## 爬知乎图片\n\n```python\nimport urllib.request\nimport os\nimport random\n\n#打开网页\ndef url_open(url):\n    iplist=[\n        '49.77.22.1:8118',\n        '58.134.102.3:12696',\n        '120.26.213.55:9999'...]\n\n    proxy_support=urllib.request.ProxyHandler({'http':random.choice(iplist)})\n\n    opener=urllib.request.build_opener(proxy_support)\n    opener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0')]\n\n    urllib.request.install_opener(opener)\n\n    req=urllib.request.Request(url)\n    response=urllib.request.urlopen(req)\n    html=response.read()\n    return html\n\n#获取图片地址，返回图片地址的list\ndef get_imgs(url):\n    html=url_open(url).decode('utf-8')\n\n    img_address=[]\n    a=html.find('data-original')\n    while(a!=-1):\n        b=html.find('.jpg',a,a+300)\n        if(b!=-1):\n            # print(html[a+15:b+4])\n            img_address.append(html[a+15:b+4])\n        else:\n            b=a+9\n        a=html.find('data-original=',b)\n\n\n    for i in img_address:\n        print(i)\n\n    return img_address\n\n#存储到本地\ndef save_imgs(img_address):\n\n    for i in img_address:\n        # print(i)\n        filename=i.split('/')[-1]\n        with open(filename,'wb') as f:\n            img=url_open(i)\n            f.write(img)\n\n\ndef zhihuPic(url,folder=\"zhihu\"):\n    if(os.path.exists(folder)):\n        os.chdir(folder)\n    else:\n        os.mkdir(folder)\n        os.chdir(folder)\n    img_address=get_imgs(url)\n    save_imgs(img_address)\n\n\n\n\n\nif __name__=='__main__':\n    zhihuPic(\"https://www.zhihu.com/question/22070147\")\n```\n","source":"_posts/python/Spider/基础知识/2016-03-27-python-spider.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-27\ntitle: Python Spider入门\ncategory: Python\ntags: [python,spider,pythonspider]\nkeywords:\ndescription: 利用`urllib.request.Request(url)`获取网络中的信息. 且可以设置Header, http methods, 代理等.\n---\n\n## 添加header和data\n\n```python\nrequest=urllib.request.Request(url)\nresponse=urllib.request.urlopen(request)\n#response是一个http.client.HTTPResponse对象\nprint(response.geturl()) #获取网址\nprint(response.info())  #获取信息\nprint(response.getcode()) # http状态码\n\nhtml=response.read()\n```\n\n`urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)`\n1.data参数：the HTTP request will be a POST instead of a GET when the data parameter is provided.data should be a buffer in the standard application/x-www-form-urlencoded format. The urllib.parse.urlencode() function takes a mapping or sequence of 2-tuples and returns a string in this format.<br>\n\n```python\ndata={}\ndata['type']='AUTO'\ndata['i']=content\ndata['doctype']='json'\ndata['xmlVersion']=1.8\ndata['keyfrom']='fanyi.web'\ndata['ue']='UTF-8'\ndata['action']='FY_BY_CLICKBUTTON'\ndata['typoResult']='true'\n\ndata=urllib.parse.urlencode(data).encode('utf-8')\n```\n\n2.headers：一个字典，可以直接从浏览器中复制过来\n\n```python\nheader={}\n#添加header的第一种方法\nheader['User-Agent']='Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'\nrequest=urllib.request.Request(url,data,header)\n#也可使用以下方法\nrequest.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0')\n```\n\n\n## 获取Response Headers\n\n下面代码是用来判断 网页是否使用`gzip`压缩过。\n```python\nfor i in response.getheaders():\n    if i[0]==\"Content-Encoding\":\n        if(i[-1]==\"gzip\"):\n            html=gzip.decompress(html)\n```\n\n## 使用代理\n\n\n\n1.参数是一个字典{'类型’：‘代理ip:端口号’}\n`proxy_support=urllib.request.ProxyHandler({})`\n2.定制、创建一个openner\n`opener=urllib.request.build_opener(proxy_support)\n3a.安装opener\n`urllib.request.install_opener(opener)`\n3b.调用opener\n`opener.open(url)`\n\n### 代码\n\n```python\nproxy_support=urllib.request.ProxyHandler({'http':random.choice(iplist)})\n\nopener=urllib.request.build_opener(proxy_support)\nopener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0')]\nurllib.request.install_opener(opener)\n\nreq=urllib.request.Request(url)\nresponse=urllib.request.urlopen(req)\n```\n\n\n## 爬知乎图片\n\n```python\nimport urllib.request\nimport os\nimport random\n\n#打开网页\ndef url_open(url):\n    iplist=[\n        '49.77.22.1:8118',\n        '58.134.102.3:12696',\n        '120.26.213.55:9999'...]\n\n    proxy_support=urllib.request.ProxyHandler({'http':random.choice(iplist)})\n\n    opener=urllib.request.build_opener(proxy_support)\n    opener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0')]\n\n    urllib.request.install_opener(opener)\n\n    req=urllib.request.Request(url)\n    response=urllib.request.urlopen(req)\n    html=response.read()\n    return html\n\n#获取图片地址，返回图片地址的list\ndef get_imgs(url):\n    html=url_open(url).decode('utf-8')\n\n    img_address=[]\n    a=html.find('data-original')\n    while(a!=-1):\n        b=html.find('.jpg',a,a+300)\n        if(b!=-1):\n            # print(html[a+15:b+4])\n            img_address.append(html[a+15:b+4])\n        else:\n            b=a+9\n        a=html.find('data-original=',b)\n\n\n    for i in img_address:\n        print(i)\n\n    return img_address\n\n#存储到本地\ndef save_imgs(img_address):\n\n    for i in img_address:\n        # print(i)\n        filename=i.split('/')[-1]\n        with open(filename,'wb') as f:\n            img=url_open(i)\n            f.write(img)\n\n\ndef zhihuPic(url,folder=\"zhihu\"):\n    if(os.path.exists(folder)):\n        os.chdir(folder)\n    else:\n        os.mkdir(folder)\n        os.chdir(folder)\n    img_address=get_imgs(url)\n    save_imgs(img_address)\n\n\n\n\n\nif __name__=='__main__':\n    zhihuPic(\"https://www.zhihu.com/question/22070147\")\n```\n","slug":"python/Spider/基础知识/2016-03-27-python-spider","published":1,"updated":"2018-08-09T10:10:11.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbo008o28t1ha3asg7c","content":"<h2 id=\"添加header和data\"><a href=\"#添加header和data\" class=\"headerlink\" title=\"添加header和data\"></a>添加header和data</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request=urllib.request.Request(url)</span><br><span class=\"line\">response=urllib.request.urlopen(request)</span><br><span class=\"line\"><span class=\"comment\">#response是一个http.client.HTTPResponse对象</span></span><br><span class=\"line\">print(response.geturl()) <span class=\"comment\">#获取网址</span></span><br><span class=\"line\">print(response.info())  <span class=\"comment\">#获取信息</span></span><br><span class=\"line\">print(response.getcode()) <span class=\"comment\"># http状态码</span></span><br><span class=\"line\"></span><br><span class=\"line\">html=response.read()</span><br></pre></td></tr></table></figure>\n\n<p><code>urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)</code><br>1.data参数：the HTTP request will be a POST instead of a GET when the data parameter is provided.data should be a buffer in the standard application/x-www-form-urlencoded format. The urllib.parse.urlencode() function takes a mapping or sequence of 2-tuples and returns a string in this format.<br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data=&#123;&#125;</span><br><span class=\"line\">data[<span class=\"string\">'type'</span>]=<span class=\"string\">'AUTO'</span></span><br><span class=\"line\">data[<span class=\"string\">'i'</span>]=content</span><br><span class=\"line\">data[<span class=\"string\">'doctype'</span>]=<span class=\"string\">'json'</span></span><br><span class=\"line\">data[<span class=\"string\">'xmlVersion'</span>]=<span class=\"number\">1.8</span></span><br><span class=\"line\">data[<span class=\"string\">'keyfrom'</span>]=<span class=\"string\">'fanyi.web'</span></span><br><span class=\"line\">data[<span class=\"string\">'ue'</span>]=<span class=\"string\">'UTF-8'</span></span><br><span class=\"line\">data[<span class=\"string\">'action'</span>]=<span class=\"string\">'FY_BY_CLICKBUTTON'</span></span><br><span class=\"line\">data[<span class=\"string\">'typoResult'</span>]=<span class=\"string\">'true'</span></span><br><span class=\"line\"></span><br><span class=\"line\">data=urllib.parse.urlencode(data).encode(<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>2.headers：一个字典，可以直接从浏览器中复制过来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header=&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">#添加header的第一种方法</span></span><br><span class=\"line\">header[<span class=\"string\">'User-Agent'</span>]=<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span></span><br><span class=\"line\">request=urllib.request.Request(url,data,header)</span><br><span class=\"line\"><span class=\"comment\">#也可使用以下方法</span></span><br><span class=\"line\">request.add_header(<span class=\"string\">'User-Agent'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取Response-Headers\"><a href=\"#获取Response-Headers\" class=\"headerlink\" title=\"获取Response Headers\"></a>获取Response Headers</h2><p>下面代码是用来判断 网页是否使用<code>gzip</code>压缩过。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> response.getheaders():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i[<span class=\"number\">0</span>]==<span class=\"string\">\"Content-Encoding\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i[<span class=\"number\">-1</span>]==<span class=\"string\">\"gzip\"</span>):</span><br><span class=\"line\">            html=gzip.decompress(html)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用代理\"><a href=\"#使用代理\" class=\"headerlink\" title=\"使用代理\"></a>使用代理</h2><p>1.参数是一个字典{‘类型’：‘代理ip:端口号’}<br><code>proxy_support=urllib.request.ProxyHandler({})</code><br>2.定制、创建一个openner<br><code>opener=urllib.request.build_opener(proxy_support)\n3a.安装opener</code>urllib.request.install_opener(opener)<code>3b.调用opener</code>opener.open(url)`</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_support=urllib.request.ProxyHandler(&#123;<span class=\"string\">'http'</span>:random.choice(iplist)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">opener=urllib.request.build_opener(proxy_support)</span><br><span class=\"line\">opener.addheaders=[(<span class=\"string\">'User-Agent'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>)]</span><br><span class=\"line\">urllib.request.install_opener(opener)</span><br><span class=\"line\"></span><br><span class=\"line\">req=urllib.request.Request(url)</span><br><span class=\"line\">response=urllib.request.urlopen(req)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"爬知乎图片\"><a href=\"#爬知乎图片\" class=\"headerlink\" title=\"爬知乎图片\"></a>爬知乎图片</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#打开网页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">url_open</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    iplist=[</span><br><span class=\"line\">        <span class=\"string\">'49.77.22.1:8118'</span>,</span><br><span class=\"line\">        <span class=\"string\">'58.134.102.3:12696'</span>,</span><br><span class=\"line\">        <span class=\"string\">'120.26.213.55:9999'</span>...]</span><br><span class=\"line\"></span><br><span class=\"line\">    proxy_support=urllib.request.ProxyHandler(&#123;<span class=\"string\">'http'</span>:random.choice(iplist)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    opener=urllib.request.build_opener(proxy_support)</span><br><span class=\"line\">    opener.addheaders=[(<span class=\"string\">'User-Agent'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    urllib.request.install_opener(opener)</span><br><span class=\"line\"></span><br><span class=\"line\">    req=urllib.request.Request(url)</span><br><span class=\"line\">    response=urllib.request.urlopen(req)</span><br><span class=\"line\">    html=response.read()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取图片地址，返回图片地址的list</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_imgs</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    html=url_open(url).decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    img_address=[]</span><br><span class=\"line\">    a=html.find(<span class=\"string\">'data-original'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a!=<span class=\"number\">-1</span>):</span><br><span class=\"line\">        b=html.find(<span class=\"string\">'.jpg'</span>,a,a+<span class=\"number\">300</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b!=<span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"comment\"># print(html[a+15:b+4])</span></span><br><span class=\"line\">            img_address.append(html[a+<span class=\"number\">15</span>:b+<span class=\"number\">4</span>])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            b=a+<span class=\"number\">9</span></span><br><span class=\"line\">        a=html.find(<span class=\"string\">'data-original='</span>,b)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> img_address:</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> img_address</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#存储到本地</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_imgs</span><span class=\"params\">(img_address)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> img_address:</span><br><span class=\"line\">        <span class=\"comment\"># print(i)</span></span><br><span class=\"line\">        filename=i.split(<span class=\"string\">'/'</span>)[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename,<span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            img=url_open(i)</span><br><span class=\"line\">            f.write(img)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zhihuPic</span><span class=\"params\">(url,folder=<span class=\"string\">\"zhihu\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(os.path.exists(folder)):</span><br><span class=\"line\">        os.chdir(folder)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        os.mkdir(folder)</span><br><span class=\"line\">        os.chdir(folder)</span><br><span class=\"line\">    img_address=get_imgs(url)</span><br><span class=\"line\">    save_imgs(img_address)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    zhihuPic(<span class=\"string\">\"https://www.zhihu.com/question/22070147\"</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"添加header和data\"><a href=\"#添加header和data\" class=\"headerlink\" title=\"添加header和data\"></a>添加header和data</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request=urllib.request.Request(url)</span><br><span class=\"line\">response=urllib.request.urlopen(request)</span><br><span class=\"line\"><span class=\"comment\">#response是一个http.client.HTTPResponse对象</span></span><br><span class=\"line\">print(response.geturl()) <span class=\"comment\">#获取网址</span></span><br><span class=\"line\">print(response.info())  <span class=\"comment\">#获取信息</span></span><br><span class=\"line\">print(response.getcode()) <span class=\"comment\"># http状态码</span></span><br><span class=\"line\"></span><br><span class=\"line\">html=response.read()</span><br></pre></td></tr></table></figure>\n\n<p><code>urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)</code><br>1.data参数：the HTTP request will be a POST instead of a GET when the data parameter is provided.data should be a buffer in the standard application/x-www-form-urlencoded format. The urllib.parse.urlencode() function takes a mapping or sequence of 2-tuples and returns a string in this format.<br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data=&#123;&#125;</span><br><span class=\"line\">data[<span class=\"string\">'type'</span>]=<span class=\"string\">'AUTO'</span></span><br><span class=\"line\">data[<span class=\"string\">'i'</span>]=content</span><br><span class=\"line\">data[<span class=\"string\">'doctype'</span>]=<span class=\"string\">'json'</span></span><br><span class=\"line\">data[<span class=\"string\">'xmlVersion'</span>]=<span class=\"number\">1.8</span></span><br><span class=\"line\">data[<span class=\"string\">'keyfrom'</span>]=<span class=\"string\">'fanyi.web'</span></span><br><span class=\"line\">data[<span class=\"string\">'ue'</span>]=<span class=\"string\">'UTF-8'</span></span><br><span class=\"line\">data[<span class=\"string\">'action'</span>]=<span class=\"string\">'FY_BY_CLICKBUTTON'</span></span><br><span class=\"line\">data[<span class=\"string\">'typoResult'</span>]=<span class=\"string\">'true'</span></span><br><span class=\"line\"></span><br><span class=\"line\">data=urllib.parse.urlencode(data).encode(<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>2.headers：一个字典，可以直接从浏览器中复制过来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header=&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">#添加header的第一种方法</span></span><br><span class=\"line\">header[<span class=\"string\">'User-Agent'</span>]=<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span></span><br><span class=\"line\">request=urllib.request.Request(url,data,header)</span><br><span class=\"line\"><span class=\"comment\">#也可使用以下方法</span></span><br><span class=\"line\">request.add_header(<span class=\"string\">'User-Agent'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取Response-Headers\"><a href=\"#获取Response-Headers\" class=\"headerlink\" title=\"获取Response Headers\"></a>获取Response Headers</h2><p>下面代码是用来判断 网页是否使用<code>gzip</code>压缩过。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> response.getheaders():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i[<span class=\"number\">0</span>]==<span class=\"string\">\"Content-Encoding\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i[<span class=\"number\">-1</span>]==<span class=\"string\">\"gzip\"</span>):</span><br><span class=\"line\">            html=gzip.decompress(html)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用代理\"><a href=\"#使用代理\" class=\"headerlink\" title=\"使用代理\"></a>使用代理</h2><p>1.参数是一个字典{‘类型’：‘代理ip:端口号’}<br><code>proxy_support=urllib.request.ProxyHandler({})</code><br>2.定制、创建一个openner<br><code>opener=urllib.request.build_opener(proxy_support)\n3a.安装opener</code>urllib.request.install_opener(opener)<code>3b.调用opener</code>opener.open(url)`</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_support=urllib.request.ProxyHandler(&#123;<span class=\"string\">'http'</span>:random.choice(iplist)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">opener=urllib.request.build_opener(proxy_support)</span><br><span class=\"line\">opener.addheaders=[(<span class=\"string\">'User-Agent'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>)]</span><br><span class=\"line\">urllib.request.install_opener(opener)</span><br><span class=\"line\"></span><br><span class=\"line\">req=urllib.request.Request(url)</span><br><span class=\"line\">response=urllib.request.urlopen(req)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"爬知乎图片\"><a href=\"#爬知乎图片\" class=\"headerlink\" title=\"爬知乎图片\"></a>爬知乎图片</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#打开网页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">url_open</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    iplist=[</span><br><span class=\"line\">        <span class=\"string\">'49.77.22.1:8118'</span>,</span><br><span class=\"line\">        <span class=\"string\">'58.134.102.3:12696'</span>,</span><br><span class=\"line\">        <span class=\"string\">'120.26.213.55:9999'</span>...]</span><br><span class=\"line\"></span><br><span class=\"line\">    proxy_support=urllib.request.ProxyHandler(&#123;<span class=\"string\">'http'</span>:random.choice(iplist)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    opener=urllib.request.build_opener(proxy_support)</span><br><span class=\"line\">    opener.addheaders=[(<span class=\"string\">'User-Agent'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    urllib.request.install_opener(opener)</span><br><span class=\"line\"></span><br><span class=\"line\">    req=urllib.request.Request(url)</span><br><span class=\"line\">    response=urllib.request.urlopen(req)</span><br><span class=\"line\">    html=response.read()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取图片地址，返回图片地址的list</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_imgs</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    html=url_open(url).decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    img_address=[]</span><br><span class=\"line\">    a=html.find(<span class=\"string\">'data-original'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a!=<span class=\"number\">-1</span>):</span><br><span class=\"line\">        b=html.find(<span class=\"string\">'.jpg'</span>,a,a+<span class=\"number\">300</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b!=<span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"comment\"># print(html[a+15:b+4])</span></span><br><span class=\"line\">            img_address.append(html[a+<span class=\"number\">15</span>:b+<span class=\"number\">4</span>])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            b=a+<span class=\"number\">9</span></span><br><span class=\"line\">        a=html.find(<span class=\"string\">'data-original='</span>,b)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> img_address:</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> img_address</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#存储到本地</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_imgs</span><span class=\"params\">(img_address)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> img_address:</span><br><span class=\"line\">        <span class=\"comment\"># print(i)</span></span><br><span class=\"line\">        filename=i.split(<span class=\"string\">'/'</span>)[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename,<span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            img=url_open(i)</span><br><span class=\"line\">            f.write(img)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zhihuPic</span><span class=\"params\">(url,folder=<span class=\"string\">\"zhihu\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(os.path.exists(folder)):</span><br><span class=\"line\">        os.chdir(folder)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        os.mkdir(folder)</span><br><span class=\"line\">        os.chdir(folder)</span><br><span class=\"line\">    img_address=get_imgs(url)</span><br><span class=\"line\">    save_imgs(img_address)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    zhihuPic(<span class=\"string\">\"https://www.zhihu.com/question/22070147\"</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-03-26T16:00:00.000Z","title":"正则表达式（python）","keywords":null,"description":"正则在字符串的处理中有着很大的作用.","_content":"\n## re方法\n### re.search()\n`re.search(pattern,string,flags=0)`\n例：`re.search(r'love','I love you')`\n\n### re.findall()\n\n返回一个符合pattern的全部字符的list。\n\n### re.compile()\n\n```python\np=re.compile(r'[a-z]')\nres=re.findall(p,'iLadfaww')\nprint(res)\n\n['i', 'a', 'd', 'f', 'a', 'w', 'w']\n```\n\n```python\np=re.compile(r'[a-z]+',re.IGNORECASE)\nres=p.search('ADSwqefS',2,5)#后两个参数表示范围\nprint(res)\n\n<_sre.SRE_Match object; span=(2, 5), match='Swq'>\n\n```\n\n### 代码\n\n```python\np=re.compile(r'(Love) (You)')\nres=p.search('I Love You')\nprint(res.group(0))\nprint(res.group(1))\nprint(res.group(2))\n\nprint(res.start())\nprint(res.end())\nprint(res.span())\n\nLove You\nLove\nYou\n2\n10\n(2, 10)\n```\n\n## 编译标志\n\n[编译标志](http://bbs.fishc.com/forum.php?mod=viewthread&tid=57207&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403)\n\n编译标志有两个名字：完整名和简写名\n\n1.ASCII,A：使得`\\w`,`\\b`,`\\s`和`\\d`只能匹配ASCII字符\n2.DOTALL,S：使得`.`匹配任何符号，包括换行符\n3.IGNORECASE,I：不区分大小写\n4.LOCALE,L：支持当前的语言，区域设置\n5.MULTILINE,M：多行匹配，影响`^`和`$`\n6.VERBOSE,X ：启用详细的正则表达式\n\n## 正则Pattern\n\n[Python3正则表达式特殊符号及用法](http://bbs.fishc.com/forum.php?mod=viewthread&tid=57691&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403)\n\n`\\d`：匹配数字\n`\\D`:与`\\d`相反，相当于`[^0-9]`\n\n`\\s`：匹配任何空白字符（包含空格，换行符，制表符等），相当于`[\\t\\n\\r\\f\\v]`\n`\\S`：与上相反\n\n`\\w`匹配任何单词字符\n`\\W`与上相反\n\n`\\b`匹配单词的开始或者结束。`\\b`在字符类中可表示空格\n`\\B`与上相反\n\n`.`：匹配除换行符以外的任何字符\n\n`|`：或\n\n`*`:匹配前面的表达式0次或者而多次=={0,}\n`+`:匹配前面的表达式1次或者多次=={1,}\n`?`:匹配前面的表达式0次或者1次=={0,1}\n\n`\\`:\n1.转义字符\n2.类似于`\\d`这种用途\n3.引用序号对应的子组所对应的字符串(两位数)\n`r'(ABC)(.com)\\2'匹配的就是'ABC.com.com’`\n4.(三位数，首位可为0)表示八进制数所代表的ASCII码\n\n`[..]`:字符类，匹配所包含的任意一个字符\n\n\n`^`:\n1.匹配字符串的开始位置\n2.如果设置了re.MULTILINE标志，则表示换行符之后的位置\n3.`[^..]`取反，只能放在最开头。若不在最开头，则表示`^`本身。\n\n`%`：\n1.匹配字符串的结束位置，\n2.如果设置了re.MULTILINE标志，则表示换行符之前的位置\n\n`{M,N}`：匹配前面的内容M~N次\n\n`[a-z]`：匹配a-z\n\n\n`ab{3}z`:匹配abbbc\n\n`ab{3,10}c`：匹配a(3-10个)bc\n\n## 零宽断言\n\n`\\b` `^` `$` `\\A` `\\Z` 等用于指定位置，这个位置应满足的一定的条件（即断言），称为零宽断言。\n\n### 前向肯定断言\n`(?=exp)`\n\n例`abc(?=.com)`只会匹配后面紧跟着`.com`的`abc`\n\n### 前向否定断言\n`(?!exp)`\n\n### 后向肯定断言\n`(?<=exp)`\n\n例：`(?<=abc).com`只会匹配前面为`abc`的`.com`\n\n### 后向否定断言\n`(?<!exp)`\n\n## 贪婪与非贪婪\n\n默认是贪婪模式（在符合条件下尽可能多的匹配）：\n\n```python\nres=re.search(r'ABC{2,8}','ABCCCCCC')\nprint(res)\n\n<_sre.SRE_Match object; span=(0, 8), match='ABCCCCCC'>\n```\n\n可以利用`?`变为非贪婪模式\n\n```python\nres=re.search(r'ABC{2,8}?','ABCCCCCC')\nprint(res)\n\n<_sre.SRE_Match object; span=(0, 4), match='ABCC'>\n```\n\n## 捕获\n使用`(....)`会捕获其中内容\n\n使用`(?:...)`不会捕获其中内容\n\n## 例子\n\n### 匹配ip地址\n\n`res=re.search(r'((\\d\\d|\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}((\\d\\d|\\d|1\\d\\d|2[0-4]\\d|25[0-5]))','2.1.1.1')`\n\n\n相关博客：[Python3如何优雅地使用正则表达式](http://bbs.fishc.com/thread-57073-1-1.html)\n","source":"_posts/python/Spider/基础知识/2016-03-27-regex.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-27\ntitle: 正则表达式（python）\ncategory: Python\ntags: [python,regex]\nkeywords:\ndescription: 正则在字符串的处理中有着很大的作用.\n---\n\n## re方法\n### re.search()\n`re.search(pattern,string,flags=0)`\n例：`re.search(r'love','I love you')`\n\n### re.findall()\n\n返回一个符合pattern的全部字符的list。\n\n### re.compile()\n\n```python\np=re.compile(r'[a-z]')\nres=re.findall(p,'iLadfaww')\nprint(res)\n\n['i', 'a', 'd', 'f', 'a', 'w', 'w']\n```\n\n```python\np=re.compile(r'[a-z]+',re.IGNORECASE)\nres=p.search('ADSwqefS',2,5)#后两个参数表示范围\nprint(res)\n\n<_sre.SRE_Match object; span=(2, 5), match='Swq'>\n\n```\n\n### 代码\n\n```python\np=re.compile(r'(Love) (You)')\nres=p.search('I Love You')\nprint(res.group(0))\nprint(res.group(1))\nprint(res.group(2))\n\nprint(res.start())\nprint(res.end())\nprint(res.span())\n\nLove You\nLove\nYou\n2\n10\n(2, 10)\n```\n\n## 编译标志\n\n[编译标志](http://bbs.fishc.com/forum.php?mod=viewthread&tid=57207&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403)\n\n编译标志有两个名字：完整名和简写名\n\n1.ASCII,A：使得`\\w`,`\\b`,`\\s`和`\\d`只能匹配ASCII字符\n2.DOTALL,S：使得`.`匹配任何符号，包括换行符\n3.IGNORECASE,I：不区分大小写\n4.LOCALE,L：支持当前的语言，区域设置\n5.MULTILINE,M：多行匹配，影响`^`和`$`\n6.VERBOSE,X ：启用详细的正则表达式\n\n## 正则Pattern\n\n[Python3正则表达式特殊符号及用法](http://bbs.fishc.com/forum.php?mod=viewthread&tid=57691&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403)\n\n`\\d`：匹配数字\n`\\D`:与`\\d`相反，相当于`[^0-9]`\n\n`\\s`：匹配任何空白字符（包含空格，换行符，制表符等），相当于`[\\t\\n\\r\\f\\v]`\n`\\S`：与上相反\n\n`\\w`匹配任何单词字符\n`\\W`与上相反\n\n`\\b`匹配单词的开始或者结束。`\\b`在字符类中可表示空格\n`\\B`与上相反\n\n`.`：匹配除换行符以外的任何字符\n\n`|`：或\n\n`*`:匹配前面的表达式0次或者而多次=={0,}\n`+`:匹配前面的表达式1次或者多次=={1,}\n`?`:匹配前面的表达式0次或者1次=={0,1}\n\n`\\`:\n1.转义字符\n2.类似于`\\d`这种用途\n3.引用序号对应的子组所对应的字符串(两位数)\n`r'(ABC)(.com)\\2'匹配的就是'ABC.com.com’`\n4.(三位数，首位可为0)表示八进制数所代表的ASCII码\n\n`[..]`:字符类，匹配所包含的任意一个字符\n\n\n`^`:\n1.匹配字符串的开始位置\n2.如果设置了re.MULTILINE标志，则表示换行符之后的位置\n3.`[^..]`取反，只能放在最开头。若不在最开头，则表示`^`本身。\n\n`%`：\n1.匹配字符串的结束位置，\n2.如果设置了re.MULTILINE标志，则表示换行符之前的位置\n\n`{M,N}`：匹配前面的内容M~N次\n\n`[a-z]`：匹配a-z\n\n\n`ab{3}z`:匹配abbbc\n\n`ab{3,10}c`：匹配a(3-10个)bc\n\n## 零宽断言\n\n`\\b` `^` `$` `\\A` `\\Z` 等用于指定位置，这个位置应满足的一定的条件（即断言），称为零宽断言。\n\n### 前向肯定断言\n`(?=exp)`\n\n例`abc(?=.com)`只会匹配后面紧跟着`.com`的`abc`\n\n### 前向否定断言\n`(?!exp)`\n\n### 后向肯定断言\n`(?<=exp)`\n\n例：`(?<=abc).com`只会匹配前面为`abc`的`.com`\n\n### 后向否定断言\n`(?<!exp)`\n\n## 贪婪与非贪婪\n\n默认是贪婪模式（在符合条件下尽可能多的匹配）：\n\n```python\nres=re.search(r'ABC{2,8}','ABCCCCCC')\nprint(res)\n\n<_sre.SRE_Match object; span=(0, 8), match='ABCCCCCC'>\n```\n\n可以利用`?`变为非贪婪模式\n\n```python\nres=re.search(r'ABC{2,8}?','ABCCCCCC')\nprint(res)\n\n<_sre.SRE_Match object; span=(0, 4), match='ABCC'>\n```\n\n## 捕获\n使用`(....)`会捕获其中内容\n\n使用`(?:...)`不会捕获其中内容\n\n## 例子\n\n### 匹配ip地址\n\n`res=re.search(r'((\\d\\d|\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}((\\d\\d|\\d|1\\d\\d|2[0-4]\\d|25[0-5]))','2.1.1.1')`\n\n\n相关博客：[Python3如何优雅地使用正则表达式](http://bbs.fishc.com/thread-57073-1-1.html)\n","slug":"python/Spider/基础知识/2016-03-27-regex","published":1,"updated":"2018-08-09T10:10:11.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbo008q28t1s7r2j4ds","content":"<h2 id=\"re方法\"><a href=\"#re方法\" class=\"headerlink\" title=\"re方法\"></a>re方法</h2><h3 id=\"re-search\"><a href=\"#re-search\" class=\"headerlink\" title=\"re.search()\"></a>re.search()</h3><p><code>re.search(pattern,string,flags=0)</code><br>例：<code>re.search(r&#39;love&#39;,&#39;I love you&#39;)</code></p>\n<h3 id=\"re-findall\"><a href=\"#re-findall\" class=\"headerlink\" title=\"re.findall()\"></a>re.findall()</h3><p>返回一个符合pattern的全部字符的list。</p>\n<h3 id=\"re-compile\"><a href=\"#re-compile\" class=\"headerlink\" title=\"re.compile()\"></a>re.compile()</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p=re.compile(<span class=\"string\">r'[a-z]'</span>)</span><br><span class=\"line\">res=re.findall(p,<span class=\"string\">'iLadfaww'</span>)</span><br><span class=\"line\">print(res)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'i'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'w'</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p=re.compile(<span class=\"string\">r'[a-z]+'</span>,re.IGNORECASE)</span><br><span class=\"line\">res=p.search(<span class=\"string\">'ADSwqefS'</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>)<span class=\"comment\">#后两个参数表示范围</span></span><br><span class=\"line\">print(res)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;_sre.SRE_Match object; span=(<span class=\"number\">2</span>, <span class=\"number\">5</span>), match=<span class=\"string\">'Swq'</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p=re.compile(<span class=\"string\">r'(Love) (You)'</span>)</span><br><span class=\"line\">res=p.search(<span class=\"string\">'I Love You'</span>)</span><br><span class=\"line\">print(res.group(<span class=\"number\">0</span>))</span><br><span class=\"line\">print(res.group(<span class=\"number\">1</span>))</span><br><span class=\"line\">print(res.group(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(res.start())</span><br><span class=\"line\">print(res.end())</span><br><span class=\"line\">print(res.span())</span><br><span class=\"line\"></span><br><span class=\"line\">Love You</span><br><span class=\"line\">Love</span><br><span class=\"line\">You</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译标志\"><a href=\"#编译标志\" class=\"headerlink\" title=\"编译标志\"></a>编译标志</h2><p><a href=\"http://bbs.fishc.com/forum.php?mod=viewthread&tid=57207&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403\" target=\"_blank\" rel=\"noopener\">编译标志</a></p>\n<p>编译标志有两个名字：完整名和简写名</p>\n<p>1.ASCII,A：使得<code>\\w</code>,<code>\\b</code>,<code>\\s</code>和<code>\\d</code>只能匹配ASCII字符<br>2.DOTALL,S：使得<code>.</code>匹配任何符号，包括换行符<br>3.IGNORECASE,I：不区分大小写<br>4.LOCALE,L：支持当前的语言，区域设置<br>5.MULTILINE,M：多行匹配，影响<code>^</code>和<code>$</code><br>6.VERBOSE,X ：启用详细的正则表达式</p>\n<h2 id=\"正则Pattern\"><a href=\"#正则Pattern\" class=\"headerlink\" title=\"正则Pattern\"></a>正则Pattern</h2><p><a href=\"http://bbs.fishc.com/forum.php?mod=viewthread&tid=57691&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403\" target=\"_blank\" rel=\"noopener\">Python3正则表达式特殊符号及用法</a></p>\n<p><code>\\d</code>：匹配数字<br><code>\\D</code>:与<code>\\d</code>相反，相当于<code>[^0-9]</code></p>\n<p><code>\\s</code>：匹配任何空白字符（包含空格，换行符，制表符等），相当于<code>[\\t\\n\\r\\f\\v]</code><br><code>\\S</code>：与上相反</p>\n<p><code>\\w</code>匹配任何单词字符<br><code>\\W</code>与上相反</p>\n<p><code>\\b</code>匹配单词的开始或者结束。<code>\\b</code>在字符类中可表示空格<br><code>\\B</code>与上相反</p>\n<p><code>.</code>：匹配除换行符以外的任何字符</p>\n<p><code>|</code>：或</p>\n<p><code>*</code>:匹配前面的表达式0次或者而多次=={0,}<br><code>+</code>:匹配前面的表达式1次或者多次=={1,}<br><code>?</code>:匹配前面的表达式0次或者1次=={0,1}</p>\n<p><code>\\</code>:<br>1.转义字符<br>2.类似于<code>\\d</code>这种用途<br>3.引用序号对应的子组所对应的字符串(两位数)<br><code>r&#39;(ABC)(.com)\\2&#39;匹配的就是&#39;ABC.com.com’</code><br>4.(三位数，首位可为0)表示八进制数所代表的ASCII码</p>\n<p><code>[..]</code>:字符类，匹配所包含的任意一个字符</p>\n<p><code>^</code>:<br>1.匹配字符串的开始位置<br>2.如果设置了re.MULTILINE标志，则表示换行符之后的位置<br>3.<code>[^..]</code>取反，只能放在最开头。若不在最开头，则表示<code>^</code>本身。</p>\n<p><code>%</code>：<br>1.匹配字符串的结束位置，<br>2.如果设置了re.MULTILINE标志，则表示换行符之前的位置</p>\n<p><code>{M,N}</code>：匹配前面的内容M~N次</p>\n<p><code>[a-z]</code>：匹配a-z</p>\n<p><code>ab{3}z</code>:匹配abbbc</p>\n<p><code>ab{3,10}c</code>：匹配a(3-10个)bc</p>\n<h2 id=\"零宽断言\"><a href=\"#零宽断言\" class=\"headerlink\" title=\"零宽断言\"></a>零宽断言</h2><p><code>\\b</code> <code>^</code> <code>$</code> <code>\\A</code> <code>\\Z</code> 等用于指定位置，这个位置应满足的一定的条件（即断言），称为零宽断言。</p>\n<h3 id=\"前向肯定断言\"><a href=\"#前向肯定断言\" class=\"headerlink\" title=\"前向肯定断言\"></a>前向肯定断言</h3><p><code>(?=exp)</code></p>\n<p>例<code>abc(?=.com)</code>只会匹配后面紧跟着<code>.com</code>的<code>abc</code></p>\n<h3 id=\"前向否定断言\"><a href=\"#前向否定断言\" class=\"headerlink\" title=\"前向否定断言\"></a>前向否定断言</h3><p><code>(?!exp)</code></p>\n<h3 id=\"后向肯定断言\"><a href=\"#后向肯定断言\" class=\"headerlink\" title=\"后向肯定断言\"></a>后向肯定断言</h3><p><code>(?&lt;=exp)</code></p>\n<p>例：<code>(?&lt;=abc).com</code>只会匹配前面为<code>abc</code>的<code>.com</code></p>\n<h3 id=\"后向否定断言\"><a href=\"#后向否定断言\" class=\"headerlink\" title=\"后向否定断言\"></a>后向否定断言</h3><p><code>(?&lt;!exp)</code></p>\n<h2 id=\"贪婪与非贪婪\"><a href=\"#贪婪与非贪婪\" class=\"headerlink\" title=\"贪婪与非贪婪\"></a>贪婪与非贪婪</h2><p>默认是贪婪模式（在符合条件下尽可能多的匹配）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res=re.search(<span class=\"string\">r'ABC&#123;2,8&#125;'</span>,<span class=\"string\">'ABCCCCCC'</span>)</span><br><span class=\"line\">print(res)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;_sre.SRE_Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">8</span>), match=<span class=\"string\">'ABCCCCCC'</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以利用<code>?</code>变为非贪婪模式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res=re.search(<span class=\"string\">r'ABC&#123;2,8&#125;?'</span>,<span class=\"string\">'ABCCCCCC'</span>)</span><br><span class=\"line\">print(res)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;_sre.SRE_Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">4</span>), match=<span class=\"string\">'ABCC'</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"捕获\"><a href=\"#捕获\" class=\"headerlink\" title=\"捕获\"></a>捕获</h2><p>使用<code>(....)</code>会捕获其中内容</p>\n<p>使用<code>(?:...)</code>不会捕获其中内容</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><h3 id=\"匹配ip地址\"><a href=\"#匹配ip地址\" class=\"headerlink\" title=\"匹配ip地址\"></a>匹配ip地址</h3><p><code>res=re.search(r&#39;((\\d\\d|\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}((\\d\\d|\\d|1\\d\\d|2[0-4]\\d|25[0-5]))&#39;,&#39;2.1.1.1&#39;)</code></p>\n<p>相关博客：<a href=\"http://bbs.fishc.com/thread-57073-1-1.html\" target=\"_blank\" rel=\"noopener\">Python3如何优雅地使用正则表达式</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"re方法\"><a href=\"#re方法\" class=\"headerlink\" title=\"re方法\"></a>re方法</h2><h3 id=\"re-search\"><a href=\"#re-search\" class=\"headerlink\" title=\"re.search()\"></a>re.search()</h3><p><code>re.search(pattern,string,flags=0)</code><br>例：<code>re.search(r&#39;love&#39;,&#39;I love you&#39;)</code></p>\n<h3 id=\"re-findall\"><a href=\"#re-findall\" class=\"headerlink\" title=\"re.findall()\"></a>re.findall()</h3><p>返回一个符合pattern的全部字符的list。</p>\n<h3 id=\"re-compile\"><a href=\"#re-compile\" class=\"headerlink\" title=\"re.compile()\"></a>re.compile()</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p=re.compile(<span class=\"string\">r'[a-z]'</span>)</span><br><span class=\"line\">res=re.findall(p,<span class=\"string\">'iLadfaww'</span>)</span><br><span class=\"line\">print(res)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'i'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'w'</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p=re.compile(<span class=\"string\">r'[a-z]+'</span>,re.IGNORECASE)</span><br><span class=\"line\">res=p.search(<span class=\"string\">'ADSwqefS'</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>)<span class=\"comment\">#后两个参数表示范围</span></span><br><span class=\"line\">print(res)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;_sre.SRE_Match object; span=(<span class=\"number\">2</span>, <span class=\"number\">5</span>), match=<span class=\"string\">'Swq'</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p=re.compile(<span class=\"string\">r'(Love) (You)'</span>)</span><br><span class=\"line\">res=p.search(<span class=\"string\">'I Love You'</span>)</span><br><span class=\"line\">print(res.group(<span class=\"number\">0</span>))</span><br><span class=\"line\">print(res.group(<span class=\"number\">1</span>))</span><br><span class=\"line\">print(res.group(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(res.start())</span><br><span class=\"line\">print(res.end())</span><br><span class=\"line\">print(res.span())</span><br><span class=\"line\"></span><br><span class=\"line\">Love You</span><br><span class=\"line\">Love</span><br><span class=\"line\">You</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译标志\"><a href=\"#编译标志\" class=\"headerlink\" title=\"编译标志\"></a>编译标志</h2><p><a href=\"http://bbs.fishc.com/forum.php?mod=viewthread&tid=57207&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403\" target=\"_blank\" rel=\"noopener\">编译标志</a></p>\n<p>编译标志有两个名字：完整名和简写名</p>\n<p>1.ASCII,A：使得<code>\\w</code>,<code>\\b</code>,<code>\\s</code>和<code>\\d</code>只能匹配ASCII字符<br>2.DOTALL,S：使得<code>.</code>匹配任何符号，包括换行符<br>3.IGNORECASE,I：不区分大小写<br>4.LOCALE,L：支持当前的语言，区域设置<br>5.MULTILINE,M：多行匹配，影响<code>^</code>和<code>$</code><br>6.VERBOSE,X ：启用详细的正则表达式</p>\n<h2 id=\"正则Pattern\"><a href=\"#正则Pattern\" class=\"headerlink\" title=\"正则Pattern\"></a>正则Pattern</h2><p><a href=\"http://bbs.fishc.com/forum.php?mod=viewthread&tid=57691&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403\" target=\"_blank\" rel=\"noopener\">Python3正则表达式特殊符号及用法</a></p>\n<p><code>\\d</code>：匹配数字<br><code>\\D</code>:与<code>\\d</code>相反，相当于<code>[^0-9]</code></p>\n<p><code>\\s</code>：匹配任何空白字符（包含空格，换行符，制表符等），相当于<code>[\\t\\n\\r\\f\\v]</code><br><code>\\S</code>：与上相反</p>\n<p><code>\\w</code>匹配任何单词字符<br><code>\\W</code>与上相反</p>\n<p><code>\\b</code>匹配单词的开始或者结束。<code>\\b</code>在字符类中可表示空格<br><code>\\B</code>与上相反</p>\n<p><code>.</code>：匹配除换行符以外的任何字符</p>\n<p><code>|</code>：或</p>\n<p><code>*</code>:匹配前面的表达式0次或者而多次=={0,}<br><code>+</code>:匹配前面的表达式1次或者多次=={1,}<br><code>?</code>:匹配前面的表达式0次或者1次=={0,1}</p>\n<p><code>\\</code>:<br>1.转义字符<br>2.类似于<code>\\d</code>这种用途<br>3.引用序号对应的子组所对应的字符串(两位数)<br><code>r&#39;(ABC)(.com)\\2&#39;匹配的就是&#39;ABC.com.com’</code><br>4.(三位数，首位可为0)表示八进制数所代表的ASCII码</p>\n<p><code>[..]</code>:字符类，匹配所包含的任意一个字符</p>\n<p><code>^</code>:<br>1.匹配字符串的开始位置<br>2.如果设置了re.MULTILINE标志，则表示换行符之后的位置<br>3.<code>[^..]</code>取反，只能放在最开头。若不在最开头，则表示<code>^</code>本身。</p>\n<p><code>%</code>：<br>1.匹配字符串的结束位置，<br>2.如果设置了re.MULTILINE标志，则表示换行符之前的位置</p>\n<p><code>{M,N}</code>：匹配前面的内容M~N次</p>\n<p><code>[a-z]</code>：匹配a-z</p>\n<p><code>ab{3}z</code>:匹配abbbc</p>\n<p><code>ab{3,10}c</code>：匹配a(3-10个)bc</p>\n<h2 id=\"零宽断言\"><a href=\"#零宽断言\" class=\"headerlink\" title=\"零宽断言\"></a>零宽断言</h2><p><code>\\b</code> <code>^</code> <code>$</code> <code>\\A</code> <code>\\Z</code> 等用于指定位置，这个位置应满足的一定的条件（即断言），称为零宽断言。</p>\n<h3 id=\"前向肯定断言\"><a href=\"#前向肯定断言\" class=\"headerlink\" title=\"前向肯定断言\"></a>前向肯定断言</h3><p><code>(?=exp)</code></p>\n<p>例<code>abc(?=.com)</code>只会匹配后面紧跟着<code>.com</code>的<code>abc</code></p>\n<h3 id=\"前向否定断言\"><a href=\"#前向否定断言\" class=\"headerlink\" title=\"前向否定断言\"></a>前向否定断言</h3><p><code>(?!exp)</code></p>\n<h3 id=\"后向肯定断言\"><a href=\"#后向肯定断言\" class=\"headerlink\" title=\"后向肯定断言\"></a>后向肯定断言</h3><p><code>(?&lt;=exp)</code></p>\n<p>例：<code>(?&lt;=abc).com</code>只会匹配前面为<code>abc</code>的<code>.com</code></p>\n<h3 id=\"后向否定断言\"><a href=\"#后向否定断言\" class=\"headerlink\" title=\"后向否定断言\"></a>后向否定断言</h3><p><code>(?&lt;!exp)</code></p>\n<h2 id=\"贪婪与非贪婪\"><a href=\"#贪婪与非贪婪\" class=\"headerlink\" title=\"贪婪与非贪婪\"></a>贪婪与非贪婪</h2><p>默认是贪婪模式（在符合条件下尽可能多的匹配）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res=re.search(<span class=\"string\">r'ABC&#123;2,8&#125;'</span>,<span class=\"string\">'ABCCCCCC'</span>)</span><br><span class=\"line\">print(res)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;_sre.SRE_Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">8</span>), match=<span class=\"string\">'ABCCCCCC'</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以利用<code>?</code>变为非贪婪模式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res=re.search(<span class=\"string\">r'ABC&#123;2,8&#125;?'</span>,<span class=\"string\">'ABCCCCCC'</span>)</span><br><span class=\"line\">print(res)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;_sre.SRE_Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">4</span>), match=<span class=\"string\">'ABCC'</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"捕获\"><a href=\"#捕获\" class=\"headerlink\" title=\"捕获\"></a>捕获</h2><p>使用<code>(....)</code>会捕获其中内容</p>\n<p>使用<code>(?:...)</code>不会捕获其中内容</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><h3 id=\"匹配ip地址\"><a href=\"#匹配ip地址\" class=\"headerlink\" title=\"匹配ip地址\"></a>匹配ip地址</h3><p><code>res=re.search(r&#39;((\\d\\d|\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}((\\d\\d|\\d|1\\d\\d|2[0-4]\\d|25[0-5]))&#39;,&#39;2.1.1.1&#39;)</code></p>\n<p>相关博客：<a href=\"http://bbs.fishc.com/thread-57073-1-1.html\" target=\"_blank\" rel=\"noopener\">Python3如何优雅地使用正则表达式</a></p>\n"},{"author":"ivyxjc","date":"2016-03-30T16:00:00.000Z","title":"Scrapy入门","keywords":null,"description":"scrapy的一个简单sample.","_content":"\n## creating a project\n\nrun `scrapy startproject tutorial`\n\n```\n---scrapy.cfg\n---tutorial/\n-------__init__.py\n-------items.py\n-------pipelines.py\n-------settring.py\n-------spiders/\n-----------__init__.py\n```\n\n## items.py\n\n`Items` are containers that will be loaded with the scraped data;like simple python dicts.\n\n\n```python\nclass DmozItem(scrapy.Item):\n    title = scrapy.Field()\n    link = scrapy.Field()\n    desc = scrapy.Field()\n```\n\n## 第一个spider\n\n四个步骤：\n 1.创建一个Scrapy项目\n 2.定义Item容器\n 3.编写爬虫\n 4.存储内容\n\n\n\n创建一个Spider，必须继承scrapy.Spider类。且自定义一些属性：\n 1.`name`:用于区别Spider，必须是唯一的。\n 2.`start_urls`:\n 3.`parse()`:个初始URL完成下载后生成的`Response` 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的`Request`对象。\n","source":"_posts/python/Spider/基础知识/2016-03-31-scrapy.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-31\ntitle: Scrapy入门\ncategory: Python\ntags: [python,spider,bs4]\nkeywords:\ndescription: scrapy的一个简单sample.\n---\n\n## creating a project\n\nrun `scrapy startproject tutorial`\n\n```\n---scrapy.cfg\n---tutorial/\n-------__init__.py\n-------items.py\n-------pipelines.py\n-------settring.py\n-------spiders/\n-----------__init__.py\n```\n\n## items.py\n\n`Items` are containers that will be loaded with the scraped data;like simple python dicts.\n\n\n```python\nclass DmozItem(scrapy.Item):\n    title = scrapy.Field()\n    link = scrapy.Field()\n    desc = scrapy.Field()\n```\n\n## 第一个spider\n\n四个步骤：\n 1.创建一个Scrapy项目\n 2.定义Item容器\n 3.编写爬虫\n 4.存储内容\n\n\n\n创建一个Spider，必须继承scrapy.Spider类。且自定义一些属性：\n 1.`name`:用于区别Spider，必须是唯一的。\n 2.`start_urls`:\n 3.`parse()`:个初始URL完成下载后生成的`Response` 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的`Request`对象。\n","slug":"python/Spider/基础知识/2016-03-31-scrapy","published":1,"updated":"2018-08-09T10:10:11.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfbp008s28t1gvm2pvlx","content":"<h2 id=\"creating-a-project\"><a href=\"#creating-a-project\" class=\"headerlink\" title=\"creating a project\"></a>creating a project</h2><p>run <code>scrapy startproject tutorial</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---scrapy.cfg</span><br><span class=\"line\">---tutorial/</span><br><span class=\"line\">-------__init__.py</span><br><span class=\"line\">-------items.py</span><br><span class=\"line\">-------pipelines.py</span><br><span class=\"line\">-------settring.py</span><br><span class=\"line\">-------spiders/</span><br><span class=\"line\">-----------__init__.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"items-py\"><a href=\"#items-py\" class=\"headerlink\" title=\"items.py\"></a>items.py</h2><p><code>Items</code> are containers that will be loaded with the scraped data;like simple python dicts.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozItem</span><span class=\"params\">(scrapy.Item)</span>:</span></span><br><span class=\"line\">    title = scrapy.Field()</span><br><span class=\"line\">    link = scrapy.Field()</span><br><span class=\"line\">    desc = scrapy.Field()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一个spider\"><a href=\"#第一个spider\" class=\"headerlink\" title=\"第一个spider\"></a>第一个spider</h2><p>四个步骤：<br> 1.创建一个Scrapy项目<br> 2.定义Item容器<br> 3.编写爬虫<br> 4.存储内容</p>\n<p>创建一个Spider，必须继承scrapy.Spider类。且自定义一些属性：<br> 1.<code>name</code>:用于区别Spider，必须是唯一的。<br> 2.<code>start_urls</code>:<br> 3.<code>parse()</code>:个初始URL完成下载后生成的<code>Response</code> 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的<code>Request</code>对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"creating-a-project\"><a href=\"#creating-a-project\" class=\"headerlink\" title=\"creating a project\"></a>creating a project</h2><p>run <code>scrapy startproject tutorial</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---scrapy.cfg</span><br><span class=\"line\">---tutorial/</span><br><span class=\"line\">-------__init__.py</span><br><span class=\"line\">-------items.py</span><br><span class=\"line\">-------pipelines.py</span><br><span class=\"line\">-------settring.py</span><br><span class=\"line\">-------spiders/</span><br><span class=\"line\">-----------__init__.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"items-py\"><a href=\"#items-py\" class=\"headerlink\" title=\"items.py\"></a>items.py</h2><p><code>Items</code> are containers that will be loaded with the scraped data;like simple python dicts.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozItem</span><span class=\"params\">(scrapy.Item)</span>:</span></span><br><span class=\"line\">    title = scrapy.Field()</span><br><span class=\"line\">    link = scrapy.Field()</span><br><span class=\"line\">    desc = scrapy.Field()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一个spider\"><a href=\"#第一个spider\" class=\"headerlink\" title=\"第一个spider\"></a>第一个spider</h2><p>四个步骤：<br> 1.创建一个Scrapy项目<br> 2.定义Item容器<br> 3.编写爬虫<br> 4.存储内容</p>\n<p>创建一个Spider，必须继承scrapy.Spider类。且自定义一些属性：<br> 1.<code>name</code>:用于区别Spider，必须是唯一的。<br> 2.<code>start_urls</code>:<br> 3.<code>parse()</code>:个初始URL完成下载后生成的<code>Response</code> 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的<code>Request</code>对象。</p>\n"},{"author":"ivyxjc","date":"2016-10-22T16:00:00.000Z","title":"selenium + PhantomJS","keywords":null,"description":"selenium可以调用浏览器来完成网页的读取","_content":"\n## 初始化WebDriver\n\n\n### Chrome\n\n```python\nself.__driver=webdriver.Chrome(\"D:\\\\applicationsGreen\\\\chromedriver_win32\\\\chromedriver\")\n```\n\n### PhantomJS\n\n```python\ndcap = dict(DesiredCapabilities.PHANTOMJS)\n        dcap[\"phantomjs.page.settings.userAgent\"] = (\n            \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0\"\n        )\nself.__driver=webdriver.PhantomJS(desired_capabilities=dcap)\n```\n","source":"_posts/python/Spider/基础知识/2016-10-23-selenium.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-23\ntitle: selenium + PhantomJS\ncategory: Python\ntags: [python,spider,selenium,PhantomJS]\nkeywords:\ndescription: selenium可以调用浏览器来完成网页的读取\n---\n\n## 初始化WebDriver\n\n\n### Chrome\n\n```python\nself.__driver=webdriver.Chrome(\"D:\\\\applicationsGreen\\\\chromedriver_win32\\\\chromedriver\")\n```\n\n### PhantomJS\n\n```python\ndcap = dict(DesiredCapabilities.PHANTOMJS)\n        dcap[\"phantomjs.page.settings.userAgent\"] = (\n            \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0\"\n        )\nself.__driver=webdriver.PhantomJS(desired_capabilities=dcap)\n```\n","slug":"python/Spider/基础知识/2016-10-23-selenium","published":1,"updated":"2018-08-09T10:10:11.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfc1009e28t1nt14a58g","content":"<h2 id=\"初始化WebDriver\"><a href=\"#初始化WebDriver\" class=\"headerlink\" title=\"初始化WebDriver\"></a>初始化WebDriver</h2><h3 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.__driver=webdriver.Chrome(<span class=\"string\">\"D:\\\\applicationsGreen\\\\chromedriver_win32\\\\chromedriver\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PhantomJS\"><a href=\"#PhantomJS\" class=\"headerlink\" title=\"PhantomJS\"></a>PhantomJS</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dcap = dict(DesiredCapabilities.PHANTOMJS)</span><br><span class=\"line\">        dcap[<span class=\"string\">\"phantomjs.page.settings.userAgent\"</span>] = (</span><br><span class=\"line\">            <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">self.__driver=webdriver.PhantomJS(desired_capabilities=dcap)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"初始化WebDriver\"><a href=\"#初始化WebDriver\" class=\"headerlink\" title=\"初始化WebDriver\"></a>初始化WebDriver</h2><h3 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.__driver=webdriver.Chrome(<span class=\"string\">\"D:\\\\applicationsGreen\\\\chromedriver_win32\\\\chromedriver\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PhantomJS\"><a href=\"#PhantomJS\" class=\"headerlink\" title=\"PhantomJS\"></a>PhantomJS</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dcap = dict(DesiredCapabilities.PHANTOMJS)</span><br><span class=\"line\">        dcap[<span class=\"string\">\"phantomjs.page.settings.userAgent\"</span>] = (</span><br><span class=\"line\">            <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">self.__driver=webdriver.PhantomJS(desired_capabilities=dcap)</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-10-22T16:00:00.000Z","title":"利用python解析xml, json","keywords":null,"description":"以豆瓣sitemap.xml为例介绍利用python解析xml, json","_content":"\n\n##　XML\n\n需要到的库:\n\n```python\nfrom xml.dom.minidom import parse\nimport xml.dom.minidom\n```\n\n豆瓣sitemap_index.xml格式如下(2016-10-29):\n\n```xml\n<sitemapindex>\n    <sitemap>\n        <loc>https://www.douban.com/sitemap3782.xml.gz</loc>\n        <lastmod>2016-10-19T10:36:31Z</lastmod>\n    </sitemap>\n    <sitemap>\n        <loc>https://www.douban.com/sitemap3783.xml.gz</loc>\n        <lastmod>2016-10-19T10:36:31Z</lastmod>\n    </sitemap>\n</sitemapindex>\n```\n\n**解析过程:**\n\n```python\nxml_str=douban.sitemap.xml\nDOMTree =xml.dom.minidom.parseString(xml_str)\ncollection = DOMTree.documentElement\nelements=collection.getElementsByTagName(\"sitemap\")\nfor i in elements:\n    a=i.getElementsByTagName(\"loc\")\n    print(a[0].childNodes[0].nodeValue)\n```\n\n\n##　Json\n\n```python\nmap={}\nfor i in range(0,3783):\n    map[i]=0\n\nwith open(\"text\\\\sitemap_config.json\",\"w\") as f:\n    json.dump(map,f)\n\nmap={}\nwith open(\"text\\\\sitemap_config.json\", 'r') as f:\n    map = json.load(f)\nprint(map)\n```\n","source":"_posts/python/Spider/基础知识/2016-10-29-xml-parse.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-23\ntitle: 利用python解析xml, json\ncategory: Python\ntags: [python,spider,xml]\nkeywords:\ndescription: 以豆瓣sitemap.xml为例介绍利用python解析xml, json\n---\n\n\n##　XML\n\n需要到的库:\n\n```python\nfrom xml.dom.minidom import parse\nimport xml.dom.minidom\n```\n\n豆瓣sitemap_index.xml格式如下(2016-10-29):\n\n```xml\n<sitemapindex>\n    <sitemap>\n        <loc>https://www.douban.com/sitemap3782.xml.gz</loc>\n        <lastmod>2016-10-19T10:36:31Z</lastmod>\n    </sitemap>\n    <sitemap>\n        <loc>https://www.douban.com/sitemap3783.xml.gz</loc>\n        <lastmod>2016-10-19T10:36:31Z</lastmod>\n    </sitemap>\n</sitemapindex>\n```\n\n**解析过程:**\n\n```python\nxml_str=douban.sitemap.xml\nDOMTree =xml.dom.minidom.parseString(xml_str)\ncollection = DOMTree.documentElement\nelements=collection.getElementsByTagName(\"sitemap\")\nfor i in elements:\n    a=i.getElementsByTagName(\"loc\")\n    print(a[0].childNodes[0].nodeValue)\n```\n\n\n##　Json\n\n```python\nmap={}\nfor i in range(0,3783):\n    map[i]=0\n\nwith open(\"text\\\\sitemap_config.json\",\"w\") as f:\n    json.dump(map,f)\n\nmap={}\nwith open(\"text\\\\sitemap_config.json\", 'r') as f:\n    map = json.load(f)\nprint(map)\n```\n","slug":"python/Spider/基础知识/2016-10-29-xml-parse","published":1,"updated":"2018-08-09T10:10:11.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfc3009i28t1ttvyfl5r","content":"<p>##　XML</p>\n<p>需要到的库:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> xml.dom.minidom <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> xml.dom.minidom</span><br></pre></td></tr></table></figure>\n\n<p>豆瓣sitemap_index.xml格式如下(2016-10-29):</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sitemapindex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.douban.com/sitemap3782.xml.gz<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">lastmod</span>&gt;</span>2016-10-19T10:36:31Z<span class=\"tag\">&lt;/<span class=\"name\">lastmod</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.douban.com/sitemap3783.xml.gz<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">lastmod</span>&gt;</span>2016-10-19T10:36:31Z<span class=\"tag\">&lt;/<span class=\"name\">lastmod</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sitemapindex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>解析过程:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xml_str=douban.sitemap.xml</span><br><span class=\"line\">DOMTree =xml.dom.minidom.parseString(xml_str)</span><br><span class=\"line\">collection = DOMTree.documentElement</span><br><span class=\"line\">elements=collection.getElementsByTagName(<span class=\"string\">\"sitemap\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> elements:</span><br><span class=\"line\">    a=i.getElementsByTagName(<span class=\"string\">\"loc\"</span>)</span><br><span class=\"line\">    print(a[<span class=\"number\">0</span>].childNodes[<span class=\"number\">0</span>].nodeValue)</span><br></pre></td></tr></table></figure>\n\n<p>##　Json</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map=&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">3783</span>):</span><br><span class=\"line\">    map[i]=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"text\\\\sitemap_config.json\"</span>,<span class=\"string\">\"w\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    json.dump(map,f)</span><br><span class=\"line\"></span><br><span class=\"line\">map=&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"text\\\\sitemap_config.json\"</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    map = json.load(f)</span><br><span class=\"line\">print(map)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>##　XML</p>\n<p>需要到的库:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> xml.dom.minidom <span class=\"keyword\">import</span> parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> xml.dom.minidom</span><br></pre></td></tr></table></figure>\n\n<p>豆瓣sitemap_index.xml格式如下(2016-10-29):</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sitemapindex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.douban.com/sitemap3782.xml.gz<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">lastmod</span>&gt;</span>2016-10-19T10:36:31Z<span class=\"tag\">&lt;/<span class=\"name\">lastmod</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.douban.com/sitemap3783.xml.gz<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">lastmod</span>&gt;</span>2016-10-19T10:36:31Z<span class=\"tag\">&lt;/<span class=\"name\">lastmod</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sitemapindex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>解析过程:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xml_str=douban.sitemap.xml</span><br><span class=\"line\">DOMTree =xml.dom.minidom.parseString(xml_str)</span><br><span class=\"line\">collection = DOMTree.documentElement</span><br><span class=\"line\">elements=collection.getElementsByTagName(<span class=\"string\">\"sitemap\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> elements:</span><br><span class=\"line\">    a=i.getElementsByTagName(<span class=\"string\">\"loc\"</span>)</span><br><span class=\"line\">    print(a[<span class=\"number\">0</span>].childNodes[<span class=\"number\">0</span>].nodeValue)</span><br></pre></td></tr></table></figure>\n\n<p>##　Json</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map=&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">3783</span>):</span><br><span class=\"line\">    map[i]=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"text\\\\sitemap_config.json\"</span>,<span class=\"string\">\"w\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    json.dump(map,f)</span><br><span class=\"line\"></span><br><span class=\"line\">map=&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"text\\\\sitemap_config.json\"</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    map = json.load(f)</span><br><span class=\"line\">print(map)</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-10-29T16:00:00.000Z","title":"python socket编程功能","keywords":null,"description":"利用socket获取网络内容","_content":"\n## socket编程基本思路\n\n### 服务器端\n\n1. 创建socket, 绑定socket到本地IP, 端口 socket.socket(socket.AF_INET,socket.SOCK_STREAM), s.bind()\n2. 开始监听连接  s.listen()\n3. 进入循环，不断接受客户端的连接请求  s.accept()\n4. 然后接收传来的数据，并发送给对方数据  s.recv() , s.sendall()\n5. 传输完毕后，关闭socket  \n\n### 客户端\n1. 创建套接字，连接远端地址 #socket.socket(socket.AF_INET,socket.SOCK_STREAM), s.connect()\n2. 连接后发送数据和接收数据 #s.sendall(), s.recv()\n3. 传输完毕后，关闭套接字 #s.close()\n\n```python\n# 导入socket库:\nimport socket\n# 创建一个socket:\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('www.sina.com.cn', 80))\n```\n\n创建socket时, `socket.AF_INET`代表使用用IPv4协议, 如果要使用IPv6协议, 则指定`sockt.AF_INET6`, `SOCK_STREAM`指定使用面向流的TCP协议.\n\n```python\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n')\n\n# 接收数据:\nbuffer = []\nwhile True:\n    # 每次最多接收1k字节:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b''.join(buffer)\n\n# 关闭连接:\ns.close()\n\n\n# 处理数据\nheader, html = response.split(b'\\r\\n\\r\\n', 1)\nprint(header.decode(\"utf-8\"))\nprint(html.decode('utf-8'))\n```\n\n## socket 并发\n\nsocket默认是堵塞的, 当socket运行`connect()`,`recv()`方法时, 会堵塞直到运行完成.\n\n```python\nsock = socket.socket()\n#将socket设为非堵塞的self.\nsock.setblocking(False)\n```\n\n这样做会直接抛出一个`BlockingIOError`的异常, 详细内容`A non-blocking socket operation could not be completed immediately`,\n\n**解决方法**:\n```python\ntry:\n    sock.connect(('xkcd.com', 80))\nexcept BlockingIOError:\n    pass\n```\n\n```python\nrequest = 'GET {} HTTP/1.0\\r\\nHost: xkcd.com\\r\\n\\r\\n'.format(url)\nencoded=request.encode('ascii')\nsock.send(encoded)\n```\n\n也会抛出异常`OSError: A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied`\n\n**解决方法**:\n\n```python\nwhile True:\n    try:\n        sock.send(encoded)\n        break  # Done.\n    except OSError as e:\n        pass\n```\n","source":"_posts/python/Spider/基础知识/2016-10-30-socket-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-10-30\ntitle: python socket编程功能\ncategory: Python\ntags: [python,spider,socket]\nkeywords:\ndescription: 利用socket获取网络内容\n---\n\n## socket编程基本思路\n\n### 服务器端\n\n1. 创建socket, 绑定socket到本地IP, 端口 socket.socket(socket.AF_INET,socket.SOCK_STREAM), s.bind()\n2. 开始监听连接  s.listen()\n3. 进入循环，不断接受客户端的连接请求  s.accept()\n4. 然后接收传来的数据，并发送给对方数据  s.recv() , s.sendall()\n5. 传输完毕后，关闭socket  \n\n### 客户端\n1. 创建套接字，连接远端地址 #socket.socket(socket.AF_INET,socket.SOCK_STREAM), s.connect()\n2. 连接后发送数据和接收数据 #s.sendall(), s.recv()\n3. 传输完毕后，关闭套接字 #s.close()\n\n```python\n# 导入socket库:\nimport socket\n# 创建一个socket:\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('www.sina.com.cn', 80))\n```\n\n创建socket时, `socket.AF_INET`代表使用用IPv4协议, 如果要使用IPv6协议, 则指定`sockt.AF_INET6`, `SOCK_STREAM`指定使用面向流的TCP协议.\n\n```python\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n')\n\n# 接收数据:\nbuffer = []\nwhile True:\n    # 每次最多接收1k字节:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b''.join(buffer)\n\n# 关闭连接:\ns.close()\n\n\n# 处理数据\nheader, html = response.split(b'\\r\\n\\r\\n', 1)\nprint(header.decode(\"utf-8\"))\nprint(html.decode('utf-8'))\n```\n\n## socket 并发\n\nsocket默认是堵塞的, 当socket运行`connect()`,`recv()`方法时, 会堵塞直到运行完成.\n\n```python\nsock = socket.socket()\n#将socket设为非堵塞的self.\nsock.setblocking(False)\n```\n\n这样做会直接抛出一个`BlockingIOError`的异常, 详细内容`A non-blocking socket operation could not be completed immediately`,\n\n**解决方法**:\n```python\ntry:\n    sock.connect(('xkcd.com', 80))\nexcept BlockingIOError:\n    pass\n```\n\n```python\nrequest = 'GET {} HTTP/1.0\\r\\nHost: xkcd.com\\r\\n\\r\\n'.format(url)\nencoded=request.encode('ascii')\nsock.send(encoded)\n```\n\n也会抛出异常`OSError: A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied`\n\n**解决方法**:\n\n```python\nwhile True:\n    try:\n        sock.send(encoded)\n        break  # Done.\n    except OSError as e:\n        pass\n```\n","slug":"python/Spider/基础知识/2016-10-30-socket-basic","published":1,"updated":"2018-08-09T10:10:11.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfc4009l28t137ukrgfx","content":"<h2 id=\"socket编程基本思路\"><a href=\"#socket编程基本思路\" class=\"headerlink\" title=\"socket编程基本思路\"></a>socket编程基本思路</h2><h3 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h3><ol>\n<li>创建socket, 绑定socket到本地IP, 端口 socket.socket(socket.AF_INET,socket.SOCK_STREAM), s.bind()</li>\n<li>开始监听连接  s.listen()</li>\n<li>进入循环，不断接受客户端的连接请求  s.accept()</li>\n<li>然后接收传来的数据，并发送给对方数据  s.recv() , s.sendall()</li>\n<li>传输完毕后，关闭socket  </li>\n</ol>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><ol>\n<li>创建套接字，连接远端地址 #socket.socket(socket.AF_INET,socket.SOCK_STREAM), s.connect()</li>\n<li>连接后发送数据和接收数据 #s.sendall(), s.recv()</li>\n<li>传输完毕后，关闭套接字 #s.close()</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入socket库:</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"comment\"># 创建一个socket:</span></span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"><span class=\"comment\"># 建立连接:</span></span><br><span class=\"line\">s.connect((<span class=\"string\">'www.sina.com.cn'</span>, <span class=\"number\">80</span>))</span><br></pre></td></tr></table></figure>\n\n<p>创建socket时, <code>socket.AF_INET</code>代表使用用IPv4协议, 如果要使用IPv6协议, 则指定<code>sockt.AF_INET6</code>, <code>SOCK_STREAM</code>指定使用面向流的TCP协议.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.send(<span class=\"string\">b'GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接收数据:</span></span><br><span class=\"line\">buffer = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 每次最多接收1k字节:</span></span><br><span class=\"line\">    d = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">data = <span class=\"string\">b''</span>.join(buffer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭连接:</span></span><br><span class=\"line\">s.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 处理数据</span></span><br><span class=\"line\">header, html = response.split(<span class=\"string\">b'\\r\\n\\r\\n'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">print(header.decode(<span class=\"string\">\"utf-8\"</span>))</span><br><span class=\"line\">print(html.decode(<span class=\"string\">'utf-8'</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"socket-并发\"><a href=\"#socket-并发\" class=\"headerlink\" title=\"socket 并发\"></a>socket 并发</h2><p>socket默认是堵塞的, 当socket运行<code>connect()</code>,<code>recv()</code>方法时, 会堵塞直到运行完成.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sock = socket.socket()</span><br><span class=\"line\"><span class=\"comment\">#将socket设为非堵塞的self.</span></span><br><span class=\"line\">sock.setblocking(<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这样做会直接抛出一个<code>BlockingIOError</code>的异常, 详细内容<code>A non-blocking socket operation could not be completed immediately</code>,</p>\n<p><strong>解决方法</strong>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    sock.connect((<span class=\"string\">'xkcd.com'</span>, <span class=\"number\">80</span>))</span><br><span class=\"line\"><span class=\"keyword\">except</span> BlockingIOError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request = <span class=\"string\">'GET &#123;&#125; HTTP/1.0\\r\\nHost: xkcd.com\\r\\n\\r\\n'</span>.format(url)</span><br><span class=\"line\">encoded=request.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">sock.send(encoded)</span><br></pre></td></tr></table></figure>\n\n<p>也会抛出异常<code>OSError: A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied</code></p>\n<p><strong>解决方法</strong>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        sock.send(encoded)</span><br><span class=\"line\">        <span class=\"keyword\">break</span>  <span class=\"comment\"># Done.</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> OSError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"socket编程基本思路\"><a href=\"#socket编程基本思路\" class=\"headerlink\" title=\"socket编程基本思路\"></a>socket编程基本思路</h2><h3 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h3><ol>\n<li>创建socket, 绑定socket到本地IP, 端口 socket.socket(socket.AF_INET,socket.SOCK_STREAM), s.bind()</li>\n<li>开始监听连接  s.listen()</li>\n<li>进入循环，不断接受客户端的连接请求  s.accept()</li>\n<li>然后接收传来的数据，并发送给对方数据  s.recv() , s.sendall()</li>\n<li>传输完毕后，关闭socket  </li>\n</ol>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><ol>\n<li>创建套接字，连接远端地址 #socket.socket(socket.AF_INET,socket.SOCK_STREAM), s.connect()</li>\n<li>连接后发送数据和接收数据 #s.sendall(), s.recv()</li>\n<li>传输完毕后，关闭套接字 #s.close()</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入socket库:</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"comment\"># 创建一个socket:</span></span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"><span class=\"comment\"># 建立连接:</span></span><br><span class=\"line\">s.connect((<span class=\"string\">'www.sina.com.cn'</span>, <span class=\"number\">80</span>))</span><br></pre></td></tr></table></figure>\n\n<p>创建socket时, <code>socket.AF_INET</code>代表使用用IPv4协议, 如果要使用IPv6协议, 则指定<code>sockt.AF_INET6</code>, <code>SOCK_STREAM</code>指定使用面向流的TCP协议.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.send(<span class=\"string\">b'GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接收数据:</span></span><br><span class=\"line\">buffer = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 每次最多接收1k字节:</span></span><br><span class=\"line\">    d = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">data = <span class=\"string\">b''</span>.join(buffer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭连接:</span></span><br><span class=\"line\">s.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 处理数据</span></span><br><span class=\"line\">header, html = response.split(<span class=\"string\">b'\\r\\n\\r\\n'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">print(header.decode(<span class=\"string\">\"utf-8\"</span>))</span><br><span class=\"line\">print(html.decode(<span class=\"string\">'utf-8'</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"socket-并发\"><a href=\"#socket-并发\" class=\"headerlink\" title=\"socket 并发\"></a>socket 并发</h2><p>socket默认是堵塞的, 当socket运行<code>connect()</code>,<code>recv()</code>方法时, 会堵塞直到运行完成.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sock = socket.socket()</span><br><span class=\"line\"><span class=\"comment\">#将socket设为非堵塞的self.</span></span><br><span class=\"line\">sock.setblocking(<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这样做会直接抛出一个<code>BlockingIOError</code>的异常, 详细内容<code>A non-blocking socket operation could not be completed immediately</code>,</p>\n<p><strong>解决方法</strong>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    sock.connect((<span class=\"string\">'xkcd.com'</span>, <span class=\"number\">80</span>))</span><br><span class=\"line\"><span class=\"keyword\">except</span> BlockingIOError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request = <span class=\"string\">'GET &#123;&#125; HTTP/1.0\\r\\nHost: xkcd.com\\r\\n\\r\\n'</span>.format(url)</span><br><span class=\"line\">encoded=request.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">sock.send(encoded)</span><br></pre></td></tr></table></figure>\n\n<p>也会抛出异常<code>OSError: A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied</code></p>\n<p><strong>解决方法</strong>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        sock.send(encoded)</span><br><span class=\"line\">        <span class=\"keyword\">break</span>  <span class=\"comment\"># Done.</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> OSError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-03-08T16:00:00.000Z","title":"Fragment初步","keywords":null,"description":"如何在应用中使用Fragment","_content":"\n## Fragment概要\n![](http://oezmbgg4j.bkt.clouddn.com/fragmentIntro.png)\n\n## **onCreateView()**方法\n\nFragment第一次绘制它的用户界面时，系统会调用此方法。为了方便绘制Fragment的UI，此方法必须返回一个View，如果不显示UI，返回null。\n\n\n### 标识Fragment方法\n\nandroid:id 提供一个唯一的ID 或\nandroid:tag 提供一个唯一的字符串tag\n\n## 静态加载\n\n在**Activity**的layout文件中声明**Fragment**，其中**android:name**属性制定了在layout中实例化的Fragment类。\n\n静态加载Fragment必须要给Fragment一个唯一的标识。\n\n文件目录：<br>\n——src<br>\n————Fragment_1.java (extends Fragment)<br>\n————Fragment_2.java   (extends Activity)<br>\n————MainActivity.java\t(extends Activity)<br>\n<br>\n——layout<br>\n————fragment_1.xml<br>\n————fragment_2.xml<br>\n————activity_main.xml<br>\n\n**Fragment1.java**利用**fragment_1.xml**返回一个**view**，**activity.xml**中的**android:name=\"com.jc.fragmentbasic.FragmentFirst\"**，然后**MainActivity**调用`setContentView(R.layout.activity_main);``\n\n\n### fragment_1和fragment_2.xml和activity_main.xml\n\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"This is fragment 1\"\n        android:textColor=\"#0000FF\"\n        android:textSize=\"25sp\"\n        android:background=\"#00FF00\"/>\n\n</LinearLayout>\n```\n\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"This is fragment 2\"\n        android:textColor=\"#FF0000\"\n        android:background=\"#00F0F0\"\n        android:textSize=\"25sp\" />\n\n</LinearLayout>\n```\n\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:baselineAligned=\"false\"\n      android:orientation=\"horizontal\">\n\n    <fragment\n        android:id=\"@+id/fragment1\"\n        android:name=\"com.jc.fragment_1.Fragment_1\"\n        android:layout_width=\"0dip\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\" />\n\n    <fragment\n        android:id=\"@+id/fragment2\"\n        android:name=\"com.jc.fragment_1.Fragment_2\"\n        android:layout_width=\"0dip\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\" />\n\n</LinearLayout>\n```\n\n### Fragment_1.java和Fragment_2.java和MainActivity.java\n\n```java\npublic class Fragment_1 extends Fragment {\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment_1,container,false);\n    }\n}\n```\n\n```java\npublic class Fragment_2 extends Fragment{\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment_2,container,false);\n    }\n}\n```\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n}\n```\n\n### 加载过程的代码\n\n```java\ncase R.id.first:{\n    Intent intent=new Intent(this,MainActivity.class);\n    startActivity(intent);\n    break;\n}\n```\n\n### 效果\n\n![](http://oezmbgg4j.bkt.clouddn.com/fragment_basic_1.png)\n\n\n## 动态加载\n\n根据用户的交互情况，对Fragment进行添加，移除，替换，以及执行其他动作，提交Activity的每一套变化被称作一个**事务**。\n\n每一事务都是同时执行一套变化，可以在一个事务中设置你所有执行的变化，包括add(),remove(),replace()，然后提交个Activity，必须调用commit()方法。\n\n如果允许使用Back键返回前一Fragment的状态，调用commit()之前可以加入addToBackStack()方法。\n\n1.获取到FragmentManager，在Activity中可以直接通过getFragmentManager得到。\n\n2.调用beginTransaction方法开启一个事务。\n\n3.向容器内加入Fragment，一般使用replace方法实现，需要传入容器的id和Fragment的实例。\n\n4.提交事务，调用commit方法提交。\n\n\n### 加载过程代码\n\n```java\ncase R.id.dynamic:{\n    FragmentDynamic fragmentDynamic=new FragmentDynamic();\n    FragmentManager fragmentManager=getFragmentManager();\n    FragmentTransaction beginTransaction=fragmentManager.beginTransaction();\n    beginTransaction.add(R.id.frame,fragmentDynamic);\n    beginTransaction.commit();\n    break;\n}\n```\n\n## fragment生命周期\n\n关键方法：**onAttach()**,**onCreateView()**\n\n```java\n\npublic class FragmentThird extends Fragment {\n    @Nullable\n    @Override\n\n    /**\n     * 每次创建会绘制Fragment的View组件时回调该方法。\n     */\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View v=inflater.inflate(R.layout.fragment_third,container,false);\n//        Log.i(\"Main\",\"Fragment third--onCreateView()\");\n        TextView textView=(TextView)v.findViewById(R.id.textview_third);\n        textView.setText(\"第三个Fragment\");\n        Log.i(\"Main\",\"Fragment third--onCreateView()\");\n        return v;\n    }\n\n\n    /**\n     * 当Fragment被添加到Activity时候会回调这个方法，并且只调用一次\n     * @param context\n     */\n    @Override\n    public void onAttach(Context context) {\n        super.onAttach(context);\n        Log.i(\"Main\",\"Fragment third--on attach()\");\n    }\n\n    /**\n     * 创建Fragment时会回调，只会调用一次\n     */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Log.i(\"Main\",\"Fragment third--onCreate()\");\n    }\n\n\n    /**\n     *当Fragment所在的Activity启动完成后调用\n     */\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        Log.i(\"Main\", \"Fragment third--onActivityCreated()\");\n    }\n\n    /**\n     * 启动Fragment\n     */\n    @Override\n    public void onStart() {\n        super.onStart();\n        Log.i(\"Main\", \"Fragment third--onStart()\");\n    }\n\n\n    /**\n     * 回复Fragment时会被回调，调用onStart()方法后面一定会调用\n     * onResume方法\n     */\n    @Override\n    public void onResume() {\n        super.onResume();\n        Log.i(\"Main\", \"Fragment third--onResume()\");\n    }\n\n    /**\n     * 暂停Fragment\n     */\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        Log.i(\"Main\",\"Fragment third--onPause()\");\n    }\n\n    /**\n     * 停止Fragment\n     */\n    @Override\n    public void onStop() {\n        super.onStop();\n        Log.i(\"Main\",\"Fragment third--onStop()\");\n    }\n\n    /**\n     * 销毁Fragment所包含的View组件时调用\n     */\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        Log.i(\"Main\", \"Fragment third--onDestroyView()\");\n    }\n\n    /**\n     * 销毁Framgent时会被调用\n     */\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.i(\"Main\", \"Fragment third--onDestroy()\");\n    }\n\n\n    /**\n     * 与onAttach()方法对应\n     * Fragment从Activity中删除时会回调该方法，并且只会调用一次\n     */\n    @Override\n    public void onDetach() {\n        super.onDetach();\n        Log.i(\"Main\", \"Fragment third--onDetach()\");\n    }\n}\n```\n\n```java\nLog结果：\n启动应用：null\n\n启动Fragment：\nI/Main(8163): Fragment third--on attach()\nI/Main(8163): Fragment third--onCreate()\nI/Main(8163): Fragment third--onCreateView()\nI/Main(8163): Fragment third--onActivityCreated()\nI/Main(8163): Fragment third--onStart()\nI/Main(8163): Fragment third--onResume()\n\n屏幕锁屏：\nI/Main(8163): Fragment third--onPause()\nI/Main(8163): Fragment third--onStop()\n\n\n解锁：\nI/Main(8163): Fragment third--onStart()\nI/Main(8163): Fragment third--onResume()\n\n切换到其它的Fragment:\nI/Main(8163): Fragment third--onPause()\nI/Main(8163): Fragment third--onStop()\nI/Main(8163): Fragment third--onDestroyView()\nI/Main(8163): Fragment third--onDestroy()\nI/Main(8163): Fragment third--onDetach()\n\n回到桌面:\nI/Main(8163): Fragment third--onPause()\nI/Main(8163): Fragment third--onStop()\n\n\n回到Fragment:\nI/Main(8163): Fragment third--onStart()\nI/Main(8163): Fragment third--onResume()\n\n\n退出Fragment：\nI/Main(8163): Fragment third--onPause()\nI/Main(8163): Fragment third--onStop()\nI/Main(8163): Fragment third--onDestroyView()\nI/Main(8163): Fragment third--onDestroy()\nI/Main(8163): Fragment third--onDetach()\n```\n\n## Activity和Fragment通信\n\nActivity ---> Fragment:在Activity中创建Bundle数据包，并调用Fragment的setArguments(Bundle bundle)方法。\n\nFragment ---> Activity：需要在Fragment中定义一个内部回调接口，让包含该Fragment的Activity实现该回调接口。这样Fragment可调用回调方法将数据传递给Activity。\n\n## 相关博客网址\n[Android Fragment完全解析，关于碎片你所需知道的一切](http://blog.csdn.net/guolin_blog/article/details/8881711)\n","source":"_posts/android/UI相关/Fragment/2016-03-09-Fragment-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-09\ntitle: Fragment初步\ncategory: Android\ntags: [android,android_fragment,android_UI]\nkeywords:\ndescription: 如何在应用中使用Fragment\n---\n\n## Fragment概要\n![](http://oezmbgg4j.bkt.clouddn.com/fragmentIntro.png)\n\n## **onCreateView()**方法\n\nFragment第一次绘制它的用户界面时，系统会调用此方法。为了方便绘制Fragment的UI，此方法必须返回一个View，如果不显示UI，返回null。\n\n\n### 标识Fragment方法\n\nandroid:id 提供一个唯一的ID 或\nandroid:tag 提供一个唯一的字符串tag\n\n## 静态加载\n\n在**Activity**的layout文件中声明**Fragment**，其中**android:name**属性制定了在layout中实例化的Fragment类。\n\n静态加载Fragment必须要给Fragment一个唯一的标识。\n\n文件目录：<br>\n——src<br>\n————Fragment_1.java (extends Fragment)<br>\n————Fragment_2.java   (extends Activity)<br>\n————MainActivity.java\t(extends Activity)<br>\n<br>\n——layout<br>\n————fragment_1.xml<br>\n————fragment_2.xml<br>\n————activity_main.xml<br>\n\n**Fragment1.java**利用**fragment_1.xml**返回一个**view**，**activity.xml**中的**android:name=\"com.jc.fragmentbasic.FragmentFirst\"**，然后**MainActivity**调用`setContentView(R.layout.activity_main);``\n\n\n### fragment_1和fragment_2.xml和activity_main.xml\n\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"This is fragment 1\"\n        android:textColor=\"#0000FF\"\n        android:textSize=\"25sp\"\n        android:background=\"#00FF00\"/>\n\n</LinearLayout>\n```\n\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"This is fragment 2\"\n        android:textColor=\"#FF0000\"\n        android:background=\"#00F0F0\"\n        android:textSize=\"25sp\" />\n\n</LinearLayout>\n```\n\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:baselineAligned=\"false\"\n      android:orientation=\"horizontal\">\n\n    <fragment\n        android:id=\"@+id/fragment1\"\n        android:name=\"com.jc.fragment_1.Fragment_1\"\n        android:layout_width=\"0dip\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\" />\n\n    <fragment\n        android:id=\"@+id/fragment2\"\n        android:name=\"com.jc.fragment_1.Fragment_2\"\n        android:layout_width=\"0dip\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\" />\n\n</LinearLayout>\n```\n\n### Fragment_1.java和Fragment_2.java和MainActivity.java\n\n```java\npublic class Fragment_1 extends Fragment {\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment_1,container,false);\n    }\n}\n```\n\n```java\npublic class Fragment_2 extends Fragment{\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment_2,container,false);\n    }\n}\n```\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n}\n```\n\n### 加载过程的代码\n\n```java\ncase R.id.first:{\n    Intent intent=new Intent(this,MainActivity.class);\n    startActivity(intent);\n    break;\n}\n```\n\n### 效果\n\n![](http://oezmbgg4j.bkt.clouddn.com/fragment_basic_1.png)\n\n\n## 动态加载\n\n根据用户的交互情况，对Fragment进行添加，移除，替换，以及执行其他动作，提交Activity的每一套变化被称作一个**事务**。\n\n每一事务都是同时执行一套变化，可以在一个事务中设置你所有执行的变化，包括add(),remove(),replace()，然后提交个Activity，必须调用commit()方法。\n\n如果允许使用Back键返回前一Fragment的状态，调用commit()之前可以加入addToBackStack()方法。\n\n1.获取到FragmentManager，在Activity中可以直接通过getFragmentManager得到。\n\n2.调用beginTransaction方法开启一个事务。\n\n3.向容器内加入Fragment，一般使用replace方法实现，需要传入容器的id和Fragment的实例。\n\n4.提交事务，调用commit方法提交。\n\n\n### 加载过程代码\n\n```java\ncase R.id.dynamic:{\n    FragmentDynamic fragmentDynamic=new FragmentDynamic();\n    FragmentManager fragmentManager=getFragmentManager();\n    FragmentTransaction beginTransaction=fragmentManager.beginTransaction();\n    beginTransaction.add(R.id.frame,fragmentDynamic);\n    beginTransaction.commit();\n    break;\n}\n```\n\n## fragment生命周期\n\n关键方法：**onAttach()**,**onCreateView()**\n\n```java\n\npublic class FragmentThird extends Fragment {\n    @Nullable\n    @Override\n\n    /**\n     * 每次创建会绘制Fragment的View组件时回调该方法。\n     */\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View v=inflater.inflate(R.layout.fragment_third,container,false);\n//        Log.i(\"Main\",\"Fragment third--onCreateView()\");\n        TextView textView=(TextView)v.findViewById(R.id.textview_third);\n        textView.setText(\"第三个Fragment\");\n        Log.i(\"Main\",\"Fragment third--onCreateView()\");\n        return v;\n    }\n\n\n    /**\n     * 当Fragment被添加到Activity时候会回调这个方法，并且只调用一次\n     * @param context\n     */\n    @Override\n    public void onAttach(Context context) {\n        super.onAttach(context);\n        Log.i(\"Main\",\"Fragment third--on attach()\");\n    }\n\n    /**\n     * 创建Fragment时会回调，只会调用一次\n     */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Log.i(\"Main\",\"Fragment third--onCreate()\");\n    }\n\n\n    /**\n     *当Fragment所在的Activity启动完成后调用\n     */\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        Log.i(\"Main\", \"Fragment third--onActivityCreated()\");\n    }\n\n    /**\n     * 启动Fragment\n     */\n    @Override\n    public void onStart() {\n        super.onStart();\n        Log.i(\"Main\", \"Fragment third--onStart()\");\n    }\n\n\n    /**\n     * 回复Fragment时会被回调，调用onStart()方法后面一定会调用\n     * onResume方法\n     */\n    @Override\n    public void onResume() {\n        super.onResume();\n        Log.i(\"Main\", \"Fragment third--onResume()\");\n    }\n\n    /**\n     * 暂停Fragment\n     */\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        Log.i(\"Main\",\"Fragment third--onPause()\");\n    }\n\n    /**\n     * 停止Fragment\n     */\n    @Override\n    public void onStop() {\n        super.onStop();\n        Log.i(\"Main\",\"Fragment third--onStop()\");\n    }\n\n    /**\n     * 销毁Fragment所包含的View组件时调用\n     */\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        Log.i(\"Main\", \"Fragment third--onDestroyView()\");\n    }\n\n    /**\n     * 销毁Framgent时会被调用\n     */\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.i(\"Main\", \"Fragment third--onDestroy()\");\n    }\n\n\n    /**\n     * 与onAttach()方法对应\n     * Fragment从Activity中删除时会回调该方法，并且只会调用一次\n     */\n    @Override\n    public void onDetach() {\n        super.onDetach();\n        Log.i(\"Main\", \"Fragment third--onDetach()\");\n    }\n}\n```\n\n```java\nLog结果：\n启动应用：null\n\n启动Fragment：\nI/Main(8163): Fragment third--on attach()\nI/Main(8163): Fragment third--onCreate()\nI/Main(8163): Fragment third--onCreateView()\nI/Main(8163): Fragment third--onActivityCreated()\nI/Main(8163): Fragment third--onStart()\nI/Main(8163): Fragment third--onResume()\n\n屏幕锁屏：\nI/Main(8163): Fragment third--onPause()\nI/Main(8163): Fragment third--onStop()\n\n\n解锁：\nI/Main(8163): Fragment third--onStart()\nI/Main(8163): Fragment third--onResume()\n\n切换到其它的Fragment:\nI/Main(8163): Fragment third--onPause()\nI/Main(8163): Fragment third--onStop()\nI/Main(8163): Fragment third--onDestroyView()\nI/Main(8163): Fragment third--onDestroy()\nI/Main(8163): Fragment third--onDetach()\n\n回到桌面:\nI/Main(8163): Fragment third--onPause()\nI/Main(8163): Fragment third--onStop()\n\n\n回到Fragment:\nI/Main(8163): Fragment third--onStart()\nI/Main(8163): Fragment third--onResume()\n\n\n退出Fragment：\nI/Main(8163): Fragment third--onPause()\nI/Main(8163): Fragment third--onStop()\nI/Main(8163): Fragment third--onDestroyView()\nI/Main(8163): Fragment third--onDestroy()\nI/Main(8163): Fragment third--onDetach()\n```\n\n## Activity和Fragment通信\n\nActivity ---> Fragment:在Activity中创建Bundle数据包，并调用Fragment的setArguments(Bundle bundle)方法。\n\nFragment ---> Activity：需要在Fragment中定义一个内部回调接口，让包含该Fragment的Activity实现该回调接口。这样Fragment可调用回调方法将数据传递给Activity。\n\n## 相关博客网址\n[Android Fragment完全解析，关于碎片你所需知道的一切](http://blog.csdn.net/guolin_blog/article/details/8881711)\n","slug":"android/UI相关/Fragment/2016-03-09-Fragment-basic","published":1,"updated":"2018-08-09T10:10:11.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfc5009p28t1uhg014wr","content":"<h2 id=\"Fragment概要\"><a href=\"#Fragment概要\" class=\"headerlink\" title=\"Fragment概要\"></a>Fragment概要</h2><p><img src=\"http://oezmbgg4j.bkt.clouddn.com/fragmentIntro.png\" alt></p>\n<h2 id=\"onCreateView-方法\"><a href=\"#onCreateView-方法\" class=\"headerlink\" title=\"onCreateView()方法\"></a><strong>onCreateView()</strong>方法</h2><p>Fragment第一次绘制它的用户界面时，系统会调用此方法。为了方便绘制Fragment的UI，此方法必须返回一个View，如果不显示UI，返回null。</p>\n<h3 id=\"标识Fragment方法\"><a href=\"#标识Fragment方法\" class=\"headerlink\" title=\"标识Fragment方法\"></a>标识Fragment方法</h3><p>android:id 提供一个唯一的ID 或<br>android:tag 提供一个唯一的字符串tag</p>\n<h2 id=\"静态加载\"><a href=\"#静态加载\" class=\"headerlink\" title=\"静态加载\"></a>静态加载</h2><p>在<strong>Activity</strong>的layout文件中声明<strong>Fragment</strong>，其中<strong>android:name</strong>属性制定了在layout中实例化的Fragment类。</p>\n<p>静态加载Fragment必须要给Fragment一个唯一的标识。</p>\n<p>文件目录：<br><br>——src<br><br>————Fragment_1.java (extends Fragment)<br><br>————Fragment_2.java   (extends Activity)<br><br>————MainActivity.java    (extends Activity)<br><br><br><br>——layout<br><br>————fragment_1.xml<br><br>————fragment_2.xml<br><br>————activity_main.xml<br></p>\n<p><strong>Fragment1.java</strong>利用<strong>fragment_1.xml</strong>返回一个<strong>view</strong>，<strong>activity.xml</strong>中的<strong>android:name=”com.jc.fragmentbasic.FragmentFirst”</strong>，然后<strong>MainActivity</strong>调用`setContentView(R.layout.activity_main);``</p>\n<h3 id=\"fragment-1和fragment-2-xml和activity-main-xml\"><a href=\"#fragment-1和fragment-2-xml和activity-main-xml\" class=\"headerlink\" title=\"fragment_1和fragment_2.xml和activity_main.xml\"></a>fragment_1和fragment_2.xml和activity_main.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"This is fragment 1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#0000FF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"25sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#00FF00\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"This is fragment 2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#FF0000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#00F0F0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"25sp\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:baselineAligned</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.jc.fragment_1.Fragment_1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.jc.fragment_1.Fragment_2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fragment-1-java和Fragment-2-java和MainActivity-java\"><a href=\"#Fragment-1-java和Fragment-2-java和MainActivity-java\" class=\"headerlink\" title=\"Fragment_1.java和Fragment_2.java和MainActivity.java\"></a>Fragment_1.java和Fragment_2.java和MainActivity.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fragment_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_1,container,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fragment_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_2,container,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加载过程的代码\"><a href=\"#加载过程的代码\" class=\"headerlink\" title=\"加载过程的代码\"></a>加载过程的代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> R.id.first:&#123;</span><br><span class=\"line\">    Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,MainActivity.class);</span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oezmbgg4j.bkt.clouddn.com/fragment_basic_1.png\" alt></p>\n<h2 id=\"动态加载\"><a href=\"#动态加载\" class=\"headerlink\" title=\"动态加载\"></a>动态加载</h2><p>根据用户的交互情况，对Fragment进行添加，移除，替换，以及执行其他动作，提交Activity的每一套变化被称作一个<strong>事务</strong>。</p>\n<p>每一事务都是同时执行一套变化，可以在一个事务中设置你所有执行的变化，包括add(),remove(),replace()，然后提交个Activity，必须调用commit()方法。</p>\n<p>如果允许使用Back键返回前一Fragment的状态，调用commit()之前可以加入addToBackStack()方法。</p>\n<p>1.获取到FragmentManager，在Activity中可以直接通过getFragmentManager得到。</p>\n<p>2.调用beginTransaction方法开启一个事务。</p>\n<p>3.向容器内加入Fragment，一般使用replace方法实现，需要传入容器的id和Fragment的实例。</p>\n<p>4.提交事务，调用commit方法提交。</p>\n<h3 id=\"加载过程代码\"><a href=\"#加载过程代码\" class=\"headerlink\" title=\"加载过程代码\"></a>加载过程代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> R.id.dynamic:&#123;</span><br><span class=\"line\">    FragmentDynamic fragmentDynamic=<span class=\"keyword\">new</span> FragmentDynamic();</span><br><span class=\"line\">    FragmentManager fragmentManager=getFragmentManager();</span><br><span class=\"line\">    FragmentTransaction beginTransaction=fragmentManager.beginTransaction();</span><br><span class=\"line\">    beginTransaction.add(R.id.frame,fragmentDynamic);</span><br><span class=\"line\">    beginTransaction.commit();</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fragment生命周期\"><a href=\"#fragment生命周期\" class=\"headerlink\" title=\"fragment生命周期\"></a>fragment生命周期</h2><p>关键方法：<strong>onAttach()</strong>,<strong>onCreateView()</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentThird</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次创建会绘制Fragment的View组件时回调该方法。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        View v=inflater.inflate(R.layout.fragment_third,container,<span class=\"keyword\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">//        Log.i(\"Main\",\"Fragment third--onCreateView()\");</span></span><br><span class=\"line\">        TextView textView=(TextView)v.findViewById(R.id.textview_third);</span><br><span class=\"line\">        textView.setText(<span class=\"string\">\"第三个Fragment\"</span>);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>,<span class=\"string\">\"Fragment third--onCreateView()\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当Fragment被添加到Activity时候会回调这个方法，并且只调用一次</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttach</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onAttach(context);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>,<span class=\"string\">\"Fragment third--on attach()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建Fragment时会回调，只会调用一次</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>,<span class=\"string\">\"Fragment third--onCreate()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *当Fragment所在的Activity启动完成后调用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onActivityCreated()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动Fragment</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onStart()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 回复Fragment时会被回调，调用onStart()方法后面一定会调用</span></span><br><span class=\"line\"><span class=\"comment\">     * onResume方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onResume()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停Fragment</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>,<span class=\"string\">\"Fragment third--onPause()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 停止Fragment</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>,<span class=\"string\">\"Fragment third--onStop()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 销毁Fragment所包含的View组件时调用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroyView();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onDestroyView()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 销毁Framgent时会被调用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onDestroy()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 与onAttach()方法对应</span></span><br><span class=\"line\"><span class=\"comment\">     * Fragment从Activity中删除时会回调该方法，并且只会调用一次</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDetach();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onDetach()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log结果：</span><br><span class=\"line\">启动应用：<span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">启动Fragment：</span><br><span class=\"line\">I/Main(<span class=\"number\">8163</span>): Fragment third--<span class=\"function\">on <span class=\"title\">attach</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onCreate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onCreateView</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onActivityCreated</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStart</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onResume</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">屏幕锁屏：</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onPause</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">解锁：</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStart</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onResume</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">切换到其它的Fragment:</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onPause</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDestroyView</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDestroy</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDetach</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">回到桌面:</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onPause</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">回到Fragment:</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStart</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onResume</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">退出Fragment：</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onPause</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDestroyView</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDestroy</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDetach</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Activity和Fragment通信\"><a href=\"#Activity和Fragment通信\" class=\"headerlink\" title=\"Activity和Fragment通信\"></a>Activity和Fragment通信</h2><p>Activity —&gt; Fragment:在Activity中创建Bundle数据包，并调用Fragment的setArguments(Bundle bundle)方法。</p>\n<p>Fragment —&gt; Activity：需要在Fragment中定义一个内部回调接口，让包含该Fragment的Activity实现该回调接口。这样Fragment可调用回调方法将数据传递给Activity。</p>\n<h2 id=\"相关博客网址\"><a href=\"#相关博客网址\" class=\"headerlink\" title=\"相关博客网址\"></a>相关博客网址</h2><p><a href=\"http://blog.csdn.net/guolin_blog/article/details/8881711\" target=\"_blank\" rel=\"noopener\">Android Fragment完全解析，关于碎片你所需知道的一切</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fragment概要\"><a href=\"#Fragment概要\" class=\"headerlink\" title=\"Fragment概要\"></a>Fragment概要</h2><p><img src=\"http://oezmbgg4j.bkt.clouddn.com/fragmentIntro.png\" alt></p>\n<h2 id=\"onCreateView-方法\"><a href=\"#onCreateView-方法\" class=\"headerlink\" title=\"onCreateView()方法\"></a><strong>onCreateView()</strong>方法</h2><p>Fragment第一次绘制它的用户界面时，系统会调用此方法。为了方便绘制Fragment的UI，此方法必须返回一个View，如果不显示UI，返回null。</p>\n<h3 id=\"标识Fragment方法\"><a href=\"#标识Fragment方法\" class=\"headerlink\" title=\"标识Fragment方法\"></a>标识Fragment方法</h3><p>android:id 提供一个唯一的ID 或<br>android:tag 提供一个唯一的字符串tag</p>\n<h2 id=\"静态加载\"><a href=\"#静态加载\" class=\"headerlink\" title=\"静态加载\"></a>静态加载</h2><p>在<strong>Activity</strong>的layout文件中声明<strong>Fragment</strong>，其中<strong>android:name</strong>属性制定了在layout中实例化的Fragment类。</p>\n<p>静态加载Fragment必须要给Fragment一个唯一的标识。</p>\n<p>文件目录：<br><br>——src<br><br>————Fragment_1.java (extends Fragment)<br><br>————Fragment_2.java   (extends Activity)<br><br>————MainActivity.java    (extends Activity)<br><br><br><br>——layout<br><br>————fragment_1.xml<br><br>————fragment_2.xml<br><br>————activity_main.xml<br></p>\n<p><strong>Fragment1.java</strong>利用<strong>fragment_1.xml</strong>返回一个<strong>view</strong>，<strong>activity.xml</strong>中的<strong>android:name=”com.jc.fragmentbasic.FragmentFirst”</strong>，然后<strong>MainActivity</strong>调用`setContentView(R.layout.activity_main);``</p>\n<h3 id=\"fragment-1和fragment-2-xml和activity-main-xml\"><a href=\"#fragment-1和fragment-2-xml和activity-main-xml\" class=\"headerlink\" title=\"fragment_1和fragment_2.xml和activity_main.xml\"></a>fragment_1和fragment_2.xml和activity_main.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"This is fragment 1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#0000FF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"25sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#00FF00\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"This is fragment 2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#FF0000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#00F0F0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"25sp\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:baselineAligned</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.jc.fragment_1.Fragment_1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.jc.fragment_1.Fragment_2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fragment-1-java和Fragment-2-java和MainActivity-java\"><a href=\"#Fragment-1-java和Fragment-2-java和MainActivity-java\" class=\"headerlink\" title=\"Fragment_1.java和Fragment_2.java和MainActivity.java\"></a>Fragment_1.java和Fragment_2.java和MainActivity.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fragment_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_1,container,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fragment_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_2,container,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加载过程的代码\"><a href=\"#加载过程的代码\" class=\"headerlink\" title=\"加载过程的代码\"></a>加载过程的代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> R.id.first:&#123;</span><br><span class=\"line\">    Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,MainActivity.class);</span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oezmbgg4j.bkt.clouddn.com/fragment_basic_1.png\" alt></p>\n<h2 id=\"动态加载\"><a href=\"#动态加载\" class=\"headerlink\" title=\"动态加载\"></a>动态加载</h2><p>根据用户的交互情况，对Fragment进行添加，移除，替换，以及执行其他动作，提交Activity的每一套变化被称作一个<strong>事务</strong>。</p>\n<p>每一事务都是同时执行一套变化，可以在一个事务中设置你所有执行的变化，包括add(),remove(),replace()，然后提交个Activity，必须调用commit()方法。</p>\n<p>如果允许使用Back键返回前一Fragment的状态，调用commit()之前可以加入addToBackStack()方法。</p>\n<p>1.获取到FragmentManager，在Activity中可以直接通过getFragmentManager得到。</p>\n<p>2.调用beginTransaction方法开启一个事务。</p>\n<p>3.向容器内加入Fragment，一般使用replace方法实现，需要传入容器的id和Fragment的实例。</p>\n<p>4.提交事务，调用commit方法提交。</p>\n<h3 id=\"加载过程代码\"><a href=\"#加载过程代码\" class=\"headerlink\" title=\"加载过程代码\"></a>加载过程代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> R.id.dynamic:&#123;</span><br><span class=\"line\">    FragmentDynamic fragmentDynamic=<span class=\"keyword\">new</span> FragmentDynamic();</span><br><span class=\"line\">    FragmentManager fragmentManager=getFragmentManager();</span><br><span class=\"line\">    FragmentTransaction beginTransaction=fragmentManager.beginTransaction();</span><br><span class=\"line\">    beginTransaction.add(R.id.frame,fragmentDynamic);</span><br><span class=\"line\">    beginTransaction.commit();</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fragment生命周期\"><a href=\"#fragment生命周期\" class=\"headerlink\" title=\"fragment生命周期\"></a>fragment生命周期</h2><p>关键方法：<strong>onAttach()</strong>,<strong>onCreateView()</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentThird</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次创建会绘制Fragment的View组件时回调该方法。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        View v=inflater.inflate(R.layout.fragment_third,container,<span class=\"keyword\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">//        Log.i(\"Main\",\"Fragment third--onCreateView()\");</span></span><br><span class=\"line\">        TextView textView=(TextView)v.findViewById(R.id.textview_third);</span><br><span class=\"line\">        textView.setText(<span class=\"string\">\"第三个Fragment\"</span>);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>,<span class=\"string\">\"Fragment third--onCreateView()\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当Fragment被添加到Activity时候会回调这个方法，并且只调用一次</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttach</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onAttach(context);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>,<span class=\"string\">\"Fragment third--on attach()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建Fragment时会回调，只会调用一次</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>,<span class=\"string\">\"Fragment third--onCreate()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *当Fragment所在的Activity启动完成后调用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onActivityCreated()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动Fragment</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onStart()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 回复Fragment时会被回调，调用onStart()方法后面一定会调用</span></span><br><span class=\"line\"><span class=\"comment\">     * onResume方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onResume()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停Fragment</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>,<span class=\"string\">\"Fragment third--onPause()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 停止Fragment</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>,<span class=\"string\">\"Fragment third--onStop()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 销毁Fragment所包含的View组件时调用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroyView();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onDestroyView()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 销毁Framgent时会被调用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onDestroy()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 与onAttach()方法对应</span></span><br><span class=\"line\"><span class=\"comment\">     * Fragment从Activity中删除时会回调该方法，并且只会调用一次</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDetach();</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Fragment third--onDetach()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log结果：</span><br><span class=\"line\">启动应用：<span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">启动Fragment：</span><br><span class=\"line\">I/Main(<span class=\"number\">8163</span>): Fragment third--<span class=\"function\">on <span class=\"title\">attach</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onCreate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onCreateView</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onActivityCreated</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStart</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onResume</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">屏幕锁屏：</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onPause</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">解锁：</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStart</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onResume</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">切换到其它的Fragment:</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onPause</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDestroyView</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDestroy</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDetach</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">回到桌面:</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onPause</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">回到Fragment:</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStart</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onResume</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">退出Fragment：</span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onPause</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onStop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDestroyView</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDestroy</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">I/<span class=\"title\">Main</span><span class=\"params\">(<span class=\"number\">8163</span>)</span>: Fragment third--<span class=\"title\">onDetach</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Activity和Fragment通信\"><a href=\"#Activity和Fragment通信\" class=\"headerlink\" title=\"Activity和Fragment通信\"></a>Activity和Fragment通信</h2><p>Activity —&gt; Fragment:在Activity中创建Bundle数据包，并调用Fragment的setArguments(Bundle bundle)方法。</p>\n<p>Fragment —&gt; Activity：需要在Fragment中定义一个内部回调接口，让包含该Fragment的Activity实现该回调接口。这样Fragment可调用回调方法将数据传递给Activity。</p>\n<h2 id=\"相关博客网址\"><a href=\"#相关博客网址\" class=\"headerlink\" title=\"相关博客网址\"></a>相关博客网址</h2><p><a href=\"http://blog.csdn.net/guolin_blog/article/details/8881711\" target=\"_blank\" rel=\"noopener\">Android Fragment完全解析，关于碎片你所需知道的一切</a></p>\n"},{"author":"ivyxjc","date":"2016-03-28T16:00:00.000Z","title":"BeautifulSoup4入门","keywords":null,"description":"bs4可以非常高效地获取网页中的指定内容.","_content":"\n## 对象的种类\nBeautifulSoup会将HTML文档抓换成一个树形结构, 每个节点都是Python对象，所有对象可以分为4类：`Tag`,`NavigableString`,`BeautifulSoup`,`Comment`。\n\n\n### Tag\n`Tag`与XML或HTML中的tag相同：\n\n```python3\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>')\ntag = soup.b\nprint(type(tag))\nprint(tag)\n\n--<class 'bs4.element.Tag'>\n--<b class=\"boldest\">Extremely bold</b>\n```\n\n#### name\n\n每一个Tag都有自己的name，可以通过`.name`。改变tag的name，将会影响通过当前BS对象生成的HTML文档\n\n```python3\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>',\"html.parser\")\ntag = soup.b\nprint(tag)\nprint(tag.name)\ntag.name=\"blockquote\"\nprint(tag)\n\n---<b class=\"boldest\">Extremely bold</b>\n---b\n---<blockquote class=\"boldest\">Extremely bold</blockquote>\n```\n\n#### attributes\n一个tag可能有多个属性\n\n```python3\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>',\"html.parser\")\ntag = soup.b\nprint(tag['class'])\nprint(tag.attrs)\n\n---['boldest']\n---{'class': ['boldest']}\n```\n\ntag的属性可以被添加，删除或修改\n\n```python\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>',\"html.parser\")\ntag = soup.b\n#更改属性\ntag['class']=\"verybold\"\ntag['id']=1\nprint(tag)\n\n#删除属性\ndel tag['class']\nprint(tag)\nprint(tag.get('class'))\n\n---<b class=\"verybold\" id=\"1\">Extremely bold</b>\n---<b id=\"1\">Extremely bold</b>\n---\n```\n\n##### 多值属性\n多值属性即为可包含多个值的属性，最常见的即为`class`\n`xml`中没有多值属性\n\n多值属性的返回类型是list\n\n```python\ncss_soup = BeautifulSoup('<p class=\"body strikeout\"></p>',\"html.parser\")\nprint(css_soup.p['class'])\n\n---['body', 'strikeout']\n```\n\n若某个属性看起来像多值属性，但是在任何版本HTML中都没有被定义为多值属性，那么BS会将这个属性作为字符串返回\n\n```python\nid_soup = BeautifulSoup('<p id=\"my id\"></p>',\"html.parser\")\nprint(id_soup.p['id'])\n\n---my id\n```\n\n### NavigableString\n\n`NavigableString`不支持`.content`,`.string`,`find()`方法。\n\n如果想在Beautiful Soup之外使用`NavigableString`对象,需要调用`unicode()`方法,将该对象转换成普通的Unicode字符串,否则就算Beautiful Soup已方法已经执行结束,该对象的输出也会带有对象的引用地址.这样会浪费内存.\n\n```python\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>',\"html.parser\")\ntag = soup.b\nprint(tag.string)\nprint(type(tag.string))\ntag.string.replace_with(\"No long bold\")\nprint(tag)\n\n---Extremely bold\n---<class 'bs4.element.NavigableString'>\n---<b class=\"boldest\">No long bold</b>\n```\n\n## BeautifulSoup\n\n`BeautifulSoup`对象表示的是一个文档的全部内容.大部分时候,可以把它当作 Tag 对象,它支持 遍历文档树 和 搜索文档树 中描述的大部分的方法.\n\n`BeautifuSoup`没有name和attribute属性。但有一个值为`[document]`的特殊属性`.name`\n\n```python\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>',\"html.parser\")\nprint(soup.name)\n\n---[document]\n```\n\n### Comment\n\n## 遍历文档树\n\n```\nhtml_doc = \"\"\"\n<html><head><title>The Dormouse's story</title></head>\n\n<p class=\"title\"><b>The Dormouse's story</b></p>\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=\"story\">...</p>\n\"\"\"\n```\n\n### `.content`和`.children`\ntag的`.contents`属性可以将tag的子节点以列表的方式输出:\n通过tag的`.children`生成器,可以对tag的子节点进行循环:\n\n```python\nprint(soup.title.contents)\nprint(soup.title.contents[0])\n\n---[\"The Dormouse's story\"]\n---The Dormouse's story\n```\n\n```python\nfor i in soup.head.children:\n    print(i)\n\n---<title>The Dormouse's story</title>\n```\n\n### `.descendants`\n\n`.descendants`属性可以对所有tag的子孙节点进行递归循环\n\n```python\nprint(soup.head.contents)\nfor child in soup.head.descendants:\n    print(child)\n\nprint(len(list(soup.children)))\nprint(len(list(soup.descendants)))\n\n---[<title>The Dormouse's story</title>]\n---<title>The Dormouse's story</title>\n---The Dormouse's story\n---2\n---25\n```\n\n### `.string`\n\n如果tag只有一个`NavigableString`类型子节点,那么这个tag可以使用`.string`得到子节点\n\n```python\nprint(soup.head.string)\n\n---The Dormouse's story\n```\n\n### `.strings`和`stripped_strings`\n如果tag中有多个字符串，可以使用`.strings`循环获取\n使用`.stripped_strings`可以去除多余空白内容：\n\n```python\nfor string in soup.stripped_strings:\n    print(repr(string))\n```\n\n### `.parent`和`.parents`\n通过`.parent`属性来获取某个元素的父节点\n通过元素的`.parents`属性可以递归得到元素的所有父辈节点。\n\n```python\nfor parent in soup.a.parents:\n    if parent is None:\n        print(parent)\n    else:\n        print(parent.name)\n\n---p\n---html\n---[document]\n```\n\n### 兄弟节点\n\n#### `.next_sibling`和`.previous_sibling`\n\n使用`。next_sibling`和`.previous_sibling`属性来查询兄弟节点\n\n实际文档中的tag的 .next_sibling 和 .previous_sibling 属性通常是字符串或空白。因为中间可能会隔着一些字符以及标点。\n\n#### `.next_siblings`和`.previous_siblings`\n\n```python3\nfor sibling in soup.a.next_siblings:\n    print(repr(sibling))\n\n---',\\n'\n---<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\n---' and\\n'\n---<a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n';\\nand they lived at the bottom of a well.'\n```\n\n### 重现解析过程\n\n#### `.next_element`和`.previous_element`\n`next_element`属性指向解析过程中下一个被解析的对象(字符串或tag),结果可能与`.next_sibling`相同,但通常是不一样的.\n\n```python\nlast_a_tag=soup.find(\"a\",id=\"link3\")\nprint(last_a_tag)\nprint(last_a_tag.next_sibling)\nprint(last_a_tag.next_element)\n\n---<a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n---;\n---and they lived at the bottom of a well.\n---Tillie\n```\n\n#### `.next_elements`和`.previous_elements`\n\n## 搜索文档树\n\n### 过滤器\n\n#### 字符串\n\n#### 正则表达式\n\n```python\nfor tag in soup.find_all(re.compile(\"^b\")):\n    print(tag.name)\n```\n\n#### 列表\n如果传入列表参数,Beautiful Soup会将与列表中任一元素匹配的内容返回.\n\n#### True\n\nTrue可以匹配任何值,但是不会返回字符串节点\n\n#### 方法\n如果没有合适过滤器,那么还可以定义一个方法,方法只接受一个元素参数,如果这个方法返回True表示当前元素匹配并且被找到,如果不是则反回False。\n\n```python3\ndef has_class_but_no_id(tag):\n    return tag.has_attr('class') and not tag.has_attr('id')\n```\n\n\n### find_all()\n\n#### name参数\n\n#### keyword参数\n\n`soup.find_all(id='link2')`\n\n\n#### 按CSS搜索\n\n因为`class`是python保留字，所以用`class_`\n例：\n`soup.find_all(\"a\",class_=\"sister\")`\n\n`class_`参数同样接受不同类型的过滤器 ,字符串,正则表达式,方法或 True :\n\ntag的`class`属性是 多值属性 .按照CSS类名搜索tag时,可以分别搜索tag中的每个CSS类名:\n\n#### text参数\n通过`text`参数可以搜搜文档中的字符串内容.\n\n#### limit参数\n\n`limit`参数限制返回结果的数量\n\n#### recursive参数\n调用tag的`find_all()`方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 `recursive=False`.\n\n#### 简写\n\n```\nsoup.find_all(\"a\")\nsoup(\"a\")\n```\n\n```\nsoup.title.find_all(text=True)\nsoup.title(text=True)\n```\n\n### find()\n\n只返回一个结果\n\n### `find_parents()`和`find_parent()`\n\n### `find_next_siblings()和`find_next_sibling()`\n\n### `find_all_next()`和`find_next()`\n\n### `find_all_previous()`和`find_previous()`\n\n### CSS选择器\n在Tag或BeautifulSoup对象的`.select()`方法中传入字符串参数,即可使用CSS选择器的语法找到tag:\n","source":"_posts/python/Spider/基础知识/2016-03-29-beautiful-soup4-basic.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-29\ntitle: BeautifulSoup4入门\ncategory: Python\ntags: [python,spider,bs4]\nkeywords:\ndescription: bs4可以非常高效地获取网页中的指定内容.\n---\n\n## 对象的种类\nBeautifulSoup会将HTML文档抓换成一个树形结构, 每个节点都是Python对象，所有对象可以分为4类：`Tag`,`NavigableString`,`BeautifulSoup`,`Comment`。\n\n\n### Tag\n`Tag`与XML或HTML中的tag相同：\n\n```python3\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>')\ntag = soup.b\nprint(type(tag))\nprint(tag)\n\n--<class 'bs4.element.Tag'>\n--<b class=\"boldest\">Extremely bold</b>\n```\n\n#### name\n\n每一个Tag都有自己的name，可以通过`.name`。改变tag的name，将会影响通过当前BS对象生成的HTML文档\n\n```python3\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>',\"html.parser\")\ntag = soup.b\nprint(tag)\nprint(tag.name)\ntag.name=\"blockquote\"\nprint(tag)\n\n---<b class=\"boldest\">Extremely bold</b>\n---b\n---<blockquote class=\"boldest\">Extremely bold</blockquote>\n```\n\n#### attributes\n一个tag可能有多个属性\n\n```python3\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>',\"html.parser\")\ntag = soup.b\nprint(tag['class'])\nprint(tag.attrs)\n\n---['boldest']\n---{'class': ['boldest']}\n```\n\ntag的属性可以被添加，删除或修改\n\n```python\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>',\"html.parser\")\ntag = soup.b\n#更改属性\ntag['class']=\"verybold\"\ntag['id']=1\nprint(tag)\n\n#删除属性\ndel tag['class']\nprint(tag)\nprint(tag.get('class'))\n\n---<b class=\"verybold\" id=\"1\">Extremely bold</b>\n---<b id=\"1\">Extremely bold</b>\n---\n```\n\n##### 多值属性\n多值属性即为可包含多个值的属性，最常见的即为`class`\n`xml`中没有多值属性\n\n多值属性的返回类型是list\n\n```python\ncss_soup = BeautifulSoup('<p class=\"body strikeout\"></p>',\"html.parser\")\nprint(css_soup.p['class'])\n\n---['body', 'strikeout']\n```\n\n若某个属性看起来像多值属性，但是在任何版本HTML中都没有被定义为多值属性，那么BS会将这个属性作为字符串返回\n\n```python\nid_soup = BeautifulSoup('<p id=\"my id\"></p>',\"html.parser\")\nprint(id_soup.p['id'])\n\n---my id\n```\n\n### NavigableString\n\n`NavigableString`不支持`.content`,`.string`,`find()`方法。\n\n如果想在Beautiful Soup之外使用`NavigableString`对象,需要调用`unicode()`方法,将该对象转换成普通的Unicode字符串,否则就算Beautiful Soup已方法已经执行结束,该对象的输出也会带有对象的引用地址.这样会浪费内存.\n\n```python\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>',\"html.parser\")\ntag = soup.b\nprint(tag.string)\nprint(type(tag.string))\ntag.string.replace_with(\"No long bold\")\nprint(tag)\n\n---Extremely bold\n---<class 'bs4.element.NavigableString'>\n---<b class=\"boldest\">No long bold</b>\n```\n\n## BeautifulSoup\n\n`BeautifulSoup`对象表示的是一个文档的全部内容.大部分时候,可以把它当作 Tag 对象,它支持 遍历文档树 和 搜索文档树 中描述的大部分的方法.\n\n`BeautifuSoup`没有name和attribute属性。但有一个值为`[document]`的特殊属性`.name`\n\n```python\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>',\"html.parser\")\nprint(soup.name)\n\n---[document]\n```\n\n### Comment\n\n## 遍历文档树\n\n```\nhtml_doc = \"\"\"\n<html><head><title>The Dormouse's story</title></head>\n\n<p class=\"title\"><b>The Dormouse's story</b></p>\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=\"story\">...</p>\n\"\"\"\n```\n\n### `.content`和`.children`\ntag的`.contents`属性可以将tag的子节点以列表的方式输出:\n通过tag的`.children`生成器,可以对tag的子节点进行循环:\n\n```python\nprint(soup.title.contents)\nprint(soup.title.contents[0])\n\n---[\"The Dormouse's story\"]\n---The Dormouse's story\n```\n\n```python\nfor i in soup.head.children:\n    print(i)\n\n---<title>The Dormouse's story</title>\n```\n\n### `.descendants`\n\n`.descendants`属性可以对所有tag的子孙节点进行递归循环\n\n```python\nprint(soup.head.contents)\nfor child in soup.head.descendants:\n    print(child)\n\nprint(len(list(soup.children)))\nprint(len(list(soup.descendants)))\n\n---[<title>The Dormouse's story</title>]\n---<title>The Dormouse's story</title>\n---The Dormouse's story\n---2\n---25\n```\n\n### `.string`\n\n如果tag只有一个`NavigableString`类型子节点,那么这个tag可以使用`.string`得到子节点\n\n```python\nprint(soup.head.string)\n\n---The Dormouse's story\n```\n\n### `.strings`和`stripped_strings`\n如果tag中有多个字符串，可以使用`.strings`循环获取\n使用`.stripped_strings`可以去除多余空白内容：\n\n```python\nfor string in soup.stripped_strings:\n    print(repr(string))\n```\n\n### `.parent`和`.parents`\n通过`.parent`属性来获取某个元素的父节点\n通过元素的`.parents`属性可以递归得到元素的所有父辈节点。\n\n```python\nfor parent in soup.a.parents:\n    if parent is None:\n        print(parent)\n    else:\n        print(parent.name)\n\n---p\n---html\n---[document]\n```\n\n### 兄弟节点\n\n#### `.next_sibling`和`.previous_sibling`\n\n使用`。next_sibling`和`.previous_sibling`属性来查询兄弟节点\n\n实际文档中的tag的 .next_sibling 和 .previous_sibling 属性通常是字符串或空白。因为中间可能会隔着一些字符以及标点。\n\n#### `.next_siblings`和`.previous_siblings`\n\n```python3\nfor sibling in soup.a.next_siblings:\n    print(repr(sibling))\n\n---',\\n'\n---<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\n---' and\\n'\n---<a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n';\\nand they lived at the bottom of a well.'\n```\n\n### 重现解析过程\n\n#### `.next_element`和`.previous_element`\n`next_element`属性指向解析过程中下一个被解析的对象(字符串或tag),结果可能与`.next_sibling`相同,但通常是不一样的.\n\n```python\nlast_a_tag=soup.find(\"a\",id=\"link3\")\nprint(last_a_tag)\nprint(last_a_tag.next_sibling)\nprint(last_a_tag.next_element)\n\n---<a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n---;\n---and they lived at the bottom of a well.\n---Tillie\n```\n\n#### `.next_elements`和`.previous_elements`\n\n## 搜索文档树\n\n### 过滤器\n\n#### 字符串\n\n#### 正则表达式\n\n```python\nfor tag in soup.find_all(re.compile(\"^b\")):\n    print(tag.name)\n```\n\n#### 列表\n如果传入列表参数,Beautiful Soup会将与列表中任一元素匹配的内容返回.\n\n#### True\n\nTrue可以匹配任何值,但是不会返回字符串节点\n\n#### 方法\n如果没有合适过滤器,那么还可以定义一个方法,方法只接受一个元素参数,如果这个方法返回True表示当前元素匹配并且被找到,如果不是则反回False。\n\n```python3\ndef has_class_but_no_id(tag):\n    return tag.has_attr('class') and not tag.has_attr('id')\n```\n\n\n### find_all()\n\n#### name参数\n\n#### keyword参数\n\n`soup.find_all(id='link2')`\n\n\n#### 按CSS搜索\n\n因为`class`是python保留字，所以用`class_`\n例：\n`soup.find_all(\"a\",class_=\"sister\")`\n\n`class_`参数同样接受不同类型的过滤器 ,字符串,正则表达式,方法或 True :\n\ntag的`class`属性是 多值属性 .按照CSS类名搜索tag时,可以分别搜索tag中的每个CSS类名:\n\n#### text参数\n通过`text`参数可以搜搜文档中的字符串内容.\n\n#### limit参数\n\n`limit`参数限制返回结果的数量\n\n#### recursive参数\n调用tag的`find_all()`方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 `recursive=False`.\n\n#### 简写\n\n```\nsoup.find_all(\"a\")\nsoup(\"a\")\n```\n\n```\nsoup.title.find_all(text=True)\nsoup.title(text=True)\n```\n\n### find()\n\n只返回一个结果\n\n### `find_parents()`和`find_parent()`\n\n### `find_next_siblings()和`find_next_sibling()`\n\n### `find_all_next()`和`find_next()`\n\n### `find_all_previous()`和`find_previous()`\n\n### CSS选择器\n在Tag或BeautifulSoup对象的`.select()`方法中传入字符串参数,即可使用CSS选择器的语法找到tag:\n","slug":"python/Spider/基础知识/2016-03-29-beautiful-soup4-basic","published":1,"updated":"2018-08-09T10:10:11.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfc6009s28t19fmon5h0","content":"<h2 id=\"对象的种类\"><a href=\"#对象的种类\" class=\"headerlink\" title=\"对象的种类\"></a>对象的种类</h2><p>BeautifulSoup会将HTML文档抓换成一个树形结构, 每个节点都是Python对象，所有对象可以分为4类：<code>Tag</code>,<code>NavigableString</code>,<code>BeautifulSoup</code>,<code>Comment</code>。</p>\n<h3 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h3><p><code>Tag</code>与XML或HTML中的tag相同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(&apos;&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;&apos;)</span><br><span class=\"line\">tag = soup.b</span><br><span class=\"line\">print(type(tag))</span><br><span class=\"line\">print(tag)</span><br><span class=\"line\"></span><br><span class=\"line\">--&lt;class &apos;bs4.element.Tag&apos;&gt;</span><br><span class=\"line\">--&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h4><p>每一个Tag都有自己的name，可以通过<code>.name</code>。改变tag的name，将会影响通过当前BS对象生成的HTML文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(&apos;&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;&apos;,&quot;html.parser&quot;)</span><br><span class=\"line\">tag = soup.b</span><br><span class=\"line\">print(tag)</span><br><span class=\"line\">print(tag.name)</span><br><span class=\"line\">tag.name=&quot;blockquote&quot;</span><br><span class=\"line\">print(tag)</span><br><span class=\"line\"></span><br><span class=\"line\">---&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;</span><br><span class=\"line\">---b</span><br><span class=\"line\">---&lt;blockquote class=&quot;boldest&quot;&gt;Extremely bold&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"attributes\"><a href=\"#attributes\" class=\"headerlink\" title=\"attributes\"></a>attributes</h4><p>一个tag可能有多个属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(&apos;&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;&apos;,&quot;html.parser&quot;)</span><br><span class=\"line\">tag = soup.b</span><br><span class=\"line\">print(tag[&apos;class&apos;])</span><br><span class=\"line\">print(tag.attrs)</span><br><span class=\"line\"></span><br><span class=\"line\">---[&apos;boldest&apos;]</span><br><span class=\"line\">---&#123;&apos;class&apos;: [&apos;boldest&apos;]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tag的属性可以被添加，删除或修改</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(<span class=\"string\">'&lt;b class=\"boldest\"&gt;Extremely bold&lt;/b&gt;'</span>,<span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">tag = soup.b</span><br><span class=\"line\"><span class=\"comment\">#更改属性</span></span><br><span class=\"line\">tag[<span class=\"string\">'class'</span>]=<span class=\"string\">\"verybold\"</span></span><br><span class=\"line\">tag[<span class=\"string\">'id'</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">print(tag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除属性</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> tag[<span class=\"string\">'class'</span>]</span><br><span class=\"line\">print(tag)</span><br><span class=\"line\">print(tag.get(<span class=\"string\">'class'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">---&lt;b class=\"verybold\" id=\"1\"&gt;Extremely bold&lt;/b&gt;</span><br><span class=\"line\">---&lt;b id=\"1\"&gt;Extremely bold&lt;/b&gt;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多值属性\"><a href=\"#多值属性\" class=\"headerlink\" title=\"多值属性\"></a>多值属性</h5><p>多值属性即为可包含多个值的属性，最常见的即为<code>class</code><br><code>xml</code>中没有多值属性</p>\n<p>多值属性的返回类型是list</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css_soup = BeautifulSoup(<span class=\"string\">'&lt;p class=\"body strikeout\"&gt;&lt;/p&gt;'</span>,<span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">print(css_soup.p[<span class=\"string\">'class'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">---[<span class=\"string\">'body'</span>, <span class=\"string\">'strikeout'</span>]</span><br></pre></td></tr></table></figure>\n\n<p>若某个属性看起来像多值属性，但是在任何版本HTML中都没有被定义为多值属性，那么BS会将这个属性作为字符串返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id_soup = BeautifulSoup(<span class=\"string\">'&lt;p id=\"my id\"&gt;&lt;/p&gt;'</span>,<span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">print(id_soup.p[<span class=\"string\">'id'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">---my id</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NavigableString\"><a href=\"#NavigableString\" class=\"headerlink\" title=\"NavigableString\"></a>NavigableString</h3><p><code>NavigableString</code>不支持<code>.content</code>,<code>.string</code>,<code>find()</code>方法。</p>\n<p>如果想在Beautiful Soup之外使用<code>NavigableString</code>对象,需要调用<code>unicode()</code>方法,将该对象转换成普通的Unicode字符串,否则就算Beautiful Soup已方法已经执行结束,该对象的输出也会带有对象的引用地址.这样会浪费内存.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(<span class=\"string\">'&lt;b class=\"boldest\"&gt;Extremely bold&lt;/b&gt;'</span>,<span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">tag = soup.b</span><br><span class=\"line\">print(tag.string)</span><br><span class=\"line\">print(type(tag.string))</span><br><span class=\"line\">tag.string.replace_with(<span class=\"string\">\"No long bold\"</span>)</span><br><span class=\"line\">print(tag)</span><br><span class=\"line\"></span><br><span class=\"line\">---Extremely bold</span><br><span class=\"line\">---&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">bs4</span>.<span class=\"title\">element</span>.<span class=\"title\">NavigableString</span>'&gt;</span></span><br><span class=\"line\">---&lt;b class=\"boldest\"&gt;No long bold&lt;/b&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BeautifulSoup\"><a href=\"#BeautifulSoup\" class=\"headerlink\" title=\"BeautifulSoup\"></a>BeautifulSoup</h2><p><code>BeautifulSoup</code>对象表示的是一个文档的全部内容.大部分时候,可以把它当作 Tag 对象,它支持 遍历文档树 和 搜索文档树 中描述的大部分的方法.</p>\n<p><code>BeautifuSoup</code>没有name和attribute属性。但有一个值为<code>[document]</code>的特殊属性<code>.name</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(<span class=\"string\">'&lt;b class=\"boldest\"&gt;Extremely bold&lt;/b&gt;'</span>,<span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">print(soup.name)</span><br><span class=\"line\"></span><br><span class=\"line\">---[document]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Comment\"><a href=\"#Comment\" class=\"headerlink\" title=\"Comment\"></a>Comment</h3><h2 id=\"遍历文档树\"><a href=\"#遍历文档树\" class=\"headerlink\" title=\"遍历文档树\"></a>遍历文档树</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html_doc = &quot;&quot;&quot;</span><br><span class=\"line\">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class=\"line\">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span><br><span class=\"line\">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class=\"line\">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class=\"line\">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"content和-children\"><a href=\"#content和-children\" class=\"headerlink\" title=\".content和.children\"></a><code>.content</code>和<code>.children</code></h3><p>tag的<code>.contents</code>属性可以将tag的子节点以列表的方式输出:<br>通过tag的<code>.children</code>生成器,可以对tag的子节点进行循环:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.title.contents)</span><br><span class=\"line\">print(soup.title.contents[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">---[<span class=\"string\">\"The Dormouse's story\"</span>]</span><br><span class=\"line\">---The Dormouse<span class=\"string\">'s story</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> soup.head.children:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">---&lt;title&gt;The Dormouse<span class=\"string\">'s story&lt;/title&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"descendants\"><a href=\"#descendants\" class=\"headerlink\" title=\".descendants\"></a><code>.descendants</code></h3><p><code>.descendants</code>属性可以对所有tag的子孙节点进行递归循环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.head.contents)</span><br><span class=\"line\"><span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> soup.head.descendants:</span><br><span class=\"line\">    print(child)</span><br><span class=\"line\"></span><br><span class=\"line\">print(len(list(soup.children)))</span><br><span class=\"line\">print(len(list(soup.descendants)))</span><br><span class=\"line\"></span><br><span class=\"line\">---[&lt;title&gt;The Dormouse<span class=\"string\">'s story&lt;/title&gt;]</span></span><br><span class=\"line\">---&lt;title&gt;The Dormouse's story&lt;/title&gt;</span><br><span class=\"line\">---The Dormouse<span class=\"string\">'s story</span></span><br><span class=\"line\"><span class=\"string\">---2</span></span><br><span class=\"line\"><span class=\"string\">---25</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\".string\"></a><code>.string</code></h3><p>如果tag只有一个<code>NavigableString</code>类型子节点,那么这个tag可以使用<code>.string</code>得到子节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.head.string)</span><br><span class=\"line\"></span><br><span class=\"line\">---The Dormouse<span class=\"string\">'s story</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"strings和stripped-strings\"><a href=\"#strings和stripped-strings\" class=\"headerlink\" title=\".strings和stripped_strings\"></a><code>.strings</code>和<code>stripped_strings</code></h3><p>如果tag中有多个字符串，可以使用<code>.strings</code>循环获取<br>使用<code>.stripped_strings</code>可以去除多余空白内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> string <span class=\"keyword\">in</span> soup.stripped_strings:</span><br><span class=\"line\">    print(repr(string))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"parent和-parents\"><a href=\"#parent和-parents\" class=\"headerlink\" title=\".parent和.parents\"></a><code>.parent</code>和<code>.parents</code></h3><p>通过<code>.parent</code>属性来获取某个元素的父节点<br>通过元素的<code>.parents</code>属性可以递归得到元素的所有父辈节点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> parent <span class=\"keyword\">in</span> soup.a.parents:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> parent <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        print(parent)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(parent.name)</span><br><span class=\"line\"></span><br><span class=\"line\">---p</span><br><span class=\"line\">---html</span><br><span class=\"line\">---[document]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"兄弟节点\"><a href=\"#兄弟节点\" class=\"headerlink\" title=\"兄弟节点\"></a>兄弟节点</h3><h4 id=\"next-sibling和-previous-sibling\"><a href=\"#next-sibling和-previous-sibling\" class=\"headerlink\" title=\".next_sibling和.previous_sibling\"></a><code>.next_sibling</code>和<code>.previous_sibling</code></h4><p>使用<code>。next_sibling</code>和<code>.previous_sibling</code>属性来查询兄弟节点</p>\n<p>实际文档中的tag的 .next_sibling 和 .previous_sibling 属性通常是字符串或空白。因为中间可能会隔着一些字符以及标点。</p>\n<h4 id=\"next-siblings和-previous-siblings\"><a href=\"#next-siblings和-previous-siblings\" class=\"headerlink\" title=\".next_siblings和.previous_siblings\"></a><code>.next_siblings</code>和<code>.previous_siblings</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for sibling in soup.a.next_siblings:</span><br><span class=\"line\">    print(repr(sibling))</span><br><span class=\"line\"></span><br><span class=\"line\">---&apos;,\\n&apos;</span><br><span class=\"line\">---&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span><br><span class=\"line\">---&apos; and\\n&apos;</span><br><span class=\"line\">---&lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class=\"line\">&apos;;\\nand they lived at the bottom of a well.&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重现解析过程\"><a href=\"#重现解析过程\" class=\"headerlink\" title=\"重现解析过程\"></a>重现解析过程</h3><h4 id=\"next-element和-previous-element\"><a href=\"#next-element和-previous-element\" class=\"headerlink\" title=\".next_element和.previous_element\"></a><code>.next_element</code>和<code>.previous_element</code></h4><p><code>next_element</code>属性指向解析过程中下一个被解析的对象(字符串或tag),结果可能与<code>.next_sibling</code>相同,但通常是不一样的.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last_a_tag=soup.find(<span class=\"string\">\"a\"</span>,id=<span class=\"string\">\"link3\"</span>)</span><br><span class=\"line\">print(last_a_tag)</span><br><span class=\"line\">print(last_a_tag.next_sibling)</span><br><span class=\"line\">print(last_a_tag.next_element)</span><br><span class=\"line\"></span><br><span class=\"line\">---&lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;</span><br><span class=\"line\">---;</span><br><span class=\"line\">---<span class=\"keyword\">and</span> they lived at the bottom of a well.</span><br><span class=\"line\">---Tillie</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"next-elements和-previous-elements\"><a href=\"#next-elements和-previous-elements\" class=\"headerlink\" title=\".next_elements和.previous_elements\"></a><code>.next_elements</code>和<code>.previous_elements</code></h4><h2 id=\"搜索文档树\"><a href=\"#搜索文档树\" class=\"headerlink\" title=\"搜索文档树\"></a>搜索文档树</h2><h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> soup.find_all(re.compile(<span class=\"string\">\"^b\"</span>)):</span><br><span class=\"line\">    print(tag.name)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><p>如果传入列表参数,Beautiful Soup会将与列表中任一元素匹配的内容返回.</p>\n<h4 id=\"True\"><a href=\"#True\" class=\"headerlink\" title=\"True\"></a>True</h4><p>True可以匹配任何值,但是不会返回字符串节点</p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>如果没有合适过滤器,那么还可以定义一个方法,方法只接受一个元素参数,如果这个方法返回True表示当前元素匹配并且被找到,如果不是则反回False。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def has_class_but_no_id(tag):</span><br><span class=\"line\">    return tag.has_attr(&apos;class&apos;) and not tag.has_attr(&apos;id&apos;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find-all\"><a href=\"#find-all\" class=\"headerlink\" title=\"find_all()\"></a>find_all()</h3><h4 id=\"name参数\"><a href=\"#name参数\" class=\"headerlink\" title=\"name参数\"></a>name参数</h4><h4 id=\"keyword参数\"><a href=\"#keyword参数\" class=\"headerlink\" title=\"keyword参数\"></a>keyword参数</h4><p><code>soup.find_all(id=&#39;link2&#39;)</code></p>\n<h4 id=\"按CSS搜索\"><a href=\"#按CSS搜索\" class=\"headerlink\" title=\"按CSS搜索\"></a>按CSS搜索</h4><p>因为<code>class</code>是python保留字，所以用<code>class_</code><br>例：<br><code>soup.find_all(&quot;a&quot;,class_=&quot;sister&quot;)</code></p>\n<p><code>class_</code>参数同样接受不同类型的过滤器 ,字符串,正则表达式,方法或 True :</p>\n<p>tag的<code>class</code>属性是 多值属性 .按照CSS类名搜索tag时,可以分别搜索tag中的每个CSS类名:</p>\n<h4 id=\"text参数\"><a href=\"#text参数\" class=\"headerlink\" title=\"text参数\"></a>text参数</h4><p>通过<code>text</code>参数可以搜搜文档中的字符串内容.</p>\n<h4 id=\"limit参数\"><a href=\"#limit参数\" class=\"headerlink\" title=\"limit参数\"></a>limit参数</h4><p><code>limit</code>参数限制返回结果的数量</p>\n<h4 id=\"recursive参数\"><a href=\"#recursive参数\" class=\"headerlink\" title=\"recursive参数\"></a>recursive参数</h4><p>调用tag的<code>find_all()</code>方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 <code>recursive=False</code>.</p>\n<h4 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.find_all(&quot;a&quot;)</span><br><span class=\"line\">soup(&quot;a&quot;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.title.find_all(text=True)</span><br><span class=\"line\">soup.title(text=True)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h3><p>只返回一个结果</p>\n<h3 id=\"find-parents-和find-parent\"><a href=\"#find-parents-和find-parent\" class=\"headerlink\" title=\"find_parents()和find_parent()\"></a><code>find_parents()</code>和<code>find_parent()</code></h3><h3 id=\"find-next-siblings-和find-next-sibling\"><a href=\"#find-next-siblings-和find-next-sibling\" class=\"headerlink\" title=\"find_next_siblings()和find_next_sibling()`\"></a><code>find_next_siblings()和</code>find_next_sibling()`</h3><h3 id=\"find-all-next-和find-next\"><a href=\"#find-all-next-和find-next\" class=\"headerlink\" title=\"find_all_next()和find_next()\"></a><code>find_all_next()</code>和<code>find_next()</code></h3><h3 id=\"find-all-previous-和find-previous\"><a href=\"#find-all-previous-和find-previous\" class=\"headerlink\" title=\"find_all_previous()和find_previous()\"></a><code>find_all_previous()</code>和<code>find_previous()</code></h3><h3 id=\"CSS选择器\"><a href=\"#CSS选择器\" class=\"headerlink\" title=\"CSS选择器\"></a>CSS选择器</h3><p>在Tag或BeautifulSoup对象的<code>.select()</code>方法中传入字符串参数,即可使用CSS选择器的语法找到tag:</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"对象的种类\"><a href=\"#对象的种类\" class=\"headerlink\" title=\"对象的种类\"></a>对象的种类</h2><p>BeautifulSoup会将HTML文档抓换成一个树形结构, 每个节点都是Python对象，所有对象可以分为4类：<code>Tag</code>,<code>NavigableString</code>,<code>BeautifulSoup</code>,<code>Comment</code>。</p>\n<h3 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h3><p><code>Tag</code>与XML或HTML中的tag相同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(&apos;&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;&apos;)</span><br><span class=\"line\">tag = soup.b</span><br><span class=\"line\">print(type(tag))</span><br><span class=\"line\">print(tag)</span><br><span class=\"line\"></span><br><span class=\"line\">--&lt;class &apos;bs4.element.Tag&apos;&gt;</span><br><span class=\"line\">--&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h4><p>每一个Tag都有自己的name，可以通过<code>.name</code>。改变tag的name，将会影响通过当前BS对象生成的HTML文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(&apos;&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;&apos;,&quot;html.parser&quot;)</span><br><span class=\"line\">tag = soup.b</span><br><span class=\"line\">print(tag)</span><br><span class=\"line\">print(tag.name)</span><br><span class=\"line\">tag.name=&quot;blockquote&quot;</span><br><span class=\"line\">print(tag)</span><br><span class=\"line\"></span><br><span class=\"line\">---&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;</span><br><span class=\"line\">---b</span><br><span class=\"line\">---&lt;blockquote class=&quot;boldest&quot;&gt;Extremely bold&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"attributes\"><a href=\"#attributes\" class=\"headerlink\" title=\"attributes\"></a>attributes</h4><p>一个tag可能有多个属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(&apos;&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;&apos;,&quot;html.parser&quot;)</span><br><span class=\"line\">tag = soup.b</span><br><span class=\"line\">print(tag[&apos;class&apos;])</span><br><span class=\"line\">print(tag.attrs)</span><br><span class=\"line\"></span><br><span class=\"line\">---[&apos;boldest&apos;]</span><br><span class=\"line\">---&#123;&apos;class&apos;: [&apos;boldest&apos;]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tag的属性可以被添加，删除或修改</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(<span class=\"string\">'&lt;b class=\"boldest\"&gt;Extremely bold&lt;/b&gt;'</span>,<span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">tag = soup.b</span><br><span class=\"line\"><span class=\"comment\">#更改属性</span></span><br><span class=\"line\">tag[<span class=\"string\">'class'</span>]=<span class=\"string\">\"verybold\"</span></span><br><span class=\"line\">tag[<span class=\"string\">'id'</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">print(tag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除属性</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> tag[<span class=\"string\">'class'</span>]</span><br><span class=\"line\">print(tag)</span><br><span class=\"line\">print(tag.get(<span class=\"string\">'class'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">---&lt;b class=\"verybold\" id=\"1\"&gt;Extremely bold&lt;/b&gt;</span><br><span class=\"line\">---&lt;b id=\"1\"&gt;Extremely bold&lt;/b&gt;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多值属性\"><a href=\"#多值属性\" class=\"headerlink\" title=\"多值属性\"></a>多值属性</h5><p>多值属性即为可包含多个值的属性，最常见的即为<code>class</code><br><code>xml</code>中没有多值属性</p>\n<p>多值属性的返回类型是list</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css_soup = BeautifulSoup(<span class=\"string\">'&lt;p class=\"body strikeout\"&gt;&lt;/p&gt;'</span>,<span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">print(css_soup.p[<span class=\"string\">'class'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">---[<span class=\"string\">'body'</span>, <span class=\"string\">'strikeout'</span>]</span><br></pre></td></tr></table></figure>\n\n<p>若某个属性看起来像多值属性，但是在任何版本HTML中都没有被定义为多值属性，那么BS会将这个属性作为字符串返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id_soup = BeautifulSoup(<span class=\"string\">'&lt;p id=\"my id\"&gt;&lt;/p&gt;'</span>,<span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">print(id_soup.p[<span class=\"string\">'id'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">---my id</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NavigableString\"><a href=\"#NavigableString\" class=\"headerlink\" title=\"NavigableString\"></a>NavigableString</h3><p><code>NavigableString</code>不支持<code>.content</code>,<code>.string</code>,<code>find()</code>方法。</p>\n<p>如果想在Beautiful Soup之外使用<code>NavigableString</code>对象,需要调用<code>unicode()</code>方法,将该对象转换成普通的Unicode字符串,否则就算Beautiful Soup已方法已经执行结束,该对象的输出也会带有对象的引用地址.这样会浪费内存.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(<span class=\"string\">'&lt;b class=\"boldest\"&gt;Extremely bold&lt;/b&gt;'</span>,<span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">tag = soup.b</span><br><span class=\"line\">print(tag.string)</span><br><span class=\"line\">print(type(tag.string))</span><br><span class=\"line\">tag.string.replace_with(<span class=\"string\">\"No long bold\"</span>)</span><br><span class=\"line\">print(tag)</span><br><span class=\"line\"></span><br><span class=\"line\">---Extremely bold</span><br><span class=\"line\">---&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">bs4</span>.<span class=\"title\">element</span>.<span class=\"title\">NavigableString</span>'&gt;</span></span><br><span class=\"line\">---&lt;b class=\"boldest\"&gt;No long bold&lt;/b&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BeautifulSoup\"><a href=\"#BeautifulSoup\" class=\"headerlink\" title=\"BeautifulSoup\"></a>BeautifulSoup</h2><p><code>BeautifulSoup</code>对象表示的是一个文档的全部内容.大部分时候,可以把它当作 Tag 对象,它支持 遍历文档树 和 搜索文档树 中描述的大部分的方法.</p>\n<p><code>BeautifuSoup</code>没有name和attribute属性。但有一个值为<code>[document]</code>的特殊属性<code>.name</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(<span class=\"string\">'&lt;b class=\"boldest\"&gt;Extremely bold&lt;/b&gt;'</span>,<span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">print(soup.name)</span><br><span class=\"line\"></span><br><span class=\"line\">---[document]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Comment\"><a href=\"#Comment\" class=\"headerlink\" title=\"Comment\"></a>Comment</h3><h2 id=\"遍历文档树\"><a href=\"#遍历文档树\" class=\"headerlink\" title=\"遍历文档树\"></a>遍历文档树</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html_doc = &quot;&quot;&quot;</span><br><span class=\"line\">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class=\"line\">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span><br><span class=\"line\">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class=\"line\">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class=\"line\">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"content和-children\"><a href=\"#content和-children\" class=\"headerlink\" title=\".content和.children\"></a><code>.content</code>和<code>.children</code></h3><p>tag的<code>.contents</code>属性可以将tag的子节点以列表的方式输出:<br>通过tag的<code>.children</code>生成器,可以对tag的子节点进行循环:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.title.contents)</span><br><span class=\"line\">print(soup.title.contents[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">---[<span class=\"string\">\"The Dormouse's story\"</span>]</span><br><span class=\"line\">---The Dormouse<span class=\"string\">'s story</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> soup.head.children:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">---&lt;title&gt;The Dormouse<span class=\"string\">'s story&lt;/title&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"descendants\"><a href=\"#descendants\" class=\"headerlink\" title=\".descendants\"></a><code>.descendants</code></h3><p><code>.descendants</code>属性可以对所有tag的子孙节点进行递归循环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.head.contents)</span><br><span class=\"line\"><span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> soup.head.descendants:</span><br><span class=\"line\">    print(child)</span><br><span class=\"line\"></span><br><span class=\"line\">print(len(list(soup.children)))</span><br><span class=\"line\">print(len(list(soup.descendants)))</span><br><span class=\"line\"></span><br><span class=\"line\">---[&lt;title&gt;The Dormouse<span class=\"string\">'s story&lt;/title&gt;]</span></span><br><span class=\"line\">---&lt;title&gt;The Dormouse's story&lt;/title&gt;</span><br><span class=\"line\">---The Dormouse<span class=\"string\">'s story</span></span><br><span class=\"line\"><span class=\"string\">---2</span></span><br><span class=\"line\"><span class=\"string\">---25</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\".string\"></a><code>.string</code></h3><p>如果tag只有一个<code>NavigableString</code>类型子节点,那么这个tag可以使用<code>.string</code>得到子节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.head.string)</span><br><span class=\"line\"></span><br><span class=\"line\">---The Dormouse<span class=\"string\">'s story</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"strings和stripped-strings\"><a href=\"#strings和stripped-strings\" class=\"headerlink\" title=\".strings和stripped_strings\"></a><code>.strings</code>和<code>stripped_strings</code></h3><p>如果tag中有多个字符串，可以使用<code>.strings</code>循环获取<br>使用<code>.stripped_strings</code>可以去除多余空白内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> string <span class=\"keyword\">in</span> soup.stripped_strings:</span><br><span class=\"line\">    print(repr(string))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"parent和-parents\"><a href=\"#parent和-parents\" class=\"headerlink\" title=\".parent和.parents\"></a><code>.parent</code>和<code>.parents</code></h3><p>通过<code>.parent</code>属性来获取某个元素的父节点<br>通过元素的<code>.parents</code>属性可以递归得到元素的所有父辈节点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> parent <span class=\"keyword\">in</span> soup.a.parents:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> parent <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        print(parent)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(parent.name)</span><br><span class=\"line\"></span><br><span class=\"line\">---p</span><br><span class=\"line\">---html</span><br><span class=\"line\">---[document]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"兄弟节点\"><a href=\"#兄弟节点\" class=\"headerlink\" title=\"兄弟节点\"></a>兄弟节点</h3><h4 id=\"next-sibling和-previous-sibling\"><a href=\"#next-sibling和-previous-sibling\" class=\"headerlink\" title=\".next_sibling和.previous_sibling\"></a><code>.next_sibling</code>和<code>.previous_sibling</code></h4><p>使用<code>。next_sibling</code>和<code>.previous_sibling</code>属性来查询兄弟节点</p>\n<p>实际文档中的tag的 .next_sibling 和 .previous_sibling 属性通常是字符串或空白。因为中间可能会隔着一些字符以及标点。</p>\n<h4 id=\"next-siblings和-previous-siblings\"><a href=\"#next-siblings和-previous-siblings\" class=\"headerlink\" title=\".next_siblings和.previous_siblings\"></a><code>.next_siblings</code>和<code>.previous_siblings</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for sibling in soup.a.next_siblings:</span><br><span class=\"line\">    print(repr(sibling))</span><br><span class=\"line\"></span><br><span class=\"line\">---&apos;,\\n&apos;</span><br><span class=\"line\">---&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span><br><span class=\"line\">---&apos; and\\n&apos;</span><br><span class=\"line\">---&lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class=\"line\">&apos;;\\nand they lived at the bottom of a well.&apos;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重现解析过程\"><a href=\"#重现解析过程\" class=\"headerlink\" title=\"重现解析过程\"></a>重现解析过程</h3><h4 id=\"next-element和-previous-element\"><a href=\"#next-element和-previous-element\" class=\"headerlink\" title=\".next_element和.previous_element\"></a><code>.next_element</code>和<code>.previous_element</code></h4><p><code>next_element</code>属性指向解析过程中下一个被解析的对象(字符串或tag),结果可能与<code>.next_sibling</code>相同,但通常是不一样的.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last_a_tag=soup.find(<span class=\"string\">\"a\"</span>,id=<span class=\"string\">\"link3\"</span>)</span><br><span class=\"line\">print(last_a_tag)</span><br><span class=\"line\">print(last_a_tag.next_sibling)</span><br><span class=\"line\">print(last_a_tag.next_element)</span><br><span class=\"line\"></span><br><span class=\"line\">---&lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;</span><br><span class=\"line\">---;</span><br><span class=\"line\">---<span class=\"keyword\">and</span> they lived at the bottom of a well.</span><br><span class=\"line\">---Tillie</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"next-elements和-previous-elements\"><a href=\"#next-elements和-previous-elements\" class=\"headerlink\" title=\".next_elements和.previous_elements\"></a><code>.next_elements</code>和<code>.previous_elements</code></h4><h2 id=\"搜索文档树\"><a href=\"#搜索文档树\" class=\"headerlink\" title=\"搜索文档树\"></a>搜索文档树</h2><h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> soup.find_all(re.compile(<span class=\"string\">\"^b\"</span>)):</span><br><span class=\"line\">    print(tag.name)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><p>如果传入列表参数,Beautiful Soup会将与列表中任一元素匹配的内容返回.</p>\n<h4 id=\"True\"><a href=\"#True\" class=\"headerlink\" title=\"True\"></a>True</h4><p>True可以匹配任何值,但是不会返回字符串节点</p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>如果没有合适过滤器,那么还可以定义一个方法,方法只接受一个元素参数,如果这个方法返回True表示当前元素匹配并且被找到,如果不是则反回False。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def has_class_but_no_id(tag):</span><br><span class=\"line\">    return tag.has_attr(&apos;class&apos;) and not tag.has_attr(&apos;id&apos;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find-all\"><a href=\"#find-all\" class=\"headerlink\" title=\"find_all()\"></a>find_all()</h3><h4 id=\"name参数\"><a href=\"#name参数\" class=\"headerlink\" title=\"name参数\"></a>name参数</h4><h4 id=\"keyword参数\"><a href=\"#keyword参数\" class=\"headerlink\" title=\"keyword参数\"></a>keyword参数</h4><p><code>soup.find_all(id=&#39;link2&#39;)</code></p>\n<h4 id=\"按CSS搜索\"><a href=\"#按CSS搜索\" class=\"headerlink\" title=\"按CSS搜索\"></a>按CSS搜索</h4><p>因为<code>class</code>是python保留字，所以用<code>class_</code><br>例：<br><code>soup.find_all(&quot;a&quot;,class_=&quot;sister&quot;)</code></p>\n<p><code>class_</code>参数同样接受不同类型的过滤器 ,字符串,正则表达式,方法或 True :</p>\n<p>tag的<code>class</code>属性是 多值属性 .按照CSS类名搜索tag时,可以分别搜索tag中的每个CSS类名:</p>\n<h4 id=\"text参数\"><a href=\"#text参数\" class=\"headerlink\" title=\"text参数\"></a>text参数</h4><p>通过<code>text</code>参数可以搜搜文档中的字符串内容.</p>\n<h4 id=\"limit参数\"><a href=\"#limit参数\" class=\"headerlink\" title=\"limit参数\"></a>limit参数</h4><p><code>limit</code>参数限制返回结果的数量</p>\n<h4 id=\"recursive参数\"><a href=\"#recursive参数\" class=\"headerlink\" title=\"recursive参数\"></a>recursive参数</h4><p>调用tag的<code>find_all()</code>方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 <code>recursive=False</code>.</p>\n<h4 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.find_all(&quot;a&quot;)</span><br><span class=\"line\">soup(&quot;a&quot;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.title.find_all(text=True)</span><br><span class=\"line\">soup.title(text=True)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h3><p>只返回一个结果</p>\n<h3 id=\"find-parents-和find-parent\"><a href=\"#find-parents-和find-parent\" class=\"headerlink\" title=\"find_parents()和find_parent()\"></a><code>find_parents()</code>和<code>find_parent()</code></h3><h3 id=\"find-next-siblings-和find-next-sibling\"><a href=\"#find-next-siblings-和find-next-sibling\" class=\"headerlink\" title=\"find_next_siblings()和find_next_sibling()`\"></a><code>find_next_siblings()和</code>find_next_sibling()`</h3><h3 id=\"find-all-next-和find-next\"><a href=\"#find-all-next-和find-next\" class=\"headerlink\" title=\"find_all_next()和find_next()\"></a><code>find_all_next()</code>和<code>find_next()</code></h3><h3 id=\"find-all-previous-和find-previous\"><a href=\"#find-all-previous-和find-previous\" class=\"headerlink\" title=\"find_all_previous()和find_previous()\"></a><code>find_all_previous()</code>和<code>find_previous()</code></h3><h3 id=\"CSS选择器\"><a href=\"#CSS选择器\" class=\"headerlink\" title=\"CSS选择器\"></a>CSS选择器</h3><p>在Tag或BeautifulSoup对象的<code>.select()</code>方法中传入字符串参数,即可使用CSS选择器的语法找到tag:</p>\n"},{"author":"ivyxjc","date":"2016-03-16T16:00:00.000Z","title":"CriminalIntent程序中Fragment相关内容","keywords":null,"description":null,"_content":"\n## 实现DialogFragment方法\n1. 创建DialogPickerFragment类\n2. 创建AlertDialog\n3. 通过FragmentManager在屏幕上显示对话框\n\n\n\n##　创建DialogFrgment\n\n在屏幕上显示DialogFrgment时,托管Activity的FragmentManager会调用以下方法:\n\n`  public Dialog onCreateDialog(Bundle savedInstanceState)`\n\n1.2.\n\n\n ```java\npublic class FragmentDataPicker extends DialogFragment {\n    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n        return new AlertDialog.Builder(getActivity())\n                .setTitle(R.string.date_picker_title)\n                .setPositiveButton(android.R.string.ok,null)\n                .create();\n    }\n}\n```\n\n3.\n\n```java\nmDateButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                FragmentManager fm=getActivity()\n                        .getSupportFragmentManager();\n\n                FragmentDataPicker dialog=new FragmentDataPicker();\n                dialog.show(fm,DIALOG_DATE);\n            }\n        });\n```\n\nandroid有三种用于对话框的按钮：positive按钮，negative按钮和neutral按钮。\n\n### 设置对话框的显示内容\n\n```java\nView v=getActivity().getLayoutInflater()\n                .inflate(R.layout.dialog_date,null);\n\nreturn new AlertDialog.Builder(getActivity())\n      .setView(v)\n          .setTitle(R.string.date_picker_title)\n          .setPositiveButton(android.R.string.ok,null)\n          .create();\n```\n","source":"_posts/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-03-17-Diaglog.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-17\ntitle: CriminalIntent程序中Fragment相关内容\ncategory: Android\ntags: [android,android_project,android_fragment]\nkeywords:\ndescription:\n---\n\n## 实现DialogFragment方法\n1. 创建DialogPickerFragment类\n2. 创建AlertDialog\n3. 通过FragmentManager在屏幕上显示对话框\n\n\n\n##　创建DialogFrgment\n\n在屏幕上显示DialogFrgment时,托管Activity的FragmentManager会调用以下方法:\n\n`  public Dialog onCreateDialog(Bundle savedInstanceState)`\n\n1.2.\n\n\n ```java\npublic class FragmentDataPicker extends DialogFragment {\n    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n        return new AlertDialog.Builder(getActivity())\n                .setTitle(R.string.date_picker_title)\n                .setPositiveButton(android.R.string.ok,null)\n                .create();\n    }\n}\n```\n\n3.\n\n```java\nmDateButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                FragmentManager fm=getActivity()\n                        .getSupportFragmentManager();\n\n                FragmentDataPicker dialog=new FragmentDataPicker();\n                dialog.show(fm,DIALOG_DATE);\n            }\n        });\n```\n\nandroid有三种用于对话框的按钮：positive按钮，negative按钮和neutral按钮。\n\n### 设置对话框的显示内容\n\n```java\nView v=getActivity().getLayoutInflater()\n                .inflate(R.layout.dialog_date,null);\n\nreturn new AlertDialog.Builder(getActivity())\n      .setView(v)\n          .setTitle(R.string.date_picker_title)\n          .setPositiveButton(android.R.string.ok,null)\n          .create();\n```\n","slug":"android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-03-17-Diaglog","published":1,"updated":"2018-08-09T10:10:11.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfcl00bg28t139slaej3","content":"<h2 id=\"实现DialogFragment方法\"><a href=\"#实现DialogFragment方法\" class=\"headerlink\" title=\"实现DialogFragment方法\"></a>实现DialogFragment方法</h2><ol>\n<li>创建DialogPickerFragment类</li>\n<li>创建AlertDialog</li>\n<li>通过FragmentManager在屏幕上显示对话框</li>\n</ol>\n<p>##　创建DialogFrgment</p>\n<p>在屏幕上显示DialogFrgment时,托管Activity的FragmentManager会调用以下方法:</p>\n<p><code>public Dialog onCreateDialog(Bundle savedInstanceState)</code></p>\n<p>1.2.</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentDataPicker</span> <span class=\"keyword\">extends</span> <span class=\"title\">DialogFragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dialog <span class=\"title\">onCreateDialog</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AlertDialog.Builder(getActivity())</span><br><span class=\"line\">                .setTitle(R.string.date_picker_title)</span><br><span class=\"line\">                .setPositiveButton(android.R.string.ok,<span class=\"keyword\">null</span>)</span><br><span class=\"line\">                .create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mDateButton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                FragmentManager fm=getActivity()</span><br><span class=\"line\">                        .getSupportFragmentManager();</span><br><span class=\"line\"></span><br><span class=\"line\">                FragmentDataPicker dialog=<span class=\"keyword\">new</span> FragmentDataPicker();</span><br><span class=\"line\">                dialog.show(fm,DIALOG_DATE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>android有三种用于对话框的按钮：positive按钮，negative按钮和neutral按钮。</p>\n<h3 id=\"设置对话框的显示内容\"><a href=\"#设置对话框的显示内容\" class=\"headerlink\" title=\"设置对话框的显示内容\"></a>设置对话框的显示内容</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View v=getActivity().getLayoutInflater()</span><br><span class=\"line\">                .inflate(R.layout.dialog_date,<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AlertDialog.Builder(getActivity())</span><br><span class=\"line\">      .setView(v)</span><br><span class=\"line\">          .setTitle(R.string.date_picker_title)</span><br><span class=\"line\">          .setPositiveButton(android.R.string.ok,<span class=\"keyword\">null</span>)</span><br><span class=\"line\">          .create();</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实现DialogFragment方法\"><a href=\"#实现DialogFragment方法\" class=\"headerlink\" title=\"实现DialogFragment方法\"></a>实现DialogFragment方法</h2><ol>\n<li>创建DialogPickerFragment类</li>\n<li>创建AlertDialog</li>\n<li>通过FragmentManager在屏幕上显示对话框</li>\n</ol>\n<p>##　创建DialogFrgment</p>\n<p>在屏幕上显示DialogFrgment时,托管Activity的FragmentManager会调用以下方法:</p>\n<p><code>public Dialog onCreateDialog(Bundle savedInstanceState)</code></p>\n<p>1.2.</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentDataPicker</span> <span class=\"keyword\">extends</span> <span class=\"title\">DialogFragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dialog <span class=\"title\">onCreateDialog</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AlertDialog.Builder(getActivity())</span><br><span class=\"line\">                .setTitle(R.string.date_picker_title)</span><br><span class=\"line\">                .setPositiveButton(android.R.string.ok,<span class=\"keyword\">null</span>)</span><br><span class=\"line\">                .create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mDateButton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                FragmentManager fm=getActivity()</span><br><span class=\"line\">                        .getSupportFragmentManager();</span><br><span class=\"line\"></span><br><span class=\"line\">                FragmentDataPicker dialog=<span class=\"keyword\">new</span> FragmentDataPicker();</span><br><span class=\"line\">                dialog.show(fm,DIALOG_DATE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>android有三种用于对话框的按钮：positive按钮，negative按钮和neutral按钮。</p>\n<h3 id=\"设置对话框的显示内容\"><a href=\"#设置对话框的显示内容\" class=\"headerlink\" title=\"设置对话框的显示内容\"></a>设置对话框的显示内容</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View v=getActivity().getLayoutInflater()</span><br><span class=\"line\">                .inflate(R.layout.dialog_date,<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AlertDialog.Builder(getActivity())</span><br><span class=\"line\">      .setView(v)</span><br><span class=\"line\">          .setTitle(R.string.date_picker_title)</span><br><span class=\"line\">          .setPositiveButton(android.R.string.ok,<span class=\"keyword\">null</span>)</span><br><span class=\"line\">          .create();</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-07-05T16:00:00.000Z","title":"CriminalIntent程序中ListFragment相关内容","keywords":null,"description":"如何使用ListFragment.","_content":"\n## 定制adapter\n\nadapter负责：\n1. 创建必要的视图对象\n2. 用模型层数据填充视图对性爱那个\n3. 将准备好的视图对象返回给ListView\n\n\n```java\n...\n内部类\nprivate class CrimeAdapter extends ArrayAdapter<Crime>{\n        public CrimeAdapter(ArrayList<Crime> crimes){\n            super(getActivity(),0,crimes);\n        }\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n            if(convertView==null){\n                convertView=getActivity()\n                        .getLayoutInflater()\n                        .inflate(R.layout.list_item_crime,null);\n            }\n\n            Crime c=(Crime)(getListAdapter()).getItem(position);\n\n            TextView titleTextView=(TextView)convertView.findViewById(R.id.list_item_crime_title_TextView);\n            TextView dateTextView=(TextView)convertView.findViewById(R.id.list_item_crime_date_TextView);\n            CheckBox solvedCheckBox=(CheckBox)convertView.findViewById(R.id.list_item_crime_isSolved_CheckBox);\n\n            solvedCheckBox.setChecked(c.isSolved());\n            return convertView;\n        }\n    }\n\n...\n```\n注： 由于CheckBox默认是可聚焦的，也就是点击列表向会被解读为切换CheckBox的状态，因而无法触发`onListItemClick()`方法。解决方法：\n\n```xml\n<CheckBox\n        android:id=\"@+id/list_item_crime_isSolved_CheckBox\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentRight=\"true\"\n        android:gravity=\"center\"\n    android:focusable=\"false\"/>\n```\n","source":"_posts/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-06-CriminalIntent-ListFragment.md","raw":"---\nauthor: ivyxjc\ndate: 2016-07-06\ntitle: CriminalIntent程序中ListFragment相关内容\ncategory: Android\ntags: [android,android_adapter]\nkeywords:\ndescription: 如何使用ListFragment.\n---\n\n## 定制adapter\n\nadapter负责：\n1. 创建必要的视图对象\n2. 用模型层数据填充视图对性爱那个\n3. 将准备好的视图对象返回给ListView\n\n\n```java\n...\n内部类\nprivate class CrimeAdapter extends ArrayAdapter<Crime>{\n        public CrimeAdapter(ArrayList<Crime> crimes){\n            super(getActivity(),0,crimes);\n        }\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n            if(convertView==null){\n                convertView=getActivity()\n                        .getLayoutInflater()\n                        .inflate(R.layout.list_item_crime,null);\n            }\n\n            Crime c=(Crime)(getListAdapter()).getItem(position);\n\n            TextView titleTextView=(TextView)convertView.findViewById(R.id.list_item_crime_title_TextView);\n            TextView dateTextView=(TextView)convertView.findViewById(R.id.list_item_crime_date_TextView);\n            CheckBox solvedCheckBox=(CheckBox)convertView.findViewById(R.id.list_item_crime_isSolved_CheckBox);\n\n            solvedCheckBox.setChecked(c.isSolved());\n            return convertView;\n        }\n    }\n\n...\n```\n注： 由于CheckBox默认是可聚焦的，也就是点击列表向会被解读为切换CheckBox的状态，因而无法触发`onListItemClick()`方法。解决方法：\n\n```xml\n<CheckBox\n        android:id=\"@+id/list_item_crime_isSolved_CheckBox\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentRight=\"true\"\n        android:gravity=\"center\"\n    android:focusable=\"false\"/>\n```\n","slug":"android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-06-CriminalIntent-ListFragment","published":1,"updated":"2018-08-09T10:10:11.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfcm00bk28t10u89vjpx","content":"<h2 id=\"定制adapter\"><a href=\"#定制adapter\" class=\"headerlink\" title=\"定制adapter\"></a>定制adapter</h2><p>adapter负责：</p>\n<ol>\n<li>创建必要的视图对象</li>\n<li>用模型层数据填充视图对性爱那个</li>\n<li>将准备好的视图对象返回给ListView</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">内部类</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrimeAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter</span>&lt;<span class=\"title\">Crime</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CrimeAdapter</span><span class=\"params\">(ArrayList&lt;Crime&gt; crimes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(getActivity(),<span class=\"number\">0</span>,crimes);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(convertView==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                convertView=getActivity()</span><br><span class=\"line\">                        .getLayoutInflater()</span><br><span class=\"line\">                        .inflate(R.layout.list_item_crime,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Crime c=(Crime)(getListAdapter()).getItem(position);</span><br><span class=\"line\"></span><br><span class=\"line\">            TextView titleTextView=(TextView)convertView.findViewById(R.id.list_item_crime_title_TextView);</span><br><span class=\"line\">            TextView dateTextView=(TextView)convertView.findViewById(R.id.list_item_crime_date_TextView);</span><br><span class=\"line\">            CheckBox solvedCheckBox=(CheckBox)convertView.findViewById(R.id.list_item_crime_isSolved_CheckBox);</span><br><span class=\"line\"></span><br><span class=\"line\">            solvedCheckBox.setChecked(c.isSolved());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> convertView;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>注： 由于CheckBox默认是可聚焦的，也就是点击列表向会被解读为切换CheckBox的状态，因而无法触发<code>onListItemClick()</code>方法。解决方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CheckBox</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/list_item_crime_isSolved_CheckBox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:focusable</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"定制adapter\"><a href=\"#定制adapter\" class=\"headerlink\" title=\"定制adapter\"></a>定制adapter</h2><p>adapter负责：</p>\n<ol>\n<li>创建必要的视图对象</li>\n<li>用模型层数据填充视图对性爱那个</li>\n<li>将准备好的视图对象返回给ListView</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">内部类</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrimeAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter</span>&lt;<span class=\"title\">Crime</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CrimeAdapter</span><span class=\"params\">(ArrayList&lt;Crime&gt; crimes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(getActivity(),<span class=\"number\">0</span>,crimes);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(convertView==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                convertView=getActivity()</span><br><span class=\"line\">                        .getLayoutInflater()</span><br><span class=\"line\">                        .inflate(R.layout.list_item_crime,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Crime c=(Crime)(getListAdapter()).getItem(position);</span><br><span class=\"line\"></span><br><span class=\"line\">            TextView titleTextView=(TextView)convertView.findViewById(R.id.list_item_crime_title_TextView);</span><br><span class=\"line\">            TextView dateTextView=(TextView)convertView.findViewById(R.id.list_item_crime_date_TextView);</span><br><span class=\"line\">            CheckBox solvedCheckBox=(CheckBox)convertView.findViewById(R.id.list_item_crime_isSolved_CheckBox);</span><br><span class=\"line\"></span><br><span class=\"line\">            solvedCheckBox.setChecked(c.isSolved());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> convertView;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>注： 由于CheckBox默认是可聚焦的，也就是点击列表向会被解读为切换CheckBox的状态，因而无法触发<code>onListItemClick()</code>方法。解决方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CheckBox</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/list_item_crime_isSolved_CheckBox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:focusable</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-07-05T16:00:00.000Z","title":"CriminalIntent程序中Fragment，Activity通信","keywords":null,"description":"使用Intent在Fragment, Activity中进行通信.","_content":"\n## 最简单的应用\n\n```java\nIntent intent=new Intent(getActivity(), ActivityCrimeBase.class);\nstartActivity(intent);\n```\n\n## 使用extra添加信息\n\n### 附加extra信息\n\n```java\nintent.putExtra(FragmentCrime.EXTRA_CRIME_ID,c.getId());\n```\n\n### 获取extra信息\n\n```java\n\nFragmentCrime.java\n\npublic static final String EXTRA_CRIME_ID=\"com.jc.criminalIntent2.crime_id\";\n....\n....\nUUID crimeId=(UUID)getActivity()\n                .getIntent()\n                .getSerializableExtra(EXTRA_CRIME_ID);\n```\n\n此方法会破坏fragment的封装性，因为这时fragment总是需要由某个具体的activity托管。\n\n为了解决这一问题，可以就爱你个`mCrimeId`存放在fragment的arguments bundle中。\n\n\n```java\n\nActivityCrime.java\npublic class ActivityCrime extends ActivitySetFragmentBase {\n\n    @Override\n    protected Fragment createFragment() {\n        UUID crimeId=(UUID)getIntent()\n                .getSerializableExtra(FragmentCrime.EXTRA_CRIME_ID);\n\n        return FragmentCrime.newInstance(crimeId);\n    }\n}\n\nFragmentCrime.java\n\npublic void onCreate(@Nullable Bundle savedInstanceState) {\n     super.onCreate(savedInstanceState);\n     UUID crimeId=(UUID)getArguments()\n             .getSerializable(EXTRA_CRIME_ID);\n     mCrime=CrimeLab.get(getActivity()).getCrime(crimeId);\n }\n\n\n public static FragmentCrime newInstance(UUID crimeId){\n\n     Bundle args=new Bundle();\n     args.putSerializable(EXTRA_CRIME_ID,crimeId);\n     FragmentCrime fragment=new FragmentCrime();\n     fragment.setArguments(args);\n     return fragment;\n }\n\n```\n","source":"_posts/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-06-CriminalIntent-Intent.md","raw":"---\nauthor: ivyxjc\ndate: 2016-07-06\ntitle: CriminalIntent程序中Fragment，Activity通信\ncategory: Android\ntags: [android,android_fragment,android_activity,android_adapter]\nkeywords:\ndescription: 使用Intent在Fragment, Activity中进行通信.\n---\n\n## 最简单的应用\n\n```java\nIntent intent=new Intent(getActivity(), ActivityCrimeBase.class);\nstartActivity(intent);\n```\n\n## 使用extra添加信息\n\n### 附加extra信息\n\n```java\nintent.putExtra(FragmentCrime.EXTRA_CRIME_ID,c.getId());\n```\n\n### 获取extra信息\n\n```java\n\nFragmentCrime.java\n\npublic static final String EXTRA_CRIME_ID=\"com.jc.criminalIntent2.crime_id\";\n....\n....\nUUID crimeId=(UUID)getActivity()\n                .getIntent()\n                .getSerializableExtra(EXTRA_CRIME_ID);\n```\n\n此方法会破坏fragment的封装性，因为这时fragment总是需要由某个具体的activity托管。\n\n为了解决这一问题，可以就爱你个`mCrimeId`存放在fragment的arguments bundle中。\n\n\n```java\n\nActivityCrime.java\npublic class ActivityCrime extends ActivitySetFragmentBase {\n\n    @Override\n    protected Fragment createFragment() {\n        UUID crimeId=(UUID)getIntent()\n                .getSerializableExtra(FragmentCrime.EXTRA_CRIME_ID);\n\n        return FragmentCrime.newInstance(crimeId);\n    }\n}\n\nFragmentCrime.java\n\npublic void onCreate(@Nullable Bundle savedInstanceState) {\n     super.onCreate(savedInstanceState);\n     UUID crimeId=(UUID)getArguments()\n             .getSerializable(EXTRA_CRIME_ID);\n     mCrime=CrimeLab.get(getActivity()).getCrime(crimeId);\n }\n\n\n public static FragmentCrime newInstance(UUID crimeId){\n\n     Bundle args=new Bundle();\n     args.putSerializable(EXTRA_CRIME_ID,crimeId);\n     FragmentCrime fragment=new FragmentCrime();\n     fragment.setArguments(args);\n     return fragment;\n }\n\n```\n","slug":"android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-06-CriminalIntent-Intent","published":1,"updated":"2018-08-09T10:10:11.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfcn00bn28t1z937hco6","content":"<h2 id=\"最简单的应用\"><a href=\"#最简单的应用\" class=\"headerlink\" title=\"最简单的应用\"></a>最简单的应用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(getActivity(), ActivityCrimeBase.class);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用extra添加信息\"><a href=\"#使用extra添加信息\" class=\"headerlink\" title=\"使用extra添加信息\"></a>使用extra添加信息</h2><h3 id=\"附加extra信息\"><a href=\"#附加extra信息\" class=\"headerlink\" title=\"附加extra信息\"></a>附加extra信息</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intent.putExtra(FragmentCrime.EXTRA_CRIME_ID,c.getId());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取extra信息\"><a href=\"#获取extra信息\" class=\"headerlink\" title=\"获取extra信息\"></a>获取extra信息</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">FragmentCrime.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXTRA_CRIME_ID=<span class=\"string\">\"com.jc.criminalIntent2.crime_id\"</span>;</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">UUID crimeId=(UUID)getActivity()</span><br><span class=\"line\">                .getIntent()</span><br><span class=\"line\">                .getSerializableExtra(EXTRA_CRIME_ID);</span><br></pre></td></tr></table></figure>\n\n<p>此方法会破坏fragment的封装性，因为这时fragment总是需要由某个具体的activity托管。</p>\n<p>为了解决这一问题，可以就爱你个<code>mCrimeId</code>存放在fragment的arguments bundle中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ActivityCrime.java</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityCrime</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActivitySetFragmentBase</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Fragment <span class=\"title\">createFragment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UUID crimeId=(UUID)getIntent()</span><br><span class=\"line\">                .getSerializableExtra(FragmentCrime.EXTRA_CRIME_ID);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> FragmentCrime.newInstance(crimeId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FragmentCrime.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">     UUID crimeId=(UUID)getArguments()</span><br><span class=\"line\">             .getSerializable(EXTRA_CRIME_ID);</span><br><span class=\"line\">     mCrime=CrimeLab.get(getActivity()).getCrime(crimeId);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FragmentCrime <span class=\"title\">newInstance</span><span class=\"params\">(UUID crimeId)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     Bundle args=<span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">     args.putSerializable(EXTRA_CRIME_ID,crimeId);</span><br><span class=\"line\">     FragmentCrime fragment=<span class=\"keyword\">new</span> FragmentCrime();</span><br><span class=\"line\">     fragment.setArguments(args);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"最简单的应用\"><a href=\"#最简单的应用\" class=\"headerlink\" title=\"最简单的应用\"></a>最简单的应用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(getActivity(), ActivityCrimeBase.class);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用extra添加信息\"><a href=\"#使用extra添加信息\" class=\"headerlink\" title=\"使用extra添加信息\"></a>使用extra添加信息</h2><h3 id=\"附加extra信息\"><a href=\"#附加extra信息\" class=\"headerlink\" title=\"附加extra信息\"></a>附加extra信息</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intent.putExtra(FragmentCrime.EXTRA_CRIME_ID,c.getId());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取extra信息\"><a href=\"#获取extra信息\" class=\"headerlink\" title=\"获取extra信息\"></a>获取extra信息</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">FragmentCrime.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXTRA_CRIME_ID=<span class=\"string\">\"com.jc.criminalIntent2.crime_id\"</span>;</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">UUID crimeId=(UUID)getActivity()</span><br><span class=\"line\">                .getIntent()</span><br><span class=\"line\">                .getSerializableExtra(EXTRA_CRIME_ID);</span><br></pre></td></tr></table></figure>\n\n<p>此方法会破坏fragment的封装性，因为这时fragment总是需要由某个具体的activity托管。</p>\n<p>为了解决这一问题，可以就爱你个<code>mCrimeId</code>存放在fragment的arguments bundle中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ActivityCrime.java</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityCrime</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActivitySetFragmentBase</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Fragment <span class=\"title\">createFragment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UUID crimeId=(UUID)getIntent()</span><br><span class=\"line\">                .getSerializableExtra(FragmentCrime.EXTRA_CRIME_ID);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> FragmentCrime.newInstance(crimeId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FragmentCrime.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">     UUID crimeId=(UUID)getArguments()</span><br><span class=\"line\">             .getSerializable(EXTRA_CRIME_ID);</span><br><span class=\"line\">     mCrime=CrimeLab.get(getActivity()).getCrime(crimeId);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FragmentCrime <span class=\"title\">newInstance</span><span class=\"params\">(UUID crimeId)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     Bundle args=<span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">     args.putSerializable(EXTRA_CRIME_ID,crimeId);</span><br><span class=\"line\">     FragmentCrime fragment=<span class=\"keyword\">new</span> FragmentCrime();</span><br><span class=\"line\">     fragment.setArguments(args);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-07-07T16:00:00.000Z","title":"CriminalIntent程序中ViewPager相关内容","keywords":null,"description":"FragmenPagerAdapter和FragmenStatePagerAdapter这两者的区别主要在于卸载不再需要的fragment时采取的方法不同。","_content":"\n\n## FragmenPagerAdapter和FragmenStatePagerAdapter\n\n这两者的区别主要在于卸载不再需要的fragment时采取的方法不同。\n\n使用FragmentStatePagerAdapter会销毁掉不需要的fragment。事务提交后，可以将fragment从activity的FragmentManager中彻底移除。该类名中的`state`表明在销毁fragment时，它会将`onSaveInstanceState(Bundle)`方法中的Bundle信息保存下来。用户切换回来时，保存的实例可用于回复生成新的fragment。\n\n\nFragmentPagerAdapter对于不再需要的fragment，FragmentManager选择调用事务的`detach(fragment)`方法，而非`remove(fragment)`方法，FragmentPagerAdapter只是销毁fragment的视图，但是仍将实例保留在FragmentManager中。FragmentPagerAdapter创建的fragment不会被销毁。\n\n由上可知:\n1. FragmentStatePagerAdapter更省内存，所以当有大量的fragment时，推荐使用FragmentStatePagerAdapter.\n2. 但是当用户界面只有少量fragment时，推荐FragmentPagerAdapter。\n","source":"_posts/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-08-ViewPager.md","raw":"---\nauthor: ivyxjc\ndate: 2016-07-08\ntitle: CriminalIntent程序中ViewPager相关内容\ncategory: Android\ntags: [android,android_view_pager]\nkeywords:\ndescription: FragmenPagerAdapter和FragmenStatePagerAdapter这两者的区别主要在于卸载不再需要的fragment时采取的方法不同。\n---\n\n\n## FragmenPagerAdapter和FragmenStatePagerAdapter\n\n这两者的区别主要在于卸载不再需要的fragment时采取的方法不同。\n\n使用FragmentStatePagerAdapter会销毁掉不需要的fragment。事务提交后，可以将fragment从activity的FragmentManager中彻底移除。该类名中的`state`表明在销毁fragment时，它会将`onSaveInstanceState(Bundle)`方法中的Bundle信息保存下来。用户切换回来时，保存的实例可用于回复生成新的fragment。\n\n\nFragmentPagerAdapter对于不再需要的fragment，FragmentManager选择调用事务的`detach(fragment)`方法，而非`remove(fragment)`方法，FragmentPagerAdapter只是销毁fragment的视图，但是仍将实例保留在FragmentManager中。FragmentPagerAdapter创建的fragment不会被销毁。\n\n由上可知:\n1. FragmentStatePagerAdapter更省内存，所以当有大量的fragment时，推荐使用FragmentStatePagerAdapter.\n2. 但是当用户界面只有少量fragment时，推荐FragmentPagerAdapter。\n","slug":"android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-07-08-ViewPager","published":1,"updated":"2018-08-09T10:10:11.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfco00br28t1vemdzbxz","content":"<h2 id=\"FragmenPagerAdapter和FragmenStatePagerAdapter\"><a href=\"#FragmenPagerAdapter和FragmenStatePagerAdapter\" class=\"headerlink\" title=\"FragmenPagerAdapter和FragmenStatePagerAdapter\"></a>FragmenPagerAdapter和FragmenStatePagerAdapter</h2><p>这两者的区别主要在于卸载不再需要的fragment时采取的方法不同。</p>\n<p>使用FragmentStatePagerAdapter会销毁掉不需要的fragment。事务提交后，可以将fragment从activity的FragmentManager中彻底移除。该类名中的<code>state</code>表明在销毁fragment时，它会将<code>onSaveInstanceState(Bundle)</code>方法中的Bundle信息保存下来。用户切换回来时，保存的实例可用于回复生成新的fragment。</p>\n<p>FragmentPagerAdapter对于不再需要的fragment，FragmentManager选择调用事务的<code>detach(fragment)</code>方法，而非<code>remove(fragment)</code>方法，FragmentPagerAdapter只是销毁fragment的视图，但是仍将实例保留在FragmentManager中。FragmentPagerAdapter创建的fragment不会被销毁。</p>\n<p>由上可知:</p>\n<ol>\n<li>FragmentStatePagerAdapter更省内存，所以当有大量的fragment时，推荐使用FragmentStatePagerAdapter.</li>\n<li>但是当用户界面只有少量fragment时，推荐FragmentPagerAdapter。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"FragmenPagerAdapter和FragmenStatePagerAdapter\"><a href=\"#FragmenPagerAdapter和FragmenStatePagerAdapter\" class=\"headerlink\" title=\"FragmenPagerAdapter和FragmenStatePagerAdapter\"></a>FragmenPagerAdapter和FragmenStatePagerAdapter</h2><p>这两者的区别主要在于卸载不再需要的fragment时采取的方法不同。</p>\n<p>使用FragmentStatePagerAdapter会销毁掉不需要的fragment。事务提交后，可以将fragment从activity的FragmentManager中彻底移除。该类名中的<code>state</code>表明在销毁fragment时，它会将<code>onSaveInstanceState(Bundle)</code>方法中的Bundle信息保存下来。用户切换回来时，保存的实例可用于回复生成新的fragment。</p>\n<p>FragmentPagerAdapter对于不再需要的fragment，FragmentManager选择调用事务的<code>detach(fragment)</code>方法，而非<code>remove(fragment)</code>方法，FragmentPagerAdapter只是销毁fragment的视图，但是仍将实例保留在FragmentManager中。FragmentPagerAdapter创建的fragment不会被销毁。</p>\n<p>由上可知:</p>\n<ol>\n<li>FragmentStatePagerAdapter更省内存，所以当有大量的fragment时，推荐使用FragmentStatePagerAdapter.</li>\n<li>但是当用户界面只有少量fragment时，推荐FragmentPagerAdapter。</li>\n</ol>\n"},{"author":"ivyxjc","date":"2016-03-13T16:00:00.000Z","title":"CriminalIntent程序中Fragment相关内容","keywords":null,"description":"如何使用Fragment","_content":"\n## Activity中托管UI fragment有两种方式：\n1. 添加fragment到acitivity中\n2. 在activity代码中添加fragment\n\n第一种方法即将fragment添加到acitivity的布局中，这样会使得fragment视图和activity视图绑定。\n\n第二种方法可以在运行时控制fragment，可以决定何时将fragment添加到activity中，也可以移除当前fragment，用其它fragment代替当前fragment...\n\n为了能够灵活地设计UI，所以常用第二种方式来添加fragment。\n\n### 详细步骤\n\n#### 托管UI fragment\n1. 需要在activity视图层级结构中为fragment试图安排位置。\n\n#### 创建UI fragment\n1. 通过定义布局文件中的组件,组装界面\n2. 创建fragment类并设置试图为定义的布局\n3. 通过代码的方式,连接布局文件中生成的组件\n\n`Fragment`类要实现两个方法--`onCreate()`和`onCreateView()`方法。`onCreateView()`方法用来生成fragment视图的布局。\n\n```java\n@Nullable\n@Override\npublic View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n    View v=inflater.inflate(R.layout.fragment_crime,container,false);\n    return v;\n}\n```\n\n`onCreateView()`方法也是生成其它组件的地方。\n\n#### 代码\n\n1. 设置容器\n\n```xml\nactivity_crime.xml\n<FrameLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:id=\"@+id/fragment_container\"/>\n```\n\n2. 编写fragment布局文件\n\n```xml\nfragment_crime.xml\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <EditText\n        android:id=\"@+id/crime_title_edit_text\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"@string/crime_title_hint\"/>\n</LinearLayout>\n```\n\n3.使用代码添加fragment\n\n```java\nactivity_main.java\n\nFragmentManager fm=getSupportFragmentManager();\n        Fragment fragment=fm.findFragmentById(R.id.fragment_container);\n\n        if(fragment==null){\n            fragment=new FragmentCrime();\n            fm.beginTransaction()\n                    .add(R.id.fragment_container,fragment)\n                    .commit();\n        }\n```\n\n#### 添加UI fragment到FragmentManager\n\nFragmentManager主要处理：\n1. fragment队列\n2. fragment事务的回退栈\n\n\n\n## Fragment与Activity数据传送\n\nFragment传送数据到Activity\n\n```java\nIntent i=new Intent(getActivity(),CrimeActivity.class);\ni.putExtra(CrimeFragment.EXTRA_CRIME_ID,c.getId());\nstartActivity(i);\n```\n\nActivity中接受数据\n\n```java\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    UUID crimeId=(UUID)getActivity().getIntent()\n            .getSerializableExtra(EXTRA_CRIME_ID);\n\n    mCrime=CrimeLab.get(getActivity()).getCrime(crimeId);\n}\n```\n","source":"_posts/android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-03-14-CriminalIntent-Fragment.md","raw":"---\nauthor: ivyxjc\ndate: 2016-03-14\ntitle: CriminalIntent程序中Fragment相关内容\ncategory: Android\ntags: [android,android_fragment]\nkeywords:\ndescription: 如何使用Fragment\n---\n\n## Activity中托管UI fragment有两种方式：\n1. 添加fragment到acitivity中\n2. 在activity代码中添加fragment\n\n第一种方法即将fragment添加到acitivity的布局中，这样会使得fragment视图和activity视图绑定。\n\n第二种方法可以在运行时控制fragment，可以决定何时将fragment添加到activity中，也可以移除当前fragment，用其它fragment代替当前fragment...\n\n为了能够灵活地设计UI，所以常用第二种方式来添加fragment。\n\n### 详细步骤\n\n#### 托管UI fragment\n1. 需要在activity视图层级结构中为fragment试图安排位置。\n\n#### 创建UI fragment\n1. 通过定义布局文件中的组件,组装界面\n2. 创建fragment类并设置试图为定义的布局\n3. 通过代码的方式,连接布局文件中生成的组件\n\n`Fragment`类要实现两个方法--`onCreate()`和`onCreateView()`方法。`onCreateView()`方法用来生成fragment视图的布局。\n\n```java\n@Nullable\n@Override\npublic View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n    View v=inflater.inflate(R.layout.fragment_crime,container,false);\n    return v;\n}\n```\n\n`onCreateView()`方法也是生成其它组件的地方。\n\n#### 代码\n\n1. 设置容器\n\n```xml\nactivity_crime.xml\n<FrameLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:id=\"@+id/fragment_container\"/>\n```\n\n2. 编写fragment布局文件\n\n```xml\nfragment_crime.xml\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <EditText\n        android:id=\"@+id/crime_title_edit_text\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"@string/crime_title_hint\"/>\n</LinearLayout>\n```\n\n3.使用代码添加fragment\n\n```java\nactivity_main.java\n\nFragmentManager fm=getSupportFragmentManager();\n        Fragment fragment=fm.findFragmentById(R.id.fragment_container);\n\n        if(fragment==null){\n            fragment=new FragmentCrime();\n            fm.beginTransaction()\n                    .add(R.id.fragment_container,fragment)\n                    .commit();\n        }\n```\n\n#### 添加UI fragment到FragmentManager\n\nFragmentManager主要处理：\n1. fragment队列\n2. fragment事务的回退栈\n\n\n\n## Fragment与Activity数据传送\n\nFragment传送数据到Activity\n\n```java\nIntent i=new Intent(getActivity(),CrimeActivity.class);\ni.putExtra(CrimeFragment.EXTRA_CRIME_ID,c.getId());\nstartActivity(i);\n```\n\nActivity中接受数据\n\n```java\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    UUID crimeId=(UUID)getActivity().getIntent()\n            .getSerializableExtra(EXTRA_CRIME_ID);\n\n    mCrime=CrimeLab.get(getActivity()).getCrime(crimeId);\n}\n```\n","slug":"android/开发实战/AndroidBigNerdRanceGuide/CriminalIntent开发/2016-03-14-CriminalIntent-Fragment","published":1,"updated":"2018-08-09T10:10:11.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfcp00bu28t1v19pc49n","content":"<h2 id=\"Activity中托管UI-fragment有两种方式：\"><a href=\"#Activity中托管UI-fragment有两种方式：\" class=\"headerlink\" title=\"Activity中托管UI fragment有两种方式：\"></a>Activity中托管UI fragment有两种方式：</h2><ol>\n<li>添加fragment到acitivity中</li>\n<li>在activity代码中添加fragment</li>\n</ol>\n<p>第一种方法即将fragment添加到acitivity的布局中，这样会使得fragment视图和activity视图绑定。</p>\n<p>第二种方法可以在运行时控制fragment，可以决定何时将fragment添加到activity中，也可以移除当前fragment，用其它fragment代替当前fragment…</p>\n<p>为了能够灵活地设计UI，所以常用第二种方式来添加fragment。</p>\n<h3 id=\"详细步骤\"><a href=\"#详细步骤\" class=\"headerlink\" title=\"详细步骤\"></a>详细步骤</h3><h4 id=\"托管UI-fragment\"><a href=\"#托管UI-fragment\" class=\"headerlink\" title=\"托管UI fragment\"></a>托管UI fragment</h4><ol>\n<li>需要在activity视图层级结构中为fragment试图安排位置。</li>\n</ol>\n<h4 id=\"创建UI-fragment\"><a href=\"#创建UI-fragment\" class=\"headerlink\" title=\"创建UI fragment\"></a>创建UI fragment</h4><ol>\n<li>通过定义布局文件中的组件,组装界面</li>\n<li>创建fragment类并设置试图为定义的布局</li>\n<li>通过代码的方式,连接布局文件中生成的组件</li>\n</ol>\n<p><code>Fragment</code>类要实现两个方法–<code>onCreate()</code>和<code>onCreateView()</code>方法。<code>onCreateView()</code>方法用来生成fragment视图的布局。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    View v=inflater.inflate(R.layout.fragment_crime,container,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>onCreateView()</code>方法也是生成其它组件的地方。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><ol>\n<li>设置容器</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activity_crime.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment_container\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编写fragment布局文件</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fragment_crime.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/crime_title_edit_text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/crime_title_hint\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3.使用代码添加fragment</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activity_main.java</span><br><span class=\"line\"></span><br><span class=\"line\">FragmentManager fm=getSupportFragmentManager();</span><br><span class=\"line\">        Fragment fragment=fm.findFragmentById(R.id.fragment_container);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fragment==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            fragment=<span class=\"keyword\">new</span> FragmentCrime();</span><br><span class=\"line\">            fm.beginTransaction()</span><br><span class=\"line\">                    .add(R.id.fragment_container,fragment)</span><br><span class=\"line\">                    .commit();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加UI-fragment到FragmentManager\"><a href=\"#添加UI-fragment到FragmentManager\" class=\"headerlink\" title=\"添加UI fragment到FragmentManager\"></a>添加UI fragment到FragmentManager</h4><p>FragmentManager主要处理：</p>\n<ol>\n<li>fragment队列</li>\n<li>fragment事务的回退栈</li>\n</ol>\n<h2 id=\"Fragment与Activity数据传送\"><a href=\"#Fragment与Activity数据传送\" class=\"headerlink\" title=\"Fragment与Activity数据传送\"></a>Fragment与Activity数据传送</h2><p>Fragment传送数据到Activity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent i=<span class=\"keyword\">new</span> Intent(getActivity(),CrimeActivity.class);</span><br><span class=\"line\">i.putExtra(CrimeFragment.EXTRA_CRIME_ID,c.getId());</span><br><span class=\"line\">startActivity(i);</span><br></pre></td></tr></table></figure>\n\n<p>Activity中接受数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    UUID crimeId=(UUID)getActivity().getIntent()</span><br><span class=\"line\">            .getSerializableExtra(EXTRA_CRIME_ID);</span><br><span class=\"line\"></span><br><span class=\"line\">    mCrime=CrimeLab.get(getActivity()).getCrime(crimeId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Activity中托管UI-fragment有两种方式：\"><a href=\"#Activity中托管UI-fragment有两种方式：\" class=\"headerlink\" title=\"Activity中托管UI fragment有两种方式：\"></a>Activity中托管UI fragment有两种方式：</h2><ol>\n<li>添加fragment到acitivity中</li>\n<li>在activity代码中添加fragment</li>\n</ol>\n<p>第一种方法即将fragment添加到acitivity的布局中，这样会使得fragment视图和activity视图绑定。</p>\n<p>第二种方法可以在运行时控制fragment，可以决定何时将fragment添加到activity中，也可以移除当前fragment，用其它fragment代替当前fragment…</p>\n<p>为了能够灵活地设计UI，所以常用第二种方式来添加fragment。</p>\n<h3 id=\"详细步骤\"><a href=\"#详细步骤\" class=\"headerlink\" title=\"详细步骤\"></a>详细步骤</h3><h4 id=\"托管UI-fragment\"><a href=\"#托管UI-fragment\" class=\"headerlink\" title=\"托管UI fragment\"></a>托管UI fragment</h4><ol>\n<li>需要在activity视图层级结构中为fragment试图安排位置。</li>\n</ol>\n<h4 id=\"创建UI-fragment\"><a href=\"#创建UI-fragment\" class=\"headerlink\" title=\"创建UI fragment\"></a>创建UI fragment</h4><ol>\n<li>通过定义布局文件中的组件,组装界面</li>\n<li>创建fragment类并设置试图为定义的布局</li>\n<li>通过代码的方式,连接布局文件中生成的组件</li>\n</ol>\n<p><code>Fragment</code>类要实现两个方法–<code>onCreate()</code>和<code>onCreateView()</code>方法。<code>onCreateView()</code>方法用来生成fragment视图的布局。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    View v=inflater.inflate(R.layout.fragment_crime,container,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>onCreateView()</code>方法也是生成其它组件的地方。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><ol>\n<li>设置容器</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activity_crime.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment_container\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编写fragment布局文件</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fragment_crime.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/crime_title_edit_text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/crime_title_hint\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3.使用代码添加fragment</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activity_main.java</span><br><span class=\"line\"></span><br><span class=\"line\">FragmentManager fm=getSupportFragmentManager();</span><br><span class=\"line\">        Fragment fragment=fm.findFragmentById(R.id.fragment_container);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fragment==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            fragment=<span class=\"keyword\">new</span> FragmentCrime();</span><br><span class=\"line\">            fm.beginTransaction()</span><br><span class=\"line\">                    .add(R.id.fragment_container,fragment)</span><br><span class=\"line\">                    .commit();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加UI-fragment到FragmentManager\"><a href=\"#添加UI-fragment到FragmentManager\" class=\"headerlink\" title=\"添加UI fragment到FragmentManager\"></a>添加UI fragment到FragmentManager</h4><p>FragmentManager主要处理：</p>\n<ol>\n<li>fragment队列</li>\n<li>fragment事务的回退栈</li>\n</ol>\n<h2 id=\"Fragment与Activity数据传送\"><a href=\"#Fragment与Activity数据传送\" class=\"headerlink\" title=\"Fragment与Activity数据传送\"></a>Fragment与Activity数据传送</h2><p>Fragment传送数据到Activity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent i=<span class=\"keyword\">new</span> Intent(getActivity(),CrimeActivity.class);</span><br><span class=\"line\">i.putExtra(CrimeFragment.EXTRA_CRIME_ID,c.getId());</span><br><span class=\"line\">startActivity(i);</span><br></pre></td></tr></table></figure>\n\n<p>Activity中接受数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    UUID crimeId=(UUID)getActivity().getIntent()</span><br><span class=\"line\">            .getSerializableExtra(EXTRA_CRIME_ID);</span><br><span class=\"line\"></span><br><span class=\"line\">    mCrime=CrimeLab.get(getActivity()).getCrime(crimeId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"ivyxjc","date":"2016-02-17T16:00:00.000Z","title":"Codeforces Education Round7","keywords":null,"description":"Codeforces Education Round7几道题目的解答","_content":"\n[题目网址](http://codeforces.com/contest/622/)\n\n## A:Infinite Sequence\n\n\nA题比较简单,主要就利用公式$ \\sum_{k=1}^n k=\\frac {(1+n)* n}{2} $来确定距离所要求的数字最近的一个1所在的位置。然后就可得到该数值了。<br>\n代码如下：\n\n### 代码\n\n```java\npublic class Round7_A{\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        long  a=in.nextLong();\n        long a_one=count(a);\n\n        if(a_one*a_one+a_one==2*a){\n            System.out.println(a_one);\n        }else{\n            long tmp=(long)a-(a_one*a_one+a_one)/2;\n            System.out.println(tmp);\n        }\n        return;\n    }\n\n    public static long count(long  num) {\n        long num_two = 2 * num;\n        long i = (long) Math.sqrt(num_two) - 1;\n        //System.out.println(i);\n        if (i <= 0) {\n            i = 0;\n        }\n        for (; i <= num; i++) {\n            //System.out.println(i);\n            if (i * i + i == num_two) {\n                return i;\n            }\n            if (i * i + i > num_two) {\n                return i - 1;\n            }\n        }\n        return 0;\n    }\n}\n```\n\n## B. The Time\nB题也比较简单，主要就注意几个边界条件即可以及格式化输出即可。\n\n```java\n//num只有个位时，会自动在十位补0\nDecimalFormat df=new DecimalFormat(\"00\");\ndf.format(num);\n```\n\n\n## C. Not Equal on a Segment\n\n### 题目\n题意为查询一个数组的某一区间是否存在指定的$$$x$$$不相同的数，若不存在输出-1，否则输出任意一个不相同的树的秩。<br>\n\n### 解法介绍\n1.暴力解法就是遍历整个区间，但时间肯定不够。<br>\n\n2.线段树法：线段树广泛用于区间查询，但是该题仅需输出任意一个不相同的树的位置即可，所以可以不用该法。(其实我还没有特别熟线段树)\n\n3.解法：设输入数据的数组为```array[]```<br>\n创建一个数组```diff[]=new int[arrayLength]```使其任意秩```diff[i]```值为满足$$$ a_j \\ne a_i (j>i) $$$的第一个j的值。这也是官方答案所给的解法。代码如下：<br>\n\n### 边界条件\n该代码需要考虑到的边界条件有：<br>\n\n```\n1.数组内容全部相同\n2.数组内容出现连续相同的项\n3.数组内容全部不相同\n4.diff数组的最后一项是否有值(统一将diff数组的最后一项设为数组长度)\n\n```\n\n### 代码\n\n```java\nint tmpI=0;\nfor(int j=tmpI+1;j<arrayLength;){\n    if(array[j]==array[tmpI]) {\n        j++;\n        continue;\n    }\n    for(;tmpI<j;tmpI++){\n        diff[tmpI]=j;\n    }\n}\n//若数组中最后出现连续相同的项，上述代码不能将这些项赋值为arrayLength\n//所以需要下面的代码\nfor(int i=tmpI;i<arrayLength;i++){\n    diff[i]=arrayLength;\n}\n\ndiff[arrayLength-1]=arrayLength;\n```\n\n查询时使用的代码:<br>\n\n```java\ntry{\n    for(int i=0;i<queryTimes;i++){\n        int left=getInt()-1;\n        int right=getInt()-1;\n        int x=getInt();\n        if(array[left]!=x){\n            writer.write((left+1)+\"\\n\");\n            continue;\n        }\n        if(diff[left]>right){\n            writer.write((-1)+\"\\n\");\n        }else{\n            writer.write((diff[left]+1)+\"\\n\");\n        }\n    }\n    writer.flush();\n}catch (IOException e){\n    e.printStackTrace();\n}\n```\n\n### IO问题\n这一题以及下面的e题还有一个问题就是如果使用```Scanner```和```System.out.println()```，无论如何都不会通过测试，因为io就基本上快超时了。\n\n我使用了[ java_acm快速输入和输出 ][1]中提供的一个输入输出方法，代码如下\n#### 解决代码\n\n```java\npublic class Main {  \n    private static Reader reader = null;  \n    private static Writer writer = null;  \n\n    public static void main(String[] args) {  \n        reader = new InputStreamReader(System.in);  \n        writer = new OutputStreamWriter(System.out);  \n        try {  \n                m = getInt();  \n                writer.write(\"something\");  \n                writer.flush();  \n            }  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n        }  \n    }  \n\n    /**\n     * 获取键盘输入的整数\n     *  \n     * @return 输入的整数\n     */  \n    public static int getInt() {  \n        int read;  \n        int res = 0;  \n        boolean isNegative = false;// 是不是负数  \n        try {  \n            while ((read = reader.read()) != -1) {  \n                if ((char) read == '-') {  \n                    res = 0;  \n                    isNegative = true;  \n                    break;  \n                } else if (isNumber((char) read)) {  \n                    res = read - '0';  \n                    break;  \n                }  \n            }  \n            while ((read = reader.read()) != -1) {  \n                char ch = (char) read;  \n                if (isNumber(ch)) {  \n                    res = res * 10 + (read - '0');  \n                } else {  \n                    break;  \n                }  \n            }  \n        } catch (IOException e) {  \n            // TODO Auto-generated catch block  \n            e.printStackTrace();  \n        }  \n        if (isNegative == true) {  \n            res = -1 * res;  \n        }  \n        return res;  \n    }  \n\n    /**\n     * 判断字符是否空白\n     *  \n     * @param ch\n     *            字符\n     * @return 判断结果\n     */  \n    public static boolean isBlank(char ch) {  \n        if (ch == '\\r' || ch == '\\n' || ch == ' ') {  \n            return true;  \n        }  \n        return false;  \n    }  \n\n    /**\n     * 判断字符是不是数字\n     *  \n     * @param ch\n     *            字符\n     * @return 判断结果\n     */  \n    public static boolean isNumber(char ch) {  \n        if (ch <= '9' && ch >= '0') {  \n            return true;  \n        }  \n        return false;  \n    }  \n}  \n\n```\n\n## E. Ants in Leaves\n\n### 题目\nYou are given a tree with n vertices and a root in the vertex 1. There is an ant in each leaf of the tree. In one second some ants can simultaneously go to the parent vertex from the vertex they were in. No two ants can be in the same vertex simultaneously except for the root of the tree.<br>\n\nFind the minimal time required for all ants to be in the root of the tree.<br>\n\n题意：n只蚂蚁从树的叶节点向根节点爬，每秒只能爬到它的父节点处，但是除了根节点，其它所有节点都只能同时存在一只蚂蚁。<br>\n\n### 解法\n\nThis problem was suggested by Aleksa Plavsic allllekssssa.\n\nLet z be the array of the depths of all leaves in the subtree of the vertex v. Let's sort z.\n\nStatement 1: it's profitable to lift the leaves in order of their appearing in z.\n\nStatement 2: denote ax — the time of appearing the x-th leaf in the vertex v, let's consider the leaves $$$z_i$$$ and $$$z_{i+1}$$$ then  $$$a_{z_i+1} \\geq  a_{z_i}+1$$$.\n\nStatement 3: $$$a_{z_i+1}=max(d_{z_i}+1,a_{z_i}+1)$$$, where $$$d_x$$$ is the depth of the x-th leaf in the subtree of the vertex v. The last statement gives us the solution for the problem: we should simply iterate over z from left to right and recalculate the array a by formula from the third statement. All statements can be easily proved and it's recommended to do by yourself to understand better the idea of the solution.\n\n#### 代码实现\n\n##### 建图\n\n```java\nint V=getInt();\n    Graph G=new Graph(V,V-1);\n    for(int i=0;i<V-1;i++){\n        G.addEdge(getInt(),getInt());\n    }\n    G.dfs();\n    G.solve();\n```\n\n##### dfs()详细代码\n\n```dfs()```的目的是将根节点的每个直接子节点的所有叶子节点的深度存储在一个```ArrayList```中组成一个数组depthArray中。\n\n```java\npublic void dfs(int v){\n//从根节点出发\n    if(v==1){\n        int rootSonsNum=adj[v].getConnectedvertexs().size();\n        depthArray=new ArrayList[rootSonsNum];\n        for(int i=0;i<rootSonsNum;i++){\n            depthArray[i]=new ArrayList<>();\n        }\n    }\n    marked[v]=true;\n    adj[v].setDepth(depth);\n    if(adj[v].getDegree()==1)\n        depthArray[count].add(adj[v].getDepth());\n    depth++;\n    for(Integer i:adj[v].getConnectedvertexs()){\n        if(!marked[i]){\n            dfs(i);\n            depth--;\n        }\n        if(v==1){\n            count++;\n        }\n    }\n}\n\npublic void dfs(){\n    dfs(1);\n}\n```\n\n##### solve()代码\n\n```solve()```代码的作用就是先将```depthArray```中的每一```个ArrayList```按从小到大排序，再对每一个ArrayList中的数据进行$$$max(d_{z_i}+1,a_{z_i}+1)$$$比较，最后```depthArray```数组中每一个```ArrayList```的resMax比较取最大的值。\n\n```java\npublic int solve(){\n    for(ArrayList<Integer> i:depthArray) {\n        Collections.sort(i);\n//            i.sort(new Comparator<Integer>() {\n//                @Override\n//                public int compare(Integer o1, Integer o2) {\n//                    if (o1 > o2)\n//                        return 1;\n//                    else if (o1 == o2)\n//                        return 0;\n//                    else\n//                        return -1;\n//                }\n//            });\n\n/*\n注释掉的代码在有些时候会出现\njava.lang.IllegalArgumentException: Comparison method violates its general contract!。可见16057179提交的错误提示\n*/\n\n    int res=0;\n    for(ArrayList<Integer> i:depthArray){\n        //System.out.println(i);\n        int tmpres=i.get(0);\n        int tmpIndex=1;\n        while(tmpIndex<i.size()){\n            tmpres=max(tmpres+1,i.get(tmpIndex));\n            tmpIndex++;\n        }\n        res=max(tmpres,res);\n    }\n    System.out.println(res);\n    return res;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  [1]: http://blog.csdn.net/a601025382s/article/details/46999711\n","source":"_posts/algorithm/oj/Codeforces/eduRound/2016-02-18-Codeforces-Edu-Round7总结.md","raw":"---\nauthor: ivyxjc\ndate: 2016-02-18\ntitle: Codeforces Education Round7\ncategory: Algorithm\ntags: [格式化输出,onlinejudge,io,线段树,区间查询]\nkeywords:\ndescription: Codeforces Education Round7几道题目的解答\n---\n\n[题目网址](http://codeforces.com/contest/622/)\n\n## A:Infinite Sequence\n\n\nA题比较简单,主要就利用公式$ \\sum_{k=1}^n k=\\frac {(1+n)* n}{2} $来确定距离所要求的数字最近的一个1所在的位置。然后就可得到该数值了。<br>\n代码如下：\n\n### 代码\n\n```java\npublic class Round7_A{\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        long  a=in.nextLong();\n        long a_one=count(a);\n\n        if(a_one*a_one+a_one==2*a){\n            System.out.println(a_one);\n        }else{\n            long tmp=(long)a-(a_one*a_one+a_one)/2;\n            System.out.println(tmp);\n        }\n        return;\n    }\n\n    public static long count(long  num) {\n        long num_two = 2 * num;\n        long i = (long) Math.sqrt(num_two) - 1;\n        //System.out.println(i);\n        if (i <= 0) {\n            i = 0;\n        }\n        for (; i <= num; i++) {\n            //System.out.println(i);\n            if (i * i + i == num_two) {\n                return i;\n            }\n            if (i * i + i > num_two) {\n                return i - 1;\n            }\n        }\n        return 0;\n    }\n}\n```\n\n## B. The Time\nB题也比较简单，主要就注意几个边界条件即可以及格式化输出即可。\n\n```java\n//num只有个位时，会自动在十位补0\nDecimalFormat df=new DecimalFormat(\"00\");\ndf.format(num);\n```\n\n\n## C. Not Equal on a Segment\n\n### 题目\n题意为查询一个数组的某一区间是否存在指定的$$$x$$$不相同的数，若不存在输出-1，否则输出任意一个不相同的树的秩。<br>\n\n### 解法介绍\n1.暴力解法就是遍历整个区间，但时间肯定不够。<br>\n\n2.线段树法：线段树广泛用于区间查询，但是该题仅需输出任意一个不相同的树的位置即可，所以可以不用该法。(其实我还没有特别熟线段树)\n\n3.解法：设输入数据的数组为```array[]```<br>\n创建一个数组```diff[]=new int[arrayLength]```使其任意秩```diff[i]```值为满足$$$ a_j \\ne a_i (j>i) $$$的第一个j的值。这也是官方答案所给的解法。代码如下：<br>\n\n### 边界条件\n该代码需要考虑到的边界条件有：<br>\n\n```\n1.数组内容全部相同\n2.数组内容出现连续相同的项\n3.数组内容全部不相同\n4.diff数组的最后一项是否有值(统一将diff数组的最后一项设为数组长度)\n\n```\n\n### 代码\n\n```java\nint tmpI=0;\nfor(int j=tmpI+1;j<arrayLength;){\n    if(array[j]==array[tmpI]) {\n        j++;\n        continue;\n    }\n    for(;tmpI<j;tmpI++){\n        diff[tmpI]=j;\n    }\n}\n//若数组中最后出现连续相同的项，上述代码不能将这些项赋值为arrayLength\n//所以需要下面的代码\nfor(int i=tmpI;i<arrayLength;i++){\n    diff[i]=arrayLength;\n}\n\ndiff[arrayLength-1]=arrayLength;\n```\n\n查询时使用的代码:<br>\n\n```java\ntry{\n    for(int i=0;i<queryTimes;i++){\n        int left=getInt()-1;\n        int right=getInt()-1;\n        int x=getInt();\n        if(array[left]!=x){\n            writer.write((left+1)+\"\\n\");\n            continue;\n        }\n        if(diff[left]>right){\n            writer.write((-1)+\"\\n\");\n        }else{\n            writer.write((diff[left]+1)+\"\\n\");\n        }\n    }\n    writer.flush();\n}catch (IOException e){\n    e.printStackTrace();\n}\n```\n\n### IO问题\n这一题以及下面的e题还有一个问题就是如果使用```Scanner```和```System.out.println()```，无论如何都不会通过测试，因为io就基本上快超时了。\n\n我使用了[ java_acm快速输入和输出 ][1]中提供的一个输入输出方法，代码如下\n#### 解决代码\n\n```java\npublic class Main {  \n    private static Reader reader = null;  \n    private static Writer writer = null;  \n\n    public static void main(String[] args) {  \n        reader = new InputStreamReader(System.in);  \n        writer = new OutputStreamWriter(System.out);  \n        try {  \n                m = getInt();  \n                writer.write(\"something\");  \n                writer.flush();  \n            }  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n        }  \n    }  \n\n    /**\n     * 获取键盘输入的整数\n     *  \n     * @return 输入的整数\n     */  \n    public static int getInt() {  \n        int read;  \n        int res = 0;  \n        boolean isNegative = false;// 是不是负数  \n        try {  \n            while ((read = reader.read()) != -1) {  \n                if ((char) read == '-') {  \n                    res = 0;  \n                    isNegative = true;  \n                    break;  \n                } else if (isNumber((char) read)) {  \n                    res = read - '0';  \n                    break;  \n                }  \n            }  \n            while ((read = reader.read()) != -1) {  \n                char ch = (char) read;  \n                if (isNumber(ch)) {  \n                    res = res * 10 + (read - '0');  \n                } else {  \n                    break;  \n                }  \n            }  \n        } catch (IOException e) {  \n            // TODO Auto-generated catch block  \n            e.printStackTrace();  \n        }  \n        if (isNegative == true) {  \n            res = -1 * res;  \n        }  \n        return res;  \n    }  \n\n    /**\n     * 判断字符是否空白\n     *  \n     * @param ch\n     *            字符\n     * @return 判断结果\n     */  \n    public static boolean isBlank(char ch) {  \n        if (ch == '\\r' || ch == '\\n' || ch == ' ') {  \n            return true;  \n        }  \n        return false;  \n    }  \n\n    /**\n     * 判断字符是不是数字\n     *  \n     * @param ch\n     *            字符\n     * @return 判断结果\n     */  \n    public static boolean isNumber(char ch) {  \n        if (ch <= '9' && ch >= '0') {  \n            return true;  \n        }  \n        return false;  \n    }  \n}  \n\n```\n\n## E. Ants in Leaves\n\n### 题目\nYou are given a tree with n vertices and a root in the vertex 1. There is an ant in each leaf of the tree. In one second some ants can simultaneously go to the parent vertex from the vertex they were in. No two ants can be in the same vertex simultaneously except for the root of the tree.<br>\n\nFind the minimal time required for all ants to be in the root of the tree.<br>\n\n题意：n只蚂蚁从树的叶节点向根节点爬，每秒只能爬到它的父节点处，但是除了根节点，其它所有节点都只能同时存在一只蚂蚁。<br>\n\n### 解法\n\nThis problem was suggested by Aleksa Plavsic allllekssssa.\n\nLet z be the array of the depths of all leaves in the subtree of the vertex v. Let's sort z.\n\nStatement 1: it's profitable to lift the leaves in order of their appearing in z.\n\nStatement 2: denote ax — the time of appearing the x-th leaf in the vertex v, let's consider the leaves $$$z_i$$$ and $$$z_{i+1}$$$ then  $$$a_{z_i+1} \\geq  a_{z_i}+1$$$.\n\nStatement 3: $$$a_{z_i+1}=max(d_{z_i}+1,a_{z_i}+1)$$$, where $$$d_x$$$ is the depth of the x-th leaf in the subtree of the vertex v. The last statement gives us the solution for the problem: we should simply iterate over z from left to right and recalculate the array a by formula from the third statement. All statements can be easily proved and it's recommended to do by yourself to understand better the idea of the solution.\n\n#### 代码实现\n\n##### 建图\n\n```java\nint V=getInt();\n    Graph G=new Graph(V,V-1);\n    for(int i=0;i<V-1;i++){\n        G.addEdge(getInt(),getInt());\n    }\n    G.dfs();\n    G.solve();\n```\n\n##### dfs()详细代码\n\n```dfs()```的目的是将根节点的每个直接子节点的所有叶子节点的深度存储在一个```ArrayList```中组成一个数组depthArray中。\n\n```java\npublic void dfs(int v){\n//从根节点出发\n    if(v==1){\n        int rootSonsNum=adj[v].getConnectedvertexs().size();\n        depthArray=new ArrayList[rootSonsNum];\n        for(int i=0;i<rootSonsNum;i++){\n            depthArray[i]=new ArrayList<>();\n        }\n    }\n    marked[v]=true;\n    adj[v].setDepth(depth);\n    if(adj[v].getDegree()==1)\n        depthArray[count].add(adj[v].getDepth());\n    depth++;\n    for(Integer i:adj[v].getConnectedvertexs()){\n        if(!marked[i]){\n            dfs(i);\n            depth--;\n        }\n        if(v==1){\n            count++;\n        }\n    }\n}\n\npublic void dfs(){\n    dfs(1);\n}\n```\n\n##### solve()代码\n\n```solve()```代码的作用就是先将```depthArray```中的每一```个ArrayList```按从小到大排序，再对每一个ArrayList中的数据进行$$$max(d_{z_i}+1,a_{z_i}+1)$$$比较，最后```depthArray```数组中每一个```ArrayList```的resMax比较取最大的值。\n\n```java\npublic int solve(){\n    for(ArrayList<Integer> i:depthArray) {\n        Collections.sort(i);\n//            i.sort(new Comparator<Integer>() {\n//                @Override\n//                public int compare(Integer o1, Integer o2) {\n//                    if (o1 > o2)\n//                        return 1;\n//                    else if (o1 == o2)\n//                        return 0;\n//                    else\n//                        return -1;\n//                }\n//            });\n\n/*\n注释掉的代码在有些时候会出现\njava.lang.IllegalArgumentException: Comparison method violates its general contract!。可见16057179提交的错误提示\n*/\n\n    int res=0;\n    for(ArrayList<Integer> i:depthArray){\n        //System.out.println(i);\n        int tmpres=i.get(0);\n        int tmpIndex=1;\n        while(tmpIndex<i.size()){\n            tmpres=max(tmpres+1,i.get(tmpIndex));\n            tmpIndex++;\n        }\n        res=max(tmpres,res);\n    }\n    System.out.println(res);\n    return res;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  [1]: http://blog.csdn.net/a601025382s/article/details/46999711\n","slug":"algorithm/oj/Codeforces/eduRound/2016-02-18-Codeforces-Edu-Round7总结","published":1,"updated":"2018-08-09T10:10:11.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0mglfd000d728t17ywowwwn","content":"<p><a href=\"http://codeforces.com/contest/622/\" target=\"_blank\" rel=\"noopener\">题目网址</a></p>\n<h2 id=\"A-Infinite-Sequence\"><a href=\"#A-Infinite-Sequence\" class=\"headerlink\" title=\"A:Infinite Sequence\"></a>A:Infinite Sequence</h2><p>A题比较简单,主要就利用公式$ \\sum_{k=1}^n k=\\frac {(1+n)* n}{2} $来确定距离所要求的数字最近的一个1所在的位置。然后就可得到该数值了。<br><br>代码如下：</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Round7_A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Scanner in=<span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">long</span>  a=in.nextLong();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> a_one=count(a);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a_one*a_one+a_one==<span class=\"number\">2</span>*a)&#123;</span><br><span class=\"line\">            System.out.println(a_one);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> tmp=(<span class=\"keyword\">long</span>)a-(a_one*a_one+a_one)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            System.out.println(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">long</span>  num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> num_two = <span class=\"number\">2</span> * num;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> i = (<span class=\"keyword\">long</span>) Math.sqrt(num_two) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(i);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt;= num; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(i);</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i * i + i == num_two) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i * i + i &gt; num_two) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"B-The-Time\"><a href=\"#B-The-Time\" class=\"headerlink\" title=\"B. The Time\"></a>B. The Time</h2><p>B题也比较简单，主要就注意几个边界条件即可以及格式化输出即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//num只有个位时，会自动在十位补0</span></span><br><span class=\"line\">DecimalFormat df=<span class=\"keyword\">new</span> DecimalFormat(<span class=\"string\">\"00\"</span>);</span><br><span class=\"line\">df.format(num);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-Not-Equal-on-a-Segment\"><a href=\"#C-Not-Equal-on-a-Segment\" class=\"headerlink\" title=\"C. Not Equal on a Segment\"></a>C. Not Equal on a Segment</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>题意为查询一个数组的某一区间是否存在指定的$$$x$$$不相同的数，若不存在输出-1，否则输出任意一个不相同的树的秩。<br></p>\n<h3 id=\"解法介绍\"><a href=\"#解法介绍\" class=\"headerlink\" title=\"解法介绍\"></a>解法介绍</h3><p>1.暴力解法就是遍历整个区间，但时间肯定不够。<br></p>\n<p>2.线段树法：线段树广泛用于区间查询，但是该题仅需输出任意一个不相同的树的位置即可，所以可以不用该法。(其实我还没有特别熟线段树)</p>\n<p>3.解法：设输入数据的数组为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个数组```diff[]=new int[arrayLength]```使其任意秩```diff[i]```值为满足$$$ a_j \\ne a_i (j&gt;i) $$$的第一个j的值。这也是官方答案所给的解法。代码如下：&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">### 边界条件</span><br><span class=\"line\">该代码需要考虑到的边界条件有：&lt;br&gt;</span><br></pre></td></tr></table></figure></p>\n<p>1.数组内容全部相同<br>2.数组内容出现连续相同的项<br>3.数组内容全部不相同<br>4.diff数组的最后一项是否有值(统一将diff数组的最后一项设为数组长度)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">int tmpI=0;</span><br><span class=\"line\">for(int j=tmpI+1;j&lt;arrayLength;)&#123;</span><br><span class=\"line\">    if(array[j]==array[tmpI]) &#123;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(;tmpI&lt;j;tmpI++)&#123;</span><br><span class=\"line\">        diff[tmpI]=j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//若数组中最后出现连续相同的项，上述代码不能将这些项赋值为arrayLength</span><br><span class=\"line\">//所以需要下面的代码</span><br><span class=\"line\">for(int i=tmpI;i&lt;arrayLength;i++)&#123;</span><br><span class=\"line\">    diff[i]=arrayLength;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">diff[arrayLength-1]=arrayLength;</span><br></pre></td></tr></table></figure>\n\n<p>查询时使用的代码:<br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;queryTimes;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left=getInt()-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right=getInt()-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=getInt();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[left]!=x)&#123;</span><br><span class=\"line\">            writer.write((left+<span class=\"number\">1</span>)+<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(diff[left]&gt;right)&#123;</span><br><span class=\"line\">            writer.write((-<span class=\"number\">1</span>)+<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            writer.write((diff[left]+<span class=\"number\">1</span>)+<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    writer.flush();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IO问题\"><a href=\"#IO问题\" class=\"headerlink\" title=\"IO问题\"></a>IO问题</h3><p>这一题以及下面的e题还有一个问题就是如果使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">我使用了[ java_acm快速输入和输出 ][1]中提供的一个输入输出方法，代码如下</span><br><span class=\"line\">#### 解决代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public class Main &#123;  </span><br><span class=\"line\">    private static Reader reader = null;  </span><br><span class=\"line\">    private static Writer writer = null;  </span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;  </span><br><span class=\"line\">        reader = new InputStreamReader(System.in);  </span><br><span class=\"line\">        writer = new OutputStreamWriter(System.out);  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">                m = getInt();  </span><br><span class=\"line\">                writer.write(&quot;something&quot;);  </span><br><span class=\"line\">                writer.flush();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125; catch (Exception e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取键盘输入的整数</span><br><span class=\"line\">     *  </span><br><span class=\"line\">     * @return 输入的整数</span><br><span class=\"line\">     */  </span><br><span class=\"line\">    public static int getInt() &#123;  </span><br><span class=\"line\">        int read;  </span><br><span class=\"line\">        int res = 0;  </span><br><span class=\"line\">        boolean isNegative = false;// 是不是负数  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            while ((read = reader.read()) != -1) &#123;  </span><br><span class=\"line\">                if ((char) read == &apos;-&apos;) &#123;  </span><br><span class=\"line\">                    res = 0;  </span><br><span class=\"line\">                    isNegative = true;  </span><br><span class=\"line\">                    break;  </span><br><span class=\"line\">                &#125; else if (isNumber((char) read)) &#123;  </span><br><span class=\"line\">                    res = read - &apos;0&apos;;  </span><br><span class=\"line\">                    break;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            while ((read = reader.read()) != -1) &#123;  </span><br><span class=\"line\">                char ch = (char) read;  </span><br><span class=\"line\">                if (isNumber(ch)) &#123;  </span><br><span class=\"line\">                    res = res * 10 + (read - &apos;0&apos;);  </span><br><span class=\"line\">                &#125; else &#123;  </span><br><span class=\"line\">                    break;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125; catch (IOException e) &#123;  </span><br><span class=\"line\">            // TODO Auto-generated catch block  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        if (isNegative == true) &#123;  </span><br><span class=\"line\">            res = -1 * res;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return res;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断字符是否空白</span><br><span class=\"line\">     *  </span><br><span class=\"line\">     * @param ch</span><br><span class=\"line\">     *            字符</span><br><span class=\"line\">     * @return 判断结果</span><br><span class=\"line\">     */  </span><br><span class=\"line\">    public static boolean isBlank(char ch) &#123;  </span><br><span class=\"line\">        if (ch == &apos;\\r&apos; || ch == &apos;\\n&apos; || ch == &apos; &apos;) &#123;  </span><br><span class=\"line\">            return true;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断字符是不是数字</span><br><span class=\"line\">     *  </span><br><span class=\"line\">     * @param ch</span><br><span class=\"line\">     *            字符</span><br><span class=\"line\">     * @return 判断结果</span><br><span class=\"line\">     */  </span><br><span class=\"line\">    public static boolean isNumber(char ch) &#123;  </span><br><span class=\"line\">        if (ch &lt;= &apos;9&apos; &amp;&amp; ch &gt;= &apos;0&apos;) &#123;  </span><br><span class=\"line\">            return true;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"E-Ants-in-Leaves\"><a href=\"#E-Ants-in-Leaves\" class=\"headerlink\" title=\"E. Ants in Leaves\"></a>E. Ants in Leaves</h2><h3 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>You are given a tree with n vertices and a root in the vertex 1. There is an ant in each leaf of the tree. In one second some ants can simultaneously go to the parent vertex from the vertex they were in. No two ants can be in the same vertex simultaneously except for the root of the tree.<br></p>\n<p>Find the minimal time required for all ants to be in the root of the tree.<br></p>\n<p>题意：n只蚂蚁从树的叶节点向根节点爬，每秒只能爬到它的父节点处，但是除了根节点，其它所有节点都只能同时存在一只蚂蚁。<br></p>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>This problem was suggested by Aleksa Plavsic allllekssssa.</p>\n<p>Let z be the array of the depths of all leaves in the subtree of the vertex v. Let’s sort z.</p>\n<p>Statement 1: it’s profitable to lift the leaves in order of their appearing in z.</p>\n<p>Statement 2: denote ax — the time of appearing the x-th leaf in the vertex v, let’s consider the leaves $$$z_i$$$ and $$$z_{i+1}$$$ then  $$$a_{z_i+1} \\geq  a_{z_i}+1$$$.</p>\n<p>Statement 3: $$$a_{z_i+1}=max(d_{z_i}+1,a_{z_i}+1)$$$, where $$$d_x$$$ is the depth of the x-th leaf in the subtree of the vertex v. The last statement gives us the solution for the problem: we should simply iterate over z from left to right and recalculate the array a by formula from the third statement. All statements can be easily proved and it’s recommended to do by yourself to understand better the idea of the solution.</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><h5 id=\"建图\"><a href=\"#建图\" class=\"headerlink\" title=\"建图\"></a>建图</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> V=getInt();</span><br><span class=\"line\">    Graph G=<span class=\"keyword\">new</span> Graph(V,V-<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;V-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        G.addEdge(getInt(),getInt());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    G.dfs();</span><br><span class=\"line\">    G.solve();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"dfs-详细代码\"><a href=\"#dfs-详细代码\" class=\"headerlink\" title=\"dfs()详细代码\"></a>dfs()详细代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public void dfs(int v)&#123;</span><br><span class=\"line\">//从根节点出发</span><br><span class=\"line\">    if(v==1)&#123;</span><br><span class=\"line\">        int rootSonsNum=adj[v].getConnectedvertexs().size();</span><br><span class=\"line\">        depthArray=new ArrayList[rootSonsNum];</span><br><span class=\"line\">        for(int i=0;i&lt;rootSonsNum;i++)&#123;</span><br><span class=\"line\">            depthArray[i]=new ArrayList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    marked[v]=true;</span><br><span class=\"line\">    adj[v].setDepth(depth);</span><br><span class=\"line\">    if(adj[v].getDegree()==1)</span><br><span class=\"line\">        depthArray[count].add(adj[v].getDepth());</span><br><span class=\"line\">    depth++;</span><br><span class=\"line\">    for(Integer i:adj[v].getConnectedvertexs())&#123;</span><br><span class=\"line\">        if(!marked[i])&#123;</span><br><span class=\"line\">            dfs(i);</span><br><span class=\"line\">            depth--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(v==1)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void dfs()&#123;</span><br><span class=\"line\">    dfs(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"solve-代码\"><a href=\"#solve-代码\" class=\"headerlink\" title=\"solve()代码\"></a>solve()代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public int solve()&#123;</span><br><span class=\"line\">    for(ArrayList&lt;Integer&gt; i:depthArray) &#123;</span><br><span class=\"line\">        Collections.sort(i);</span><br><span class=\"line\">//            i.sort(new Comparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\">//                @Override</span><br><span class=\"line\">//                public int compare(Integer o1, Integer o2) &#123;</span><br><span class=\"line\">//                    if (o1 &gt; o2)</span><br><span class=\"line\">//                        return 1;</span><br><span class=\"line\">//                    else if (o1 == o2)</span><br><span class=\"line\">//                        return 0;</span><br><span class=\"line\">//                    else</span><br><span class=\"line\">//                        return -1;</span><br><span class=\"line\">//                &#125;</span><br><span class=\"line\">//            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">注释掉的代码在有些时候会出现</span><br><span class=\"line\">java.lang.IllegalArgumentException: Comparison method violates its general contract!。可见16057179提交的错误提示</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">    int res=0;</span><br><span class=\"line\">    for(ArrayList&lt;Integer&gt; i:depthArray)&#123;</span><br><span class=\"line\">        //System.out.println(i);</span><br><span class=\"line\">        int tmpres=i.get(0);</span><br><span class=\"line\">        int tmpIndex=1;</span><br><span class=\"line\">        while(tmpIndex&lt;i.size())&#123;</span><br><span class=\"line\">            tmpres=max(tmpres+1,i.get(tmpIndex));</span><br><span class=\"line\">            tmpIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res=max(tmpres,res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(res);</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://codeforces.com/contest/622/\" target=\"_blank\" rel=\"noopener\">题目网址</a></p>\n<h2 id=\"A-Infinite-Sequence\"><a href=\"#A-Infinite-Sequence\" class=\"headerlink\" title=\"A:Infinite Sequence\"></a>A:Infinite Sequence</h2><p>A题比较简单,主要就利用公式$ \\sum_{k=1}^n k=\\frac {(1+n)* n}{2} $来确定距离所要求的数字最近的一个1所在的位置。然后就可得到该数值了。<br><br>代码如下：</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Round7_A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Scanner in=<span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">long</span>  a=in.nextLong();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> a_one=count(a);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a_one*a_one+a_one==<span class=\"number\">2</span>*a)&#123;</span><br><span class=\"line\">            System.out.println(a_one);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> tmp=(<span class=\"keyword\">long</span>)a-(a_one*a_one+a_one)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            System.out.println(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">long</span>  num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> num_two = <span class=\"number\">2</span> * num;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> i = (<span class=\"keyword\">long</span>) Math.sqrt(num_two) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(i);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt;= num; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(i);</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i * i + i == num_two) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i * i + i &gt; num_two) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"B-The-Time\"><a href=\"#B-The-Time\" class=\"headerlink\" title=\"B. The Time\"></a>B. The Time</h2><p>B题也比较简单，主要就注意几个边界条件即可以及格式化输出即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//num只有个位时，会自动在十位补0</span></span><br><span class=\"line\">DecimalFormat df=<span class=\"keyword\">new</span> DecimalFormat(<span class=\"string\">\"00\"</span>);</span><br><span class=\"line\">df.format(num);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-Not-Equal-on-a-Segment\"><a href=\"#C-Not-Equal-on-a-Segment\" class=\"headerlink\" title=\"C. Not Equal on a Segment\"></a>C. Not Equal on a Segment</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>题意为查询一个数组的某一区间是否存在指定的$$$x$$$不相同的数，若不存在输出-1，否则输出任意一个不相同的树的秩。<br></p>\n<h3 id=\"解法介绍\"><a href=\"#解法介绍\" class=\"headerlink\" title=\"解法介绍\"></a>解法介绍</h3><p>1.暴力解法就是遍历整个区间，但时间肯定不够。<br></p>\n<p>2.线段树法：线段树广泛用于区间查询，但是该题仅需输出任意一个不相同的树的位置即可，所以可以不用该法。(其实我还没有特别熟线段树)</p>\n<p>3.解法：设输入数据的数组为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个数组```diff[]=new int[arrayLength]```使其任意秩```diff[i]```值为满足$$$ a_j \\ne a_i (j&gt;i) $$$的第一个j的值。这也是官方答案所给的解法。代码如下：&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">### 边界条件</span><br><span class=\"line\">该代码需要考虑到的边界条件有：&lt;br&gt;</span><br></pre></td></tr></table></figure></p>\n<p>1.数组内容全部相同<br>2.数组内容出现连续相同的项<br>3.数组内容全部不相同<br>4.diff数组的最后一项是否有值(统一将diff数组的最后一项设为数组长度)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">int tmpI=0;</span><br><span class=\"line\">for(int j=tmpI+1;j&lt;arrayLength;)&#123;</span><br><span class=\"line\">    if(array[j]==array[tmpI]) &#123;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(;tmpI&lt;j;tmpI++)&#123;</span><br><span class=\"line\">        diff[tmpI]=j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//若数组中最后出现连续相同的项，上述代码不能将这些项赋值为arrayLength</span><br><span class=\"line\">//所以需要下面的代码</span><br><span class=\"line\">for(int i=tmpI;i&lt;arrayLength;i++)&#123;</span><br><span class=\"line\">    diff[i]=arrayLength;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">diff[arrayLength-1]=arrayLength;</span><br></pre></td></tr></table></figure>\n\n<p>查询时使用的代码:<br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;queryTimes;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left=getInt()-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right=getInt()-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=getInt();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[left]!=x)&#123;</span><br><span class=\"line\">            writer.write((left+<span class=\"number\">1</span>)+<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(diff[left]&gt;right)&#123;</span><br><span class=\"line\">            writer.write((-<span class=\"number\">1</span>)+<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            writer.write((diff[left]+<span class=\"number\">1</span>)+<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    writer.flush();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IO问题\"><a href=\"#IO问题\" class=\"headerlink\" title=\"IO问题\"></a>IO问题</h3><p>这一题以及下面的e题还有一个问题就是如果使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">我使用了[ java_acm快速输入和输出 ][1]中提供的一个输入输出方法，代码如下</span><br><span class=\"line\">#### 解决代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public class Main &#123;  </span><br><span class=\"line\">    private static Reader reader = null;  </span><br><span class=\"line\">    private static Writer writer = null;  </span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;  </span><br><span class=\"line\">        reader = new InputStreamReader(System.in);  </span><br><span class=\"line\">        writer = new OutputStreamWriter(System.out);  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">                m = getInt();  </span><br><span class=\"line\">                writer.write(&quot;something&quot;);  </span><br><span class=\"line\">                writer.flush();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125; catch (Exception e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取键盘输入的整数</span><br><span class=\"line\">     *  </span><br><span class=\"line\">     * @return 输入的整数</span><br><span class=\"line\">     */  </span><br><span class=\"line\">    public static int getInt() &#123;  </span><br><span class=\"line\">        int read;  </span><br><span class=\"line\">        int res = 0;  </span><br><span class=\"line\">        boolean isNegative = false;// 是不是负数  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            while ((read = reader.read()) != -1) &#123;  </span><br><span class=\"line\">                if ((char) read == &apos;-&apos;) &#123;  </span><br><span class=\"line\">                    res = 0;  </span><br><span class=\"line\">                    isNegative = true;  </span><br><span class=\"line\">                    break;  </span><br><span class=\"line\">                &#125; else if (isNumber((char) read)) &#123;  </span><br><span class=\"line\">                    res = read - &apos;0&apos;;  </span><br><span class=\"line\">                    break;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            while ((read = reader.read()) != -1) &#123;  </span><br><span class=\"line\">                char ch = (char) read;  </span><br><span class=\"line\">                if (isNumber(ch)) &#123;  </span><br><span class=\"line\">                    res = res * 10 + (read - &apos;0&apos;);  </span><br><span class=\"line\">                &#125; else &#123;  </span><br><span class=\"line\">                    break;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125; catch (IOException e) &#123;  </span><br><span class=\"line\">            // TODO Auto-generated catch block  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        if (isNegative == true) &#123;  </span><br><span class=\"line\">            res = -1 * res;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return res;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断字符是否空白</span><br><span class=\"line\">     *  </span><br><span class=\"line\">     * @param ch</span><br><span class=\"line\">     *            字符</span><br><span class=\"line\">     * @return 判断结果</span><br><span class=\"line\">     */  </span><br><span class=\"line\">    public static boolean isBlank(char ch) &#123;  </span><br><span class=\"line\">        if (ch == &apos;\\r&apos; || ch == &apos;\\n&apos; || ch == &apos; &apos;) &#123;  </span><br><span class=\"line\">            return true;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断字符是不是数字</span><br><span class=\"line\">     *  </span><br><span class=\"line\">     * @param ch</span><br><span class=\"line\">     *            字符</span><br><span class=\"line\">     * @return 判断结果</span><br><span class=\"line\">     */  </span><br><span class=\"line\">    public static boolean isNumber(char ch) &#123;  </span><br><span class=\"line\">        if (ch &lt;= &apos;9&apos; &amp;&amp; ch &gt;= &apos;0&apos;) &#123;  </span><br><span class=\"line\">            return true;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"E-Ants-in-Leaves\"><a href=\"#E-Ants-in-Leaves\" class=\"headerlink\" title=\"E. Ants in Leaves\"></a>E. Ants in Leaves</h2><h3 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>You are given a tree with n vertices and a root in the vertex 1. There is an ant in each leaf of the tree. In one second some ants can simultaneously go to the parent vertex from the vertex they were in. No two ants can be in the same vertex simultaneously except for the root of the tree.<br></p>\n<p>Find the minimal time required for all ants to be in the root of the tree.<br></p>\n<p>题意：n只蚂蚁从树的叶节点向根节点爬，每秒只能爬到它的父节点处，但是除了根节点，其它所有节点都只能同时存在一只蚂蚁。<br></p>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><p>This problem was suggested by Aleksa Plavsic allllekssssa.</p>\n<p>Let z be the array of the depths of all leaves in the subtree of the vertex v. Let’s sort z.</p>\n<p>Statement 1: it’s profitable to lift the leaves in order of their appearing in z.</p>\n<p>Statement 2: denote ax — the time of appearing the x-th leaf in the vertex v, let’s consider the leaves $$$z_i$$$ and $$$z_{i+1}$$$ then  $$$a_{z_i+1} \\geq  a_{z_i}+1$$$.</p>\n<p>Statement 3: $$$a_{z_i+1}=max(d_{z_i}+1,a_{z_i}+1)$$$, where $$$d_x$$$ is the depth of the x-th leaf in the subtree of the vertex v. The last statement gives us the solution for the problem: we should simply iterate over z from left to right and recalculate the array a by formula from the third statement. All statements can be easily proved and it’s recommended to do by yourself to understand better the idea of the solution.</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><h5 id=\"建图\"><a href=\"#建图\" class=\"headerlink\" title=\"建图\"></a>建图</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> V=getInt();</span><br><span class=\"line\">    Graph G=<span class=\"keyword\">new</span> Graph(V,V-<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;V-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        G.addEdge(getInt(),getInt());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    G.dfs();</span><br><span class=\"line\">    G.solve();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"dfs-详细代码\"><a href=\"#dfs-详细代码\" class=\"headerlink\" title=\"dfs()详细代码\"></a>dfs()详细代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public void dfs(int v)&#123;</span><br><span class=\"line\">//从根节点出发</span><br><span class=\"line\">    if(v==1)&#123;</span><br><span class=\"line\">        int rootSonsNum=adj[v].getConnectedvertexs().size();</span><br><span class=\"line\">        depthArray=new ArrayList[rootSonsNum];</span><br><span class=\"line\">        for(int i=0;i&lt;rootSonsNum;i++)&#123;</span><br><span class=\"line\">            depthArray[i]=new ArrayList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    marked[v]=true;</span><br><span class=\"line\">    adj[v].setDepth(depth);</span><br><span class=\"line\">    if(adj[v].getDegree()==1)</span><br><span class=\"line\">        depthArray[count].add(adj[v].getDepth());</span><br><span class=\"line\">    depth++;</span><br><span class=\"line\">    for(Integer i:adj[v].getConnectedvertexs())&#123;</span><br><span class=\"line\">        if(!marked[i])&#123;</span><br><span class=\"line\">            dfs(i);</span><br><span class=\"line\">            depth--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(v==1)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void dfs()&#123;</span><br><span class=\"line\">    dfs(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"solve-代码\"><a href=\"#solve-代码\" class=\"headerlink\" title=\"solve()代码\"></a>solve()代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public int solve()&#123;</span><br><span class=\"line\">    for(ArrayList&lt;Integer&gt; i:depthArray) &#123;</span><br><span class=\"line\">        Collections.sort(i);</span><br><span class=\"line\">//            i.sort(new Comparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\">//                @Override</span><br><span class=\"line\">//                public int compare(Integer o1, Integer o2) &#123;</span><br><span class=\"line\">//                    if (o1 &gt; o2)</span><br><span class=\"line\">//                        return 1;</span><br><span class=\"line\">//                    else if (o1 == o2)</span><br><span class=\"line\">//                        return 0;</span><br><span class=\"line\">//                    else</span><br><span class=\"line\">//                        return -1;</span><br><span class=\"line\">//                &#125;</span><br><span class=\"line\">//            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">注释掉的代码在有些时候会出现</span><br><span class=\"line\">java.lang.IllegalArgumentException: Comparison method violates its general contract!。可见16057179提交的错误提示</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">    int res=0;</span><br><span class=\"line\">    for(ArrayList&lt;Integer&gt; i:depthArray)&#123;</span><br><span class=\"line\">        //System.out.println(i);</span><br><span class=\"line\">        int tmpres=i.get(0);</span><br><span class=\"line\">        int tmpIndex=1;</span><br><span class=\"line\">        while(tmpIndex&lt;i.size())&#123;</span><br><span class=\"line\">            tmpres=max(tmpres+1,i.get(tmpIndex));</span><br><span class=\"line\">            tmpIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res=max(tmpres,res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(res);</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck0mglf6y000328t1kxa2jd75","category_id":"ck0mglf7t000w28t1lh98419k","_id":"ck0mglf8o002n28t1tw1st25b"},{"post_id":"ck0mglf70000528t1e6g3xtel","category_id":"ck0mglf7t000w28t1lh98419k","_id":"ck0mglf8p002q28t1vlugfbab"},{"post_id":"ck0mglf72000828t11na66dn9","category_id":"ck0mglf7t000w28t1lh98419k","_id":"ck0mglf8r002t28t1jhgh6osh"},{"post_id":"ck0mglf73000928t1d61oa72l","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglf8s002x28t137n90h2v"},{"post_id":"ck0mglf74000a28t1fuioqdbd","category_id":"ck0mglf7x001528t1tkd280u2","_id":"ck0mglf8t003028t1zrnem96m"},{"post_id":"ck0mglf75000b28t175yd11dc","category_id":"ck0mglf7y001728t13ll863ah","_id":"ck0mglf8u003428t10u1zk2qw"},{"post_id":"ck0mglf76000c28t1lxv3wxqv","category_id":"ck0mglf7y001728t13ll863ah","_id":"ck0mglf8v003728t17au3iawn"},{"post_id":"ck0mglf77000d28t1vav9vjo2","category_id":"ck0mglf7y001728t13ll863ah","_id":"ck0mglf8w003a28t19pr7i1jv"},{"post_id":"ck0mglf78000e28t11mje1kj7","category_id":"ck0mglf7y001728t13ll863ah","_id":"ck0mglf8x003d28t1ikx1tiy4"},{"post_id":"ck0mglf79000f28t1pv2bohnf","category_id":"ck0mglf7y001728t13ll863ah","_id":"ck0mglf8y003g28t1hx5v7ws6"},{"post_id":"ck0mglf7a000g28t1r5uhvxaj","category_id":"ck0mglf7y001728t13ll863ah","_id":"ck0mglf8z003j28t12sik588q"},{"post_id":"ck0mglf7b000h28t1qyeu6482","category_id":"ck0mglf7y001728t13ll863ah","_id":"ck0mglf90003m28t1vv87zbdw"},{"post_id":"ck0mglf7b000i28t1in90r072","category_id":"ck0mglf83001l28t187fts9q2","_id":"ck0mglf91003p28t1vpfoot45"},{"post_id":"ck0mglf7c000j28t1243vkwdc","category_id":"ck0mglf7y001728t13ll863ah","_id":"ck0mglf92003s28t1dlcdiuhv"},{"post_id":"ck0mglf7d000k28t1jzqrux8z","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglf94003v28t1ih3vamwj"},{"post_id":"ck0mglf7d000l28t10rvs8wsl","category_id":"ck0mglf85001r28t10wlzc826","_id":"ck0mglf95003y28t1tgpw9kv2"},{"post_id":"ck0mglf7e000m28t1tyi5qz57","category_id":"ck0mglf85001t28t1kd3xu0wz","_id":"ck0mglf96004128t1kt9erx5k"},{"post_id":"ck0mglf7f000n28t19azz9yhg","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglf97004428t1vnmjzaqn"},{"post_id":"ck0mglf7f000o28t1idjgygjc","category_id":"ck0mglf85001t28t1kd3xu0wz","_id":"ck0mglf98004728t1j5eozx1l"},{"post_id":"ck0mglf7g000p28t1utp78yf5","category_id":"ck0mglf85001t28t1kd3xu0wz","_id":"ck0mglf98004a28t1w2hcxdzm"},{"post_id":"ck0mglf7g000q28t1famwc1vj","category_id":"ck0mglf85001t28t1kd3xu0wz","_id":"ck0mglf99004d28t1gn14r96c"},{"post_id":"ck0mglf7h000r28t1fr23nccw","category_id":"ck0mglf85001t28t1kd3xu0wz","_id":"ck0mglf9a004g28t1vyxa234o"},{"post_id":"ck0mglf7i000s28t1gq55veax","category_id":"ck0mglf85001t28t1kd3xu0wz","_id":"ck0mglf9b004j28t1kvxkvsnp"},{"post_id":"ck0mglf7i000t28t14u6552ck","category_id":"ck0mglf85001t28t1kd3xu0wz","_id":"ck0mglf9e004m28t1xox7a5vv"},{"post_id":"ck0mglf7j000u28t1lll2ud10","category_id":"ck0mglf85001t28t1kd3xu0wz","_id":"ck0mglf9f004p28t13zom399b"},{"post_id":"ck0mglf7s000v28t1dn7dtanb","category_id":"ck0mglf85001t28t1kd3xu0wz","_id":"ck0mglf9g004s28t17weydlvt"},{"post_id":"ck0mglf7t000y28t1dhqkjfat","category_id":"ck0mglf85001t28t1kd3xu0wz","_id":"ck0mglf9h004v28t1cwcdsvoi"},{"post_id":"ck0mglf8n002k28t16e91pcag","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglf9y005828t1xc510j1z"},{"post_id":"ck0mglf8q002r28t1nepw9n2y","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglf9y005a28t1ga4zxley"},{"post_id":"ck0mglf8r002v28t1sv7unsmh","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglf9z005c28t1fu6ct5hb"},{"post_id":"ck0mglf8s002y28t1t53ggfpu","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglf9z005g28t1qoj6s053"},{"post_id":"ck0mglf8t003228t1weai8dwp","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfa0005i28t1w1jc89sa"},{"post_id":"ck0mglf8u003528t11qv68jsv","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfa1005m28t12x9dxtg1"},{"post_id":"ck0mglf8v003828t1oglpu61k","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfa1005o28t1aup7r2pq"},{"post_id":"ck0mglf8w003b28t1c35oobvs","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfa2005s28t1owhuelho"},{"post_id":"ck0mglf8x003e28t1i9g043d0","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfa2005u28t1l74akkhj"},{"post_id":"ck0mglf8y003h28t1oixjv50u","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfa3005y28t1rale4nl8"},{"post_id":"ck0mglf8z003k28t1ccx0ypu0","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfa3006028t1njxe52xf"},{"post_id":"ck0mglf90003n28t1segmvtkk","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfa4006228t1rrq0d3u5"},{"post_id":"ck0mglf93003t28t122hwn2k3","category_id":"ck0mglf7y001728t13ll863ah","_id":"ck0mglfa4006428t11twhn16f"},{"post_id":"ck0mglf94003w28t154fw8y67","category_id":"ck0mglf83001l28t187fts9q2","_id":"ck0mglfa5006528t1ny3u0dsi"},{"post_id":"ck0mglf95003z28t1eas350xv","category_id":"ck0mglf83001l28t187fts9q2","_id":"ck0mglfa5006728t1vlt2xxyy"},{"post_id":"ck0mglf96004228t1a8k6gi5f","category_id":"ck0mglf83001l28t187fts9q2","_id":"ck0mglfa5006828t1iq7524dl"},{"post_id":"ck0mglf97004528t1kcioyfzf","category_id":"ck0mglf83001l28t187fts9q2","_id":"ck0mglfa5006a28t1465sr6zw"},{"post_id":"ck0mglf9b004h28t1tys1wyd1","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfa6006b28t1um45vztl"},{"post_id":"ck0mglf9b004k28t1k3vmqvj1","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfa6006d28t1djxseyi2"},{"post_id":"ck0mglf9e004n28t16hqvn6j9","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfa6006e28t1tk9op1v9"},{"post_id":"ck0mglf9g004t28t1ks7tixjf","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfa6006g28t1tremgmem"},{"post_id":"ck0mglf8p002o28t1hk1q95bq","category_id":"ck0mglf9w005728t1e8048ycq","_id":"ck0mglfb0007428t1su6m82nw"},{"post_id":"ck0mglf98004828t11xqbm0nw","category_id":"ck0mglf9z005e28t1q5o7jvwp","_id":"ck0mglfb1007728t1dgogg52u"},{"post_id":"ck0mglf99004b28t13aoukhje","category_id":"ck0mglf9z005e28t1q5o7jvwp","_id":"ck0mglfb2007a28t155fh4szf"},{"post_id":"ck0mglf9a004e28t1qwx62t97","category_id":"ck0mglf9z005e28t1q5o7jvwp","_id":"ck0mglfb3007d28t14tcpqmwp"},{"post_id":"ck0mglf9f004q28t1cqyjhx1p","category_id":"ck0mglf9z005e28t1q5o7jvwp","_id":"ck0mglfb5007g28t19p671y8x"},{"post_id":"ck0mglf9h004w28t1yf279ibv","category_id":"ck0mglf9z005e28t1q5o7jvwp","_id":"ck0mglfb5007j28t1lgwpdk2q"},{"post_id":"ck0mglfaz007228t1b4wbl07x","category_id":"ck0mglf9w005728t1e8048ycq","_id":"ck0mglfc2009h28t13vx2sgen"},{"post_id":"ck0mglfb1007528t1n5yt6oc5","category_id":"ck0mglf9w005728t1e8048ycq","_id":"ck0mglfc3009k28t1rswhvldf"},{"post_id":"ck0mglfb1007828t1o2v2ljtj","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfc5009n28t1ln2ua2k1"},{"post_id":"ck0mglfb2007b28t1zcfmuqux","category_id":"ck0mglf9w005728t1e8048ycq","_id":"ck0mglfc6009r28t13wpw05bw"},{"post_id":"ck0mglfb3007e28t1ca5sw8k2","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfc6009u28t1nt2brymu"},{"post_id":"ck0mglfb5007h28t1vob23i7m","category_id":"ck0mglf9w005728t1e8048ycq","_id":"ck0mglfc7009x28t196hu3oph"},{"post_id":"ck0mglfb6007k28t1ook1zquk","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfc7009z28t1lbi6659w"},{"post_id":"ck0mglfb6007m28t1ww3t2kaw","category_id":"ck0mglf9w005728t1e8048ycq","_id":"ck0mglfc800a228t1yl7hsqbo"},{"post_id":"ck0mglfb8007o28t1n0d9o405","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfc800a428t1mhqv1cb8"},{"post_id":"ck0mglfb9007q28t1u1lkk52g","category_id":"ck0mglf9w005728t1e8048ycq","_id":"ck0mglfc800a728t175mjud7d"},{"post_id":"ck0mglfba007s28t1gwiv98iq","category_id":"ck0mglf9w005728t1e8048ycq","_id":"ck0mglfc900a928t1m2vkekoq"},{"post_id":"ck0mglfbb007u28t1grreaue0","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfc900ab28t1bps1orm8"},{"post_id":"ck0mglfbc007w28t11612o4pa","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfc900ae28t1vvwm6za2"},{"post_id":"ck0mglfbc007y28t1kc3bldp9","category_id":"ck0mglf9w005728t1e8048ycq","_id":"ck0mglfca00ag28t1z2g2dlml"},{"post_id":"ck0mglfbd008028t16mw2w2om","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfca00aj28t1cnksw610"},{"post_id":"ck0mglfbe008228t1eua8q76c","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfca00al28t135jxugpo"},{"post_id":"ck0mglfbf008428t1odg1o964","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfcb00ao28t16roxezk6"},{"post_id":"ck0mglfbf008628t10hr9rsvm","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfcb00ap28t1ctt5ju38"},{"post_id":"ck0mglfbg008828t17bi2508b","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfcc00ar28t1h1kzf8o3"},{"post_id":"ck0mglfbh008a28t1tmevvwkg","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfcc00as28t1r3bq6k41"},{"post_id":"ck0mglfbi008c28t11hjfnmn8","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfcc00au28t10m6d9f6q"},{"post_id":"ck0mglfbj008e28t1xc13wc2p","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfcc00av28t1rqf8njrg"},{"post_id":"ck0mglfbk008g28t1ynu9400n","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfcc00aw28t1nhi847zs"},{"post_id":"ck0mglfbl008i28t1ur5todb2","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfcd00ay28t1n3rx1s14"},{"post_id":"ck0mglfbm008k28t1a7kqiatq","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfcd00az28t1bwo3riah"},{"post_id":"ck0mglfbn008m28t1dzn3jqud","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfcd00b128t1ohjxawl4"},{"post_id":"ck0mglfbo008o28t1ha3asg7c","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfce00b228t1ouu23ax0"},{"post_id":"ck0mglfbo008q28t1s7r2j4ds","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfce00b428t10vjxvg9h"},{"post_id":"ck0mglfbp008s28t1gvm2pvlx","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfce00b528t12frcirkp"},{"post_id":"ck0mglfc1009e28t1nt14a58g","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfcm00bj28t10prpf9ob"},{"post_id":"ck0mglfc3009i28t1ttvyfl5r","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfcn00bm28t18pvy9cf7"},{"post_id":"ck0mglfc4009l28t137ukrgfx","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfco00bp28t16wzc77s5"},{"post_id":"ck0mglfc5009p28t1uhg014wr","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfcp00bt28t15rh4opmh"},{"post_id":"ck0mglfc6009s28t19fmon5h0","category_id":"ck0mglf85001p28t1wkofrc06","_id":"ck0mglfcq00bw28t1znq7hzzs"},{"post_id":"ck0mglfcl00bg28t139slaej3","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfd100da28t1p1sqwyi1"},{"post_id":"ck0mglfcm00bk28t10u89vjpx","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfd200dc28t1oqwpzq9u"},{"post_id":"ck0mglfcn00bn28t1z937hco6","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfd200de28t13qpzf1d8"},{"post_id":"ck0mglfco00br28t1vemdzbxz","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfd300dh28t1td8qqekq"},{"post_id":"ck0mglfcp00bu28t1v19pc49n","category_id":"ck0mglf7x001328t1lwlquurg","_id":"ck0mglfd300dj28t1vjdkucpb"},{"post_id":"ck0mglfd000d728t17ywowwwn","category_id":"ck0mglf9w005728t1e8048ycq","_id":"ck0mglfd600dv28t1xumzqsq1"}],"PostTag":[{"post_id":"ck0mglf1i000028t15ghcrs5z","tag_id":"ck0mglf3z000128t1o4z97rvd","_id":"ck0mglf70000428t189bpct32"},{"post_id":"ck0mglf1i000028t15ghcrs5z","tag_id":"ck0mglf41000228t17f3x47b9","_id":"ck0mglf71000628t1i4o6lzs9"},{"post_id":"ck0mglf6y000328t1kxa2jd75","tag_id":"ck0mglf7t000x28t15v9gji4d","_id":"ck0mglf8o002l28t17fgu7qry"},{"post_id":"ck0mglf70000528t1e6g3xtel","tag_id":"ck0mglf7t000x28t15v9gji4d","_id":"ck0mglf8p002p28t1a5sjvsjp"},{"post_id":"ck0mglf72000828t11na66dn9","tag_id":"ck0mglf7w001228t1thaifxsc","_id":"ck0mglf8q002s28t1joef6kkn"},{"post_id":"ck0mglf73000928t1d61oa72l","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglf8s002w28t1bkrobb1a"},{"post_id":"ck0mglf73000928t1d61oa72l","tag_id":"ck0mglf7x001628t1ac0r1o59","_id":"ck0mglf8t002z28t19ttt0mdy"},{"post_id":"ck0mglf74000a28t1fuioqdbd","tag_id":"ck0mglf7y001828t19m7a8kb6","_id":"ck0mglf8u003328t198cvf31m"},{"post_id":"ck0mglf75000b28t175yd11dc","tag_id":"ck0mglf7y001a28t1ys3pswj9","_id":"ck0mglf8v003628t1leqytrct"},{"post_id":"ck0mglf76000c28t1lxv3wxqv","tag_id":"ck0mglf7y001a28t1ys3pswj9","_id":"ck0mglf8w003928t1augor8t9"},{"post_id":"ck0mglf77000d28t1vav9vjo2","tag_id":"ck0mglf7y001a28t1ys3pswj9","_id":"ck0mglf8x003c28t1khn9fiuf"},{"post_id":"ck0mglf78000e28t11mje1kj7","tag_id":"ck0mglf7y001a28t1ys3pswj9","_id":"ck0mglf8y003f28t1x1zqvi67"},{"post_id":"ck0mglf79000f28t1pv2bohnf","tag_id":"ck0mglf7y001a28t1ys3pswj9","_id":"ck0mglf8z003i28t1hfi89e4z"},{"post_id":"ck0mglf7a000g28t1r5uhvxaj","tag_id":"ck0mglf7y001a28t1ys3pswj9","_id":"ck0mglf90003l28t1fldvcgcu"},{"post_id":"ck0mglf7b000h28t1qyeu6482","tag_id":"ck0mglf7y001a28t1ys3pswj9","_id":"ck0mglf91003o28t1q2egfrgk"},{"post_id":"ck0mglf7b000i28t1in90r072","tag_id":"ck0mglf84001o28t1rk4ageif","_id":"ck0mglf92003r28t1tpii1stm"},{"post_id":"ck0mglf7c000j28t1243vkwdc","tag_id":"ck0mglf85001q28t1edifpdi5","_id":"ck0mglf94003u28t1euozkllo"},{"post_id":"ck0mglf7d000k28t1jzqrux8z","tag_id":"ck0mglf85001s28t1a4cuo4e9","_id":"ck0mglf95003x28t1b3z3sbou"},{"post_id":"ck0mglf7d000k28t1jzqrux8z","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglf95004028t11dac6oe3"},{"post_id":"ck0mglf7d000l28t10rvs8wsl","tag_id":"ck0mglf86001w28t1cwtv7qqx","_id":"ck0mglf96004328t1fanrzjmx"},{"post_id":"ck0mglf7d000l28t10rvs8wsl","tag_id":"ck0mglf87001y28t1k78pz8os","_id":"ck0mglf97004628t19imtvnkh"},{"post_id":"ck0mglf7e000m28t1tyi5qz57","tag_id":"ck0mglf88002028t12iwtjgka","_id":"ck0mglf98004928t10myvw5nn"},{"post_id":"ck0mglf7e000m28t1tyi5qz57","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglf99004c28t1y4eivina"},{"post_id":"ck0mglf7e000m28t1tyi5qz57","tag_id":"ck0mglf89002428t14nrsa574","_id":"ck0mglf9a004f28t1h09rae5k"},{"post_id":"ck0mglf7e000m28t1tyi5qz57","tag_id":"ck0mglf8a002628t106g03ubh","_id":"ck0mglf9b004i28t166iojxk5"},{"post_id":"ck0mglf7f000n28t19azz9yhg","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglf9c004l28t1p6nespyx"},{"post_id":"ck0mglf7f000n28t19azz9yhg","tag_id":"ck0mglf8b002a28t1q7da8ui1","_id":"ck0mglf9f004o28t1j5ojnrr0"},{"post_id":"ck0mglf7f000o28t1idjgygjc","tag_id":"ck0mglf88002028t12iwtjgka","_id":"ck0mglf9g004r28t1792pynpn"},{"post_id":"ck0mglf7g000p28t1utp78yf5","tag_id":"ck0mglf88002028t12iwtjgka","_id":"ck0mglf9h004u28t1iqyyd11g"},{"post_id":"ck0mglf7g000p28t1utp78yf5","tag_id":"ck0mglf8c002d28t1la5v2p2y","_id":"ck0mglf9i004x28t1gp7ay5tf"},{"post_id":"ck0mglf7g000q28t1famwc1vj","tag_id":"ck0mglf88002028t12iwtjgka","_id":"ck0mglf9i004y28t17pjw8nsn"},{"post_id":"ck0mglf7h000r28t1fr23nccw","tag_id":"ck0mglf88002028t12iwtjgka","_id":"ck0mglf9i004z28t1yo8zjqmt"},{"post_id":"ck0mglf7i000s28t1gq55veax","tag_id":"ck0mglf88002028t12iwtjgka","_id":"ck0mglf9i005028t1c7aipqoj"},{"post_id":"ck0mglf7i000s28t1gq55veax","tag_id":"ck0mglf8d002h28t16babgpm3","_id":"ck0mglf9i005128t1z2jebtif"},{"post_id":"ck0mglf7i000t28t14u6552ck","tag_id":"ck0mglf8e002i28t11ap97gog","_id":"ck0mglf9j005228t1ddjr3j0e"},{"post_id":"ck0mglf7j000u28t1lll2ud10","tag_id":"ck0mglf7t000x28t15v9gji4d","_id":"ck0mglf9j005328t1fru87b5i"},{"post_id":"ck0mglf7s000v28t1dn7dtanb","tag_id":"ck0mglf8o002m28t1z7g8d6js","_id":"ck0mglf9v005528t162lbkmi4"},{"post_id":"ck0mglf7s000v28t1dn7dtanb","tag_id":"ck0mglf8r002u28t1iycojeqy","_id":"ck0mglf9y005928t1k3ysd4q2"},{"post_id":"ck0mglf7t000y28t1dhqkjfat","tag_id":"ck0mglf8t003128t1m8c52h22","_id":"ck0mglf9z005b28t154xyz7cl"},{"post_id":"ck0mglf91003q28t1kdy8l7zb","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglf9z005f28t1ow8ve4r1"},{"post_id":"ck0mglf91003q28t1kdy8l7zb","tag_id":"ck0mglf7x001628t1ac0r1o59","_id":"ck0mglfa0005h28t18x7l2oss"},{"post_id":"ck0mglf94003w28t154fw8y67","tag_id":"ck0mglf84001o28t1rk4ageif","_id":"ck0mglfa0005l28t14unwjbym"},{"post_id":"ck0mglf95003z28t1eas350xv","tag_id":"ck0mglf84001o28t1rk4ageif","_id":"ck0mglfa1005n28t1goea774p"},{"post_id":"ck0mglf96004228t1a8k6gi5f","tag_id":"ck0mglf84001o28t1rk4ageif","_id":"ck0mglfa1005r28t1kul51lx5"},{"post_id":"ck0mglf97004528t1kcioyfzf","tag_id":"ck0mglf84001o28t1rk4ageif","_id":"ck0mglfa2005t28t1lyv4j742"},{"post_id":"ck0mglf9g004t28t1ks7tixjf","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfa3005w28t1pi3yhvgx"},{"post_id":"ck0mglf9g004t28t1ks7tixjf","tag_id":"ck0mglf8b002a28t1q7da8ui1","_id":"ck0mglfa3005z28t1wlnf6ypx"},{"post_id":"ck0mglf8n002k28t16e91pcag","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfb0007328t1n0apwjm4"},{"post_id":"ck0mglf8n002k28t16e91pcag","tag_id":"ck0mglf9w005628t123817lks","_id":"ck0mglfb1007628t1u1u5xat5"},{"post_id":"ck0mglf8n002k28t16e91pcag","tag_id":"ck0mglf9z005d28t1jwdkojl8","_id":"ck0mglfb2007928t1f8ztxbz0"},{"post_id":"ck0mglf8p002o28t1hk1q95bq","tag_id":"ck0mglfa0005j28t1abwsr0hl","_id":"ck0mglfb3007c28t14ja2vp03"},{"post_id":"ck0mglf8p002o28t1hk1q95bq","tag_id":"ck0mglfa1005q28t1nwqk8fsh","_id":"ck0mglfb4007f28t1u2hecjk9"},{"post_id":"ck0mglf8q002r28t1nepw9n2y","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfb5007i28t1bs627b7a"},{"post_id":"ck0mglf8q002r28t1nepw9n2y","tag_id":"ck0mglfa3005x28t1573qiyh9","_id":"ck0mglfb6007l28t17stz7gj8"},{"post_id":"ck0mglf8r002v28t1sv7unsmh","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfb8007n28t1o6bg9rwv"},{"post_id":"ck0mglf8r002v28t1sv7unsmh","tag_id":"ck0mglf9w005628t123817lks","_id":"ck0mglfb9007p28t1f5au1eay"},{"post_id":"ck0mglf8r002v28t1sv7unsmh","tag_id":"ck0mglfa5006628t1m65u3bll","_id":"ck0mglfba007r28t1ks2bm1z6"},{"post_id":"ck0mglf8s002y28t1t53ggfpu","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfbb007t28t1rx2y3vhi"},{"post_id":"ck0mglf8s002y28t1t53ggfpu","tag_id":"ck0mglfa5006928t12d7e9nw2","_id":"ck0mglfbb007v28t14khk4wmm"},{"post_id":"ck0mglf8t003228t1weai8dwp","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfbc007x28t1w6rnw1hr"},{"post_id":"ck0mglf8t003228t1weai8dwp","tag_id":"ck0mglfa6006c28t1cds6b837","_id":"ck0mglfbd007z28t1bon3wycf"},{"post_id":"ck0mglf8u003528t11qv68jsv","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfbe008128t1lzn05v5s"},{"post_id":"ck0mglf8u003528t11qv68jsv","tag_id":"ck0mglfa6006f28t15yclreig","_id":"ck0mglfbe008328t1riaeofnj"},{"post_id":"ck0mglf8v003828t1oglpu61k","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfbf008528t13jo7i7vx"},{"post_id":"ck0mglf8v003828t1oglpu61k","tag_id":"ck0mglfa7006h28t10rt69jmz","_id":"ck0mglfbg008728t1n7fl6nte"},{"post_id":"ck0mglf8w003b28t1c35oobvs","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfbh008928t1dj4z2kz5"},{"post_id":"ck0mglf8w003b28t1c35oobvs","tag_id":"ck0mglfa7006i28t12mog2v84","_id":"ck0mglfbi008b28t1mqcqy0v4"},{"post_id":"ck0mglf8x003e28t1i9g043d0","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfbi008d28t1ku65s87t"},{"post_id":"ck0mglf8x003e28t1i9g043d0","tag_id":"ck0mglfa7006j28t16cxpim05","_id":"ck0mglfbk008f28t160jnd59c"},{"post_id":"ck0mglf8y003h28t1oixjv50u","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfbl008h28t179r0bsqa"},{"post_id":"ck0mglf8y003h28t1oixjv50u","tag_id":"ck0mglfa6006f28t15yclreig","_id":"ck0mglfbm008j28t1fqth20po"},{"post_id":"ck0mglf8z003k28t1ccx0ypu0","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfbn008l28t1vr86i77u"},{"post_id":"ck0mglf8z003k28t1ccx0ypu0","tag_id":"ck0mglfa7006j28t16cxpim05","_id":"ck0mglfbo008n28t1wkdqp1nh"},{"post_id":"ck0mglf90003n28t1segmvtkk","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfbo008p28t1vlwkw1rn"},{"post_id":"ck0mglf90003n28t1segmvtkk","tag_id":"ck0mglfa7006i28t12mog2v84","_id":"ck0mglfbp008r28t1qxa7povo"},{"post_id":"ck0mglf93003t28t122hwn2k3","tag_id":"ck0mglf84001o28t1rk4ageif","_id":"ck0mglfbq008t28t1l22uzcks"},{"post_id":"ck0mglf93003t28t122hwn2k3","tag_id":"ck0mglfa6006f28t15yclreig","_id":"ck0mglfbq008u28t1osv08xu2"},{"post_id":"ck0mglf98004828t11xqbm0nw","tag_id":"ck0mglfa9006o28t17920ho4k","_id":"ck0mglfbq008v28t1fvi8frkf"},{"post_id":"ck0mglf98004828t11xqbm0nw","tag_id":"ck0mglfa9006p28t126an4k87","_id":"ck0mglfbq008w28t1xfh5rbsr"},{"post_id":"ck0mglf99004b28t13aoukhje","tag_id":"ck0mglfa9006o28t17920ho4k","_id":"ck0mglfbq008x28t1a94bjpfb"},{"post_id":"ck0mglf99004b28t13aoukhje","tag_id":"ck0mglfa9006p28t126an4k87","_id":"ck0mglfbq008y28t1s9yae13g"},{"post_id":"ck0mglf9a004e28t1qwx62t97","tag_id":"ck0mglfa9006o28t17920ho4k","_id":"ck0mglfbq008z28t1uu71xwqx"},{"post_id":"ck0mglf9a004e28t1qwx62t97","tag_id":"ck0mglfa9006p28t126an4k87","_id":"ck0mglfbr009028t172b469hx"},{"post_id":"ck0mglf9b004h28t1tys1wyd1","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfbr009128t1thqb3moy"},{"post_id":"ck0mglf9b004h28t1tys1wyd1","tag_id":"ck0mglfab006u28t1sbxckjbf","_id":"ck0mglfbr009228t1a74jn6x3"},{"post_id":"ck0mglf9b004k28t1k3vmqvj1","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfbr009328t1pey19xws"},{"post_id":"ck0mglf9b004k28t1k3vmqvj1","tag_id":"ck0mglfab006v28t1jjjtws0m","_id":"ck0mglfbr009428t1x4jr74t2"},{"post_id":"ck0mglf9e004n28t16hqvn6j9","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfbr009528t1o5vx57g2"},{"post_id":"ck0mglf9e004n28t16hqvn6j9","tag_id":"ck0mglfab006w28t1lgi717ls","_id":"ck0mglfbr009628t1ffixhxgr"},{"post_id":"ck0mglf9f004q28t1cqyjhx1p","tag_id":"ck0mglfa9006o28t17920ho4k","_id":"ck0mglfbr009728t1yh7hecz1"},{"post_id":"ck0mglf9f004q28t1cqyjhx1p","tag_id":"ck0mglfa9006p28t126an4k87","_id":"ck0mglfbs009828t12jktw30m"},{"post_id":"ck0mglf9h004w28t1yf279ibv","tag_id":"ck0mglfa9006o28t17920ho4k","_id":"ck0mglfbs009928t178l2kun9"},{"post_id":"ck0mglf9h004w28t1yf279ibv","tag_id":"ck0mglfa9006p28t126an4k87","_id":"ck0mglfbs009a28t1ao4alv6s"},{"post_id":"ck0mglf9h004w28t1yf279ibv","tag_id":"ck0mglfad007128t1xjt6ka08","_id":"ck0mglfbs009b28t13zgdwma1"},{"post_id":"ck0mglf9t005428t1hsfdi6lp","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfbs009c28t1psenf3pv"},{"post_id":"ck0mglf9t005428t1hsfdi6lp","tag_id":"ck0mglf7x001628t1ac0r1o59","_id":"ck0mglfbs009d28t1wojsv94q"},{"post_id":"ck0mglfb5007h28t1vob23i7m","tag_id":"ck0mglfa0005j28t1abwsr0hl","_id":"ck0mglfc2009g28t1n8ck262h"},{"post_id":"ck0mglfb8007o28t1n0d9o405","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfc3009j28t1evj58aoa"},{"post_id":"ck0mglfbb007u28t1grreaue0","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfc4009m28t1cifmshmk"},{"post_id":"ck0mglfbb007u28t1grreaue0","tag_id":"ck0mglf9w005628t123817lks","_id":"ck0mglfc5009q28t11k0zvewd"},{"post_id":"ck0mglfbc007w28t11612o4pa","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfc6009t28t1s51gw2sl"},{"post_id":"ck0mglfbc007w28t11612o4pa","tag_id":"ck0mglf9w005628t123817lks","_id":"ck0mglfc7009w28t1ys5du8fa"},{"post_id":"ck0mglfbe008228t1eua8q76c","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfc7009y28t1ewjscwt8"},{"post_id":"ck0mglfbe008228t1eua8q76c","tag_id":"ck0mglf9w005628t123817lks","_id":"ck0mglfc800a128t101mzlcxv"},{"post_id":"ck0mglfbf008428t1odg1o964","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfc800a328t1i86ncrp8"},{"post_id":"ck0mglfbf008628t10hr9rsvm","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfc800a628t16x4fsc02"},{"post_id":"ck0mglfbf008628t10hr9rsvm","tag_id":"ck0mglfa7006j28t16cxpim05","_id":"ck0mglfc900a828t1qq1xox36"},{"post_id":"ck0mglfbl008i28t1ur5todb2","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfc900aa28t1skntz4rs"},{"post_id":"ck0mglfbo008q28t1s7r2j4ds","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfc900ad28t1pfttx4w9"},{"post_id":"ck0mglfbo008q28t1s7r2j4ds","tag_id":"ck0mglfab006w28t1lgi717ls","_id":"ck0mglfc900af28t10e6xt79w"},{"post_id":"ck0mglfbp008s28t1gvm2pvlx","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfca00ai28t195nqy28v"},{"post_id":"ck0mglfbp008s28t1gvm2pvlx","tag_id":"ck0mglf89002428t14nrsa574","_id":"ck0mglfca00ak28t17isiq9jo"},{"post_id":"ck0mglfbp008s28t1gvm2pvlx","tag_id":"ck0mglf8a002628t106g03ubh","_id":"ck0mglfcb00an28t13nbl8bth"},{"post_id":"ck0mglfaz007228t1b4wbl07x","tag_id":"ck0mglfc2009f28t1vb8vzex0","_id":"ck0mglfcm00bh28t1uel6lwe0"},{"post_id":"ck0mglfaz007228t1b4wbl07x","tag_id":"ck0mglfa1005q28t1nwqk8fsh","_id":"ck0mglfcn00bl28t1u99q3uhz"},{"post_id":"ck0mglfb1007528t1n5yt6oc5","tag_id":"ck0mglfc5009o28t1va2bxep9","_id":"ck0mglfco00bo28t1u803hp7x"},{"post_id":"ck0mglfb1007528t1n5yt6oc5","tag_id":"ck0mglfc7009v28t1ljkuuzp7","_id":"ck0mglfcp00bs28t1odc9j5rq"},{"post_id":"ck0mglfb1007528t1n5yt6oc5","tag_id":"ck0mglfc700a028t1crijp0nm","_id":"ck0mglfcq00bv28t1wyxsvhqv"},{"post_id":"ck0mglfb1007828t1o2v2ljtj","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfcq00by28t1tdv52t9c"},{"post_id":"ck0mglfb1007828t1o2v2ljtj","tag_id":"ck0mglf9w005628t123817lks","_id":"ck0mglfcq00bz28t1lbq4yv7s"},{"post_id":"ck0mglfb1007828t1o2v2ljtj","tag_id":"ck0mglfc800a528t1ux2glu4u","_id":"ck0mglfcq00c028t1ln46arw0"},{"post_id":"ck0mglfb2007b28t1zcfmuqux","tag_id":"ck0mglfc900ac28t11nnyjwxk","_id":"ck0mglfcr00c128t1sg6p9luz"},{"post_id":"ck0mglfb3007e28t1ca5sw8k2","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfcr00c228t1453lbbzc"},{"post_id":"ck0mglfb3007e28t1ca5sw8k2","tag_id":"ck0mglf9w005628t123817lks","_id":"ck0mglfcr00c328t18se32prl"},{"post_id":"ck0mglfb3007e28t1ca5sw8k2","tag_id":"ck0mglfc800a528t1ux2glu4u","_id":"ck0mglfcr00c428t1y5dyom3u"},{"post_id":"ck0mglfb6007k28t1ook1zquk","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfcr00c528t19ey7shyj"},{"post_id":"ck0mglfb6007k28t1ook1zquk","tag_id":"ck0mglfcb00am28t14k01uwx4","_id":"ck0mglfcs00c628t1oeo5txrt"},{"post_id":"ck0mglfb6007m28t1ww3t2kaw","tag_id":"ck0mglfcb00aq28t1lmtnlr95","_id":"ck0mglfcs00c728t1i49hyine"},{"post_id":"ck0mglfb6007m28t1ww3t2kaw","tag_id":"ck0mglfcc00at28t1tt07su1i","_id":"ck0mglfcs00c828t1hil1s05x"},{"post_id":"ck0mglfb9007q28t1u1lkk52g","tag_id":"ck0mglfcd00ax28t13k7hd8lr","_id":"ck0mglfcs00c928t1eqw07ga6"},{"post_id":"ck0mglfba007s28t1gwiv98iq","tag_id":"ck0mglfcd00b028t1mknneu9l","_id":"ck0mglfcs00ca28t14z6spqi8"},{"post_id":"ck0mglfbc007y28t1kc3bldp9","tag_id":"ck0mglfce00b328t10st2n9qc","_id":"ck0mglfcs00cb28t1k36bg8v5"},{"post_id":"ck0mglfbc007y28t1kc3bldp9","tag_id":"ck0mglfce00b628t11q7cpiiz","_id":"ck0mglfcs00cc28t14odd1iht"},{"post_id":"ck0mglfbd008028t16mw2w2om","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfcs00cd28t1i2qv8ajn"},{"post_id":"ck0mglfbd008028t16mw2w2om","tag_id":"ck0mglf9w005628t123817lks","_id":"ck0mglfct00ce28t1fbf9zrz7"},{"post_id":"ck0mglfbd008028t16mw2w2om","tag_id":"ck0mglfc800a528t1ux2glu4u","_id":"ck0mglfct00cf28t1apewe9dt"},{"post_id":"ck0mglfbg008828t17bi2508b","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfct00cg28t1cclmdvkx"},{"post_id":"ck0mglfbg008828t17bi2508b","tag_id":"ck0mglfcf00b828t1zgaziybm","_id":"ck0mglfct00ch28t1cm0mgbe8"},{"post_id":"ck0mglfbh008a28t1tmevvwkg","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfct00ci28t1xnvv7c31"},{"post_id":"ck0mglfbh008a28t1tmevvwkg","tag_id":"ck0mglfcf00b928t1kgbiam4t","_id":"ck0mglfct00cj28t1wn4x6ud5"},{"post_id":"ck0mglfbi008c28t11hjfnmn8","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfct00ck28t1s6x46aw4"},{"post_id":"ck0mglfbi008c28t11hjfnmn8","tag_id":"ck0mglfcf00ba28t1a18ls7aa","_id":"ck0mglfct00cl28t1wac61pse"},{"post_id":"ck0mglfbj008e28t1xc13wc2p","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfct00cm28t1j5xufmny"},{"post_id":"ck0mglfbj008e28t1xc13wc2p","tag_id":"ck0mglfcg00bb28t15sgqmqny","_id":"ck0mglfcu00cn28t1pz2noo4f"},{"post_id":"ck0mglfbk008g28t1ynu9400n","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfcu00co28t1xu9am5q8"},{"post_id":"ck0mglfbk008g28t1ynu9400n","tag_id":"ck0mglfcb00am28t14k01uwx4","_id":"ck0mglfcu00cp28t1xr8pi406"},{"post_id":"ck0mglfbm008k28t1a7kqiatq","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfcu00cq28t1ckb34nlm"},{"post_id":"ck0mglfbm008k28t1a7kqiatq","tag_id":"ck0mglf89002428t14nrsa574","_id":"ck0mglfcu00cr28t198885t51"},{"post_id":"ck0mglfbm008k28t1a7kqiatq","tag_id":"ck0mglfcg00bd28t1lbhbmnn7","_id":"ck0mglfcu00cs28t151t9abb1"},{"post_id":"ck0mglfbn008m28t1dzn3jqud","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfcu00ct28t1tyxypudr"},{"post_id":"ck0mglfbn008m28t1dzn3jqud","tag_id":"ck0mglfcb00am28t14k01uwx4","_id":"ck0mglfcu00cu28t1sbswq4dl"},{"post_id":"ck0mglfbo008o28t1ha3asg7c","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfcu00cv28t11enk78ih"},{"post_id":"ck0mglfbo008o28t1ha3asg7c","tag_id":"ck0mglf89002428t14nrsa574","_id":"ck0mglfcv00cw28t1q4w7t4g8"},{"post_id":"ck0mglfbo008o28t1ha3asg7c","tag_id":"ck0mglfch00bf28t1q6iuput9","_id":"ck0mglfcv00cx28t1aoergjk5"},{"post_id":"ck0mglfc3009i28t1ttvyfl5r","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfcv00cy28t1blmhviq9"},{"post_id":"ck0mglfc3009i28t1ttvyfl5r","tag_id":"ck0mglf89002428t14nrsa574","_id":"ck0mglfcv00cz28t1g7zw7rea"},{"post_id":"ck0mglfc3009i28t1ttvyfl5r","tag_id":"ck0mglfcg00bd28t1lbhbmnn7","_id":"ck0mglfcv00d028t1x0vzqkwi"},{"post_id":"ck0mglfc5009p28t1uhg014wr","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfcv00d128t1nuufxvfj"},{"post_id":"ck0mglfc5009p28t1uhg014wr","tag_id":"ck0mglfc800a528t1ux2glu4u","_id":"ck0mglfcv00d228t1uc4h7gzp"},{"post_id":"ck0mglfc5009p28t1uhg014wr","tag_id":"ck0mglf9w005628t123817lks","_id":"ck0mglfcv00d328t10jucc9br"},{"post_id":"ck0mglfc6009s28t19fmon5h0","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfcv00d428t1jhlifm2x"},{"post_id":"ck0mglfc6009s28t19fmon5h0","tag_id":"ck0mglf89002428t14nrsa574","_id":"ck0mglfcx00d528t1o4327fwz"},{"post_id":"ck0mglfc6009s28t19fmon5h0","tag_id":"ck0mglf8a002628t106g03ubh","_id":"ck0mglfcx00d628t1wf13ywjd"},{"post_id":"ck0mglfc1009e28t1nt14a58g","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfd100d828t1nx8u63ju"},{"post_id":"ck0mglfc1009e28t1nt14a58g","tag_id":"ck0mglf89002428t14nrsa574","_id":"ck0mglfd200db28t15o0kqz29"},{"post_id":"ck0mglfc1009e28t1nt14a58g","tag_id":"ck0mglfcm00bi28t1y7kvb05i","_id":"ck0mglfd200dd28t1zff7vooy"},{"post_id":"ck0mglfc1009e28t1nt14a58g","tag_id":"ck0mglfco00bq28t1lchb95h3","_id":"ck0mglfd200dg28t1sqx9s642"},{"post_id":"ck0mglfc4009l28t137ukrgfx","tag_id":"ck0mglf86001u28t1gi3tt38a","_id":"ck0mglfd300di28t1o7o8x12k"},{"post_id":"ck0mglfc4009l28t137ukrgfx","tag_id":"ck0mglf89002428t14nrsa574","_id":"ck0mglfd300dl28t1mzwk2iet"},{"post_id":"ck0mglfc4009l28t137ukrgfx","tag_id":"ck0mglfcq00bx28t126iwre7o","_id":"ck0mglfd400dm28t134r8q38j"},{"post_id":"ck0mglfcl00bg28t139slaej3","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfd400do28t1s4ix7ip8"},{"post_id":"ck0mglfcl00bg28t139slaej3","tag_id":"ck0mglfcf00ba28t1a18ls7aa","_id":"ck0mglfd400dp28t14t53fok0"},{"post_id":"ck0mglfcl00bg28t139slaej3","tag_id":"ck0mglfc800a528t1ux2glu4u","_id":"ck0mglfd400dq28t1yb7q26x1"},{"post_id":"ck0mglfcp00bu28t1v19pc49n","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfd400dr28t19a5z8ubc"},{"post_id":"ck0mglfcp00bu28t1v19pc49n","tag_id":"ck0mglfc800a528t1ux2glu4u","_id":"ck0mglfd400ds28t1e42ozi6t"},{"post_id":"ck0mglfcm00bk28t10u89vjpx","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfd600dt28t1u1dp6z3p"},{"post_id":"ck0mglfcm00bk28t10u89vjpx","tag_id":"ck0mglfd100d928t15j1skexl","_id":"ck0mglfd600dw28t1qecf8853"},{"post_id":"ck0mglfcn00bn28t1z937hco6","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfd600dx28t1qin4vjui"},{"post_id":"ck0mglfcn00bn28t1z937hco6","tag_id":"ck0mglfc800a528t1ux2glu4u","_id":"ck0mglfd700dz28t1hpguq6cc"},{"post_id":"ck0mglfcn00bn28t1z937hco6","tag_id":"ck0mglfd200df28t1lwv0b9mu","_id":"ck0mglfd700e028t1yb3dywq7"},{"post_id":"ck0mglfcn00bn28t1z937hco6","tag_id":"ck0mglfd100d928t15j1skexl","_id":"ck0mglfd700e228t13w2ko9xj"},{"post_id":"ck0mglfco00br28t1vemdzbxz","tag_id":"ck0mglf7x001428t1bvowjlad","_id":"ck0mglfd700e328t1i2xenfet"},{"post_id":"ck0mglfco00br28t1vemdzbxz","tag_id":"ck0mglfd400dn28t1mdfcneqi","_id":"ck0mglfd800e528t1rh82ynfi"},{"post_id":"ck0mglfd000d728t17ywowwwn","tag_id":"ck0mglfd600du28t1lihabhsh","_id":"ck0mglfd800e628t16cnf0itf"},{"post_id":"ck0mglfd000d728t17ywowwwn","tag_id":"ck0mglfc7009v28t1ljkuuzp7","_id":"ck0mglfd800e728t1t5hsrbhj"},{"post_id":"ck0mglfd000d728t17ywowwwn","tag_id":"ck0mglfd600dy28t1i4stltc2","_id":"ck0mglfd800e828t1egnz2ypj"},{"post_id":"ck0mglfd000d728t17ywowwwn","tag_id":"ck0mglfd700e128t1tww9709h","_id":"ck0mglfd900e928t10zihopy6"},{"post_id":"ck0mglfd000d728t17ywowwwn","tag_id":"ck0mglfd700e428t19fxp1kt3","_id":"ck0mglfd900ea28t1uouo9s8y"}],"Tag":[{"name":"backup","_id":"ck0mglf3z000128t1o4z97rvd"},{"name":"blog","_id":"ck0mglf41000228t17f3x47b9"},{"name":"linux","_id":"ck0mglf7t000x28t15v9gji4d"},{"name":"docker","_id":"ck0mglf7w001228t1thaifxsc"},{"name":"android","_id":"ck0mglf7x001428t1bvowjlad"},{"name":"project","_id":"ck0mglf7x001628t1ac0r1o59"},{"name":"database","_id":"ck0mglf7y001828t19m7a8kb6"},{"name":"设计模式","_id":"ck0mglf7y001a28t1ys3pswj9"},{"name":"Java","_id":"ck0mglf84001o28t1rk4ageif"},{"name":"callback","_id":"ck0mglf85001q28t1edifpdi5"},{"name":"python3","_id":"ck0mglf85001s28t1a4cuo4e9"},{"name":"python","_id":"ck0mglf86001u28t1gi3tt38a"},{"name":"math","_id":"ck0mglf86001w28t1cwtv7qqx"},{"name":"elipse","_id":"ck0mglf87001y28t1k78pz8os"},{"name":"faq","_id":"ck0mglf88002028t12iwtjgka"},{"name":"spider","_id":"ck0mglf89002428t14nrsa574"},{"name":"bs4","_id":"ck0mglf8a002628t106g03ubh"},{"name":"generators","_id":"ck0mglf8b002a28t1q7da8ui1"},{"name":"git","_id":"ck0mglf8c002d28t1la5v2p2y"},{"name":"vim","_id":"ck0mglf8d002h28t16babgpm3"},{"name":"kafka","_id":"ck0mglf8e002i28t11ap97gog"},{"name":"vs-code","_id":"ck0mglf8o002m28t1z7g8d6js"},{"name":"remote-ssh","_id":"ck0mglf8r002u28t1iycojeqy"},{"name":"maven","_id":"ck0mglf8t003128t1m8c52h22"},{"name":"android_UI","_id":"ck0mglf9w005628t123817lks"},{"name":"android_refresh","_id":"ck0mglf9z005d28t1jwdkojl8"},{"name":"algorithm","_id":"ck0mglfa0005j28t1abwsr0hl"},{"name":"dynamic_programming","_id":"ck0mglfa1005q28t1nwqk8fsh"},{"name":"android_lifecycle","_id":"ck0mglfa3005x28t1573qiyh9"},{"name":"android_RecyclerView","_id":"ck0mglfa5006628t1m65u3bll"},{"name":"android_adb","_id":"ck0mglfa5006928t12d7e9nw2"},{"name":"android_broadcast","_id":"ck0mglfa6006c28t1cds6b837"},{"name":"concurrency","_id":"ck0mglfa6006f28t15yclreig"},{"name":"android_service","_id":"ck0mglfa7006h28t10rt69jmz"},{"name":"android_lib","_id":"ck0mglfa7006i28t12mog2v84"},{"name":"android_data","_id":"ck0mglfa7006j28t16cxpim05"},{"name":"javaweb","_id":"ck0mglfa9006o28t17920ho4k"},{"name":"spring","_id":"ck0mglfa9006p28t126an4k87"},{"name":"matplotlib","_id":"ck0mglfab006u28t1sbxckjbf"},{"name":"numpy","_id":"ck0mglfab006v28t1jjjtws0m"},{"name":"regex","_id":"ck0mglfab006w28t1lgi717ls"},{"name":"oauth2","_id":"ck0mglfad007128t1xjt6ka08"},{"name":"Fibonacci","_id":"ck0mglfc2009f28t1vb8vzex0"},{"name":"todo","_id":"ck0mglfc5009o28t1va2bxep9"},{"name":"onlinejudge","_id":"ck0mglfc7009v28t1ljkuuzp7"},{"name":"binarysearch","_id":"ck0mglfc700a028t1crijp0nm"},{"name":"android_fragment","_id":"ck0mglfc800a528t1ux2glu4u"},{"name":"linkedlist","_id":"ck0mglfc900ac28t11nnyjwxk"},{"name":"android_control","_id":"ck0mglfcb00am28t14k01uwx4"},{"name":"algorithm-quicksort","_id":"ck0mglfcb00aq28t1lmtnlr95"},{"name":"algorithm-bit-manipulation","_id":"ck0mglfcc00at28t1tt07su1i"},{"name":"algorithm-recursion","_id":"ck0mglfcd00ax28t13k7hd8lr"},{"name":"algorithm-math","_id":"ck0mglfcd00b028t1mknneu9l"},{"name":"algorithm-array","_id":"ck0mglfce00b328t10st2n9qc"},{"name":"algorithm-two-pointer","_id":"ck0mglfce00b628t11q7cpiiz"},{"name":"android_test","_id":"ck0mglfcf00b828t1zgaziybm"},{"name":"java","_id":"ck0mglfcf00b928t1kgbiam4t"},{"name":"android_project","_id":"ck0mglfcf00ba28t1a18ls7aa"},{"name":"android_bar","_id":"ck0mglfcg00bb28t15sgqmqny"},{"name":"xml","_id":"ck0mglfcg00bd28t1lbhbmnn7"},{"name":"pythonspider","_id":"ck0mglfch00bf28t1q6iuput9"},{"name":"selenium","_id":"ck0mglfcm00bi28t1y7kvb05i"},{"name":"PhantomJS","_id":"ck0mglfco00bq28t1lchb95h3"},{"name":"socket","_id":"ck0mglfcq00bx28t126iwre7o"},{"name":"android_adapter","_id":"ck0mglfd100d928t15j1skexl"},{"name":"android_activity","_id":"ck0mglfd200df28t1lwv0b9mu"},{"name":"android_view_pager","_id":"ck0mglfd400dn28t1mdfcneqi"},{"name":"格式化输出","_id":"ck0mglfd600du28t1lihabhsh"},{"name":"io","_id":"ck0mglfd600dy28t1i4stltc2"},{"name":"线段树","_id":"ck0mglfd700e128t1tww9709h"},{"name":"区间查询","_id":"ck0mglfd700e428t19fxp1kt3"}]}}